
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e95c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800eb40  0800eb40  0000fb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f08c  0800f08c  00011410  2**0
                  CONTENTS
  4 .ARM          00000008  0800f08c  0800f08c  0001008c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f094  0800f094  00011410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f094  0800f094  00010094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f098  0800f098  00010098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  0800f09c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000410  0800f4ac  00011410  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000091c  0800f4ac  0001191c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011410  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0a0  00000000  00000000  00011440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332c  00000000  00000000  0002c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0002f810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115f  00000000  00000000  00030e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cda  00000000  00000000  00031fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4be  00000000  00000000  0005bca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114baa  00000000  00000000  00076167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018ad11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007600  00000000  00000000  0018ad54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00192354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000410 	.word	0x20000410
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eb24 	.word	0x0800eb24

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000414 	.word	0x20000414
 800021c:	0800eb24 	.word	0x0800eb24

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09e      	sub	sp, #120	@ 0x78
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	673b      	str	r3, [r7, #112]	@ 0x70
	char*		token;
	int 		newCmdReady = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001062:	f001 fbd0 	bl	8002806 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001066:	f000 f991 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106a:	f000 fc91 	bl	8001990 <MX_GPIO_Init>
  MX_DMA_Init();
 800106e:	f000 fc5d 	bl	800192c <MX_DMA_Init>
  MX_ADC2_Init();
 8001072:	f000 fa4d 	bl	8001510 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001076:	f000 f9d3 	bl	8001420 <MX_ADC1_Init>
  MX_TIM1_Init();
 800107a:	f000 faaf 	bl	80015dc <MX_TIM1_Init>
  MX_TIM3_Init();
 800107e:	f000 fb71 	bl	8001764 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001082:	f000 fbbb 	bl	80017fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001086:	f000 fc05 	bl	8001894 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//void Shell_Init(void){
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2224      	movs	r2, #36	@ 0x24
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f00a f990 	bl	800b3b6 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8001096:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109a:	2240      	movs	r2, #64	@ 0x40
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00a f989 	bl	800b3b6 <memset>
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 80010a4:	4ba1      	ldr	r3, [pc, #644]	@ (800132c <main+0x2d8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80010aa:	2240      	movs	r2, #64	@ 0x40
 80010ac:	2100      	movs	r1, #0
 80010ae:	48a0      	ldr	r0, [pc, #640]	@ (8001330 <main+0x2dc>)
 80010b0:	f00a f981 	bl	800b3b6 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80010b4:	2201      	movs	r2, #1
 80010b6:	499d      	ldr	r1, [pc, #628]	@ (800132c <main+0x2d8>)
 80010b8:	489e      	ldr	r0, [pc, #632]	@ (8001334 <main+0x2e0>)
 80010ba:	f007 f8c1 	bl	8008240 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 80010be:	200a      	movs	r0, #10
 80010c0:	f001 fbd8 	bl	8002874 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2266      	movs	r2, #102	@ 0x66
 80010ca:	499b      	ldr	r1, [pc, #620]	@ (8001338 <main+0x2e4>)
 80010cc:	4899      	ldr	r0, [pc, #612]	@ (8001334 <main+0x2e0>)
 80010ce:	f007 f829 	bl	8008124 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	2218      	movs	r2, #24
 80010d8:	4998      	ldr	r1, [pc, #608]	@ (800133c <main+0x2e8>)
 80010da:	4896      	ldr	r0, [pc, #600]	@ (8001334 <main+0x2e0>)
 80010dc:	f007 f822 	bl	8008124 <HAL_UART_Transmit>
  while (1)
  {
	  /**
	   * Vérifie que le caractère a été reçu : uartRxReceived mis à 1
	   */
	  	  if(uartRxReceived)
 80010e0:	4b97      	ldr	r3, [pc, #604]	@ (8001340 <main+0x2ec>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d056      	beq.n	8001196 <main+0x142>
	  	  {
	  		  /**
	  		   * Echo du caractère sur la console
	  		   */
	  		  switch(uartRxBuffer[0]){
 80010e8:	4b90      	ldr	r3, [pc, #576]	@ (800132c <main+0x2d8>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b0d      	cmp	r3, #13
 80010ee:	d002      	beq.n	80010f6 <main+0xa2>
 80010f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80010f2:	d02d      	beq.n	8001150 <main+0xfc>
 80010f4:	e03c      	b.n	8001170 <main+0x11c>
	  		  // Nouvelle ligne, instruction à traiter
	  		  case ASCII_CR:
	  			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	2203      	movs	r2, #3
 80010fc:	4991      	ldr	r1, [pc, #580]	@ (8001344 <main+0x2f0>)
 80010fe:	488d      	ldr	r0, [pc, #564]	@ (8001334 <main+0x2e0>)
 8001100:	f007 f810 	bl	8008124 <HAL_UART_Transmit>
	  			  cmdBuffer[idx_cmd] = '\0';
 8001104:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800110a:	4413      	add	r3, r2
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
	  			  argc = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	673b      	str	r3, [r7, #112]	@ 0x70
	  			  token = strtok(cmdBuffer, " ");
 8001114:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001118:	498b      	ldr	r1, [pc, #556]	@ (8001348 <main+0x2f4>)
 800111a:	4618      	mov	r0, r3
 800111c:	f00a f954 	bl	800b3c8 <strtok>
 8001120:	66f8      	str	r0, [r7, #108]	@ 0x6c
	  			  while(token!=NULL){
 8001122:	e00d      	b.n	8001140 <main+0xec>
	  				  argv[argc++] = token;
 8001124:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	673a      	str	r2, [r7, #112]	@ 0x70
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	3378      	adds	r3, #120	@ 0x78
 800112e:	443b      	add	r3, r7
 8001130:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001132:	f843 2c74 	str.w	r2, [r3, #-116]
	  				  token = strtok(NULL, " ");
 8001136:	4984      	ldr	r1, [pc, #528]	@ (8001348 <main+0x2f4>)
 8001138:	2000      	movs	r0, #0
 800113a:	f00a f945 	bl	800b3c8 <strtok>
 800113e:	66f8      	str	r0, [r7, #108]	@ 0x6c
	  			  while(token!=NULL){
 8001140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1ee      	bne.n	8001124 <main+0xd0>
	  			  }

	  			  idx_cmd = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	677b      	str	r3, [r7, #116]	@ 0x74
	  			  newCmdReady = 1;
 800114a:	2301      	movs	r3, #1
 800114c:	66bb      	str	r3, [r7, #104]	@ 0x68
	  			  break;
 800114e:	e01f      	b.n	8001190 <main+0x13c>
	  		  // Suppression du dernier caractère
	  		  case ASCII_DEL:
	  			  cmdBuffer[idx_cmd--] = '\0';
 8001150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	677a      	str	r2, [r7, #116]	@ 0x74
 8001156:	3378      	adds	r3, #120	@ 0x78
 8001158:	443b      	add	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	2201      	movs	r2, #1
 8001166:	4971      	ldr	r1, [pc, #452]	@ (800132c <main+0x2d8>)
 8001168:	4872      	ldr	r0, [pc, #456]	@ (8001334 <main+0x2e0>)
 800116a:	f006 ffdb 	bl	8008124 <HAL_UART_Transmit>
	  			  break;
 800116e:	e00f      	b.n	8001190 <main+0x13c>
	  	      // Nouveau caractère
	  		  default:
	  			  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	677a      	str	r2, [r7, #116]	@ 0x74
 8001176:	4a6d      	ldr	r2, [pc, #436]	@ (800132c <main+0x2d8>)
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	3378      	adds	r3, #120	@ 0x78
 800117c:	443b      	add	r3, r7
 800117e:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	2201      	movs	r2, #1
 8001188:	4968      	ldr	r1, [pc, #416]	@ (800132c <main+0x2d8>)
 800118a:	486a      	ldr	r0, [pc, #424]	@ (8001334 <main+0x2e0>)
 800118c:	f006 ffca 	bl	8008124 <HAL_UART_Transmit>
	  		  }
	  		  uartRxReceived = 0;
 8001190:	4b6b      	ldr	r3, [pc, #428]	@ (8001340 <main+0x2ec>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(newCmdReady){
 8001196:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0a1      	beq.n	80010e0 <main+0x8c>
	  		  if(strcmp(argv[0],"set")==0){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	496b      	ldr	r1, [pc, #428]	@ (800134c <main+0x2f8>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f83d 	bl	8000220 <strcmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d12d      	bne.n	8001208 <main+0x1b4>
	  			  if(strcmp(argv[1],"PA5")==0){
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4968      	ldr	r1, [pc, #416]	@ (8001350 <main+0x2fc>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f835 	bl	8000220 <strcmp>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d11d      	bne.n	80011f8 <main+0x1a4>
	  				  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4618      	mov	r0, r3
 80011c0:	f009 f8aa 	bl	800a318 <atoi>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	2120      	movs	r1, #32
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d0:	f003 ffae 	bl	8005130 <HAL_GPIO_WritePin>
	  				  sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f009 f89e 	bl	800a318 <atoi>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	495c      	ldr	r1, [pc, #368]	@ (8001354 <main+0x300>)
 80011e2:	4853      	ldr	r0, [pc, #332]	@ (8001330 <main+0x2dc>)
 80011e4:	f00a f884 	bl	800b2f0 <siprintf>
	  				  HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	2220      	movs	r2, #32
 80011ee:	4950      	ldr	r1, [pc, #320]	@ (8001330 <main+0x2dc>)
 80011f0:	4850      	ldr	r0, [pc, #320]	@ (8001334 <main+0x2e0>)
 80011f2:	f006 ff97 	bl	8008124 <HAL_UART_Transmit>
 80011f6:	e08f      	b.n	8001318 <main+0x2c4>
	  			  }
	  			  else{
	  				  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	2214      	movs	r2, #20
 80011fe:	4956      	ldr	r1, [pc, #344]	@ (8001358 <main+0x304>)
 8001200:	484c      	ldr	r0, [pc, #304]	@ (8001334 <main+0x2e0>)
 8001202:	f006 ff8f 	bl	8008124 <HAL_UART_Transmit>
 8001206:	e087      	b.n	8001318 <main+0x2c4>
	  			  }
	  		  }
	  		  else if(strcmp(argv[0],"pinout")==0)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4954      	ldr	r1, [pc, #336]	@ (800135c <main+0x308>)
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f807 	bl	8000220 <strcmp>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <main+0x1d4>
	  		  {
	  			  HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	22d9      	movs	r2, #217	@ 0xd9
 800121e:	4950      	ldr	r1, [pc, #320]	@ (8001360 <main+0x30c>)
 8001220:	4844      	ldr	r0, [pc, #272]	@ (8001334 <main+0x2e0>)
 8001222:	f006 ff7f 	bl	8008124 <HAL_UART_Transmit>
 8001226:	e077      	b.n	8001318 <main+0x2c4>
	  		  }
	  		  else if(strcmp(argv[0],"help")==0)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	494e      	ldr	r1, [pc, #312]	@ (8001364 <main+0x310>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7fe fff7 	bl	8000220 <strcmp>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d107      	bne.n	8001248 <main+0x1f4>
	  		  {
	  			  HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	22ae      	movs	r2, #174	@ 0xae
 800123e:	494a      	ldr	r1, [pc, #296]	@ (8001368 <main+0x314>)
 8001240:	483c      	ldr	r0, [pc, #240]	@ (8001334 <main+0x2e0>)
 8001242:	f006 ff6f 	bl	8008124 <HAL_UART_Transmit>
 8001246:	e067      	b.n	8001318 <main+0x2c4>
	  		  }
	  		  else if(strcmp(argv[0],"powerOn")==0)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4948      	ldr	r1, [pc, #288]	@ (800136c <main+0x318>)
 800124c:	4618      	mov	r0, r3
 800124e:	f7fe ffe7 	bl	8000220 <strcmp>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d109      	bne.n	800126c <main+0x218>
	  		  {
	  			  HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	220b      	movs	r2, #11
 800125e:	4944      	ldr	r1, [pc, #272]	@ (8001370 <main+0x31c>)
 8001260:	4834      	ldr	r0, [pc, #208]	@ (8001334 <main+0x2e0>)
 8001262:	f006 ff5f 	bl	8008124 <HAL_UART_Transmit>
	  			  motor_start();
 8001266:	f000 fcef 	bl	8001c48 <motor_start>
 800126a:	e055      	b.n	8001318 <main+0x2c4>
	  		  }
	  		  else if(strcmp(argv[0],"powerOff")==0)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4941      	ldr	r1, [pc, #260]	@ (8001374 <main+0x320>)
 8001270:	4618      	mov	r0, r3
 8001272:	f7fe ffd5 	bl	8000220 <strcmp>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d109      	bne.n	8001290 <main+0x23c>
	  		  {
	  			  HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	220c      	movs	r2, #12
 8001282:	493d      	ldr	r1, [pc, #244]	@ (8001378 <main+0x324>)
 8001284:	482b      	ldr	r0, [pc, #172]	@ (8001334 <main+0x2e0>)
 8001286:	f006 ff4d 	bl	8008124 <HAL_UART_Transmit>
	  			  motor_off();
 800128a:	f000 fcc7 	bl	8001c1c <motor_off>
 800128e:	e043      	b.n	8001318 <main+0x2c4>
	  		  }
	  		  else if(strcmp(argv[0],"get")==0)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	493a      	ldr	r1, [pc, #232]	@ (800137c <main+0x328>)
 8001294:	4618      	mov	r0, r3
 8001296:	f7fe ffc3 	bl	8000220 <strcmp>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d107      	bne.n	80012b0 <main+0x25c>
	  		  {
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	2214      	movs	r2, #20
 80012a6:	492c      	ldr	r1, [pc, #176]	@ (8001358 <main+0x304>)
 80012a8:	4822      	ldr	r0, [pc, #136]	@ (8001334 <main+0x2e0>)
 80012aa:	f006 ff3b 	bl	8008124 <HAL_UART_Transmit>
 80012ae:	e033      	b.n	8001318 <main+0x2c4>
	  		  /**
	  		   * Speed control
	  		   * Entrer speed XXXX dans le terminal (entre 0 et 8499)
	  		   * XXXX est converti en rapport cyclique
	  		   */
	  		  else if(strcmp(argv[0],"speed")==0){
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4933      	ldr	r1, [pc, #204]	@ (8001380 <main+0x32c>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7fe ffb3 	bl	8000220 <strcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d119      	bne.n	80012f4 <main+0x2a0>
	  			  motor_speed(atoi(argv[1]));
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f009 f828 	bl	800a318 <atoi>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fc2e 	bl	8001b2c <motor_speed>
	  			  sprintf(uartTxBuffer,"Speed : %d \r\n", atoi(argv[1]));
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f009 f820 	bl	800a318 <atoi>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4929      	ldr	r1, [pc, #164]	@ (8001384 <main+0x330>)
 80012de:	4814      	ldr	r0, [pc, #80]	@ (8001330 <main+0x2dc>)
 80012e0:	f00a f806 	bl	800b2f0 <siprintf>
	  			  HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	2240      	movs	r2, #64	@ 0x40
 80012ea:	4911      	ldr	r1, [pc, #68]	@ (8001330 <main+0x2dc>)
 80012ec:	4811      	ldr	r0, [pc, #68]	@ (8001334 <main+0x2e0>)
 80012ee:	f006 ff19 	bl	8008124 <HAL_UART_Transmit>
 80012f2:	e011      	b.n	8001318 <main+0x2c4>
	  		  }

	  		  else if(strcmp(argv[0],"current")==0){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4924      	ldr	r1, [pc, #144]	@ (8001388 <main+0x334>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe ff91 	bl	8000220 <strcmp>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <main+0x2b6>
	  			  measure_current();
 8001304:	f000 fcb8 	bl	8001c78 <measure_current>
 8001308:	e006      	b.n	8001318 <main+0x2c4>
	  		  }

	  		  else{
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	2214      	movs	r2, #20
 8001310:	4911      	ldr	r1, [pc, #68]	@ (8001358 <main+0x304>)
 8001312:	4808      	ldr	r0, [pc, #32]	@ (8001334 <main+0x2e0>)
 8001314:	f006 ff06 	bl	8008124 <HAL_UART_Transmit>
	  		  }
	  			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	2218      	movs	r2, #24
 800131e:	4907      	ldr	r1, [pc, #28]	@ (800133c <main+0x2e8>)
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <main+0x2e0>)
 8001322:	f006 feff 	bl	8008124 <HAL_UART_Transmit>
	  			  newCmdReady = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	66bb      	str	r3, [r7, #104]	@ 0x68
	  	  if(uartRxReceived)
 800132a:	e6d9      	b.n	80010e0 <main+0x8c>
 800132c:	20000728 	.word	0x20000728
 8001330:	2000072c 	.word	0x2000072c
 8001334:	200005fc 	.word	0x200005fc
 8001338:	20000018 	.word	0x20000018
 800133c:	20000000 	.word	0x20000000
 8001340:	20000724 	.word	0x20000724
 8001344:	20000080 	.word	0x20000080
 8001348:	0800eb40 	.word	0x0800eb40
 800134c:	0800eb44 	.word	0x0800eb44
 8001350:	0800eb48 	.word	0x0800eb48
 8001354:	0800eb4c 	.word	0x0800eb4c
 8001358:	20000084 	.word	0x20000084
 800135c:	0800eb68 	.word	0x0800eb68
 8001360:	20000148 	.word	0x20000148
 8001364:	0800eb70 	.word	0x0800eb70
 8001368:	20000098 	.word	0x20000098
 800136c:	0800eb78 	.word	0x0800eb78
 8001370:	20000224 	.word	0x20000224
 8001374:	0800eb80 	.word	0x0800eb80
 8001378:	20000230 	.word	0x20000230
 800137c:	0800eb8c 	.word	0x0800eb8c
 8001380:	0800eb90 	.word	0x0800eb90
 8001384:	0800eb98 	.word	0x0800eb98
 8001388:	0800eba8 	.word	0x0800eba8

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	@ 0x50
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	2238      	movs	r2, #56	@ 0x38
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f00a f80b 	bl	800b3b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f003 fefa 	bl	80051a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	2303      	movs	r3, #3
 80013c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80013c6:	2306      	movs	r3, #6
 80013c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013ca:	2355      	movs	r3, #85	@ 0x55
 80013cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 ff96 	bl	8005310 <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x62>
  {
    Error_Handler();
 80013ea:	f000 fb99 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2303      	movs	r3, #3
 80013f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2104      	movs	r1, #4
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fa94 	bl	8005934 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001412:	f000 fb85 	bl	8001b20 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3750      	adds	r7, #80	@ 0x50
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2220      	movs	r2, #32
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f009 ffbc 	bl	800b3b6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800143e:	4b32      	ldr	r3, [pc, #200]	@ (8001508 <MX_ADC1_Init+0xe8>)
 8001440:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001444:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001446:	4b30      	ldr	r3, [pc, #192]	@ (8001508 <MX_ADC1_Init+0xe8>)
 8001448:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800144c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800144e:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <MX_ADC1_Init+0xe8>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001454:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <MX_ADC1_Init+0xe8>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800145a:	4b2b      	ldr	r3, [pc, #172]	@ (8001508 <MX_ADC1_Init+0xe8>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <MX_ADC1_Init+0xe8>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001466:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <MX_ADC1_Init+0xe8>)
 8001468:	2204      	movs	r2, #4
 800146a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800146c:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <MX_ADC1_Init+0xe8>)
 800146e:	2200      	movs	r2, #0
 8001470:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001472:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <MX_ADC1_Init+0xe8>)
 8001474:	2201      	movs	r2, #1
 8001476:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001478:	4b23      	ldr	r3, [pc, #140]	@ (8001508 <MX_ADC1_Init+0xe8>)
 800147a:	2201      	movs	r2, #1
 800147c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800147e:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <MX_ADC1_Init+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <MX_ADC1_Init+0xe8>)
 8001488:	2200      	movs	r2, #0
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800148c:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <MX_ADC1_Init+0xe8>)
 800148e:	2200      	movs	r2, #0
 8001490:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001492:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <MX_ADC1_Init+0xe8>)
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <MX_ADC1_Init+0xe8>)
 800149c:	2200      	movs	r2, #0
 800149e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_ADC1_Init+0xe8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a8:	4817      	ldr	r0, [pc, #92]	@ (8001508 <MX_ADC1_Init+0xe8>)
 80014aa:	f001 fc45 	bl	8002d38 <HAL_ADC_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80014b4:	f000 fb34 	bl	8001b20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c0:	4619      	mov	r1, r3
 80014c2:	4811      	ldr	r0, [pc, #68]	@ (8001508 <MX_ADC1_Init+0xe8>)
 80014c4:	f002 ff08 	bl	80042d8 <HAL_ADCEx_MultiModeConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014ce:	f000 fb27 	bl	8001b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <MX_ADC1_Init+0xec>)
 80014d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d6:	2306      	movs	r3, #6
 80014d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014de:	237f      	movs	r3, #127	@ 0x7f
 80014e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014e2:	2304      	movs	r3, #4
 80014e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	@ (8001508 <MX_ADC1_Init+0xe8>)
 80014f0:	f002 f930 	bl	8003754 <HAL_ADC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014fa:	f000 fb11 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3730      	adds	r7, #48	@ 0x30
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000042c 	.word	0x2000042c
 800150c:	21800100 	.word	0x21800100

08001510 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2220      	movs	r2, #32
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f009 ff4a 	bl	800b3b6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001522:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 8001524:	4a2b      	ldr	r2, [pc, #172]	@ (80015d4 <MX_ADC2_Init+0xc4>)
 8001526:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001528:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 800152a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800152e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001530:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800153c:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001542:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001548:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 800154a:	2204      	movs	r2, #4
 800154c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800154e:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 8001550:	2200      	movs	r2, #0
 8001552:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001554:	4b1e      	ldr	r3, [pc, #120]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 8001556:	2200      	movs	r2, #0
 8001558:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800155a:	4b1d      	ldr	r3, [pc, #116]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 800155c:	2201      	movs	r2, #1
 800155e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 800156a:	2200      	movs	r2, #0
 800156c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 800157e:	2200      	movs	r2, #0
 8001580:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800158a:	4811      	ldr	r0, [pc, #68]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 800158c:	f001 fbd4 	bl	8002d38 <HAL_ADC_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001596:	f000 fac3 	bl	8001b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_ADC2_Init+0xc8>)
 800159c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800159e:	2306      	movs	r3, #6
 80015a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015a6:	237f      	movs	r3, #127	@ 0x7f
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015aa:	2304      	movs	r3, #4
 80015ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <MX_ADC2_Init+0xc0>)
 80015b8:	f002 f8cc 	bl	8003754 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80015c2:	f000 faad 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000498 	.word	0x20000498
 80015d4:	50000100 	.word	0x50000100
 80015d8:	19200040 	.word	0x19200040

080015dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b09c      	sub	sp, #112	@ 0x70
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	615a      	str	r2, [r3, #20]
 800160e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2234      	movs	r2, #52	@ 0x34
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f009 fecd 	bl	800b3b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800161c:	4b4f      	ldr	r3, [pc, #316]	@ (800175c <MX_TIM1_Init+0x180>)
 800161e:	4a50      	ldr	r2, [pc, #320]	@ (8001760 <MX_TIM1_Init+0x184>)
 8001620:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001622:	4b4e      	ldr	r3, [pc, #312]	@ (800175c <MX_TIM1_Init+0x180>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001628:	4b4c      	ldr	r3, [pc, #304]	@ (800175c <MX_TIM1_Init+0x180>)
 800162a:	2220      	movs	r2, #32
 800162c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 800162e:	4b4b      	ldr	r3, [pc, #300]	@ (800175c <MX_TIM1_Init+0x180>)
 8001630:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001634:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001636:	4b49      	ldr	r3, [pc, #292]	@ (800175c <MX_TIM1_Init+0x180>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800163c:	4b47      	ldr	r3, [pc, #284]	@ (800175c <MX_TIM1_Init+0x180>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b46      	ldr	r3, [pc, #280]	@ (800175c <MX_TIM1_Init+0x180>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001648:	4844      	ldr	r0, [pc, #272]	@ (800175c <MX_TIM1_Init+0x180>)
 800164a:	f004 fe0f 	bl	800626c <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001654:	f000 fa64 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800165e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001662:	4619      	mov	r1, r3
 8001664:	483d      	ldr	r0, [pc, #244]	@ (800175c <MX_TIM1_Init+0x180>)
 8001666:	f005 fb45 	bl	8006cf4 <HAL_TIM_ConfigClockSource>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001670:	f000 fa56 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001674:	4839      	ldr	r0, [pc, #228]	@ (800175c <MX_TIM1_Init+0x180>)
 8001676:	f004 fec9 	bl	800640c <HAL_TIM_PWM_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001680:	f000 fa4e 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001690:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001694:	4619      	mov	r1, r3
 8001696:	4831      	ldr	r0, [pc, #196]	@ (800175c <MX_TIM1_Init+0x180>)
 8001698:	f006 fb4c 	bl	8007d34 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80016a2:	f000 fa3d 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	@ 0x60
 80016a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4250;
 80016aa:	f241 039a 	movw	r3, #4250	@ 0x109a
 80016ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b0:	2300      	movs	r3, #0
 80016b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b4:	2300      	movs	r3, #0
 80016b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016c8:	2200      	movs	r2, #0
 80016ca:	4619      	mov	r1, r3
 80016cc:	4823      	ldr	r0, [pc, #140]	@ (800175c <MX_TIM1_Init+0x180>)
 80016ce:	f005 f9fd 	bl	8006acc <HAL_TIM_PWM_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80016d8:	f000 fa22 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.Pulse = 4249;
 80016dc:	f241 0399 	movw	r3, #4249	@ 0x1099
 80016e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016e6:	2204      	movs	r2, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	481c      	ldr	r0, [pc, #112]	@ (800175c <MX_TIM1_Init+0x180>)
 80016ec:	f005 f9ee 	bl	8006acc <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80016f6:	f000 fa13 	bl	8001b20 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80016fa:	4818      	ldr	r0, [pc, #96]	@ (800175c <MX_TIM1_Init+0x180>)
 80016fc:	f006 fc44 	bl	8007f88 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 160;
 800170c:	23a0      	movs	r3, #160	@ 0xa0
 800170e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001714:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001718:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4807      	ldr	r0, [pc, #28]	@ (800175c <MX_TIM1_Init+0x180>)
 800173e:	f006 fb8f 	bl	8007e60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001748:	f000 f9ea 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <MX_TIM1_Init+0x180>)
 800174e:	f000 fd4f 	bl	80021f0 <HAL_TIM_MspPostInit>

}
 8001752:	bf00      	nop
 8001754:	3770      	adds	r7, #112	@ 0x70
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000564 	.word	0x20000564
 8001760:	40012c00 	.word	0x40012c00

08001764 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <MX_TIM3_Init+0x90>)
 8001784:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <MX_TIM3_Init+0x94>)
 8001786:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <MX_TIM3_Init+0x90>)
 800178a:	2200      	movs	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <MX_TIM3_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001794:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <MX_TIM3_Init+0x90>)
 8001796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800179a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179c:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <MX_TIM3_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <MX_TIM3_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <MX_TIM3_Init+0x90>)
 80017c0:	f006 f8e9 	bl	8007996 <HAL_TIMEx_HallSensor_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80017ca:	f000 f9a9 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80017ce:	2350      	movs	r3, #80	@ 0x50
 80017d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	@ (80017f4 <MX_TIM3_Init+0x90>)
 80017dc:	f006 faaa 	bl	8007d34 <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80017e6:	f000 f99b 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200005b0 	.word	0x200005b0
 80017f8:	40000400 	.word	0x40000400

080017fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001800:	4b22      	ldr	r3, [pc, #136]	@ (800188c <MX_USART2_UART_Init+0x90>)
 8001802:	4a23      	ldr	r2, [pc, #140]	@ (8001890 <MX_USART2_UART_Init+0x94>)
 8001804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <MX_USART2_UART_Init+0x90>)
 8001808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800180c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <MX_USART2_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <MX_USART2_UART_Init+0x90>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800181a:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <MX_USART2_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <MX_USART2_UART_Init+0x90>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <MX_USART2_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b17      	ldr	r3, [pc, #92]	@ (800188c <MX_USART2_UART_Init+0x90>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001832:	4b16      	ldr	r3, [pc, #88]	@ (800188c <MX_USART2_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <MX_USART2_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183e:	4b13      	ldr	r3, [pc, #76]	@ (800188c <MX_USART2_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001844:	4811      	ldr	r0, [pc, #68]	@ (800188c <MX_USART2_UART_Init+0x90>)
 8001846:	f006 fc1d 	bl	8008084 <HAL_UART_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001850:	f000 f966 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001854:	2100      	movs	r1, #0
 8001856:	480d      	ldr	r0, [pc, #52]	@ (800188c <MX_USART2_UART_Init+0x90>)
 8001858:	f008 fc93 	bl	800a182 <HAL_UARTEx_SetTxFifoThreshold>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001862:	f000 f95d 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001866:	2100      	movs	r1, #0
 8001868:	4808      	ldr	r0, [pc, #32]	@ (800188c <MX_USART2_UART_Init+0x90>)
 800186a:	f008 fcc8 	bl	800a1fe <HAL_UARTEx_SetRxFifoThreshold>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001874:	f000 f954 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <MX_USART2_UART_Init+0x90>)
 800187a:	f008 fc49 	bl	800a110 <HAL_UARTEx_DisableFifoMode>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001884:	f000 f94c 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200005fc 	.word	0x200005fc
 8001890:	40004400 	.word	0x40004400

08001894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 800189a:	4a23      	ldr	r2, [pc, #140]	@ (8001928 <MX_USART3_UART_Init+0x94>)
 800189c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ca:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d6:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018dc:	4811      	ldr	r0, [pc, #68]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018de:	f006 fbd1 	bl	8008084 <HAL_UART_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018e8:	f000 f91a 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ec:	2100      	movs	r1, #0
 80018ee:	480d      	ldr	r0, [pc, #52]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 80018f0:	f008 fc47 	bl	800a182 <HAL_UARTEx_SetTxFifoThreshold>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018fa:	f000 f911 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018fe:	2100      	movs	r1, #0
 8001900:	4808      	ldr	r0, [pc, #32]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 8001902:	f008 fc7c 	bl	800a1fe <HAL_UARTEx_SetRxFifoThreshold>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800190c:	f000 f908 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	@ (8001924 <MX_USART3_UART_Init+0x90>)
 8001912:	f008 fbfd 	bl	800a110 <HAL_UARTEx_DisableFifoMode>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800191c:	f000 f900 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000690 	.word	0x20000690
 8001928:	40004800 	.word	0x40004800

0800192c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001932:	4b16      	ldr	r3, [pc, #88]	@ (800198c <MX_DMA_Init+0x60>)
 8001934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001936:	4a15      	ldr	r2, [pc, #84]	@ (800198c <MX_DMA_Init+0x60>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6493      	str	r3, [r2, #72]	@ 0x48
 800193e:	4b13      	ldr	r3, [pc, #76]	@ (800198c <MX_DMA_Init+0x60>)
 8001940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <MX_DMA_Init+0x60>)
 800194c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800194e:	4a0f      	ldr	r2, [pc, #60]	@ (800198c <MX_DMA_Init+0x60>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6493      	str	r3, [r2, #72]	@ 0x48
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <MX_DMA_Init+0x60>)
 8001958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	200b      	movs	r0, #11
 8001968:	f002 fe76 	bl	8004658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800196c:	200b      	movs	r0, #11
 800196e:	f002 fe8d 	bl	800468c <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	205e      	movs	r0, #94	@ 0x5e
 8001978:	f002 fe6e 	bl	8004658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 800197c:	205e      	movs	r0, #94	@ 0x5e
 800197e:	f002 fe85 	bl	800468c <HAL_NVIC_EnableIRQ>

}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000

08001990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	4a3e      	ldr	r2, [pc, #248]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b2:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019be:	4b39      	ldr	r3, [pc, #228]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	4a38      	ldr	r2, [pc, #224]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ca:	4b36      	ldr	r3, [pc, #216]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b33      	ldr	r3, [pc, #204]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019da:	4a32      	ldr	r2, [pc, #200]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e2:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fa:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a06:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0a:	4a26      	ldr	r2, [pc, #152]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <MX_GPIO_Init+0x114>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2120      	movs	r1, #32
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a26:	f003 fb83 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	481e      	ldr	r0, [pc, #120]	@ (8001aa8 <MX_GPIO_Init+0x118>)
 8001a30:	f003 fb7e 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4818      	ldr	r0, [pc, #96]	@ (8001aac <MX_GPIO_Init+0x11c>)
 8001a4c:	f003 f9ee 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001a50:	2320      	movs	r3, #32
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a6a:	f003 f9df 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4808      	ldr	r0, [pc, #32]	@ (8001aa8 <MX_GPIO_Init+0x118>)
 8001a86:	f003 f9d1 	bl	8004e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2028      	movs	r0, #40	@ 0x28
 8001a90:	f002 fde2 	bl	8004658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a94:	2028      	movs	r0, #40	@ 0x28
 8001a96:	f002 fdf9 	bl	800468c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	@ 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	48000c00 	.word	0x48000c00
 8001aac:	48000800 	.word	0x48000800

08001ab0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_UART_RxCpltCallback+0x20>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4904      	ldr	r1, [pc, #16]	@ (8001ad4 <HAL_UART_RxCpltCallback+0x24>)
 8001ac2:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <HAL_UART_RxCpltCallback+0x28>)
 8001ac4:	f006 fbbc 	bl	8008240 <HAL_UART_Receive_IT>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000724 	.word	0x20000724
 8001ad4:	20000728 	.word	0x20000728
 8001ad8:	200005fc 	.word	0x200005fc

08001adc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	adc_flag=1;
 8001ae4:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	2000076c 	.word	0x2000076c

08001afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b0e:	f000 fe93 	bl	8002838 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40001000 	.word	0x40001000

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <Error_Handler+0x8>

08001b2c <motor_speed>:
 * @param speed : entier compris entre 0 et 8499
 * @retval None
 */

void motor_speed(int speed)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	if (speed > 8499)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	dd02      	ble.n	8001b44 <motor_speed+0x18>
	{
		speed = 8499;
 8001b3e:	f242 1333 	movw	r3, #8499	@ 0x2133
 8001b42:	607b      	str	r3, [r7, #4]
	}
	if (speed < 0)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	da01      	bge.n	8001b4e <motor_speed+0x22>
	{
		speed = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
	}

	motor.speed = speed;
 8001b4e:	4a26      	ldr	r2, [pc, #152]	@ (8001be8 <motor_speed+0xbc>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6013      	str	r3, [r2, #0]

	if(motor.last_speed < motor.speed)
 8001b54:	4b24      	ldr	r3, [pc, #144]	@ (8001be8 <motor_speed+0xbc>)
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <motor_speed+0xbc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	da1a      	bge.n	8001b96 <motor_speed+0x6a>
	{
		for(int i=motor.last_speed; i<=motor.speed; i++)
 8001b60:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <motor_speed+0xbc>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e010      	b.n	8001b8a <motor_speed+0x5e>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8001b68:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <motor_speed+0xc0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 8499-i);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001b76:	3333      	adds	r3, #51	@ 0x33
 8001b78:	4a1c      	ldr	r2, [pc, #112]	@ (8001bec <motor_speed+0xc0>)
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_Delay(2);
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f000 fe78 	bl	8002874 <HAL_Delay>
		for(int i=motor.last_speed; i<=motor.speed; i++)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <motor_speed+0xbc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dde9      	ble.n	8001b68 <motor_speed+0x3c>
 8001b94:	e01f      	b.n	8001bd6 <motor_speed+0xaa>
		}
	}
	else if(motor.last_speed > motor.speed)
 8001b96:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <motor_speed+0xbc>)
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <motor_speed+0xbc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dd19      	ble.n	8001bd6 <motor_speed+0xaa>
	{
		for(int i=motor.last_speed; i>=motor.speed; i--)
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <motor_speed+0xbc>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	e010      	b.n	8001bcc <motor_speed+0xa0>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <motor_speed+0xc0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 8499-i);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001bb8:	3333      	adds	r3, #51	@ 0x33
 8001bba:	4a0c      	ldr	r2, [pc, #48]	@ (8001bec <motor_speed+0xc0>)
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_Delay(2);
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f000 fe57 	bl	8002874 <HAL_Delay>
		for(int i=motor.last_speed; i>=motor.speed; i--)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <motor_speed+0xbc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	dae9      	bge.n	8001baa <motor_speed+0x7e>
		}
	}

	motor.last_speed = motor.speed;
 8001bd6:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <motor_speed+0xbc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a03      	ldr	r2, [pc, #12]	@ (8001be8 <motor_speed+0xbc>)
 8001bdc:	6053      	str	r3, [r2, #4]

}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000770 	.word	0x20000770
 8001bec:	20000564 	.word	0x20000564

08001bf0 <motor_on>:
 * @fn motor_on
 * @brief Start PWM
 */

void motor_on()
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4808      	ldr	r0, [pc, #32]	@ (8001c18 <motor_on+0x28>)
 8001bf8:	f004 fc6a 	bl	80064d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	4806      	ldr	r0, [pc, #24]	@ (8001c18 <motor_on+0x28>)
 8001c00:	f004 fc66 	bl	80064d0 <HAL_TIM_PWM_Start>

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001c04:	2100      	movs	r1, #0
 8001c06:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <motor_on+0x28>)
 8001c08:	f005 ff74 	bl	8007af4 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <motor_on+0x28>)
 8001c10:	f005 ff70 	bl	8007af4 <HAL_TIMEx_PWMN_Start>
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000564 	.word	0x20000564

08001c1c <motor_off>:
 * @fn motor_off
 * @brief Stop PWM
 */

void motor_off()
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001c20:	2100      	movs	r1, #0
 8001c22:	4808      	ldr	r0, [pc, #32]	@ (8001c44 <motor_off+0x28>)
 8001c24:	f004 fd66 	bl	80066f4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001c28:	2104      	movs	r1, #4
 8001c2a:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <motor_off+0x28>)
 8001c2c:	f004 fd62 	bl	80066f4 <HAL_TIM_PWM_Stop>

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001c30:	2100      	movs	r1, #0
 8001c32:	4804      	ldr	r0, [pc, #16]	@ (8001c44 <motor_off+0x28>)
 8001c34:	f006 f820 	bl	8007c78 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <motor_off+0x28>)
 8001c3c:	f006 f81c 	bl	8007c78 <HAL_TIMEx_PWMN_Stop>
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000564 	.word	0x20000564

08001c48 <motor_start>:
 * @fn motor_start
 * @brief Règle le rapport cyclique à 50%
 */

void motor_start()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	motor_on();
 8001c4c:	f7ff ffd0 	bl	8001bf0 <motor_on>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 4250);
 8001c50:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <motor_start+0x28>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f241 029a 	movw	r2, #4250	@ 0x109a
 8001c58:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 4250);
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <motor_start+0x28>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f241 029a 	movw	r2, #4250	@ 0x109a
 8001c62:	635a      	str	r2, [r3, #52]	@ 0x34
	motor.last_speed = 4250;
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <motor_start+0x2c>)
 8001c66:	f241 029a 	movw	r2, #4250	@ 0x109a
 8001c6a:	605a      	str	r2, [r3, #4]
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000564 	.word	0x20000564
 8001c74:	20000770 	.word	0x20000770

08001c78 <measure_current>:
 * @fn measure_current
 * @brief Mesure le courant du moteur. Version avec DMA (à débugger) et sans DMA (en commentaire)
 */

void measure_current()
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b09c      	sub	sp, #112	@ 0x70
 8001c7c:	af02      	add	r7, sp, #8
	/** Récupère la valeur du courant sur l'adc 1 **/
	float adc_dma_measure;
	char dma_buff[100];
	HAL_ADC_Start_DMA(&hadc1, &adc_dma_measure, 1);
 8001c7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c82:	2201      	movs	r2, #1
 8001c84:	4619      	mov	r1, r3
 8001c86:	4832      	ldr	r0, [pc, #200]	@ (8001d50 <measure_current+0xd8>)
 8001c88:	f001 fa12 	bl	80030b0 <HAL_ADC_Start_DMA>
	if(adc_flag==1)
 8001c8c:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <measure_current+0xdc>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d14d      	bne.n	8001d30 <measure_current+0xb8>
	{
		adc_dma_measure = (adc_dma_measure*3.3)/4096;
 8001c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc8e 	bl	80005b8 <__aeabi_f2d>
 8001c9c:	a326      	add	r3, pc, #152	@ (adr r3, 8001d38 <measure_current+0xc0>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	f7fe fce1 	bl	8000668 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <measure_current+0xe0>)
 8001cb4:	f7fe fe02 	bl	80008bc <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe ffca 	bl	8000c58 <__aeabi_d2f>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	667b      	str	r3, [r7, #100]	@ 0x64
		adc_dma_measure = (adc_dma_measure-1.65)/0.05;
 8001cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc74 	bl	80005b8 <__aeabi_f2d>
 8001cd0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001d40 <measure_current+0xc8>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f7fe fb0f 	bl	80002f8 <__aeabi_dsub>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	a319      	add	r3, pc, #100	@ (adr r3, 8001d48 <measure_current+0xd0>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fde8 	bl	80008bc <__aeabi_ddiv>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe ffb0 	bl	8000c58 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	667b      	str	r3, [r7, #100]	@ 0x64
		snprintf(dma_buff, 100, "I measured : %f A\r\n", adc_dma_measure);
 8001cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc5a 	bl	80005b8 <__aeabi_f2d>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4638      	mov	r0, r7
 8001d0a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d0e:	4a13      	ldr	r2, [pc, #76]	@ (8001d5c <measure_current+0xe4>)
 8001d10:	2164      	movs	r1, #100	@ 0x64
 8001d12:	f009 fab9 	bl	800b288 <sniprintf>
		HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1a:	2240      	movs	r2, #64	@ 0x40
 8001d1c:	4910      	ldr	r1, [pc, #64]	@ (8001d60 <measure_current+0xe8>)
 8001d1e:	4811      	ldr	r0, [pc, #68]	@ (8001d64 <measure_current+0xec>)
 8001d20:	f006 fa00 	bl	8008124 <HAL_UART_Transmit>
		adc_flag=0;
 8001d24:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <measure_current+0xdc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8001d2a:	2064      	movs	r0, #100	@ 0x64
 8001d2c:	f000 fda2 	bl	8002874 <HAL_Delay>
	current = (current-1.65)/0.05;

	sprintf(uartTxBuffer, "Current : %f A\r\n", current);
	HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);*/

}
 8001d30:	bf00      	nop
 8001d32:	3768      	adds	r7, #104	@ 0x68
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	66666666 	.word	0x66666666
 8001d3c:	400a6666 	.word	0x400a6666
 8001d40:	66666666 	.word	0x66666666
 8001d44:	3ffa6666 	.word	0x3ffa6666
 8001d48:	9999999a 	.word	0x9999999a
 8001d4c:	3fa99999 	.word	0x3fa99999
 8001d50:	2000042c 	.word	0x2000042c
 8001d54:	2000076c 	.word	0x2000076c
 8001d58:	40b00000 	.word	0x40b00000
 8001d5c:	0800ebb0 	.word	0x0800ebb0
 8001d60:	2000072c 	.word	0x2000072c
 8001d64:	200005fc 	.word	0x200005fc

08001d68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <HAL_MspInit+0x44>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d72:	4a0e      	ldr	r2, [pc, #56]	@ (8001dac <HAL_MspInit+0x44>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <HAL_MspInit+0x44>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <HAL_MspInit+0x44>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <HAL_MspInit+0x44>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_MspInit+0x44>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d9e:	f003 faa7 	bl	80052f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000

08001db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0a8      	sub	sp, #160	@ 0xa0
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dcc:	2254      	movs	r2, #84	@ 0x54
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f009 faf0 	bl	800b3b6 <memset>
  if(hadc->Instance==ADC1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dde:	f040 80c5 	bne.w	8001f6c <HAL_ADC_MspInit+0x1bc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001de8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 ffec 	bl	8005dd0 <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001dfe:	f7ff fe8f 	bl	8001b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e02:	4b91      	ldr	r3, [pc, #580]	@ (8002048 <HAL_ADC_MspInit+0x298>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	4a8f      	ldr	r2, [pc, #572]	@ (8002048 <HAL_ADC_MspInit+0x298>)
 8001e0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002048 <HAL_ADC_MspInit+0x298>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10b      	bne.n	8001e2c <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e14:	4b8d      	ldr	r3, [pc, #564]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e18:	4a8c      	ldr	r2, [pc, #560]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e20:	4b8a      	ldr	r3, [pc, #552]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2c:	4b87      	ldr	r3, [pc, #540]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e30:	4a86      	ldr	r2, [pc, #536]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e38:	4b84      	ldr	r3, [pc, #528]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	623b      	str	r3, [r7, #32]
 8001e42:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b81      	ldr	r3, [pc, #516]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e48:	4a80      	ldr	r2, [pc, #512]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e50:	4b7e      	ldr	r3, [pc, #504]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	4b7b      	ldr	r3, [pc, #492]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e60:	4a7a      	ldr	r2, [pc, #488]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e68:	4b78      	ldr	r3, [pc, #480]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001e74:	2304      	movs	r3, #4
 8001e76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4870      	ldr	r0, [pc, #448]	@ (8002050 <HAL_ADC_MspInit+0x2a0>)
 8001e8e:	f002 ffcd 	bl	8004e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001e92:	2302      	movs	r3, #2
 8001e94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eae:	f002 ffbd 	bl	8004e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4862      	ldr	r0, [pc, #392]	@ (8002054 <HAL_ADC_MspInit+0x2a4>)
 8001ecc:	f002 ffae 	bl	8004e2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ed0:	4b61      	ldr	r3, [pc, #388]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001ed2:	4a62      	ldr	r2, [pc, #392]	@ (800205c <HAL_ADC_MspInit+0x2ac>)
 8001ed4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ed6:	4b60      	ldr	r3, [pc, #384]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001ed8:	2205      	movs	r2, #5
 8001eda:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001edc:	4b5e      	ldr	r3, [pc, #376]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ee8:	4b5b      	ldr	r3, [pc, #364]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001eea:	2280      	movs	r2, #128	@ 0x80
 8001eec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eee:	4b5a      	ldr	r3, [pc, #360]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001ef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ef6:	4b58      	ldr	r3, [pc, #352]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001efc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001efe:	4b56      	ldr	r3, [pc, #344]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001f00:	2220      	movs	r2, #32
 8001f02:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f04:	4b54      	ldr	r3, [pc, #336]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f0a:	4853      	ldr	r0, [pc, #332]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001f0c:	f002 fbcc 	bl	80046a8 <HAL_DMA_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_ADC_MspInit+0x16a>
    {
      Error_Handler();
 8001f16:	f7ff fe03 	bl	8001b20 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8001f1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    pSyncConfig.SyncEnable = DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
    pSyncConfig.EventEnable = ENABLE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
    pSyncConfig.RequestNumber = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8001f38:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4846      	ldr	r0, [pc, #280]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001f40:	f002 fee4 	bl	8004d0c <HAL_DMAEx_ConfigMuxSync>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8001f4a:	f7ff fde9 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a41      	ldr	r2, [pc, #260]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001f52:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f54:	4a40      	ldr	r2, [pc, #256]	@ (8002058 <HAL_ADC_MspInit+0x2a8>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2012      	movs	r0, #18
 8001f60:	f002 fb7a 	bl	8004658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f64:	2012      	movs	r0, #18
 8001f66:	f002 fb91 	bl	800468c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f6a:	e068      	b.n	800203e <HAL_ADC_MspInit+0x28e>
  else if(hadc->Instance==ADC2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3b      	ldr	r2, [pc, #236]	@ (8002060 <HAL_ADC_MspInit+0x2b0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d163      	bne.n	800203e <HAL_ADC_MspInit+0x28e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f7c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 ff22 	bl	8005dd0 <HAL_RCCEx_PeriphCLKConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 8001f92:	f7ff fdc5 	bl	8001b20 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f96:	4b2c      	ldr	r3, [pc, #176]	@ (8002048 <HAL_ADC_MspInit+0x298>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002048 <HAL_ADC_MspInit+0x298>)
 8001f9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fa0:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <HAL_ADC_MspInit+0x298>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_ADC_MspInit+0x210>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fa8:	4b28      	ldr	r3, [pc, #160]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fac:	4a27      	ldr	r2, [pc, #156]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001fae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb4:	4b25      	ldr	r3, [pc, #148]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc0:	4b22      	ldr	r3, [pc, #136]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc4:	4a21      	ldr	r2, [pc, #132]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_ADC_MspInit+0x29c>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8001ff0:	230b      	movs	r3, #11
 8001ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002002:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002006:	4619      	mov	r1, r3
 8002008:	4811      	ldr	r0, [pc, #68]	@ (8002050 <HAL_ADC_MspInit+0x2a0>)
 800200a:	f002 ff0f 	bl	8004e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800200e:	2301      	movs	r3, #1
 8002010:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002014:	2303      	movs	r3, #3
 8002016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8002020:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002024:	4619      	mov	r1, r3
 8002026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800202a:	f002 feff 	bl	8004e2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2012      	movs	r0, #18
 8002034:	f002 fb10 	bl	8004658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002038:	2012      	movs	r0, #18
 800203a:	f002 fb27 	bl	800468c <HAL_NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	37a0      	adds	r7, #160	@ 0xa0
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000778 	.word	0x20000778
 800204c:	40021000 	.word	0x40021000
 8002050:	48000800 	.word	0x48000800
 8002054:	48000400 	.word	0x48000400
 8002058:	20000504 	.word	0x20000504
 800205c:	40020008 	.word	0x40020008
 8002060:	50000100 	.word	0x50000100

08002064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	@ 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a28      	ldr	r2, [pc, #160]	@ (8002124 <HAL_TIM_Base_MspInit+0xc0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d149      	bne.n	800211a <HAL_TIM_Base_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002086:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <HAL_TIM_Base_MspInit+0xc4>)
 8002088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208a:	4a27      	ldr	r2, [pc, #156]	@ (8002128 <HAL_TIM_Base_MspInit+0xc4>)
 800208c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002090:	6613      	str	r3, [r2, #96]	@ 0x60
 8002092:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <HAL_TIM_Base_MspInit+0xc4>)
 8002094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <HAL_TIM_Base_MspInit+0xc4>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a2:	4a21      	ldr	r2, [pc, #132]	@ (8002128 <HAL_TIM_Base_MspInit+0xc4>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <HAL_TIM_Base_MspInit+0xc4>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 80020b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020c8:	2306      	movs	r3, #6
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d6:	f002 fea9 	bl	8004e2c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2018      	movs	r0, #24
 80020e0:	f002 faba 	bl	8004658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80020e4:	2018      	movs	r0, #24
 80020e6:	f002 fad1 	bl	800468c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2019      	movs	r0, #25
 80020f0:	f002 fab2 	bl	8004658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80020f4:	2019      	movs	r0, #25
 80020f6:	f002 fac9 	bl	800468c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	201a      	movs	r0, #26
 8002100:	f002 faaa 	bl	8004658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002104:	201a      	movs	r0, #26
 8002106:	f002 fac1 	bl	800468c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	201b      	movs	r0, #27
 8002110:	f002 faa2 	bl	8004658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002114:	201b      	movs	r0, #27
 8002116:	f002 fab9 	bl	800468c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800211a:	bf00      	nop
 800211c:	3728      	adds	r7, #40	@ 0x28
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	@ 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a26      	ldr	r2, [pc, #152]	@ (80021e4 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d145      	bne.n	80021da <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800214e:	4b26      	ldr	r3, [pc, #152]	@ (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	6593      	str	r3, [r2, #88]	@ 0x58
 800215a:	4b23      	ldr	r3, [pc, #140]	@ (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	4a1f      	ldr	r2, [pc, #124]	@ (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002172:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	4a19      	ldr	r2, [pc, #100]	@ (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800218a:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002196:	2350      	movs	r3, #80	@ 0x50
 8002198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021a6:	2302      	movs	r3, #2
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b4:	f002 fe3a 	bl	8004e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ca:	2302      	movs	r3, #2
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	@ (80021ec <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80021d6:	f002 fe29 	bl	8004e2c <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80021da:	bf00      	nop
 80021dc:	3728      	adds	r7, #40	@ 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40021000 	.word	0x40021000
 80021ec:	48000800 	.word	0x48000800

080021f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	@ 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <HAL_TIM_MspPostInit+0xc4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d14b      	bne.n	80022aa <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	4b29      	ldr	r3, [pc, #164]	@ (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	4a28      	ldr	r2, [pc, #160]	@ (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221e:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	4a22      	ldr	r2, [pc, #136]	@ (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002236:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <HAL_TIM_MspPostInit+0xc8>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8002242:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002254:	2306      	movs	r3, #6
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	4817      	ldr	r0, [pc, #92]	@ (80022bc <HAL_TIM_MspPostInit+0xcc>)
 8002260:	f002 fde4 	bl	8004e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002264:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002276:	2304      	movs	r3, #4
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	480e      	ldr	r0, [pc, #56]	@ (80022bc <HAL_TIM_MspPostInit+0xcc>)
 8002282:	f002 fdd3 	bl	8004e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 8002286:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002298:	2306      	movs	r3, #6
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a6:	f002 fdc1 	bl	8004e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022aa:	bf00      	nop
 80022ac:	3728      	adds	r7, #40	@ 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40021000 	.word	0x40021000
 80022bc:	48000400 	.word	0x48000400

080022c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0a0      	sub	sp, #128	@ 0x80
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d8:	f107 0318 	add.w	r3, r7, #24
 80022dc:	2254      	movs	r2, #84	@ 0x54
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f009 f868 	bl	800b3b6 <memset>
  if(huart->Instance==USART2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a41      	ldr	r2, [pc, #260]	@ (80023f0 <HAL_UART_MspInit+0x130>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d13f      	bne.n	8002370 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022f0:	2302      	movs	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f8:	f107 0318 	add.w	r3, r7, #24
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 fd67 	bl	8005dd0 <HAL_RCCEx_PeriphCLKConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002308:	f7ff fc0a 	bl	8001b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800230c:	4b39      	ldr	r3, [pc, #228]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	4a38      	ldr	r2, [pc, #224]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 8002312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002316:	6593      	str	r3, [r2, #88]	@ 0x58
 8002318:	4b36      	ldr	r3, [pc, #216]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	4b33      	ldr	r3, [pc, #204]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002328:	4a32      	ldr	r2, [pc, #200]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002330:	4b30      	ldr	r3, [pc, #192]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800233c:	230c      	movs	r3, #12
 800233e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800234c:	2307      	movs	r3, #7
 800234e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002354:	4619      	mov	r1, r3
 8002356:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235a:	f002 fd67 	bl	8004e2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2026      	movs	r0, #38	@ 0x26
 8002364:	f002 f978 	bl	8004658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002368:	2026      	movs	r0, #38	@ 0x26
 800236a:	f002 f98f 	bl	800468c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800236e:	e03b      	b.n	80023e8 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a20      	ldr	r2, [pc, #128]	@ (80023f8 <HAL_UART_MspInit+0x138>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d136      	bne.n	80023e8 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800237a:	2304      	movs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002382:	f107 0318 	add.w	r3, r7, #24
 8002386:	4618      	mov	r0, r3
 8002388:	f003 fd22 	bl	8005dd0 <HAL_RCCEx_PeriphCLKConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002392:	f7ff fbc5 	bl	8001b20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002396:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	4a16      	ldr	r2, [pc, #88]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a2:	4b14      	ldr	r3, [pc, #80]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b2:	4a10      	ldr	r2, [pc, #64]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ba:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <HAL_UART_MspInit+0x134>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023d8:	2307      	movs	r3, #7
 80023da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023dc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023e0:	4619      	mov	r1, r3
 80023e2:	4806      	ldr	r0, [pc, #24]	@ (80023fc <HAL_UART_MspInit+0x13c>)
 80023e4:	f002 fd22 	bl	8004e2c <HAL_GPIO_Init>
}
 80023e8:	bf00      	nop
 80023ea:	3780      	adds	r7, #128	@ 0x80
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40004400 	.word	0x40004400
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40004800 	.word	0x40004800
 80023fc:	48000800 	.word	0x48000800

08002400 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	@ 0x30
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002410:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <HAL_InitTick+0xc4>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	4a2b      	ldr	r2, [pc, #172]	@ (80024c4 <HAL_InitTick+0xc4>)
 8002416:	f043 0310 	orr.w	r3, r3, #16
 800241a:	6593      	str	r3, [r2, #88]	@ 0x58
 800241c:	4b29      	ldr	r3, [pc, #164]	@ (80024c4 <HAL_InitTick+0xc4>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002428:	f107 020c 	add.w	r2, r7, #12
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fc54 	bl	8005ce0 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002438:	f003 fc26 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 800243c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800243e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002440:	4a21      	ldr	r2, [pc, #132]	@ (80024c8 <HAL_InitTick+0xc8>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0c9b      	lsrs	r3, r3, #18
 8002448:	3b01      	subs	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800244c:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <HAL_InitTick+0xcc>)
 800244e:	4a20      	ldr	r2, [pc, #128]	@ (80024d0 <HAL_InitTick+0xd0>)
 8002450:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002452:	4b1e      	ldr	r3, [pc, #120]	@ (80024cc <HAL_InitTick+0xcc>)
 8002454:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002458:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800245a:	4a1c      	ldr	r2, [pc, #112]	@ (80024cc <HAL_InitTick+0xcc>)
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002460:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <HAL_InitTick+0xcc>)
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002466:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_InitTick+0xcc>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800246c:	4817      	ldr	r0, [pc, #92]	@ (80024cc <HAL_InitTick+0xcc>)
 800246e:	f003 fefd 	bl	800626c <HAL_TIM_Base_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002478:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11b      	bne.n	80024b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002480:	4812      	ldr	r0, [pc, #72]	@ (80024cc <HAL_InitTick+0xcc>)
 8002482:	f003 ff4b 	bl	800631c <HAL_TIM_Base_Start_IT>
 8002486:	4603      	mov	r3, r0
 8002488:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800248c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002494:	2036      	movs	r0, #54	@ 0x36
 8002496:	f002 f8f9 	bl	800468c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d808      	bhi.n	80024b2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	2036      	movs	r0, #54	@ 0x36
 80024a6:	f002 f8d7 	bl	8004658 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024aa:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <HAL_InitTick+0xd4>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e002      	b.n	80024b8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80024b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3730      	adds	r7, #48	@ 0x30
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	431bde83 	.word	0x431bde83
 80024cc:	2000077c 	.word	0x2000077c
 80024d0:	40001000 	.word	0x40001000
 80024d4:	20000240 	.word	0x20000240

080024d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <NMI_Handler+0x4>

080024e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <MemManage_Handler+0x4>

080024f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <UsageFault_Handler+0x4>

08002500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800253c:	4802      	ldr	r0, [pc, #8]	@ (8002548 <DMA1_Channel1_IRQHandler+0x10>)
 800253e:	f002 fa96 	bl	8004a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000504 	.word	0x20000504

0800254c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002550:	4803      	ldr	r0, [pc, #12]	@ (8002560 <ADC1_2_IRQHandler+0x14>)
 8002552:	f000 fe81 	bl	8003258 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002556:	4803      	ldr	r0, [pc, #12]	@ (8002564 <ADC1_2_IRQHandler+0x18>)
 8002558:	f000 fe7e 	bl	8003258 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000042c 	.word	0x2000042c
 8002564:	20000498 	.word	0x20000498

08002568 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800256c:	4802      	ldr	r0, [pc, #8]	@ (8002578 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800256e:	f004 f95d 	bl	800682c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000564 	.word	0x20000564

0800257c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002580:	4802      	ldr	r0, [pc, #8]	@ (800258c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002582:	f004 f953 	bl	800682c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000564 	.word	0x20000564

08002590 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002594:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002596:	f004 f949 	bl	800682c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000564 	.word	0x20000564

080025a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025a8:	4802      	ldr	r0, [pc, #8]	@ (80025b4 <TIM1_CC_IRQHandler+0x10>)
 80025aa:	f004 f93f 	bl	800682c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000564 	.word	0x20000564

080025b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <USART2_IRQHandler+0x10>)
 80025be:	f005 fe8b 	bl	80082d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200005fc 	.word	0x200005fc

080025cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80025d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025d4:	f002 fdc4 	bl	8005160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025e0:	4802      	ldr	r0, [pc, #8]	@ (80025ec <TIM6_DAC_IRQHandler+0x10>)
 80025e2:	f004 f923 	bl	800682c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000077c 	.word	0x2000077c

080025f0 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 80025f4:	4802      	ldr	r0, [pc, #8]	@ (8002600 <DMAMUX_OVR_IRQHandler+0x10>)
 80025f6:	f002 fbc7 	bl	8004d88 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000504 	.word	0x20000504

08002604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return 1;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_kill>:

int _kill(int pid, int sig)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800261e:	f008 ff79 	bl	800b514 <__errno>
 8002622:	4603      	mov	r3, r0
 8002624:	2216      	movs	r2, #22
 8002626:	601a      	str	r2, [r3, #0]
  return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_exit>:

void _exit (int status)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ffe7 	bl	8002614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002646:	bf00      	nop
 8002648:	e7fd      	b.n	8002646 <_exit+0x12>

0800264a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e00a      	b.n	8002672 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800265c:	f3af 8000 	nop.w
 8002660:	4601      	mov	r1, r0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	60ba      	str	r2, [r7, #8]
 8002668:	b2ca      	uxtb	r2, r1
 800266a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	dbf0      	blt.n	800265c <_read+0x12>
  }

  return len;
 800267a:	687b      	ldr	r3, [r7, #4]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e009      	b.n	80026aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	60ba      	str	r2, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3301      	adds	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	dbf1      	blt.n	8002696 <_write+0x12>
  }
  return len;
 80026b2:	687b      	ldr	r3, [r7, #4]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_close>:

int _close(int file)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e4:	605a      	str	r2, [r3, #4]
  return 0;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_isatty>:

int _isatty(int file)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026fc:	2301      	movs	r3, #1
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800272c:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <_sbrk+0x5c>)
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <_sbrk+0x60>)
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002738:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <_sbrk+0x64>)
 8002742:	4a12      	ldr	r2, [pc, #72]	@ (800278c <_sbrk+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d207      	bcs.n	8002764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002754:	f008 fede 	bl	800b514 <__errno>
 8002758:	4603      	mov	r3, r0
 800275a:	220c      	movs	r2, #12
 800275c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	e009      	b.n	8002778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002764:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276a:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <_sbrk+0x64>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <_sbrk+0x64>)
 8002774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20020000 	.word	0x20020000
 8002784:	00000400 	.word	0x00000400
 8002788:	200007c8 	.word	0x200007c8
 800278c:	20000920 	.word	0x20000920

08002790 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <SystemInit+0x20>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <SystemInit+0x20>)
 800279c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027b4:	480d      	ldr	r0, [pc, #52]	@ (80027ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b8:	480d      	ldr	r0, [pc, #52]	@ (80027f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ba:	490e      	ldr	r1, [pc, #56]	@ (80027f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027bc:	4a0e      	ldr	r2, [pc, #56]	@ (80027f8 <LoopForever+0xe>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027c0:	e002      	b.n	80027c8 <LoopCopyDataInit>

080027c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c6:	3304      	adds	r3, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027cc:	d3f9      	bcc.n	80027c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ce:	4a0b      	ldr	r2, [pc, #44]	@ (80027fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80027d0:	4c0b      	ldr	r4, [pc, #44]	@ (8002800 <LoopForever+0x16>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d4:	e001      	b.n	80027da <LoopFillZerobss>

080027d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d8:	3204      	adds	r2, #4

080027da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027dc:	d3fb      	bcc.n	80027d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027de:	f7ff ffd7 	bl	8002790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027e2:	f008 fe9d 	bl	800b520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027e6:	f7fe fc35 	bl	8001054 <main>

080027ea <LoopForever>:

LoopForever:
    b LoopForever
 80027ea:	e7fe      	b.n	80027ea <LoopForever>
  ldr   r0, =_estack
 80027ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f4:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 80027f8:	0800f09c 	.word	0x0800f09c
  ldr r2, =_sbss
 80027fc:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8002800:	2000091c 	.word	0x2000091c

08002804 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC3_IRQHandler>

08002806 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002810:	2003      	movs	r0, #3
 8002812:	f001 ff16 	bl	8004642 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002816:	200f      	movs	r0, #15
 8002818:	f7ff fdf2 	bl	8002400 <HAL_InitTick>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	71fb      	strb	r3, [r7, #7]
 8002826:	e001      	b.n	800282c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002828:	f7ff fa9e 	bl	8001d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800282c:	79fb      	ldrb	r3, [r7, #7]

}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_IncTick+0x1c>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <HAL_IncTick+0x20>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4413      	add	r3, r2
 8002846:	4a03      	ldr	r2, [pc, #12]	@ (8002854 <HAL_IncTick+0x1c>)
 8002848:	6013      	str	r3, [r2, #0]
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	200007cc 	.word	0x200007cc
 8002858:	20000244 	.word	0x20000244

0800285c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return uwTick;
 8002860:	4b03      	ldr	r3, [pc, #12]	@ (8002870 <HAL_GetTick+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	200007cc 	.word	0x200007cc

08002874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff ffee 	bl	800285c <HAL_GetTick>
 8002880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d004      	beq.n	8002898 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800288e:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_Delay+0x40>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002898:	bf00      	nop
 800289a:	f7ff ffdf 	bl	800285c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d8f7      	bhi.n	800289a <HAL_Delay+0x26>
  {
  }
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000244 	.word	0x20000244

080028b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	609a      	str	r2, [r3, #8]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3360      	adds	r3, #96	@ 0x60
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <LL_ADC_SetOffset+0x44>)
 8002942:	4013      	ands	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	4313      	orrs	r3, r2
 8002950:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	03fff000 	.word	0x03fff000

08002968 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3360      	adds	r3, #96	@ 0x60
 8002976:	461a      	mov	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3360      	adds	r3, #96	@ 0x60
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3360      	adds	r3, #96	@ 0x60
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80029f4:	bf00      	nop
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3360      	adds	r3, #96	@ 0x60
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	615a      	str	r2, [r3, #20]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b087      	sub	sp, #28
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3330      	adds	r3, #48	@ 0x30
 8002a92:	461a      	mov	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	4413      	add	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	211f      	movs	r1, #31
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	401a      	ands	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	f003 011f 	and.w	r1, r3, #31
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3314      	adds	r3, #20
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	0e5b      	lsrs	r3, r3, #25
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	0d1b      	lsrs	r3, r3, #20
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2107      	movs	r1, #7
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	401a      	ands	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	0d1b      	lsrs	r3, r3, #20
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	431a      	orrs	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b70:	43db      	mvns	r3, r3
 8002b72:	401a      	ands	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0318 	and.w	r3, r3, #24
 8002b7a:	4908      	ldr	r1, [pc, #32]	@ (8002b9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b7c:	40d9      	lsrs	r1, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	400b      	ands	r3, r1
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	0007ffff 	.word	0x0007ffff

08002ba0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 031f 	and.w	r3, r3, #31
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002be8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6093      	str	r3, [r2, #8]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c10:	d101      	bne.n	8002c16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c60:	d101      	bne.n	8002c66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <LL_ADC_IsEnabled+0x18>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <LL_ADC_IsEnabled+0x1a>
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cd6:	f043 0204 	orr.w	r2, r3, #4
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d101      	bne.n	8002d02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b089      	sub	sp, #36	@ 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1a9      	b.n	80030a6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff f825 	bl	8001db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff3f 	bl	8002bfc <LL_ADC_IsDeepPowerDownEnabled>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff25 	bl	8002bd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff5a 	bl	8002c4c <LL_ADC_IsInternalRegulatorEnabled>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d115      	bne.n	8002dca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff3e 	bl	8002c24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002da8:	4b9c      	ldr	r3, [pc, #624]	@ (800301c <HAL_ADC_Init+0x2e4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	4a9c      	ldr	r2, [pc, #624]	@ (8003020 <HAL_ADC_Init+0x2e8>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dbc:	e002      	b.n	8002dc4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f9      	bne.n	8002dbe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ff3c 	bl	8002c4c <LL_ADC_IsInternalRegulatorEnabled>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dde:	f043 0210 	orr.w	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ff75 	bl	8002cea <LL_ADC_REG_IsConversionOngoing>
 8002e00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 8142 	bne.w	8003094 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 813e 	bne.w	8003094 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e20:	f043 0202 	orr.w	r2, r3, #2
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff35 	bl	8002c9c <LL_ADC_IsEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d141      	bne.n	8002ebc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e40:	d004      	beq.n	8002e4c <HAL_ADC_Init+0x114>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a77      	ldr	r2, [pc, #476]	@ (8003024 <HAL_ADC_Init+0x2ec>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d10f      	bne.n	8002e6c <HAL_ADC_Init+0x134>
 8002e4c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e50:	f7ff ff24 	bl	8002c9c <LL_ADC_IsEnabled>
 8002e54:	4604      	mov	r4, r0
 8002e56:	4873      	ldr	r0, [pc, #460]	@ (8003024 <HAL_ADC_Init+0x2ec>)
 8002e58:	f7ff ff20 	bl	8002c9c <LL_ADC_IsEnabled>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e012      	b.n	8002e92 <HAL_ADC_Init+0x15a>
 8002e6c:	486e      	ldr	r0, [pc, #440]	@ (8003028 <HAL_ADC_Init+0x2f0>)
 8002e6e:	f7ff ff15 	bl	8002c9c <LL_ADC_IsEnabled>
 8002e72:	4604      	mov	r4, r0
 8002e74:	486d      	ldr	r0, [pc, #436]	@ (800302c <HAL_ADC_Init+0x2f4>)
 8002e76:	f7ff ff11 	bl	8002c9c <LL_ADC_IsEnabled>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	431c      	orrs	r4, r3
 8002e7e:	486c      	ldr	r0, [pc, #432]	@ (8003030 <HAL_ADC_Init+0x2f8>)
 8002e80:	f7ff ff0c 	bl	8002c9c <LL_ADC_IsEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4323      	orrs	r3, r4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d012      	beq.n	8002ebc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e9e:	d004      	beq.n	8002eaa <HAL_ADC_Init+0x172>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5f      	ldr	r2, [pc, #380]	@ (8003024 <HAL_ADC_Init+0x2ec>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_Init+0x176>
 8002eaa:	4a62      	ldr	r2, [pc, #392]	@ (8003034 <HAL_ADC_Init+0x2fc>)
 8002eac:	e000      	b.n	8002eb0 <HAL_ADC_Init+0x178>
 8002eae:	4a62      	ldr	r2, [pc, #392]	@ (8003038 <HAL_ADC_Init+0x300>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f7ff fcfe 	bl	80028b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7f5b      	ldrb	r3, [r3, #29]
 8002ec0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ec6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ecc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ed2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eda:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	045b      	lsls	r3, r3, #17
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d009      	beq.n	8002f14 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	4b48      	ldr	r3, [pc, #288]	@ (800303c <HAL_ADC_Init+0x304>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	69b9      	ldr	r1, [r7, #24]
 8002f24:	430b      	orrs	r3, r1
 8002f26:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fee4 	bl	8002d10 <LL_ADC_INJ_IsConversionOngoing>
 8002f48:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d17f      	bne.n	8003050 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d17c      	bne.n	8003050 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f5a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f62:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f72:	f023 0302 	bic.w	r3, r3, #2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	69b9      	ldr	r1, [r7, #24]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d017      	beq.n	8002fb8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002f96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fa0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6911      	ldr	r1, [r2, #16]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002fb6:	e013      	b.n	8002fe0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002fc6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fdc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d12a      	bne.n	8003040 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003000:	4311      	orrs	r1, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800300c:	430a      	orrs	r2, r1
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	611a      	str	r2, [r3, #16]
 800301a:	e019      	b.n	8003050 <HAL_ADC_Init+0x318>
 800301c:	2000023c 	.word	0x2000023c
 8003020:	053e2d63 	.word	0x053e2d63
 8003024:	50000100 	.word	0x50000100
 8003028:	50000400 	.word	0x50000400
 800302c:	50000500 	.word	0x50000500
 8003030:	50000600 	.word	0x50000600
 8003034:	50000300 	.word	0x50000300
 8003038:	50000700 	.word	0x50000700
 800303c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d10c      	bne.n	8003072 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f023 010f 	bic.w	r1, r3, #15
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	1e5a      	subs	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003070:	e007      	b.n	8003082 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 020f 	bic.w	r2, r2, #15
 8003080:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003092:	e007      	b.n	80030a4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3724      	adds	r7, #36	@ 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}
 80030ae:	bf00      	nop

080030b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030c4:	d004      	beq.n	80030d0 <HAL_ADC_Start_DMA+0x20>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003234 <HAL_ADC_Start_DMA+0x184>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_Start_DMA+0x24>
 80030d0:	4b59      	ldr	r3, [pc, #356]	@ (8003238 <HAL_ADC_Start_DMA+0x188>)
 80030d2:	e000      	b.n	80030d6 <HAL_ADC_Start_DMA+0x26>
 80030d4:	4b59      	ldr	r3, [pc, #356]	@ (800323c <HAL_ADC_Start_DMA+0x18c>)
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fd62 	bl	8002ba0 <LL_ADC_GetMultimode>
 80030dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fe01 	bl	8002cea <LL_ADC_REG_IsConversionOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 809b 	bne.w	8003226 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_Start_DMA+0x4e>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e096      	b.n	800322c <HAL_ADC_Start_DMA+0x17c>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a4d      	ldr	r2, [pc, #308]	@ (8003240 <HAL_ADC_Start_DMA+0x190>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d008      	beq.n	8003122 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2b05      	cmp	r3, #5
 800311a:	d002      	beq.n	8003122 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b09      	cmp	r3, #9
 8003120:	d17a      	bne.n	8003218 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 ff56 	bl	8003fd4 <ADC_Enable>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d16d      	bne.n	800320e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003136:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a3a      	ldr	r2, [pc, #232]	@ (8003234 <HAL_ADC_Start_DMA+0x184>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_ADC_Start_DMA+0xb4>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a3b      	ldr	r2, [pc, #236]	@ (8003244 <HAL_ADC_Start_DMA+0x194>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d002      	beq.n	8003160 <HAL_ADC_Start_DMA+0xb0>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	e003      	b.n	8003168 <HAL_ADC_Start_DMA+0xb8>
 8003160:	4b39      	ldr	r3, [pc, #228]	@ (8003248 <HAL_ADC_Start_DMA+0x198>)
 8003162:	e001      	b.n	8003168 <HAL_ADC_Start_DMA+0xb8>
 8003164:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	4293      	cmp	r3, r2
 800316e:	d002      	beq.n	8003176 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d105      	bne.n	8003182 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003192:	f023 0206 	bic.w	r2, r3, #6
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	661a      	str	r2, [r3, #96]	@ 0x60
 800319a:	e002      	b.n	80031a2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a6:	4a29      	ldr	r2, [pc, #164]	@ (800324c <HAL_ADC_Start_DMA+0x19c>)
 80031a8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	4a28      	ldr	r2, [pc, #160]	@ (8003250 <HAL_ADC_Start_DMA+0x1a0>)
 80031b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b6:	4a27      	ldr	r2, [pc, #156]	@ (8003254 <HAL_ADC_Start_DMA+0x1a4>)
 80031b8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	221c      	movs	r2, #28
 80031c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0210 	orr.w	r2, r2, #16
 80031d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3340      	adds	r3, #64	@ 0x40
 80031f4:	4619      	mov	r1, r3
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f001 fafd 	bl	80047f8 <HAL_DMA_Start_IT>
 80031fe:	4603      	mov	r3, r0
 8003200:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fd5b 	bl	8002cc2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800320c:	e00d      	b.n	800322a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003216:	e008      	b.n	800322a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003224:	e001      	b.n	800322a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	50000100 	.word	0x50000100
 8003238:	50000300 	.word	0x50000300
 800323c:	50000700 	.word	0x50000700
 8003240:	50000600 	.word	0x50000600
 8003244:	50000500 	.word	0x50000500
 8003248:	50000400 	.word	0x50000400
 800324c:	08004101 	.word	0x08004101
 8003250:	080041d9 	.word	0x080041d9
 8003254:	080041f5 	.word	0x080041f5

08003258 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003260:	2300      	movs	r3, #0
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800327c:	d004      	beq.n	8003288 <HAL_ADC_IRQHandler+0x30>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a8e      	ldr	r2, [pc, #568]	@ (80034bc <HAL_ADC_IRQHandler+0x264>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_ADC_IRQHandler+0x34>
 8003288:	4b8d      	ldr	r3, [pc, #564]	@ (80034c0 <HAL_ADC_IRQHandler+0x268>)
 800328a:	e000      	b.n	800328e <HAL_ADC_IRQHandler+0x36>
 800328c:	4b8d      	ldr	r3, [pc, #564]	@ (80034c4 <HAL_ADC_IRQHandler+0x26c>)
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fc86 	bl	8002ba0 <LL_ADC_GetMultimode>
 8003294:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d017      	beq.n	80032d0 <HAL_ADC_IRQHandler+0x78>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d012      	beq.n	80032d0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ba:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fffe 	bl	80042c4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2202      	movs	r2, #2
 80032ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <HAL_ADC_IRQHandler+0x8c>
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10b      	bne.n	80032fc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8094 	beq.w	8003418 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 808e 	beq.w	8003418 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fb9f 	bl	8002a5c <LL_ADC_REG_IsTriggerSourceSWStart>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d072      	beq.n	800340a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a64      	ldr	r2, [pc, #400]	@ (80034bc <HAL_ADC_IRQHandler+0x264>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_ADC_IRQHandler+0xea>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a65      	ldr	r2, [pc, #404]	@ (80034c8 <HAL_ADC_IRQHandler+0x270>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d002      	beq.n	800333e <HAL_ADC_IRQHandler+0xe6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	e003      	b.n	8003346 <HAL_ADC_IRQHandler+0xee>
 800333e:	4b63      	ldr	r3, [pc, #396]	@ (80034cc <HAL_ADC_IRQHandler+0x274>)
 8003340:	e001      	b.n	8003346 <HAL_ADC_IRQHandler+0xee>
 8003342:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	4293      	cmp	r3, r2
 800334c:	d008      	beq.n	8003360 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b05      	cmp	r3, #5
 8003358:	d002      	beq.n	8003360 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b09      	cmp	r3, #9
 800335e:	d104      	bne.n	800336a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	623b      	str	r3, [r7, #32]
 8003368:	e014      	b.n	8003394 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a53      	ldr	r2, [pc, #332]	@ (80034bc <HAL_ADC_IRQHandler+0x264>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_ADC_IRQHandler+0x130>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a53      	ldr	r2, [pc, #332]	@ (80034c8 <HAL_ADC_IRQHandler+0x270>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d002      	beq.n	8003384 <HAL_ADC_IRQHandler+0x12c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	e003      	b.n	800338c <HAL_ADC_IRQHandler+0x134>
 8003384:	4b51      	ldr	r3, [pc, #324]	@ (80034cc <HAL_ADC_IRQHandler+0x274>)
 8003386:	e001      	b.n	800338c <HAL_ADC_IRQHandler+0x134>
 8003388:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800338c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d135      	bne.n	800340a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d12e      	bne.n	800340a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fc9a 	bl	8002cea <LL_ADC_REG_IsConversionOngoing>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d11a      	bne.n	80033f2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 020c 	bic.w	r2, r2, #12
 80033ca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d112      	bne.n	800340a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033f0:	e00b      	b.n	800340a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f6:	f043 0210 	orr.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe fb66 	bl	8001adc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	220c      	movs	r2, #12
 8003416:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_ADC_IRQHandler+0x1d4>
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80b3 	beq.w	800359e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80ad 	beq.w	800359e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003454:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fb3a 	bl	8002ada <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003466:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff faf5 	bl	8002a5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003472:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a10      	ldr	r2, [pc, #64]	@ (80034bc <HAL_ADC_IRQHandler+0x264>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d009      	beq.n	8003492 <HAL_ADC_IRQHandler+0x23a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a11      	ldr	r2, [pc, #68]	@ (80034c8 <HAL_ADC_IRQHandler+0x270>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d002      	beq.n	800348e <HAL_ADC_IRQHandler+0x236>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	e003      	b.n	8003496 <HAL_ADC_IRQHandler+0x23e>
 800348e:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <HAL_ADC_IRQHandler+0x274>)
 8003490:	e001      	b.n	8003496 <HAL_ADC_IRQHandler+0x23e>
 8003492:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	4293      	cmp	r3, r2
 800349c:	d008      	beq.n	80034b0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d002      	beq.n	80034b0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b07      	cmp	r3, #7
 80034ae:	d10f      	bne.n	80034d0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	e01f      	b.n	80034fa <HAL_ADC_IRQHandler+0x2a2>
 80034ba:	bf00      	nop
 80034bc:	50000100 	.word	0x50000100
 80034c0:	50000300 	.word	0x50000300
 80034c4:	50000700 	.word	0x50000700
 80034c8:	50000500 	.word	0x50000500
 80034cc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a8b      	ldr	r2, [pc, #556]	@ (8003704 <HAL_ADC_IRQHandler+0x4ac>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_ADC_IRQHandler+0x296>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a8a      	ldr	r2, [pc, #552]	@ (8003708 <HAL_ADC_IRQHandler+0x4b0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d002      	beq.n	80034ea <HAL_ADC_IRQHandler+0x292>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	e003      	b.n	80034f2 <HAL_ADC_IRQHandler+0x29a>
 80034ea:	4b88      	ldr	r3, [pc, #544]	@ (800370c <HAL_ADC_IRQHandler+0x4b4>)
 80034ec:	e001      	b.n	80034f2 <HAL_ADC_IRQHandler+0x29a>
 80034ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034f2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d047      	beq.n	8003590 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_ADC_IRQHandler+0x2c2>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d03f      	beq.n	8003590 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003516:	2b00      	cmp	r3, #0
 8003518:	d13a      	bne.n	8003590 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	d133      	bne.n	8003590 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d12e      	bne.n	8003590 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fbea 	bl	8002d10 <LL_ADC_INJ_IsConversionOngoing>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11a      	bne.n	8003578 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003550:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003556:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d112      	bne.n	8003590 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003576:	e00b      	b.n	8003590 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357c:	f043 0210 	orr.w	r2, r3, #16
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003588:	f043 0201 	orr.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fe6f 	bl	8004274 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2260      	movs	r2, #96	@ 0x60
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d011      	beq.n	80035cc <HAL_ADC_IRQHandler+0x374>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8b4 	bl	800372c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2280      	movs	r2, #128	@ 0x80
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_ADC_IRQHandler+0x3a4>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fe55 	bl	800429c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003602:	2b00      	cmp	r3, #0
 8003604:	d012      	beq.n	800362c <HAL_ADC_IRQHandler+0x3d4>
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fe47 	bl	80042b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800362a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	d043      	beq.n	80036be <HAL_ADC_IRQHandler+0x466>
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d03e      	beq.n	80036be <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003648:	2301      	movs	r3, #1
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
 800364c:	e021      	b.n	8003692 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d015      	beq.n	8003680 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800365c:	d004      	beq.n	8003668 <HAL_ADC_IRQHandler+0x410>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a28      	ldr	r2, [pc, #160]	@ (8003704 <HAL_ADC_IRQHandler+0x4ac>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_ADC_IRQHandler+0x414>
 8003668:	4b29      	ldr	r3, [pc, #164]	@ (8003710 <HAL_ADC_IRQHandler+0x4b8>)
 800366a:	e000      	b.n	800366e <HAL_ADC_IRQHandler+0x416>
 800366c:	4b29      	ldr	r3, [pc, #164]	@ (8003714 <HAL_ADC_IRQHandler+0x4bc>)
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff faa4 	bl	8002bbc <LL_ADC_GetMultiDMATransfer>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800367a:	2301      	movs	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
 800367e:	e008      	b.n	8003692 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800368e:	2301      	movs	r3, #1
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10e      	bne.n	80036b6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a8:	f043 0202 	orr.w	r2, r3, #2
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f845 	bl	8003740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2210      	movs	r2, #16
 80036bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d018      	beq.n	80036fa <HAL_ADC_IRQHandler+0x4a2>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d013      	beq.n	80036fa <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e2:	f043 0208 	orr.w	r2, r3, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036f2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fdc7 	bl	8004288 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80036fa:	bf00      	nop
 80036fc:	3728      	adds	r7, #40	@ 0x28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	50000100 	.word	0x50000100
 8003708:	50000500 	.word	0x50000500
 800370c:	50000400 	.word	0x50000400
 8003710:	50000300 	.word	0x50000300
 8003714:	50000700 	.word	0x50000700

08003718 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b0b6      	sub	sp, #216	@ 0xd8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800376e:	2b01      	cmp	r3, #1
 8003770:	d102      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x24>
 8003772:	2302      	movs	r3, #2
 8003774:	f000 bc13 	b.w	8003f9e <HAL_ADC_ConfigChannel+0x84a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fab0 	bl	8002cea <LL_ADC_REG_IsConversionOngoing>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	f040 83f3 	bne.w	8003f78 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	f7ff f96f 	bl	8002a82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fa9e 	bl	8002cea <LL_ADC_REG_IsConversionOngoing>
 80037ae:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff faaa 	bl	8002d10 <LL_ADC_INJ_IsConversionOngoing>
 80037bc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f040 81d9 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f040 81d4 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037dc:	d10f      	bne.n	80037fe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	4619      	mov	r1, r3
 80037ea:	f7ff f989 	bl	8002b00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff f91d 	bl	8002a36 <LL_ADC_SetSamplingTimeCommonConfig>
 80037fc:	e00e      	b.n	800381c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	461a      	mov	r2, r3
 800380c:	f7ff f978 	bl	8002b00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f90d 	bl	8002a36 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	08db      	lsrs	r3, r3, #3
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b04      	cmp	r3, #4
 800383c:	d022      	beq.n	8003884 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6919      	ldr	r1, [r3, #16]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800384e:	f7ff f867 	bl	8002920 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6919      	ldr	r1, [r3, #16]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	461a      	mov	r2, r3
 8003860:	f7ff f8b3 	bl	80029ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003870:	2b01      	cmp	r3, #1
 8003872:	d102      	bne.n	800387a <HAL_ADC_ConfigChannel+0x126>
 8003874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003878:	e000      	b.n	800387c <HAL_ADC_ConfigChannel+0x128>
 800387a:	2300      	movs	r3, #0
 800387c:	461a      	mov	r2, r3
 800387e:	f7ff f8bf 	bl	8002a00 <LL_ADC_SetOffsetSaturation>
 8003882:	e17b      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f86c 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x15c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f861 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	f003 021f 	and.w	r2, r3, #31
 80038ae:	e01e      	b.n	80038ee <HAL_ADC_ConfigChannel+0x19a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f856 	bl	8002968 <LL_ADC_GetOffsetChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80038de:	2320      	movs	r3, #32
 80038e0:	e004      	b.n	80038ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80038e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d105      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x1b2>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	0e9b      	lsrs	r3, r3, #26
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	e018      	b.n	8003938 <HAL_ADC_ConfigChannel+0x1e4>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800391a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800391e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800392a:	2320      	movs	r3, #32
 800392c:	e004      	b.n	8003938 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800392e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003938:	429a      	cmp	r2, r3
 800393a:	d106      	bne.n	800394a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2200      	movs	r2, #0
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff f825 	bl	8002994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2101      	movs	r1, #1
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff f809 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003956:	4603      	mov	r3, r0
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x222>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fffe 	bl	8002968 <LL_ADC_GetOffsetChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	e01e      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x260>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2101      	movs	r1, #1
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fff3 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003982:	4603      	mov	r3, r0
 8003984:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003994:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800399c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80039a4:	2320      	movs	r3, #32
 80039a6:	e004      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80039a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x278>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0e9b      	lsrs	r3, r3, #26
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	e018      	b.n	80039fe <HAL_ADC_ConfigChannel+0x2aa>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80039e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80039e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	e004      	b.n	80039fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80039f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d106      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe ffc2 	bl	8002994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2102      	movs	r1, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe ffa6 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x2e8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe ff9b 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003a32:	4603      	mov	r3, r0
 8003a34:	0e9b      	lsrs	r3, r3, #26
 8003a36:	f003 021f 	and.w	r2, r3, #31
 8003a3a:	e01e      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x326>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2102      	movs	r1, #2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe ff90 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e004      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d105      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x33e>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	0e9b      	lsrs	r3, r3, #26
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	e016      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x36c>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003aa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003aa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003ab2:	2320      	movs	r3, #32
 8003ab4:	e004      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d106      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe ff61 	bl	8002994 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2103      	movs	r1, #3
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe ff45 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x3aa>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2103      	movs	r1, #3
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe ff3a 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	0e9b      	lsrs	r3, r3, #26
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	e017      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x3da>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2103      	movs	r1, #3
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe ff2f 	bl	8002968 <LL_ADC_GetOffsetChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b18:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003b1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003b20:	2320      	movs	r3, #32
 8003b22:	e003      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x3f2>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	0e9b      	lsrs	r3, r3, #26
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	e011      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x416>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e003      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d106      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2103      	movs	r1, #3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe ff0c 	bl	8002994 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff f88b 	bl	8002c9c <LL_ADC_IsEnabled>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 813d 	bne.w	8003e08 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7fe ffdc 	bl	8002b58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4aa2      	ldr	r2, [pc, #648]	@ (8003e30 <HAL_ADC_ConfigChannel+0x6dc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	f040 812e 	bne.w	8003e08 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x480>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e019      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x4b4>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003be2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003be4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003bec:	2320      	movs	r3, #32
 8003bee:	e003      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003bf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2b09      	cmp	r3, #9
 8003c00:	bf94      	ite	ls
 8003c02:	2301      	movls	r3, #1
 8003c04:	2300      	movhi	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d079      	beq.n	8003d00 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x4d4>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	3301      	adds	r3, #1
 8003c20:	069b      	lsls	r3, r3, #26
 8003c22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c26:	e015      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x500>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c38:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e003      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	069b      	lsls	r3, r3, #26
 8003c50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x520>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	3301      	adds	r3, #1
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	e017      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x550>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c84:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	e003      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	ea42 0103 	orr.w	r1, r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x576>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f003 021f 	and.w	r2, r3, #31
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	051b      	lsls	r3, r3, #20
 8003cc8:	e018      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x5a8>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e003      	b.n	8003cee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f003 021f 	and.w	r2, r3, #31
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	e07e      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x5c8>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	3301      	adds	r3, #1
 8003d14:	069b      	lsls	r3, r3, #26
 8003d16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d1a:	e015      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x5f4>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003d34:	2320      	movs	r3, #32
 8003d36:	e003      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	3301      	adds	r3, #1
 8003d42:	069b      	lsls	r3, r3, #26
 8003d44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x614>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	0e9b      	lsrs	r3, r3, #26
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2101      	movs	r1, #1
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	e017      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x644>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	61fb      	str	r3, [r7, #28]
  return result;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003d80:	2320      	movs	r3, #32
 8003d82:	e003      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	ea42 0103 	orr.w	r1, r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10d      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x670>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	3301      	adds	r3, #1
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	3b1e      	subs	r3, #30
 8003dbc:	051b      	lsls	r3, r3, #20
 8003dbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dc2:	e01b      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x6a8>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	613b      	str	r3, [r7, #16]
  return result;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003ddc:	2320      	movs	r3, #32
 8003dde:	e003      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	3301      	adds	r3, #1
 8003dea:	f003 021f 	and.w	r2, r3, #31
 8003dee:	4613      	mov	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4413      	add	r3, r2
 8003df4:	3b1e      	subs	r3, #30
 8003df6:	051b      	lsls	r3, r3, #20
 8003df8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dfc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e02:	4619      	mov	r1, r3
 8003e04:	f7fe fe7c 	bl	8002b00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b09      	ldr	r3, [pc, #36]	@ (8003e34 <HAL_ADC_ConfigChannel+0x6e0>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80be 	beq.w	8003f92 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e1e:	d004      	beq.n	8003e2a <HAL_ADC_ConfigChannel+0x6d6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a04      	ldr	r2, [pc, #16]	@ (8003e38 <HAL_ADC_ConfigChannel+0x6e4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d10a      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x6ec>
 8003e2a:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <HAL_ADC_ConfigChannel+0x6e8>)
 8003e2c:	e009      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x6ee>
 8003e2e:	bf00      	nop
 8003e30:	407f0000 	.word	0x407f0000
 8003e34:	80080000 	.word	0x80080000
 8003e38:	50000100 	.word	0x50000100
 8003e3c:	50000300 	.word	0x50000300
 8003e40:	4b59      	ldr	r3, [pc, #356]	@ (8003fa8 <HAL_ADC_ConfigChannel+0x854>)
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fd5e 	bl	8002904 <LL_ADC_GetCommonPathInternalCh>
 8003e48:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a56      	ldr	r2, [pc, #344]	@ (8003fac <HAL_ADC_ConfigChannel+0x858>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_ADC_ConfigChannel+0x70c>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a55      	ldr	r2, [pc, #340]	@ (8003fb0 <HAL_ADC_ConfigChannel+0x85c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d13a      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d134      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e74:	d005      	beq.n	8003e82 <HAL_ADC_ConfigChannel+0x72e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb4 <HAL_ADC_ConfigChannel+0x860>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	f040 8085 	bne.w	8003f8c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e8a:	d004      	beq.n	8003e96 <HAL_ADC_ConfigChannel+0x742>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a49      	ldr	r2, [pc, #292]	@ (8003fb8 <HAL_ADC_ConfigChannel+0x864>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x746>
 8003e96:	4a49      	ldr	r2, [pc, #292]	@ (8003fbc <HAL_ADC_ConfigChannel+0x868>)
 8003e98:	e000      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x748>
 8003e9a:	4a43      	ldr	r2, [pc, #268]	@ (8003fa8 <HAL_ADC_ConfigChannel+0x854>)
 8003e9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ea0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f7fe fd19 	bl	80028de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eac:	4b44      	ldr	r3, [pc, #272]	@ (8003fc0 <HAL_ADC_ConfigChannel+0x86c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	099b      	lsrs	r3, r3, #6
 8003eb2:	4a44      	ldr	r2, [pc, #272]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x870>)
 8003eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb8:	099b      	lsrs	r3, r3, #6
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ec6:	e002      	b.n	8003ece <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f9      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ed4:	e05a      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x874>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d125      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d11f      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a31      	ldr	r2, [pc, #196]	@ (8003fb8 <HAL_ADC_ConfigChannel+0x864>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d104      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x7ac>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a34      	ldr	r2, [pc, #208]	@ (8003fcc <HAL_ADC_ConfigChannel+0x878>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d047      	beq.n	8003f90 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f08:	d004      	beq.n	8003f14 <HAL_ADC_ConfigChannel+0x7c0>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb8 <HAL_ADC_ConfigChannel+0x864>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x7c4>
 8003f14:	4a29      	ldr	r2, [pc, #164]	@ (8003fbc <HAL_ADC_ConfigChannel+0x868>)
 8003f16:	e000      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x7c6>
 8003f18:	4a23      	ldr	r2, [pc, #140]	@ (8003fa8 <HAL_ADC_ConfigChannel+0x854>)
 8003f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7fe fcda 	bl	80028de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f2a:	e031      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a27      	ldr	r2, [pc, #156]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x87c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d12d      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d127      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb8 <HAL_ADC_ConfigChannel+0x864>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d022      	beq.n	8003f92 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f54:	d004      	beq.n	8003f60 <HAL_ADC_ConfigChannel+0x80c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a17      	ldr	r2, [pc, #92]	@ (8003fb8 <HAL_ADC_ConfigChannel+0x864>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x810>
 8003f60:	4a16      	ldr	r2, [pc, #88]	@ (8003fbc <HAL_ADC_ConfigChannel+0x868>)
 8003f62:	e000      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x812>
 8003f64:	4a10      	ldr	r2, [pc, #64]	@ (8003fa8 <HAL_ADC_ConfigChannel+0x854>)
 8003f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f7fe fcb4 	bl	80028de <LL_ADC_SetCommonPathInternalCh>
 8003f76:	e00c      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7c:	f043 0220 	orr.w	r2, r3, #32
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003f8a:	e002      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f8c:	bf00      	nop
 8003f8e:	e000      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	37d8      	adds	r7, #216	@ 0xd8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	50000700 	.word	0x50000700
 8003fac:	c3210000 	.word	0xc3210000
 8003fb0:	90c00010 	.word	0x90c00010
 8003fb4:	50000600 	.word	0x50000600
 8003fb8:	50000100 	.word	0x50000100
 8003fbc:	50000300 	.word	0x50000300
 8003fc0:	2000023c 	.word	0x2000023c
 8003fc4:	053e2d63 	.word	0x053e2d63
 8003fc8:	c7520000 	.word	0xc7520000
 8003fcc:	50000500 	.word	0x50000500
 8003fd0:	cb840000 	.word	0xcb840000

08003fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe fe59 	bl	8002c9c <LL_ADC_IsEnabled>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d176      	bne.n	80040de <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80040e8 <ADC_Enable+0x114>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004002:	f043 0210 	orr.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e062      	b.n	80040e0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe fe28 	bl	8002c74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800402c:	d004      	beq.n	8004038 <ADC_Enable+0x64>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2e      	ldr	r2, [pc, #184]	@ (80040ec <ADC_Enable+0x118>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d101      	bne.n	800403c <ADC_Enable+0x68>
 8004038:	4b2d      	ldr	r3, [pc, #180]	@ (80040f0 <ADC_Enable+0x11c>)
 800403a:	e000      	b.n	800403e <ADC_Enable+0x6a>
 800403c:	4b2d      	ldr	r3, [pc, #180]	@ (80040f4 <ADC_Enable+0x120>)
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fc60 	bl	8002904 <LL_ADC_GetCommonPathInternalCh>
 8004044:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800404a:	2b00      	cmp	r3, #0
 800404c:	d013      	beq.n	8004076 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800404e:	4b2a      	ldr	r3, [pc, #168]	@ (80040f8 <ADC_Enable+0x124>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	4a29      	ldr	r2, [pc, #164]	@ (80040fc <ADC_Enable+0x128>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	099b      	lsrs	r3, r3, #6
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004068:	e002      	b.n	8004070 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	3b01      	subs	r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f9      	bne.n	800406a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004076:	f7fe fbf1 	bl	800285c <HAL_GetTick>
 800407a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800407c:	e028      	b.n	80040d0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fe0a 	bl	8002c9c <LL_ADC_IsEnabled>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d104      	bne.n	8004098 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fdee 	bl	8002c74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004098:	f7fe fbe0 	bl	800285c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d914      	bls.n	80040d0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d00d      	beq.n	80040d0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	f043 0210 	orr.w	r2, r3, #16
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c4:	f043 0201 	orr.w	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e007      	b.n	80040e0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d1cf      	bne.n	800407e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	8000003f 	.word	0x8000003f
 80040ec:	50000100 	.word	0x50000100
 80040f0:	50000300 	.word	0x50000300
 80040f4:	50000700 	.word	0x50000700
 80040f8:	2000023c 	.word	0x2000023c
 80040fc:	053e2d63 	.word	0x053e2d63

08004100 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004116:	2b00      	cmp	r3, #0
 8004118:	d14b      	bne.n	80041b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d021      	beq.n	8004178 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7fe fc8f 	bl	8002a5c <LL_ADC_REG_IsTriggerSourceSWStart>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d032      	beq.n	80041aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d12b      	bne.n	80041aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004156:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d11f      	bne.n	80041aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004176:	e018      	b.n	80041aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d111      	bne.n	80041aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a2:	f043 0201 	orr.w	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7fd fc96 	bl	8001adc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041b0:	e00e      	b.n	80041d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff fabe 	bl	8003740 <HAL_ADC_ErrorCallback>
}
 80041c4:	e004      	b.n	80041d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f7ff fa96 	bl	8003718 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041ec:	bf00      	nop
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004200:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004206:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004212:	f043 0204 	orr.w	r2, r3, #4
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff fa90 	bl	8003740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <LL_ADC_IsEnabled>:
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <LL_ADC_IsEnabled+0x18>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <LL_ADC_IsEnabled+0x1a>
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <LL_ADC_REG_IsConversionOngoing>:
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b04      	cmp	r3, #4
 8004260:	d101      	bne.n	8004266 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80042d8:	b590      	push	{r4, r7, lr}
 80042da:	b0a1      	sub	sp, #132	@ 0x84
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e0e7      	b.n	80044c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80042fe:	2300      	movs	r3, #0
 8004300:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004302:	2300      	movs	r3, #0
 8004304:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800430e:	d102      	bne.n	8004316 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004310:	4b6f      	ldr	r3, [pc, #444]	@ (80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	e009      	b.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6e      	ldr	r2, [pc, #440]	@ (80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d102      	bne.n	8004326 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004320:	4b6d      	ldr	r3, [pc, #436]	@ (80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	e001      	b.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0be      	b.n	80044c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff ff7f 	bl	800424e <LL_ADC_REG_IsConversionOngoing>
 8004350:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ff79 	bl	800424e <LL_ADC_REG_IsConversionOngoing>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	f040 80a0 	bne.w	80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004366:	2b00      	cmp	r3, #0
 8004368:	f040 809c 	bne.w	80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004374:	d004      	beq.n	8004380 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a55      	ldr	r2, [pc, #340]	@ (80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d101      	bne.n	8004384 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004380:	4b56      	ldr	r3, [pc, #344]	@ (80044dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004382:	e000      	b.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004384:	4b56      	ldr	r3, [pc, #344]	@ (80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004386:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d04b      	beq.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004390:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043a2:	035b      	lsls	r3, r3, #13
 80043a4:	430b      	orrs	r3, r1
 80043a6:	431a      	orrs	r2, r3
 80043a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043b4:	d004      	beq.n	80043c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a45      	ldr	r2, [pc, #276]	@ (80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d10f      	bne.n	80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80043c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80043c4:	f7ff ff30 	bl	8004228 <LL_ADC_IsEnabled>
 80043c8:	4604      	mov	r4, r0
 80043ca:	4841      	ldr	r0, [pc, #260]	@ (80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043cc:	f7ff ff2c 	bl	8004228 <LL_ADC_IsEnabled>
 80043d0:	4603      	mov	r3, r0
 80043d2:	4323      	orrs	r3, r4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e012      	b.n	8004406 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80043e0:	483c      	ldr	r0, [pc, #240]	@ (80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043e2:	f7ff ff21 	bl	8004228 <LL_ADC_IsEnabled>
 80043e6:	4604      	mov	r4, r0
 80043e8:	483b      	ldr	r0, [pc, #236]	@ (80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043ea:	f7ff ff1d 	bl	8004228 <LL_ADC_IsEnabled>
 80043ee:	4603      	mov	r3, r0
 80043f0:	431c      	orrs	r4, r3
 80043f2:	483c      	ldr	r0, [pc, #240]	@ (80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043f4:	f7ff ff18 	bl	8004228 <LL_ADC_IsEnabled>
 80043f8:	4603      	mov	r3, r0
 80043fa:	4323      	orrs	r3, r4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d056      	beq.n	80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800440a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004412:	f023 030f 	bic.w	r3, r3, #15
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	6811      	ldr	r1, [r2, #0]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	6892      	ldr	r2, [r2, #8]
 800441e:	430a      	orrs	r2, r1
 8004420:	431a      	orrs	r2, r3
 8004422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004424:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004426:	e047      	b.n	80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004428:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004430:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004432:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800443c:	d004      	beq.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a23      	ldr	r2, [pc, #140]	@ (80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10f      	bne.n	8004468 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004448:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800444c:	f7ff feec 	bl	8004228 <LL_ADC_IsEnabled>
 8004450:	4604      	mov	r4, r0
 8004452:	481f      	ldr	r0, [pc, #124]	@ (80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004454:	f7ff fee8 	bl	8004228 <LL_ADC_IsEnabled>
 8004458:	4603      	mov	r3, r0
 800445a:	4323      	orrs	r3, r4
 800445c:	2b00      	cmp	r3, #0
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	e012      	b.n	800448e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004468:	481a      	ldr	r0, [pc, #104]	@ (80044d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800446a:	f7ff fedd 	bl	8004228 <LL_ADC_IsEnabled>
 800446e:	4604      	mov	r4, r0
 8004470:	4819      	ldr	r0, [pc, #100]	@ (80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004472:	f7ff fed9 	bl	8004228 <LL_ADC_IsEnabled>
 8004476:	4603      	mov	r3, r0
 8004478:	431c      	orrs	r4, r3
 800447a:	481a      	ldr	r0, [pc, #104]	@ (80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800447c:	f7ff fed4 	bl	8004228 <LL_ADC_IsEnabled>
 8004480:	4603      	mov	r3, r0
 8004482:	4323      	orrs	r3, r4
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d012      	beq.n	80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800449a:	f023 030f 	bic.w	r3, r3, #15
 800449e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80044a0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044a2:	e009      	b.n	80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80044b6:	e000      	b.n	80044ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80044c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3784      	adds	r7, #132	@ 0x84
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd90      	pop	{r4, r7, pc}
 80044ce:	bf00      	nop
 80044d0:	50000100 	.word	0x50000100
 80044d4:	50000400 	.word	0x50000400
 80044d8:	50000500 	.word	0x50000500
 80044dc:	50000300 	.word	0x50000300
 80044e0:	50000700 	.word	0x50000700
 80044e4:	50000600 	.word	0x50000600

080044e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044f8:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <__NVIC_SetPriorityGrouping+0x44>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004504:	4013      	ands	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800451a:	4a04      	ldr	r2, [pc, #16]	@ (800452c <__NVIC_SetPriorityGrouping+0x44>)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	60d3      	str	r3, [r2, #12]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004534:	4b04      	ldr	r3, [pc, #16]	@ (8004548 <__NVIC_GetPriorityGrouping+0x18>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	0a1b      	lsrs	r3, r3, #8
 800453a:	f003 0307 	and.w	r3, r3, #7
}
 800453e:	4618      	mov	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	2b00      	cmp	r3, #0
 800455c:	db0b      	blt.n	8004576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	f003 021f 	and.w	r2, r3, #31
 8004564:	4907      	ldr	r1, [pc, #28]	@ (8004584 <__NVIC_EnableIRQ+0x38>)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2001      	movs	r0, #1
 800456e:	fa00 f202 	lsl.w	r2, r0, r2
 8004572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	e000e100 	.word	0xe000e100

08004588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	6039      	str	r1, [r7, #0]
 8004592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004598:	2b00      	cmp	r3, #0
 800459a:	db0a      	blt.n	80045b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	490c      	ldr	r1, [pc, #48]	@ (80045d4 <__NVIC_SetPriority+0x4c>)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	0112      	lsls	r2, r2, #4
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	440b      	add	r3, r1
 80045ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b0:	e00a      	b.n	80045c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	4908      	ldr	r1, [pc, #32]	@ (80045d8 <__NVIC_SetPriority+0x50>)
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	3b04      	subs	r3, #4
 80045c0:	0112      	lsls	r2, r2, #4
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	440b      	add	r3, r1
 80045c6:	761a      	strb	r2, [r3, #24]
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000e100 	.word	0xe000e100
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	@ 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f1c3 0307 	rsb	r3, r3, #7
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	bf28      	it	cs
 80045fa:	2304      	movcs	r3, #4
 80045fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3304      	adds	r3, #4
 8004602:	2b06      	cmp	r3, #6
 8004604:	d902      	bls.n	800460c <NVIC_EncodePriority+0x30>
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3b03      	subs	r3, #3
 800460a:	e000      	b.n	800460e <NVIC_EncodePriority+0x32>
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004610:	f04f 32ff 	mov.w	r2, #4294967295
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43da      	mvns	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	401a      	ands	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004624:	f04f 31ff 	mov.w	r1, #4294967295
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	fa01 f303 	lsl.w	r3, r1, r3
 800462e:	43d9      	mvns	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004634:	4313      	orrs	r3, r2
         );
}
 8004636:	4618      	mov	r0, r3
 8004638:	3724      	adds	r7, #36	@ 0x24
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ff4c 	bl	80044e8 <__NVIC_SetPriorityGrouping>
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004666:	f7ff ff63 	bl	8004530 <__NVIC_GetPriorityGrouping>
 800466a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	6978      	ldr	r0, [r7, #20]
 8004672:	f7ff ffb3 	bl	80045dc <NVIC_EncodePriority>
 8004676:	4602      	mov	r2, r0
 8004678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff ff82 	bl	8004588 <__NVIC_SetPriority>
}
 8004684:	bf00      	nop
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ff56 	bl	800454c <__NVIC_EnableIRQ>
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e08d      	b.n	80047d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	4b47      	ldr	r3, [pc, #284]	@ (80047e0 <HAL_DMA_Init+0x138>)
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d80f      	bhi.n	80046e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	4b45      	ldr	r3, [pc, #276]	@ (80047e4 <HAL_DMA_Init+0x13c>)
 80046ce:	4413      	add	r3, r2
 80046d0:	4a45      	ldr	r2, [pc, #276]	@ (80047e8 <HAL_DMA_Init+0x140>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	009a      	lsls	r2, r3, #2
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a42      	ldr	r2, [pc, #264]	@ (80047ec <HAL_DMA_Init+0x144>)
 80046e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80046e4:	e00e      	b.n	8004704 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	4b40      	ldr	r3, [pc, #256]	@ (80047f0 <HAL_DMA_Init+0x148>)
 80046ee:	4413      	add	r3, r2
 80046f0:	4a3d      	ldr	r2, [pc, #244]	@ (80047e8 <HAL_DMA_Init+0x140>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	009a      	lsls	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a3c      	ldr	r2, [pc, #240]	@ (80047f4 <HAL_DMA_Init+0x14c>)
 8004702:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800471a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004728:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004734:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004740:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fa76 	bl	8004c48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004764:	d102      	bne.n	800476c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004780:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_DMA_Init+0x104>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b04      	cmp	r3, #4
 8004790:	d80c      	bhi.n	80047ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa96 	bl	8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	e008      	b.n	80047be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40020407 	.word	0x40020407
 80047e4:	bffdfff8 	.word	0xbffdfff8
 80047e8:	cccccccd 	.word	0xcccccccd
 80047ec:	40020000 	.word	0x40020000
 80047f0:	bffdfbf8 	.word	0xbffdfbf8
 80047f4:	40020400 	.word	0x40020400

080047f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_DMA_Start_IT+0x20>
 8004814:	2302      	movs	r3, #2
 8004816:	e066      	b.n	80048e6 <HAL_DMA_Start_IT+0xee>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d155      	bne.n	80048d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f9bb 	bl	8004bcc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 020e 	orr.w	r2, r2, #14
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e00f      	b.n	8004890 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 020a 	orr.w	r2, r2, #10
 800488e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d007      	beq.n	80048c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e005      	b.n	80048e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
 80048e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d005      	beq.n	8004912 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2204      	movs	r2, #4
 800490a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
 8004910:	e037      	b.n	8004982 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 020e 	bic.w	r2, r2, #14
 8004920:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004930:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004946:	f003 021f 	and.w	r2, r3, #31
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f202 	lsl.w	r2, r1, r2
 8004954:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800495e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00c      	beq.n	8004982 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004972:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004976:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004980:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004992:	7bfb      	ldrb	r3, [r7, #15]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d00d      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2204      	movs	r2, #4
 80049bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
 80049d2:	e047      	b.n	8004a64 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 020e 	bic.w	r2, r2, #14
 80049e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a08:	f003 021f 	and.w	r2, r3, #31
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f202 	lsl.w	r2, r1, r2
 8004a16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
    }
  }
  return status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2204      	movs	r2, #4
 8004a90:	409a      	lsls	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d026      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x7a>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d021      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d107      	bne.n	8004ac2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0204 	bic.w	r2, r2, #4
 8004ac0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac6:	f003 021f 	and.w	r2, r3, #31
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	2104      	movs	r1, #4
 8004ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d071      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ae6:	e06c      	b.n	8004bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2202      	movs	r2, #2
 8004af2:	409a      	lsls	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d02e      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d029      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 020a 	bic.w	r2, r2, #10
 8004b22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b30:	f003 021f 	and.w	r2, r3, #31
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	2102      	movs	r1, #2
 8004b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d038      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b58:	e033      	b.n	8004bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	2208      	movs	r2, #8
 8004b64:	409a      	lsls	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d02a      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d025      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 020e 	bic.w	r2, r2, #14
 8004b86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8c:	f003 021f 	and.w	r2, r3, #31
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b94:	2101      	movs	r1, #1
 8004b96:	fa01 f202 	lsl.w	r2, r1, r2
 8004b9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
}
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004be2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bf4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfa:	f003 021f 	and.w	r2, r3, #31
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d108      	bne.n	8004c2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c2a:	e007      	b.n	8004c3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	60da      	str	r2, [r3, #12]
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b16      	ldr	r3, [pc, #88]	@ (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d802      	bhi.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c5c:	4b15      	ldr	r3, [pc, #84]	@ (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e001      	b.n	8004c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c62:	4b15      	ldr	r3, [pc, #84]	@ (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c64:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	3b08      	subs	r3, #8
 8004c72:	4a12      	ldr	r2, [pc, #72]	@ (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	009a      	lsls	r2, r3, #2
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	4413      	add	r3, r2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a0b      	ldr	r2, [pc, #44]	@ (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40020407 	.word	0x40020407
 8004cb4:	40020800 	.word	0x40020800
 8004cb8:	40020820 	.word	0x40020820
 8004cbc:	cccccccd 	.word	0xcccccccd
 8004cc0:	40020880 	.word	0x40020880

08004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a08      	ldr	r2, [pc, #32]	@ (8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ce6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	1000823f 	.word	0x1000823f
 8004d08:	40020940 	.word	0x40020940

08004d0c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d12b      	bne.n	8004d7a <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_DMAEx_ConfigMuxSync+0x24>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e025      	b.n	8004d7c <HAL_DMAEx_ConfigMuxSync+0x70>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	b2d9      	uxtb	r1, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	061a      	lsls	r2, r3, #24
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	04db      	lsls	r3, r3, #19
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	7a1b      	ldrb	r3, [r3, #8]
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	7a5b      	ldrb	r3, [r3, #9]
 8004d62:	025b      	lsls	r3, r3, #9
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e000      	b.n	8004d7c <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01a      	beq.n	8004dd6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004daa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004db8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d022      	beq.n	8004e24 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01a      	beq.n	8004e24 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dfc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e06:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
      }
    }
  }
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e3a:	e15a      	b.n	80050f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	2101      	movs	r1, #1
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	4013      	ands	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 814c 	beq.w	80050ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d005      	beq.n	8004e6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d130      	bne.n	8004ece <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	2203      	movs	r2, #3
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4013      	ands	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	f003 0201 	and.w	r2, r3, #1
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d017      	beq.n	8004f0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	43db      	mvns	r3, r3
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d123      	bne.n	8004f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	08da      	lsrs	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3208      	adds	r2, #8
 8004f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	220f      	movs	r2, #15
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43db      	mvns	r3, r3
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4013      	ands	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	08da      	lsrs	r2, r3, #3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3208      	adds	r2, #8
 8004f58:	6939      	ldr	r1, [r7, #16]
 8004f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	2203      	movs	r2, #3
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f003 0203 	and.w	r2, r3, #3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80a6 	beq.w	80050ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fa0:	4b5b      	ldr	r3, [pc, #364]	@ (8005110 <HAL_GPIO_Init+0x2e4>)
 8004fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa4:	4a5a      	ldr	r2, [pc, #360]	@ (8005110 <HAL_GPIO_Init+0x2e4>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fac:	4b58      	ldr	r3, [pc, #352]	@ (8005110 <HAL_GPIO_Init+0x2e4>)
 8004fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fb8:	4a56      	ldr	r2, [pc, #344]	@ (8005114 <HAL_GPIO_Init+0x2e8>)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	220f      	movs	r2, #15
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004fe2:	d01f      	beq.n	8005024 <HAL_GPIO_Init+0x1f8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a4c      	ldr	r2, [pc, #304]	@ (8005118 <HAL_GPIO_Init+0x2ec>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d019      	beq.n	8005020 <HAL_GPIO_Init+0x1f4>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a4b      	ldr	r2, [pc, #300]	@ (800511c <HAL_GPIO_Init+0x2f0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_GPIO_Init+0x1f0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8005120 <HAL_GPIO_Init+0x2f4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00d      	beq.n	8005018 <HAL_GPIO_Init+0x1ec>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a49      	ldr	r2, [pc, #292]	@ (8005124 <HAL_GPIO_Init+0x2f8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d007      	beq.n	8005014 <HAL_GPIO_Init+0x1e8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a48      	ldr	r2, [pc, #288]	@ (8005128 <HAL_GPIO_Init+0x2fc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d101      	bne.n	8005010 <HAL_GPIO_Init+0x1e4>
 800500c:	2305      	movs	r3, #5
 800500e:	e00a      	b.n	8005026 <HAL_GPIO_Init+0x1fa>
 8005010:	2306      	movs	r3, #6
 8005012:	e008      	b.n	8005026 <HAL_GPIO_Init+0x1fa>
 8005014:	2304      	movs	r3, #4
 8005016:	e006      	b.n	8005026 <HAL_GPIO_Init+0x1fa>
 8005018:	2303      	movs	r3, #3
 800501a:	e004      	b.n	8005026 <HAL_GPIO_Init+0x1fa>
 800501c:	2302      	movs	r3, #2
 800501e:	e002      	b.n	8005026 <HAL_GPIO_Init+0x1fa>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_GPIO_Init+0x1fa>
 8005024:	2300      	movs	r3, #0
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	f002 0203 	and.w	r2, r2, #3
 800502c:	0092      	lsls	r2, r2, #2
 800502e:	4093      	lsls	r3, r2
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005036:	4937      	ldr	r1, [pc, #220]	@ (8005114 <HAL_GPIO_Init+0x2e8>)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	3302      	adds	r3, #2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005044:	4b39      	ldr	r3, [pc, #228]	@ (800512c <HAL_GPIO_Init+0x300>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	43db      	mvns	r3, r3
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4013      	ands	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005068:	4a30      	ldr	r2, [pc, #192]	@ (800512c <HAL_GPIO_Init+0x300>)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800506e:	4b2f      	ldr	r3, [pc, #188]	@ (800512c <HAL_GPIO_Init+0x300>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	43db      	mvns	r3, r3
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4013      	ands	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005092:	4a26      	ldr	r2, [pc, #152]	@ (800512c <HAL_GPIO_Init+0x300>)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005098:	4b24      	ldr	r3, [pc, #144]	@ (800512c <HAL_GPIO_Init+0x300>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4013      	ands	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050bc:	4a1b      	ldr	r2, [pc, #108]	@ (800512c <HAL_GPIO_Init+0x300>)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80050c2:	4b1a      	ldr	r3, [pc, #104]	@ (800512c <HAL_GPIO_Init+0x300>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4013      	ands	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050e6:	4a11      	ldr	r2, [pc, #68]	@ (800512c <HAL_GPIO_Init+0x300>)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	3301      	adds	r3, #1
 80050f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f47f ae9d 	bne.w	8004e3c <HAL_GPIO_Init+0x10>
  }
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40021000 	.word	0x40021000
 8005114:	40010000 	.word	0x40010000
 8005118:	48000400 	.word	0x48000400
 800511c:	48000800 	.word	0x48000800
 8005120:	48000c00 	.word	0x48000c00
 8005124:	48001000 	.word	0x48001000
 8005128:	48001400 	.word	0x48001400
 800512c:	40010400 	.word	0x40010400

08005130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	807b      	strh	r3, [r7, #2]
 800513c:	4613      	mov	r3, r2
 800513e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005140:	787b      	ldrb	r3, [r7, #1]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005146:	887a      	ldrh	r2, [r7, #2]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800514c:	e002      	b.n	8005154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800514e:	887a      	ldrh	r2, [r7, #2]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800516a:	4b08      	ldr	r3, [pc, #32]	@ (800518c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800516c:	695a      	ldr	r2, [r3, #20]
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005176:	4a05      	ldr	r2, [pc, #20]	@ (800518c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f806 	bl	8005190 <HAL_GPIO_EXTI_Callback>
  }
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40010400 	.word	0x40010400

08005190 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d141      	bne.n	800523a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051b6:	4b4b      	ldr	r3, [pc, #300]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c2:	d131      	bne.n	8005228 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051c4:	4b47      	ldr	r3, [pc, #284]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ca:	4a46      	ldr	r2, [pc, #280]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051d4:	4b43      	ldr	r3, [pc, #268]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051dc:	4a41      	ldr	r2, [pc, #260]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051e4:	4b40      	ldr	r3, [pc, #256]	@ (80052e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2232      	movs	r2, #50	@ 0x32
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	4a3f      	ldr	r2, [pc, #252]	@ (80052ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	0c9b      	lsrs	r3, r3, #18
 80051f6:	3301      	adds	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051fa:	e002      	b.n	8005202 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3b01      	subs	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005202:	4b38      	ldr	r3, [pc, #224]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800520a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800520e:	d102      	bne.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f2      	bne.n	80051fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005216:	4b33      	ldr	r3, [pc, #204]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005222:	d158      	bne.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e057      	b.n	80052d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005228:	4b2e      	ldr	r3, [pc, #184]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800522a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800522e:	4a2d      	ldr	r2, [pc, #180]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005234:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005238:	e04d      	b.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005240:	d141      	bne.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005242:	4b28      	ldr	r3, [pc, #160]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800524a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524e:	d131      	bne.n	80052b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005250:	4b24      	ldr	r3, [pc, #144]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005256:	4a23      	ldr	r2, [pc, #140]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800525c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005260:	4b20      	ldr	r3, [pc, #128]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005268:	4a1e      	ldr	r2, [pc, #120]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800526e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005270:	4b1d      	ldr	r3, [pc, #116]	@ (80052e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2232      	movs	r2, #50	@ 0x32
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	4a1c      	ldr	r2, [pc, #112]	@ (80052ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	0c9b      	lsrs	r3, r3, #18
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005286:	e002      	b.n	800528e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3b01      	subs	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800528e:	4b15      	ldr	r3, [pc, #84]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529a:	d102      	bne.n	80052a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f2      	bne.n	8005288 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052a2:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ae:	d112      	bne.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e011      	b.n	80052d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052b4:	4b0b      	ldr	r3, [pc, #44]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ba:	4a0a      	ldr	r2, [pc, #40]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052c4:	e007      	b.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052c6:	4b07      	ldr	r3, [pc, #28]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052ce:	4a05      	ldr	r2, [pc, #20]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40007000 	.word	0x40007000
 80052e8:	2000023c 	.word	0x2000023c
 80052ec:	431bde83 	.word	0x431bde83

080052f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4a04      	ldr	r2, [pc, #16]	@ (800530c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052fe:	6093      	str	r3, [r2, #8]
}
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40007000 	.word	0x40007000

08005310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e2fe      	b.n	8005920 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d075      	beq.n	800541a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800532e:	4b97      	ldr	r3, [pc, #604]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005338:	4b94      	ldr	r3, [pc, #592]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b0c      	cmp	r3, #12
 8005346:	d102      	bne.n	800534e <HAL_RCC_OscConfig+0x3e>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b03      	cmp	r3, #3
 800534c:	d002      	beq.n	8005354 <HAL_RCC_OscConfig+0x44>
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d10b      	bne.n	800536c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005354:	4b8d      	ldr	r3, [pc, #564]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d05b      	beq.n	8005418 <HAL_RCC_OscConfig+0x108>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d157      	bne.n	8005418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e2d9      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005374:	d106      	bne.n	8005384 <HAL_RCC_OscConfig+0x74>
 8005376:	4b85      	ldr	r3, [pc, #532]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a84      	ldr	r2, [pc, #528]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 800537c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	e01d      	b.n	80053c0 <HAL_RCC_OscConfig+0xb0>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800538c:	d10c      	bne.n	80053a8 <HAL_RCC_OscConfig+0x98>
 800538e:	4b7f      	ldr	r3, [pc, #508]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a7e      	ldr	r2, [pc, #504]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	4b7c      	ldr	r3, [pc, #496]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7b      	ldr	r2, [pc, #492]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80053a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e00b      	b.n	80053c0 <HAL_RCC_OscConfig+0xb0>
 80053a8:	4b78      	ldr	r3, [pc, #480]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a77      	ldr	r2, [pc, #476]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80053ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	4b75      	ldr	r3, [pc, #468]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a74      	ldr	r2, [pc, #464]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80053ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d013      	beq.n	80053f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fd fa48 	bl	800285c <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d0:	f7fd fa44 	bl	800285c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b64      	cmp	r3, #100	@ 0x64
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e29e      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e2:	4b6a      	ldr	r3, [pc, #424]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0xc0>
 80053ee:	e014      	b.n	800541a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fd fa34 	bl	800285c <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f8:	f7fd fa30 	bl	800285c <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b64      	cmp	r3, #100	@ 0x64
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e28a      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800540a:	4b60      	ldr	r3, [pc, #384]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0xe8>
 8005416:	e000      	b.n	800541a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d075      	beq.n	8005512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005426:	4b59      	ldr	r3, [pc, #356]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005430:	4b56      	ldr	r3, [pc, #344]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0303 	and.w	r3, r3, #3
 8005438:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b0c      	cmp	r3, #12
 800543e:	d102      	bne.n	8005446 <HAL_RCC_OscConfig+0x136>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d002      	beq.n	800544c <HAL_RCC_OscConfig+0x13c>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b04      	cmp	r3, #4
 800544a:	d11f      	bne.n	800548c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800544c:	4b4f      	ldr	r3, [pc, #316]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_RCC_OscConfig+0x154>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e25d      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4b49      	ldr	r3, [pc, #292]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	061b      	lsls	r3, r3, #24
 8005472:	4946      	ldr	r1, [pc, #280]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005478:	4b45      	ldr	r3, [pc, #276]	@ (8005590 <HAL_RCC_OscConfig+0x280>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7fc ffbf 	bl	8002400 <HAL_InitTick>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d043      	beq.n	8005510 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e249      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d023      	beq.n	80054dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005494:	4b3d      	ldr	r3, [pc, #244]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a3c      	ldr	r2, [pc, #240]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 800549a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800549e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fd f9dc 	bl	800285c <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a8:	f7fd f9d8 	bl	800285c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e232      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054ba:	4b34      	ldr	r3, [pc, #208]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c6:	4b31      	ldr	r3, [pc, #196]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	492d      	ldr	r1, [pc, #180]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	604b      	str	r3, [r1, #4]
 80054da:	e01a      	b.n	8005512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054dc:	4b2b      	ldr	r3, [pc, #172]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2a      	ldr	r2, [pc, #168]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 80054e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fd f9b8 	bl	800285c <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f0:	f7fd f9b4 	bl	800285c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e20e      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005502:	4b22      	ldr	r3, [pc, #136]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x1e0>
 800550e:	e000      	b.n	8005512 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005510:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d041      	beq.n	80055a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01c      	beq.n	8005560 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005526:	4b19      	ldr	r3, [pc, #100]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552c:	4a17      	ldr	r2, [pc, #92]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005536:	f7fd f991 	bl	800285c <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800553e:	f7fd f98d 	bl	800285c <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e1e7      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005550:	4b0e      	ldr	r3, [pc, #56]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0ef      	beq.n	800553e <HAL_RCC_OscConfig+0x22e>
 800555e:	e020      	b.n	80055a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005560:	4b0a      	ldr	r3, [pc, #40]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005566:	4a09      	ldr	r2, [pc, #36]	@ (800558c <HAL_RCC_OscConfig+0x27c>)
 8005568:	f023 0301 	bic.w	r3, r3, #1
 800556c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fd f974 	bl	800285c <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005576:	e00d      	b.n	8005594 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005578:	f7fd f970 	bl	800285c <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d906      	bls.n	8005594 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e1ca      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
 800558a:	bf00      	nop
 800558c:	40021000 	.word	0x40021000
 8005590:	20000240 	.word	0x20000240
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005594:	4b8c      	ldr	r3, [pc, #560]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 8005596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1ea      	bne.n	8005578 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80a6 	beq.w	80056fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b0:	2300      	movs	r3, #0
 80055b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055b4:	4b84      	ldr	r3, [pc, #528]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 80055b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_RCC_OscConfig+0x2b4>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_RCC_OscConfig+0x2b6>
 80055c4:	2300      	movs	r3, #0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00d      	beq.n	80055e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ca:	4b7f      	ldr	r3, [pc, #508]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 80055cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ce:	4a7e      	ldr	r2, [pc, #504]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 80055d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055d6:	4b7c      	ldr	r3, [pc, #496]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 80055d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055e2:	2301      	movs	r3, #1
 80055e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e6:	4b79      	ldr	r3, [pc, #484]	@ (80057cc <HAL_RCC_OscConfig+0x4bc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d118      	bne.n	8005624 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055f2:	4b76      	ldr	r3, [pc, #472]	@ (80057cc <HAL_RCC_OscConfig+0x4bc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a75      	ldr	r2, [pc, #468]	@ (80057cc <HAL_RCC_OscConfig+0x4bc>)
 80055f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fe:	f7fd f92d 	bl	800285c <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005606:	f7fd f929 	bl	800285c <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e183      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005618:	4b6c      	ldr	r3, [pc, #432]	@ (80057cc <HAL_RCC_OscConfig+0x4bc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d108      	bne.n	800563e <HAL_RCC_OscConfig+0x32e>
 800562c:	4b66      	ldr	r3, [pc, #408]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005632:	4a65      	ldr	r2, [pc, #404]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800563c:	e024      	b.n	8005688 <HAL_RCC_OscConfig+0x378>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b05      	cmp	r3, #5
 8005644:	d110      	bne.n	8005668 <HAL_RCC_OscConfig+0x358>
 8005646:	4b60      	ldr	r3, [pc, #384]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564c:	4a5e      	ldr	r2, [pc, #376]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 800564e:	f043 0304 	orr.w	r3, r3, #4
 8005652:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005656:	4b5c      	ldr	r3, [pc, #368]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565c:	4a5a      	ldr	r2, [pc, #360]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005666:	e00f      	b.n	8005688 <HAL_RCC_OscConfig+0x378>
 8005668:	4b57      	ldr	r3, [pc, #348]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800566e:	4a56      	ldr	r2, [pc, #344]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005678:	4b53      	ldr	r3, [pc, #332]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567e:	4a52      	ldr	r2, [pc, #328]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 8005680:	f023 0304 	bic.w	r3, r3, #4
 8005684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d016      	beq.n	80056be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005690:	f7fd f8e4 	bl	800285c <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005696:	e00a      	b.n	80056ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005698:	f7fd f8e0 	bl	800285c <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e138      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ae:	4b46      	ldr	r3, [pc, #280]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0ed      	beq.n	8005698 <HAL_RCC_OscConfig+0x388>
 80056bc:	e015      	b.n	80056ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056be:	f7fd f8cd 	bl	800285c <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056c4:	e00a      	b.n	80056dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7fd f8c9 	bl	800285c <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e121      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056dc:	4b3a      	ldr	r3, [pc, #232]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1ed      	bne.n	80056c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056ea:	7ffb      	ldrb	r3, [r7, #31]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d105      	bne.n	80056fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f0:	4b35      	ldr	r3, [pc, #212]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 80056f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f4:	4a34      	ldr	r2, [pc, #208]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 80056f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d03c      	beq.n	8005782 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01c      	beq.n	800574a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005710:	4b2d      	ldr	r3, [pc, #180]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 8005712:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005716:	4a2c      	ldr	r2, [pc, #176]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005720:	f7fd f89c 	bl	800285c <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005728:	f7fd f898 	bl	800285c <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0f2      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800573a:	4b23      	ldr	r3, [pc, #140]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 800573c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0ef      	beq.n	8005728 <HAL_RCC_OscConfig+0x418>
 8005748:	e01b      	b.n	8005782 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800574a:	4b1f      	ldr	r3, [pc, #124]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 800574c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005750:	4a1d      	ldr	r2, [pc, #116]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575a:	f7fd f87f 	bl	800285c <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005762:	f7fd f87b 	bl	800285c <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e0d5      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005774:	4b14      	ldr	r3, [pc, #80]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 8005776:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1ef      	bne.n	8005762 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 80c9 	beq.w	800591e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800578c:	4b0e      	ldr	r3, [pc, #56]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	2b0c      	cmp	r3, #12
 8005796:	f000 8083 	beq.w	80058a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d15e      	bne.n	8005860 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a2:	4b09      	ldr	r3, [pc, #36]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a08      	ldr	r2, [pc, #32]	@ (80057c8 <HAL_RCC_OscConfig+0x4b8>)
 80057a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ae:	f7fd f855 	bl	800285c <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b4:	e00c      	b.n	80057d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b6:	f7fd f851 	bl	800285c <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d905      	bls.n	80057d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e0ab      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057d0:	4b55      	ldr	r3, [pc, #340]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1ec      	bne.n	80057b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057dc:	4b52      	ldr	r3, [pc, #328]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	4b52      	ldr	r3, [pc, #328]	@ (800592c <HAL_RCC_OscConfig+0x61c>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6a11      	ldr	r1, [r2, #32]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057ec:	3a01      	subs	r2, #1
 80057ee:	0112      	lsls	r2, r2, #4
 80057f0:	4311      	orrs	r1, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80057f6:	0212      	lsls	r2, r2, #8
 80057f8:	4311      	orrs	r1, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057fe:	0852      	lsrs	r2, r2, #1
 8005800:	3a01      	subs	r2, #1
 8005802:	0552      	lsls	r2, r2, #21
 8005804:	4311      	orrs	r1, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800580a:	0852      	lsrs	r2, r2, #1
 800580c:	3a01      	subs	r2, #1
 800580e:	0652      	lsls	r2, r2, #25
 8005810:	4311      	orrs	r1, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005816:	06d2      	lsls	r2, r2, #27
 8005818:	430a      	orrs	r2, r1
 800581a:	4943      	ldr	r1, [pc, #268]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 800581c:	4313      	orrs	r3, r2
 800581e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005820:	4b41      	ldr	r3, [pc, #260]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a40      	ldr	r2, [pc, #256]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 8005826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800582a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800582c:	4b3e      	ldr	r3, [pc, #248]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a3d      	ldr	r2, [pc, #244]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 8005832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005836:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd f810 	bl	800285c <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005840:	f7fd f80c 	bl	800285c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e066      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005852:	4b35      	ldr	r3, [pc, #212]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x530>
 800585e:	e05e      	b.n	800591e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005860:	4b31      	ldr	r3, [pc, #196]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a30      	ldr	r2, [pc, #192]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 8005866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800586a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fc fff6 	bl	800285c <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005874:	f7fc fff2 	bl	800285c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e04c      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005886:	4b28      	ldr	r3, [pc, #160]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f0      	bne.n	8005874 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005892:	4b25      	ldr	r3, [pc, #148]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	4924      	ldr	r1, [pc, #144]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 8005898:	4b25      	ldr	r3, [pc, #148]	@ (8005930 <HAL_RCC_OscConfig+0x620>)
 800589a:	4013      	ands	r3, r2
 800589c:	60cb      	str	r3, [r1, #12]
 800589e:	e03e      	b.n	800591e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e039      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80058ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005928 <HAL_RCC_OscConfig+0x618>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f003 0203 	and.w	r2, r3, #3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d12c      	bne.n	800591a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	3b01      	subs	r3, #1
 80058cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d123      	bne.n	800591a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058de:	429a      	cmp	r2, r3
 80058e0:	d11b      	bne.n	800591a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d113      	bne.n	800591a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	3b01      	subs	r3, #1
 8005900:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d109      	bne.n	800591a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	3b01      	subs	r3, #1
 8005914:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d001      	beq.n	800591e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	019f800c 	.word	0x019f800c
 8005930:	feeefffc 	.word	0xfeeefffc

08005934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e11e      	b.n	8005b8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800594c:	4b91      	ldr	r3, [pc, #580]	@ (8005b94 <HAL_RCC_ClockConfig+0x260>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d910      	bls.n	800597c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595a:	4b8e      	ldr	r3, [pc, #568]	@ (8005b94 <HAL_RCC_ClockConfig+0x260>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 020f 	bic.w	r2, r3, #15
 8005962:	498c      	ldr	r1, [pc, #560]	@ (8005b94 <HAL_RCC_ClockConfig+0x260>)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	4313      	orrs	r3, r2
 8005968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800596a:	4b8a      	ldr	r3, [pc, #552]	@ (8005b94 <HAL_RCC_ClockConfig+0x260>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e106      	b.n	8005b8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d073      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b03      	cmp	r3, #3
 800598e:	d129      	bne.n	80059e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005990:	4b81      	ldr	r3, [pc, #516]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0f4      	b.n	8005b8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80059a0:	f000 f9d0 	bl	8005d44 <RCC_GetSysClockFreqFromPLLSource>
 80059a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4a7c      	ldr	r2, [pc, #496]	@ (8005b9c <HAL_RCC_ClockConfig+0x268>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d93f      	bls.n	8005a2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059ae:	4b7a      	ldr	r3, [pc, #488]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d033      	beq.n	8005a2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d12f      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059ce:	4b72      	ldr	r3, [pc, #456]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059d6:	4a70      	ldr	r2, [pc, #448]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 80059d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059de:	2380      	movs	r3, #128	@ 0x80
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	e024      	b.n	8005a2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d107      	bne.n	80059fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d109      	bne.n	8005a0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0c6      	b.n	8005b8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059fc:	4b66      	ldr	r3, [pc, #408]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e0be      	b.n	8005b8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a0c:	f000 f8ce 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4a61      	ldr	r2, [pc, #388]	@ (8005b9c <HAL_RCC_ClockConfig+0x268>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d909      	bls.n	8005a2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a22:	4a5d      	ldr	r2, [pc, #372]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a2a:	2380      	movs	r3, #128	@ 0x80
 8005a2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f023 0203 	bic.w	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4957      	ldr	r1, [pc, #348]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a40:	f7fc ff0c 	bl	800285c <HAL_GetTick>
 8005a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a46:	e00a      	b.n	8005a5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a48:	f7fc ff08 	bl	800285c <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e095      	b.n	8005b8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 020c 	and.w	r2, r3, #12
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d1eb      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d023      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a88:	4b43      	ldr	r3, [pc, #268]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	4a42      	ldr	r2, [pc, #264]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005a8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005aaa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005aae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab0:	4b39      	ldr	r3, [pc, #228]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	4936      	ldr	r1, [pc, #216]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2b80      	cmp	r3, #128	@ 0x80
 8005ac8:	d105      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005aca:	4b33      	ldr	r3, [pc, #204]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	4a32      	ldr	r2, [pc, #200]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005ad0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ad4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8005b94 <HAL_RCC_ClockConfig+0x260>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d21d      	bcs.n	8005b20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b94 <HAL_RCC_ClockConfig+0x260>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f023 020f 	bic.w	r2, r3, #15
 8005aec:	4929      	ldr	r1, [pc, #164]	@ (8005b94 <HAL_RCC_ClockConfig+0x260>)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005af4:	f7fc feb2 	bl	800285c <HAL_GetTick>
 8005af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afa:	e00a      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005afc:	f7fc feae 	bl	800285c <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e03b      	b.n	8005b8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b20      	ldr	r3, [pc, #128]	@ (8005b94 <HAL_RCC_ClockConfig+0x260>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d1ed      	bne.n	8005afc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	4917      	ldr	r1, [pc, #92]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b4a:	4b13      	ldr	r3, [pc, #76]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	490f      	ldr	r1, [pc, #60]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b5e:	f000 f825 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8005b62:	4602      	mov	r2, r0
 8005b64:	4b0c      	ldr	r3, [pc, #48]	@ (8005b98 <HAL_RCC_ClockConfig+0x264>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	490c      	ldr	r1, [pc, #48]	@ (8005ba0 <HAL_RCC_ClockConfig+0x26c>)
 8005b70:	5ccb      	ldrb	r3, [r1, r3]
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba4 <HAL_RCC_ClockConfig+0x270>)
 8005b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <HAL_RCC_ClockConfig+0x274>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fc fc3c 	bl	8002400 <HAL_InitTick>
 8005b88:	4603      	mov	r3, r0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40022000 	.word	0x40022000
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	04c4b400 	.word	0x04c4b400
 8005ba0:	0800ebc4 	.word	0x0800ebc4
 8005ba4:	2000023c 	.word	0x2000023c
 8005ba8:	20000240 	.word	0x20000240

08005bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d102      	bne.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	e047      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005bc4:	4b27      	ldr	r3, [pc, #156]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 030c 	and.w	r3, r3, #12
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d102      	bne.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bd0:	4b26      	ldr	r3, [pc, #152]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	e03e      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005bd6:	4b23      	ldr	r3, [pc, #140]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b0c      	cmp	r3, #12
 8005be0:	d136      	bne.n	8005c50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005be2:	4b20      	ldr	r3, [pc, #128]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bec:	4b1d      	ldr	r3, [pc, #116]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d10c      	bne.n	8005c1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c00:	4a1a      	ldr	r2, [pc, #104]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c08:	4a16      	ldr	r2, [pc, #88]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c0a:	68d2      	ldr	r2, [r2, #12]
 8005c0c:	0a12      	lsrs	r2, r2, #8
 8005c0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	617b      	str	r3, [r7, #20]
      break;
 8005c18:	e00c      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c1a:	4a13      	ldr	r2, [pc, #76]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c22:	4a10      	ldr	r2, [pc, #64]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c24:	68d2      	ldr	r2, [r2, #12]
 8005c26:	0a12      	lsrs	r2, r2, #8
 8005c28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c2c:	fb02 f303 	mul.w	r3, r2, r3
 8005c30:	617b      	str	r3, [r7, #20]
      break;
 8005c32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c34:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	0e5b      	lsrs	r3, r3, #25
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	3301      	adds	r3, #1
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	e001      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c54:	693b      	ldr	r3, [r7, #16]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000
 8005c68:	00f42400 	.word	0x00f42400
 8005c6c:	016e3600 	.word	0x016e3600

08005c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c74:	4b03      	ldr	r3, [pc, #12]	@ (8005c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	2000023c 	.word	0x2000023c

08005c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c8c:	f7ff fff0 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4904      	ldr	r1, [pc, #16]	@ (8005cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	0800ebd4 	.word	0x0800ebd4

08005cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005cb8:	f7ff ffda 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	4b06      	ldr	r3, [pc, #24]	@ (8005cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	0adb      	lsrs	r3, r3, #11
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	4904      	ldr	r1, [pc, #16]	@ (8005cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cca:	5ccb      	ldrb	r3, [r1, r3]
 8005ccc:	f003 031f 	and.w	r3, r3, #31
 8005cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	0800ebd4 	.word	0x0800ebd4

08005ce0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	220f      	movs	r2, #15
 8005cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005cf0:	4b12      	ldr	r3, [pc, #72]	@ (8005d3c <HAL_RCC_GetClockConfig+0x5c>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0203 	and.w	r2, r3, #3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d3c <HAL_RCC_GetClockConfig+0x5c>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005d08:	4b0c      	ldr	r3, [pc, #48]	@ (8005d3c <HAL_RCC_GetClockConfig+0x5c>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005d14:	4b09      	ldr	r3, [pc, #36]	@ (8005d3c <HAL_RCC_GetClockConfig+0x5c>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	08db      	lsrs	r3, r3, #3
 8005d1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005d22:	4b07      	ldr	r3, [pc, #28]	@ (8005d40 <HAL_RCC_GetClockConfig+0x60>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 020f 	and.w	r2, r3, #15
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	601a      	str	r2, [r3, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	40022000 	.word	0x40022000

08005d44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d54:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	091b      	lsrs	r3, r3, #4
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d10c      	bne.n	8005d82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d68:	4a17      	ldr	r2, [pc, #92]	@ (8005dc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	4a14      	ldr	r2, [pc, #80]	@ (8005dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d72:	68d2      	ldr	r2, [r2, #12]
 8005d74:	0a12      	lsrs	r2, r2, #8
 8005d76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	617b      	str	r3, [r7, #20]
    break;
 8005d80:	e00c      	b.n	8005d9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d82:	4a12      	ldr	r2, [pc, #72]	@ (8005dcc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8005dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d8c:	68d2      	ldr	r2, [r2, #12]
 8005d8e:	0a12      	lsrs	r2, r2, #8
 8005d90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d94:	fb02 f303 	mul.w	r3, r2, r3
 8005d98:	617b      	str	r3, [r7, #20]
    break;
 8005d9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d9c:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	0e5b      	lsrs	r3, r3, #25
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	3301      	adds	r3, #1
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005db6:	687b      	ldr	r3, [r7, #4]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	016e3600 	.word	0x016e3600
 8005dcc:	00f42400 	.word	0x00f42400

08005dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dd8:	2300      	movs	r3, #0
 8005dda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ddc:	2300      	movs	r3, #0
 8005dde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8098 	beq.w	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dee:	2300      	movs	r3, #0
 8005df0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005df2:	4b43      	ldr	r3, [pc, #268]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10d      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dfe:	4b40      	ldr	r3, [pc, #256]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e02:	4a3f      	ldr	r2, [pc, #252]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e12:	60bb      	str	r3, [r7, #8]
 8005e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e16:	2301      	movs	r3, #1
 8005e18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a39      	ldr	r2, [pc, #228]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e26:	f7fc fd19 	bl	800285c <HAL_GetTick>
 8005e2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e2c:	e009      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2e:	f7fc fd15 	bl	800285c <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d902      	bls.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	74fb      	strb	r3, [r7, #19]
        break;
 8005e40:	e005      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e42:	4b30      	ldr	r3, [pc, #192]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0ef      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e4e:	7cfb      	ldrb	r3, [r7, #19]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d159      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e54:	4b2a      	ldr	r3, [pc, #168]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01e      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d019      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e70:	4b23      	ldr	r3, [pc, #140]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e7c:	4b20      	ldr	r3, [pc, #128]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e82:	4a1f      	ldr	r2, [pc, #124]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e92:	4a1b      	ldr	r2, [pc, #108]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e9c:	4a18      	ldr	r2, [pc, #96]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d016      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eae:	f7fc fcd5 	bl	800285c <HAL_GetTick>
 8005eb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eb4:	e00b      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb6:	f7fc fcd1 	bl	800285c <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d902      	bls.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	74fb      	strb	r3, [r7, #19]
            break;
 8005ecc:	e006      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ece:	4b0c      	ldr	r3, [pc, #48]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0ec      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005edc:	7cfb      	ldrb	r3, [r7, #19]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ee2:	4b07      	ldr	r3, [pc, #28]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	4903      	ldr	r1, [pc, #12]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ef8:	e008      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005efa:	7cfb      	ldrb	r3, [r7, #19]
 8005efc:	74bb      	strb	r3, [r7, #18]
 8005efe:	e005      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f00:	40021000 	.word	0x40021000
 8005f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f08:	7cfb      	ldrb	r3, [r7, #19]
 8005f0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f0c:	7c7b      	ldrb	r3, [r7, #17]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d105      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f12:	4ba7      	ldr	r3, [pc, #668]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f16:	4aa6      	ldr	r2, [pc, #664]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f2a:	4ba1      	ldr	r3, [pc, #644]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f30:	f023 0203 	bic.w	r2, r3, #3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	499d      	ldr	r1, [pc, #628]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f4c:	4b98      	ldr	r3, [pc, #608]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f52:	f023 020c 	bic.w	r2, r3, #12
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	4995      	ldr	r1, [pc, #596]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f6e:	4b90      	ldr	r3, [pc, #576]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	498c      	ldr	r1, [pc, #560]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f90:	4b87      	ldr	r3, [pc, #540]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	4984      	ldr	r1, [pc, #528]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	497b      	ldr	r1, [pc, #492]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0320 	and.w	r3, r3, #32
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fd4:	4b76      	ldr	r3, [pc, #472]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	4973      	ldr	r1, [pc, #460]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ff6:	4b6e      	ldr	r3, [pc, #440]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ffc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	496a      	ldr	r1, [pc, #424]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006018:	4b65      	ldr	r3, [pc, #404]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	4962      	ldr	r1, [pc, #392]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800603a:	4b5d      	ldr	r3, [pc, #372]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006040:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	4959      	ldr	r1, [pc, #356]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800605c:	4b54      	ldr	r3, [pc, #336]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006062:	f023 0203 	bic.w	r2, r3, #3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606a:	4951      	ldr	r1, [pc, #324]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800607e:	4b4c      	ldr	r3, [pc, #304]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006084:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608c:	4948      	ldr	r1, [pc, #288]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800609c:	2b00      	cmp	r3, #0
 800609e:	d015      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060a0:	4b43      	ldr	r3, [pc, #268]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ae:	4940      	ldr	r1, [pc, #256]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060be:	d105      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060c0:	4b3b      	ldr	r3, [pc, #236]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4a3a      	ldr	r2, [pc, #232]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060ca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d015      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060d8:	4b35      	ldr	r3, [pc, #212]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e6:	4932      	ldr	r1, [pc, #200]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060f6:	d105      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f8:	4b2d      	ldr	r3, [pc, #180]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	4a2c      	ldr	r2, [pc, #176]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006102:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d015      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006110:	4b27      	ldr	r3, [pc, #156]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006116:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611e:	4924      	ldr	r1, [pc, #144]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800612e:	d105      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006130:	4b1f      	ldr	r3, [pc, #124]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4a1e      	ldr	r2, [pc, #120]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800613a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d015      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006148:	4b19      	ldr	r3, [pc, #100]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006156:	4916      	ldr	r1, [pc, #88]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006166:	d105      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006168:	4b11      	ldr	r3, [pc, #68]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a10      	ldr	r2, [pc, #64]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006172:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d019      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006180:	4b0b      	ldr	r3, [pc, #44]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006186:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618e:	4908      	ldr	r1, [pc, #32]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800619e:	d109      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061a0:	4b03      	ldr	r3, [pc, #12]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4a02      	ldr	r2, [pc, #8]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061aa:	60d3      	str	r3, [r2, #12]
 80061ac:	e002      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80061ae:	bf00      	nop
 80061b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d015      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80061c0:	4b29      	ldr	r3, [pc, #164]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ce:	4926      	ldr	r1, [pc, #152]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061de:	d105      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061e0:	4b21      	ldr	r3, [pc, #132]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4a20      	ldr	r2, [pc, #128]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d015      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80061f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006206:	4918      	ldr	r1, [pc, #96]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006216:	d105      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006218:	4b13      	ldr	r3, [pc, #76]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4a12      	ldr	r2, [pc, #72]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800621e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006222:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006230:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006232:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006236:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800623e:	490a      	ldr	r1, [pc, #40]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800624e:	d105      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006250:	4b05      	ldr	r3, [pc, #20]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4a04      	ldr	r2, [pc, #16]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800625a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800625c:	7cbb      	ldrb	r3, [r7, #18]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40021000 	.word	0x40021000

0800626c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e049      	b.n	8006312 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fb fee6 	bl	8002064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4619      	mov	r1, r3
 80062aa:	4610      	mov	r0, r2
 80062ac:	f000 fe60 	bl	8006f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d001      	beq.n	8006334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e054      	b.n	80063de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a26      	ldr	r2, [pc, #152]	@ (80063ec <HAL_TIM_Base_Start_IT+0xd0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d022      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635e:	d01d      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a22      	ldr	r2, [pc, #136]	@ (80063f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d018      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	@ (80063f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d013      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1f      	ldr	r2, [pc, #124]	@ (80063f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00e      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1e      	ldr	r2, [pc, #120]	@ (80063fc <HAL_TIM_Base_Start_IT+0xe0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d009      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1c      	ldr	r2, [pc, #112]	@ (8006400 <HAL_TIM_Base_Start_IT+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1b      	ldr	r2, [pc, #108]	@ (8006404 <HAL_TIM_Base_Start_IT+0xe8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d115      	bne.n	80063c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	4b19      	ldr	r3, [pc, #100]	@ (8006408 <HAL_TIM_Base_Start_IT+0xec>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b06      	cmp	r3, #6
 80063ac:	d015      	beq.n	80063da <HAL_TIM_Base_Start_IT+0xbe>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b4:	d011      	beq.n	80063da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c6:	e008      	b.n	80063da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	e000      	b.n	80063dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40012c00 	.word	0x40012c00
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40013400 	.word	0x40013400
 8006400:	40014000 	.word	0x40014000
 8006404:	40015000 	.word	0x40015000
 8006408:	00010007 	.word	0x00010007

0800640c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e049      	b.n	80064b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f841 	bl	80064ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f000 fd90 	bl	8006f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d109      	bne.n	80064f4 <HAL_TIM_PWM_Start+0x24>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	bf14      	ite	ne
 80064ec:	2301      	movne	r3, #1
 80064ee:	2300      	moveq	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	e03c      	b.n	800656e <HAL_TIM_PWM_Start+0x9e>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d109      	bne.n	800650e <HAL_TIM_PWM_Start+0x3e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b01      	cmp	r3, #1
 8006504:	bf14      	ite	ne
 8006506:	2301      	movne	r3, #1
 8006508:	2300      	moveq	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	e02f      	b.n	800656e <HAL_TIM_PWM_Start+0x9e>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d109      	bne.n	8006528 <HAL_TIM_PWM_Start+0x58>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	bf14      	ite	ne
 8006520:	2301      	movne	r3, #1
 8006522:	2300      	moveq	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	e022      	b.n	800656e <HAL_TIM_PWM_Start+0x9e>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b0c      	cmp	r3, #12
 800652c:	d109      	bne.n	8006542 <HAL_TIM_PWM_Start+0x72>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b01      	cmp	r3, #1
 8006538:	bf14      	ite	ne
 800653a:	2301      	movne	r3, #1
 800653c:	2300      	moveq	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	e015      	b.n	800656e <HAL_TIM_PWM_Start+0x9e>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b10      	cmp	r3, #16
 8006546:	d109      	bne.n	800655c <HAL_TIM_PWM_Start+0x8c>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	e008      	b.n	800656e <HAL_TIM_PWM_Start+0x9e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	bf14      	ite	ne
 8006568:	2301      	movne	r3, #1
 800656a:	2300      	moveq	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e0a6      	b.n	80066c4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <HAL_TIM_PWM_Start+0xb6>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006584:	e023      	b.n	80065ce <HAL_TIM_PWM_Start+0xfe>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b04      	cmp	r3, #4
 800658a:	d104      	bne.n	8006596 <HAL_TIM_PWM_Start+0xc6>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006594:	e01b      	b.n	80065ce <HAL_TIM_PWM_Start+0xfe>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d104      	bne.n	80065a6 <HAL_TIM_PWM_Start+0xd6>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065a4:	e013      	b.n	80065ce <HAL_TIM_PWM_Start+0xfe>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b0c      	cmp	r3, #12
 80065aa:	d104      	bne.n	80065b6 <HAL_TIM_PWM_Start+0xe6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065b4:	e00b      	b.n	80065ce <HAL_TIM_PWM_Start+0xfe>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b10      	cmp	r3, #16
 80065ba:	d104      	bne.n	80065c6 <HAL_TIM_PWM_Start+0xf6>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065c4:	e003      	b.n	80065ce <HAL_TIM_PWM_Start+0xfe>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2202      	movs	r2, #2
 80065ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2201      	movs	r2, #1
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f001 f9b8 	bl	800794c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a3a      	ldr	r2, [pc, #232]	@ (80066cc <HAL_TIM_PWM_Start+0x1fc>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d018      	beq.n	8006618 <HAL_TIM_PWM_Start+0x148>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a39      	ldr	r2, [pc, #228]	@ (80066d0 <HAL_TIM_PWM_Start+0x200>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d013      	beq.n	8006618 <HAL_TIM_PWM_Start+0x148>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a37      	ldr	r2, [pc, #220]	@ (80066d4 <HAL_TIM_PWM_Start+0x204>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00e      	beq.n	8006618 <HAL_TIM_PWM_Start+0x148>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a36      	ldr	r2, [pc, #216]	@ (80066d8 <HAL_TIM_PWM_Start+0x208>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d009      	beq.n	8006618 <HAL_TIM_PWM_Start+0x148>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a34      	ldr	r2, [pc, #208]	@ (80066dc <HAL_TIM_PWM_Start+0x20c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <HAL_TIM_PWM_Start+0x148>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a33      	ldr	r2, [pc, #204]	@ (80066e0 <HAL_TIM_PWM_Start+0x210>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d101      	bne.n	800661c <HAL_TIM_PWM_Start+0x14c>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <HAL_TIM_PWM_Start+0x14e>
 800661c:	2300      	movs	r3, #0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d007      	beq.n	8006632 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006630:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a25      	ldr	r2, [pc, #148]	@ (80066cc <HAL_TIM_PWM_Start+0x1fc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d022      	beq.n	8006682 <HAL_TIM_PWM_Start+0x1b2>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006644:	d01d      	beq.n	8006682 <HAL_TIM_PWM_Start+0x1b2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a26      	ldr	r2, [pc, #152]	@ (80066e4 <HAL_TIM_PWM_Start+0x214>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d018      	beq.n	8006682 <HAL_TIM_PWM_Start+0x1b2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a24      	ldr	r2, [pc, #144]	@ (80066e8 <HAL_TIM_PWM_Start+0x218>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d013      	beq.n	8006682 <HAL_TIM_PWM_Start+0x1b2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a23      	ldr	r2, [pc, #140]	@ (80066ec <HAL_TIM_PWM_Start+0x21c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00e      	beq.n	8006682 <HAL_TIM_PWM_Start+0x1b2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a19      	ldr	r2, [pc, #100]	@ (80066d0 <HAL_TIM_PWM_Start+0x200>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d009      	beq.n	8006682 <HAL_TIM_PWM_Start+0x1b2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a18      	ldr	r2, [pc, #96]	@ (80066d4 <HAL_TIM_PWM_Start+0x204>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d004      	beq.n	8006682 <HAL_TIM_PWM_Start+0x1b2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a18      	ldr	r2, [pc, #96]	@ (80066e0 <HAL_TIM_PWM_Start+0x210>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d115      	bne.n	80066ae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	4b19      	ldr	r3, [pc, #100]	@ (80066f0 <HAL_TIM_PWM_Start+0x220>)
 800668a:	4013      	ands	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b06      	cmp	r3, #6
 8006692:	d015      	beq.n	80066c0 <HAL_TIM_PWM_Start+0x1f0>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800669a:	d011      	beq.n	80066c0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ac:	e008      	b.n	80066c0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e000      	b.n	80066c2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40012c00 	.word	0x40012c00
 80066d0:	40013400 	.word	0x40013400
 80066d4:	40014000 	.word	0x40014000
 80066d8:	40014400 	.word	0x40014400
 80066dc:	40014800 	.word	0x40014800
 80066e0:	40015000 	.word	0x40015000
 80066e4:	40000400 	.word	0x40000400
 80066e8:	40000800 	.word	0x40000800
 80066ec:	40000c00 	.word	0x40000c00
 80066f0:	00010007 	.word	0x00010007

080066f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f001 f920 	bl	800794c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a40      	ldr	r2, [pc, #256]	@ (8006814 <HAL_TIM_PWM_Stop+0x120>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d018      	beq.n	8006748 <HAL_TIM_PWM_Stop+0x54>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a3f      	ldr	r2, [pc, #252]	@ (8006818 <HAL_TIM_PWM_Stop+0x124>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <HAL_TIM_PWM_Stop+0x54>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a3d      	ldr	r2, [pc, #244]	@ (800681c <HAL_TIM_PWM_Stop+0x128>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_TIM_PWM_Stop+0x54>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a3c      	ldr	r2, [pc, #240]	@ (8006820 <HAL_TIM_PWM_Stop+0x12c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d009      	beq.n	8006748 <HAL_TIM_PWM_Stop+0x54>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a3a      	ldr	r2, [pc, #232]	@ (8006824 <HAL_TIM_PWM_Stop+0x130>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_TIM_PWM_Stop+0x54>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a39      	ldr	r2, [pc, #228]	@ (8006828 <HAL_TIM_PWM_Stop+0x134>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d101      	bne.n	800674c <HAL_TIM_PWM_Stop+0x58>
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_TIM_PWM_Stop+0x5a>
 800674c:	2300      	movs	r3, #0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d017      	beq.n	8006782 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a1a      	ldr	r2, [r3, #32]
 8006758:	f241 1311 	movw	r3, #4369	@ 0x1111
 800675c:	4013      	ands	r3, r2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10f      	bne.n	8006782 <HAL_TIM_PWM_Stop+0x8e>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6a1a      	ldr	r2, [r3, #32]
 8006768:	f244 4344 	movw	r3, #17476	@ 0x4444
 800676c:	4013      	ands	r3, r2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d107      	bne.n	8006782 <HAL_TIM_PWM_Stop+0x8e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006780:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6a1a      	ldr	r2, [r3, #32]
 8006788:	f241 1311 	movw	r3, #4369	@ 0x1111
 800678c:	4013      	ands	r3, r2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10f      	bne.n	80067b2 <HAL_TIM_PWM_Stop+0xbe>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6a1a      	ldr	r2, [r3, #32]
 8006798:	f244 4344 	movw	r3, #17476	@ 0x4444
 800679c:	4013      	ands	r3, r2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d107      	bne.n	80067b2 <HAL_TIM_PWM_Stop+0xbe>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_PWM_Stop+0xce>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067c0:	e023      	b.n	800680a <HAL_TIM_PWM_Stop+0x116>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_PWM_Stop+0xde>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067d0:	e01b      	b.n	800680a <HAL_TIM_PWM_Stop+0x116>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_PWM_Stop+0xee>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067e0:	e013      	b.n	800680a <HAL_TIM_PWM_Stop+0x116>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b0c      	cmp	r3, #12
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_PWM_Stop+0xfe>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067f0:	e00b      	b.n	800680a <HAL_TIM_PWM_Stop+0x116>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b10      	cmp	r3, #16
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_PWM_Stop+0x10e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006800:	e003      	b.n	800680a <HAL_TIM_PWM_Stop+0x116>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40013400 	.word	0x40013400
 800681c:	40014000 	.word	0x40014000
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800
 8006828:	40015000 	.word	0x40015000

0800682c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d020      	beq.n	8006890 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01b      	beq.n	8006890 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f06f 0202 	mvn.w	r2, #2
 8006860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fb5c 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 800687c:	e005      	b.n	800688a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fb4e 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fb5f 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	d020      	beq.n	80068dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d01b      	beq.n	80068dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0204 	mvn.w	r2, #4
 80068ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2202      	movs	r2, #2
 80068b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fb36 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 80068c8:	e005      	b.n	80068d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fb28 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fb39 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d020      	beq.n	8006928 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01b      	beq.n	8006928 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0208 	mvn.w	r2, #8
 80068f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2204      	movs	r2, #4
 80068fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb10 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fb02 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fb13 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	2b00      	cmp	r3, #0
 8006930:	d020      	beq.n	8006974 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01b      	beq.n	8006974 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0210 	mvn.w	r2, #16
 8006944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2208      	movs	r2, #8
 800694a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 faea 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006960:	e005      	b.n	800696e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fadc 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 faed 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00c      	beq.n	8006998 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f06f 0201 	mvn.w	r2, #1
 8006990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fb f8b2 	bl	8001afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d104      	bne.n	80069ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00c      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80069be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 fafe 	bl	8007fc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00c      	beq.n	80069ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80069e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 faf6 	bl	8007fd6 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00c      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 faa7 	bl	8006f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00c      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f06f 0220 	mvn.w	r2, #32
 8006a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fabe 	bl	8007fae <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00c      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 faca 	bl	8007fea <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00c      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 fac2 	bl	8007ffe <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d007      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 faba 	bl	8008012 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fab2 	bl	8008026 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e0ff      	b.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b14      	cmp	r3, #20
 8006af6:	f200 80f0 	bhi.w	8006cda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006afa:	a201      	add	r2, pc, #4	@ (adr r2, 8006b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b55 	.word	0x08006b55
 8006b04:	08006cdb 	.word	0x08006cdb
 8006b08:	08006cdb 	.word	0x08006cdb
 8006b0c:	08006cdb 	.word	0x08006cdb
 8006b10:	08006b95 	.word	0x08006b95
 8006b14:	08006cdb 	.word	0x08006cdb
 8006b18:	08006cdb 	.word	0x08006cdb
 8006b1c:	08006cdb 	.word	0x08006cdb
 8006b20:	08006bd7 	.word	0x08006bd7
 8006b24:	08006cdb 	.word	0x08006cdb
 8006b28:	08006cdb 	.word	0x08006cdb
 8006b2c:	08006cdb 	.word	0x08006cdb
 8006b30:	08006c17 	.word	0x08006c17
 8006b34:	08006cdb 	.word	0x08006cdb
 8006b38:	08006cdb 	.word	0x08006cdb
 8006b3c:	08006cdb 	.word	0x08006cdb
 8006b40:	08006c59 	.word	0x08006c59
 8006b44:	08006cdb 	.word	0x08006cdb
 8006b48:	08006cdb 	.word	0x08006cdb
 8006b4c:	08006cdb 	.word	0x08006cdb
 8006b50:	08006c99 	.word	0x08006c99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fabc 	bl	80070d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0208 	orr.w	r2, r2, #8
 8006b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0204 	bic.w	r2, r2, #4
 8006b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6999      	ldr	r1, [r3, #24]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	691a      	ldr	r2, [r3, #16]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	619a      	str	r2, [r3, #24]
      break;
 8006b92:	e0a5      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fb36 	bl	800720c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6999      	ldr	r1, [r3, #24]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	021a      	lsls	r2, r3, #8
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	619a      	str	r2, [r3, #24]
      break;
 8006bd4:	e084      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fba9 	bl	8007334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0208 	orr.w	r2, r2, #8
 8006bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0204 	bic.w	r2, r2, #4
 8006c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69d9      	ldr	r1, [r3, #28]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	61da      	str	r2, [r3, #28]
      break;
 8006c14:	e064      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fc1b 	bl	8007458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69d9      	ldr	r1, [r3, #28]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	021a      	lsls	r2, r3, #8
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	61da      	str	r2, [r3, #28]
      break;
 8006c56:	e043      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fc8e 	bl	8007580 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0204 	bic.w	r2, r2, #4
 8006c82:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c96:	e023      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fcd8 	bl	8007654 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cc2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	021a      	lsls	r2, r3, #8
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006cd8:	e002      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop

08006cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_TIM_ConfigClockSource+0x1c>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e0f6      	b.n	8006efe <HAL_TIM_ConfigClockSource+0x20a>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006d2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a6f      	ldr	r2, [pc, #444]	@ (8006f08 <HAL_TIM_ConfigClockSource+0x214>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	f000 80c1 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d50:	4a6d      	ldr	r2, [pc, #436]	@ (8006f08 <HAL_TIM_ConfigClockSource+0x214>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	f200 80c6 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d58:	4a6c      	ldr	r2, [pc, #432]	@ (8006f0c <HAL_TIM_ConfigClockSource+0x218>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	f000 80b9 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d60:	4a6a      	ldr	r2, [pc, #424]	@ (8006f0c <HAL_TIM_ConfigClockSource+0x218>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	f200 80be 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d68:	4a69      	ldr	r2, [pc, #420]	@ (8006f10 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f000 80b1 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d70:	4a67      	ldr	r2, [pc, #412]	@ (8006f10 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	f200 80b6 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d78:	4a66      	ldr	r2, [pc, #408]	@ (8006f14 <HAL_TIM_ConfigClockSource+0x220>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	f000 80a9 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d80:	4a64      	ldr	r2, [pc, #400]	@ (8006f14 <HAL_TIM_ConfigClockSource+0x220>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	f200 80ae 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d88:	4a63      	ldr	r2, [pc, #396]	@ (8006f18 <HAL_TIM_ConfigClockSource+0x224>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	f000 80a1 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d90:	4a61      	ldr	r2, [pc, #388]	@ (8006f18 <HAL_TIM_ConfigClockSource+0x224>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	f200 80a6 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d98:	4a60      	ldr	r2, [pc, #384]	@ (8006f1c <HAL_TIM_ConfigClockSource+0x228>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f000 8099 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006da0:	4a5e      	ldr	r2, [pc, #376]	@ (8006f1c <HAL_TIM_ConfigClockSource+0x228>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f200 809e 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006da8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006dac:	f000 8091 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006db0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006db4:	f200 8096 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006db8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dbc:	f000 8089 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006dc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dc4:	f200 808e 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dcc:	d03e      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0x158>
 8006dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd2:	f200 8087 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dda:	f000 8086 	beq.w	8006eea <HAL_TIM_ConfigClockSource+0x1f6>
 8006dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de2:	d87f      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006de4:	2b70      	cmp	r3, #112	@ 0x70
 8006de6:	d01a      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0x12a>
 8006de8:	2b70      	cmp	r3, #112	@ 0x70
 8006dea:	d87b      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dec:	2b60      	cmp	r3, #96	@ 0x60
 8006dee:	d050      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x19e>
 8006df0:	2b60      	cmp	r3, #96	@ 0x60
 8006df2:	d877      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df4:	2b50      	cmp	r3, #80	@ 0x50
 8006df6:	d03c      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0x17e>
 8006df8:	2b50      	cmp	r3, #80	@ 0x50
 8006dfa:	d873      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dfc:	2b40      	cmp	r3, #64	@ 0x40
 8006dfe:	d058      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x1be>
 8006e00:	2b40      	cmp	r3, #64	@ 0x40
 8006e02:	d86f      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e04:	2b30      	cmp	r3, #48	@ 0x30
 8006e06:	d064      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e08:	2b30      	cmp	r3, #48	@ 0x30
 8006e0a:	d86b      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d060      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d867      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d05c      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d05a      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e1c:	e062      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e2e:	f000 fd6d 	bl	800790c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	609a      	str	r2, [r3, #8]
      break;
 8006e4a:	e04f      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e5c:	f000 fd56 	bl	800790c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e6e:	609a      	str	r2, [r3, #8]
      break;
 8006e70:	e03c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f000 fcc8 	bl	8007814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2150      	movs	r1, #80	@ 0x50
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fd21 	bl	80078d2 <TIM_ITRx_SetConfig>
      break;
 8006e90:	e02c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fce7 	bl	8007872 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2160      	movs	r1, #96	@ 0x60
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fd11 	bl	80078d2 <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e01c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f000 fca8 	bl	8007814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2140      	movs	r1, #64	@ 0x40
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fd01 	bl	80078d2 <TIM_ITRx_SetConfig>
      break;
 8006ed0:	e00c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f000 fcf8 	bl	80078d2 <TIM_ITRx_SetConfig>
      break;
 8006ee2:	e003      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee8:	e000      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	00100070 	.word	0x00100070
 8006f0c:	00100060 	.word	0x00100060
 8006f10:	00100050 	.word	0x00100050
 8006f14:	00100040 	.word	0x00100040
 8006f18:	00100030 	.word	0x00100030
 8006f1c:	00100020 	.word	0x00100020

08006f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a4c      	ldr	r2, [pc, #304]	@ (80070b4 <TIM_Base_SetConfig+0x144>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d017      	beq.n	8006fb8 <TIM_Base_SetConfig+0x48>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f8e:	d013      	beq.n	8006fb8 <TIM_Base_SetConfig+0x48>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a49      	ldr	r2, [pc, #292]	@ (80070b8 <TIM_Base_SetConfig+0x148>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00f      	beq.n	8006fb8 <TIM_Base_SetConfig+0x48>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a48      	ldr	r2, [pc, #288]	@ (80070bc <TIM_Base_SetConfig+0x14c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_Base_SetConfig+0x48>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a47      	ldr	r2, [pc, #284]	@ (80070c0 <TIM_Base_SetConfig+0x150>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <TIM_Base_SetConfig+0x48>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a46      	ldr	r2, [pc, #280]	@ (80070c4 <TIM_Base_SetConfig+0x154>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_Base_SetConfig+0x48>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a45      	ldr	r2, [pc, #276]	@ (80070c8 <TIM_Base_SetConfig+0x158>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d108      	bne.n	8006fca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a39      	ldr	r2, [pc, #228]	@ (80070b4 <TIM_Base_SetConfig+0x144>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d023      	beq.n	800701a <TIM_Base_SetConfig+0xaa>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd8:	d01f      	beq.n	800701a <TIM_Base_SetConfig+0xaa>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a36      	ldr	r2, [pc, #216]	@ (80070b8 <TIM_Base_SetConfig+0x148>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01b      	beq.n	800701a <TIM_Base_SetConfig+0xaa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a35      	ldr	r2, [pc, #212]	@ (80070bc <TIM_Base_SetConfig+0x14c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d017      	beq.n	800701a <TIM_Base_SetConfig+0xaa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a34      	ldr	r2, [pc, #208]	@ (80070c0 <TIM_Base_SetConfig+0x150>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <TIM_Base_SetConfig+0xaa>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a33      	ldr	r2, [pc, #204]	@ (80070c4 <TIM_Base_SetConfig+0x154>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00f      	beq.n	800701a <TIM_Base_SetConfig+0xaa>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a33      	ldr	r2, [pc, #204]	@ (80070cc <TIM_Base_SetConfig+0x15c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00b      	beq.n	800701a <TIM_Base_SetConfig+0xaa>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a32      	ldr	r2, [pc, #200]	@ (80070d0 <TIM_Base_SetConfig+0x160>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d007      	beq.n	800701a <TIM_Base_SetConfig+0xaa>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a31      	ldr	r2, [pc, #196]	@ (80070d4 <TIM_Base_SetConfig+0x164>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d003      	beq.n	800701a <TIM_Base_SetConfig+0xaa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a2c      	ldr	r2, [pc, #176]	@ (80070c8 <TIM_Base_SetConfig+0x158>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d108      	bne.n	800702c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a18      	ldr	r2, [pc, #96]	@ (80070b4 <TIM_Base_SetConfig+0x144>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d013      	beq.n	8007080 <TIM_Base_SetConfig+0x110>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a1a      	ldr	r2, [pc, #104]	@ (80070c4 <TIM_Base_SetConfig+0x154>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00f      	beq.n	8007080 <TIM_Base_SetConfig+0x110>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a1a      	ldr	r2, [pc, #104]	@ (80070cc <TIM_Base_SetConfig+0x15c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00b      	beq.n	8007080 <TIM_Base_SetConfig+0x110>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a19      	ldr	r2, [pc, #100]	@ (80070d0 <TIM_Base_SetConfig+0x160>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d007      	beq.n	8007080 <TIM_Base_SetConfig+0x110>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a18      	ldr	r2, [pc, #96]	@ (80070d4 <TIM_Base_SetConfig+0x164>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d003      	beq.n	8007080 <TIM_Base_SetConfig+0x110>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a13      	ldr	r2, [pc, #76]	@ (80070c8 <TIM_Base_SetConfig+0x158>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d103      	bne.n	8007088 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	691a      	ldr	r2, [r3, #16]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b01      	cmp	r3, #1
 8007098:	d105      	bne.n	80070a6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f023 0201 	bic.w	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	611a      	str	r2, [r3, #16]
  }
}
 80070a6:	bf00      	nop
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40012c00 	.word	0x40012c00
 80070b8:	40000400 	.word	0x40000400
 80070bc:	40000800 	.word	0x40000800
 80070c0:	40000c00 	.word	0x40000c00
 80070c4:	40013400 	.word	0x40013400
 80070c8:	40015000 	.word	0x40015000
 80070cc:	40014000 	.word	0x40014000
 80070d0:	40014400 	.word	0x40014400
 80070d4:	40014800 	.word	0x40014800

080070d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	f023 0201 	bic.w	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800710a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0303 	bic.w	r3, r3, #3
 8007112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f023 0302 	bic.w	r3, r3, #2
 8007124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a30      	ldr	r2, [pc, #192]	@ (80071f4 <TIM_OC1_SetConfig+0x11c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <TIM_OC1_SetConfig+0x88>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a2f      	ldr	r2, [pc, #188]	@ (80071f8 <TIM_OC1_SetConfig+0x120>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00f      	beq.n	8007160 <TIM_OC1_SetConfig+0x88>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a2e      	ldr	r2, [pc, #184]	@ (80071fc <TIM_OC1_SetConfig+0x124>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00b      	beq.n	8007160 <TIM_OC1_SetConfig+0x88>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a2d      	ldr	r2, [pc, #180]	@ (8007200 <TIM_OC1_SetConfig+0x128>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d007      	beq.n	8007160 <TIM_OC1_SetConfig+0x88>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a2c      	ldr	r2, [pc, #176]	@ (8007204 <TIM_OC1_SetConfig+0x12c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <TIM_OC1_SetConfig+0x88>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a2b      	ldr	r2, [pc, #172]	@ (8007208 <TIM_OC1_SetConfig+0x130>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d10c      	bne.n	800717a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f023 0308 	bic.w	r3, r3, #8
 8007166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f023 0304 	bic.w	r3, r3, #4
 8007178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a1d      	ldr	r2, [pc, #116]	@ (80071f4 <TIM_OC1_SetConfig+0x11c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d013      	beq.n	80071aa <TIM_OC1_SetConfig+0xd2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1c      	ldr	r2, [pc, #112]	@ (80071f8 <TIM_OC1_SetConfig+0x120>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00f      	beq.n	80071aa <TIM_OC1_SetConfig+0xd2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a1b      	ldr	r2, [pc, #108]	@ (80071fc <TIM_OC1_SetConfig+0x124>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00b      	beq.n	80071aa <TIM_OC1_SetConfig+0xd2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a1a      	ldr	r2, [pc, #104]	@ (8007200 <TIM_OC1_SetConfig+0x128>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d007      	beq.n	80071aa <TIM_OC1_SetConfig+0xd2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a19      	ldr	r2, [pc, #100]	@ (8007204 <TIM_OC1_SetConfig+0x12c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d003      	beq.n	80071aa <TIM_OC1_SetConfig+0xd2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a18      	ldr	r2, [pc, #96]	@ (8007208 <TIM_OC1_SetConfig+0x130>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d111      	bne.n	80071ce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	621a      	str	r2, [r3, #32]
}
 80071e8:	bf00      	nop
 80071ea:	371c      	adds	r7, #28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	40012c00 	.word	0x40012c00
 80071f8:	40013400 	.word	0x40013400
 80071fc:	40014000 	.word	0x40014000
 8007200:	40014400 	.word	0x40014400
 8007204:	40014800 	.word	0x40014800
 8007208:	40015000 	.word	0x40015000

0800720c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	f023 0210 	bic.w	r2, r3, #16
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800723a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800723e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	021b      	lsls	r3, r3, #8
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0320 	bic.w	r3, r3, #32
 800725a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a2c      	ldr	r2, [pc, #176]	@ (800731c <TIM_OC2_SetConfig+0x110>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d007      	beq.n	8007280 <TIM_OC2_SetConfig+0x74>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a2b      	ldr	r2, [pc, #172]	@ (8007320 <TIM_OC2_SetConfig+0x114>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d003      	beq.n	8007280 <TIM_OC2_SetConfig+0x74>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a2a      	ldr	r2, [pc, #168]	@ (8007324 <TIM_OC2_SetConfig+0x118>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10d      	bne.n	800729c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	011b      	lsls	r3, r3, #4
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800729a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a1f      	ldr	r2, [pc, #124]	@ (800731c <TIM_OC2_SetConfig+0x110>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d013      	beq.n	80072cc <TIM_OC2_SetConfig+0xc0>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007320 <TIM_OC2_SetConfig+0x114>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d00f      	beq.n	80072cc <TIM_OC2_SetConfig+0xc0>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007328 <TIM_OC2_SetConfig+0x11c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d00b      	beq.n	80072cc <TIM_OC2_SetConfig+0xc0>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a1d      	ldr	r2, [pc, #116]	@ (800732c <TIM_OC2_SetConfig+0x120>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d007      	beq.n	80072cc <TIM_OC2_SetConfig+0xc0>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a1c      	ldr	r2, [pc, #112]	@ (8007330 <TIM_OC2_SetConfig+0x124>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d003      	beq.n	80072cc <TIM_OC2_SetConfig+0xc0>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a17      	ldr	r2, [pc, #92]	@ (8007324 <TIM_OC2_SetConfig+0x118>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d113      	bne.n	80072f4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40013400 	.word	0x40013400
 8007324:	40015000 	.word	0x40015000
 8007328:	40014000 	.word	0x40014000
 800732c:	40014400 	.word	0x40014400
 8007330:	40014800 	.word	0x40014800

08007334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0303 	bic.w	r3, r3, #3
 800736e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	4313      	orrs	r3, r2
 800738c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a2b      	ldr	r2, [pc, #172]	@ (8007440 <TIM_OC3_SetConfig+0x10c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d007      	beq.n	80073a6 <TIM_OC3_SetConfig+0x72>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a2a      	ldr	r2, [pc, #168]	@ (8007444 <TIM_OC3_SetConfig+0x110>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d003      	beq.n	80073a6 <TIM_OC3_SetConfig+0x72>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a29      	ldr	r2, [pc, #164]	@ (8007448 <TIM_OC3_SetConfig+0x114>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d10d      	bne.n	80073c2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a1e      	ldr	r2, [pc, #120]	@ (8007440 <TIM_OC3_SetConfig+0x10c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d013      	beq.n	80073f2 <TIM_OC3_SetConfig+0xbe>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007444 <TIM_OC3_SetConfig+0x110>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00f      	beq.n	80073f2 <TIM_OC3_SetConfig+0xbe>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a1d      	ldr	r2, [pc, #116]	@ (800744c <TIM_OC3_SetConfig+0x118>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00b      	beq.n	80073f2 <TIM_OC3_SetConfig+0xbe>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007450 <TIM_OC3_SetConfig+0x11c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d007      	beq.n	80073f2 <TIM_OC3_SetConfig+0xbe>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007454 <TIM_OC3_SetConfig+0x120>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d003      	beq.n	80073f2 <TIM_OC3_SetConfig+0xbe>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a16      	ldr	r2, [pc, #88]	@ (8007448 <TIM_OC3_SetConfig+0x114>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d113      	bne.n	800741a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	621a      	str	r2, [r3, #32]
}
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	40012c00 	.word	0x40012c00
 8007444:	40013400 	.word	0x40013400
 8007448:	40015000 	.word	0x40015000
 800744c:	40014000 	.word	0x40014000
 8007450:	40014400 	.word	0x40014400
 8007454:	40014800 	.word	0x40014800

08007458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800748a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	021b      	lsls	r3, r3, #8
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	031b      	lsls	r3, r3, #12
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a2c      	ldr	r2, [pc, #176]	@ (8007568 <TIM_OC4_SetConfig+0x110>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d007      	beq.n	80074cc <TIM_OC4_SetConfig+0x74>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a2b      	ldr	r2, [pc, #172]	@ (800756c <TIM_OC4_SetConfig+0x114>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_OC4_SetConfig+0x74>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007570 <TIM_OC4_SetConfig+0x118>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d10d      	bne.n	80074e8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80074d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	031b      	lsls	r3, r3, #12
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007568 <TIM_OC4_SetConfig+0x110>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d013      	beq.n	8007518 <TIM_OC4_SetConfig+0xc0>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a1e      	ldr	r2, [pc, #120]	@ (800756c <TIM_OC4_SetConfig+0x114>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00f      	beq.n	8007518 <TIM_OC4_SetConfig+0xc0>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007574 <TIM_OC4_SetConfig+0x11c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d00b      	beq.n	8007518 <TIM_OC4_SetConfig+0xc0>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a1d      	ldr	r2, [pc, #116]	@ (8007578 <TIM_OC4_SetConfig+0x120>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d007      	beq.n	8007518 <TIM_OC4_SetConfig+0xc0>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a1c      	ldr	r2, [pc, #112]	@ (800757c <TIM_OC4_SetConfig+0x124>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_OC4_SetConfig+0xc0>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a17      	ldr	r2, [pc, #92]	@ (8007570 <TIM_OC4_SetConfig+0x118>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d113      	bne.n	8007540 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800751e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007526:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	019b      	lsls	r3, r3, #6
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4313      	orrs	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	019b      	lsls	r3, r3, #6
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	40012c00 	.word	0x40012c00
 800756c:	40013400 	.word	0x40013400
 8007570:	40015000 	.word	0x40015000
 8007574:	40014000 	.word	0x40014000
 8007578:	40014400 	.word	0x40014400
 800757c:	40014800 	.word	0x40014800

08007580 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80075c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a19      	ldr	r2, [pc, #100]	@ (800763c <TIM_OC5_SetConfig+0xbc>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <TIM_OC5_SetConfig+0x82>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a18      	ldr	r2, [pc, #96]	@ (8007640 <TIM_OC5_SetConfig+0xc0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00f      	beq.n	8007602 <TIM_OC5_SetConfig+0x82>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a17      	ldr	r2, [pc, #92]	@ (8007644 <TIM_OC5_SetConfig+0xc4>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00b      	beq.n	8007602 <TIM_OC5_SetConfig+0x82>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a16      	ldr	r2, [pc, #88]	@ (8007648 <TIM_OC5_SetConfig+0xc8>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d007      	beq.n	8007602 <TIM_OC5_SetConfig+0x82>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a15      	ldr	r2, [pc, #84]	@ (800764c <TIM_OC5_SetConfig+0xcc>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d003      	beq.n	8007602 <TIM_OC5_SetConfig+0x82>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a14      	ldr	r2, [pc, #80]	@ (8007650 <TIM_OC5_SetConfig+0xd0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d109      	bne.n	8007616 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	621a      	str	r2, [r3, #32]
}
 8007630:	bf00      	nop
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	40012c00 	.word	0x40012c00
 8007640:	40013400 	.word	0x40013400
 8007644:	40014000 	.word	0x40014000
 8007648:	40014400 	.word	0x40014400
 800764c:	40014800 	.word	0x40014800
 8007650:	40015000 	.word	0x40015000

08007654 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800769a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	051b      	lsls	r3, r3, #20
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007714 <TIM_OC6_SetConfig+0xc0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <TIM_OC6_SetConfig+0x84>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a19      	ldr	r2, [pc, #100]	@ (8007718 <TIM_OC6_SetConfig+0xc4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00f      	beq.n	80076d8 <TIM_OC6_SetConfig+0x84>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a18      	ldr	r2, [pc, #96]	@ (800771c <TIM_OC6_SetConfig+0xc8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00b      	beq.n	80076d8 <TIM_OC6_SetConfig+0x84>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a17      	ldr	r2, [pc, #92]	@ (8007720 <TIM_OC6_SetConfig+0xcc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d007      	beq.n	80076d8 <TIM_OC6_SetConfig+0x84>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a16      	ldr	r2, [pc, #88]	@ (8007724 <TIM_OC6_SetConfig+0xd0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d003      	beq.n	80076d8 <TIM_OC6_SetConfig+0x84>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a15      	ldr	r2, [pc, #84]	@ (8007728 <TIM_OC6_SetConfig+0xd4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d109      	bne.n	80076ec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	029b      	lsls	r3, r3, #10
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	621a      	str	r2, [r3, #32]
}
 8007706:	bf00      	nop
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40012c00 	.word	0x40012c00
 8007718:	40013400 	.word	0x40013400
 800771c:	40014000 	.word	0x40014000
 8007720:	40014400 	.word	0x40014400
 8007724:	40014800 	.word	0x40014800
 8007728:	40015000 	.word	0x40015000

0800772c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	f023 0201 	bic.w	r2, r3, #1
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4a28      	ldr	r2, [pc, #160]	@ (80077f8 <TIM_TI1_SetConfig+0xcc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d01b      	beq.n	8007792 <TIM_TI1_SetConfig+0x66>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007760:	d017      	beq.n	8007792 <TIM_TI1_SetConfig+0x66>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4a25      	ldr	r2, [pc, #148]	@ (80077fc <TIM_TI1_SetConfig+0xd0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <TIM_TI1_SetConfig+0x66>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4a24      	ldr	r2, [pc, #144]	@ (8007800 <TIM_TI1_SetConfig+0xd4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00f      	beq.n	8007792 <TIM_TI1_SetConfig+0x66>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4a23      	ldr	r2, [pc, #140]	@ (8007804 <TIM_TI1_SetConfig+0xd8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d00b      	beq.n	8007792 <TIM_TI1_SetConfig+0x66>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4a22      	ldr	r2, [pc, #136]	@ (8007808 <TIM_TI1_SetConfig+0xdc>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d007      	beq.n	8007792 <TIM_TI1_SetConfig+0x66>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4a21      	ldr	r2, [pc, #132]	@ (800780c <TIM_TI1_SetConfig+0xe0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d003      	beq.n	8007792 <TIM_TI1_SetConfig+0x66>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4a20      	ldr	r2, [pc, #128]	@ (8007810 <TIM_TI1_SetConfig+0xe4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d101      	bne.n	8007796 <TIM_TI1_SetConfig+0x6a>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <TIM_TI1_SetConfig+0x6c>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d008      	beq.n	80077ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f023 0303 	bic.w	r3, r3, #3
 80077a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	e003      	b.n	80077b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f043 0301 	orr.w	r3, r3, #1
 80077b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f023 030a 	bic.w	r3, r3, #10
 80077d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f003 030a 	and.w	r3, r3, #10
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40012c00 	.word	0x40012c00
 80077fc:	40000400 	.word	0x40000400
 8007800:	40000800 	.word	0x40000800
 8007804:	40000c00 	.word	0x40000c00
 8007808:	40013400 	.word	0x40013400
 800780c:	40014000 	.word	0x40014000
 8007810:	40015000 	.word	0x40015000

08007814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	f023 0201 	bic.w	r2, r3, #1
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800783e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f023 030a 	bic.w	r3, r3, #10
 8007850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007872:	b480      	push	{r7}
 8007874:	b087      	sub	sp, #28
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f023 0210 	bic.w	r2, r3, #16
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800789c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	031b      	lsls	r3, r3, #12
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	621a      	str	r2, [r3, #32]
}
 80078c6:	bf00      	nop
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b085      	sub	sp, #20
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80078e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f043 0307 	orr.w	r3, r3, #7
 80078f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	609a      	str	r2, [r3, #8]
}
 8007900:	bf00      	nop
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	021a      	lsls	r2, r3, #8
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	431a      	orrs	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4313      	orrs	r3, r2
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	609a      	str	r2, [r3, #8]
}
 8007940:	bf00      	nop
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	2201      	movs	r2, #1
 8007960:	fa02 f303 	lsl.w	r3, r2, r3
 8007964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1a      	ldr	r2, [r3, #32]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	43db      	mvns	r3, r3
 800796e:	401a      	ands	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1a      	ldr	r2, [r3, #32]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 031f 	and.w	r3, r3, #31
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	fa01 f303 	lsl.w	r3, r1, r3
 8007984:	431a      	orrs	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	621a      	str	r2, [r3, #32]
}
 800798a:	bf00      	nop
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b08a      	sub	sp, #40	@ 0x28
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e0a0      	b.n	8007aec <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fa fbb4 	bl	800212c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3304      	adds	r3, #4
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	f7ff faca 	bl	8006f70 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2203      	movs	r2, #3
 80079ea:	f7ff fe9f 	bl	800772c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	699a      	ldr	r2, [r3, #24]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 020c 	bic.w	r2, r2, #12
 80079fc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6999      	ldr	r1, [r3, #24]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007a1e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6812      	ldr	r2, [r2, #0]
 8007a2a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a32:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a42:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a52:	f023 0307 	bic.w	r3, r3, #7
 8007a56:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0204 	orr.w	r2, r2, #4
 8007a66:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007a70:	2370      	movs	r3, #112	@ 0x70
 8007a72:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007a74:	2300      	movs	r3, #0
 8007a76:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f107 020c 	add.w	r2, r7, #12
 8007a8e:	4611      	mov	r1, r2
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7ff fbbb 	bl	800720c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aa8:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8007ab8:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3728      	adds	r7, #40	@ 0x28
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d109      	bne.n	8007b18 <HAL_TIMEx_PWMN_Start+0x24>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	bf14      	ite	ne
 8007b10:	2301      	movne	r3, #1
 8007b12:	2300      	moveq	r3, #0
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	e022      	b.n	8007b5e <HAL_TIMEx_PWMN_Start+0x6a>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d109      	bne.n	8007b32 <HAL_TIMEx_PWMN_Start+0x3e>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	bf14      	ite	ne
 8007b2a:	2301      	movne	r3, #1
 8007b2c:	2300      	moveq	r3, #0
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	e015      	b.n	8007b5e <HAL_TIMEx_PWMN_Start+0x6a>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d109      	bne.n	8007b4c <HAL_TIMEx_PWMN_Start+0x58>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	bf14      	ite	ne
 8007b44:	2301      	movne	r3, #1
 8007b46:	2300      	moveq	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	e008      	b.n	8007b5e <HAL_TIMEx_PWMN_Start+0x6a>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	bf14      	ite	ne
 8007b58:	2301      	movne	r3, #1
 8007b5a:	2300      	moveq	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e073      	b.n	8007c4e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d104      	bne.n	8007b76 <HAL_TIMEx_PWMN_Start+0x82>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b74:	e013      	b.n	8007b9e <HAL_TIMEx_PWMN_Start+0xaa>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d104      	bne.n	8007b86 <HAL_TIMEx_PWMN_Start+0x92>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b84:	e00b      	b.n	8007b9e <HAL_TIMEx_PWMN_Start+0xaa>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d104      	bne.n	8007b96 <HAL_TIMEx_PWMN_Start+0xa2>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b94:	e003      	b.n	8007b9e <HAL_TIMEx_PWMN_Start+0xaa>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2204      	movs	r2, #4
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 fa47 	bl	800803a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a25      	ldr	r2, [pc, #148]	@ (8007c58 <HAL_TIMEx_PWMN_Start+0x164>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d022      	beq.n	8007c0c <HAL_TIMEx_PWMN_Start+0x118>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bce:	d01d      	beq.n	8007c0c <HAL_TIMEx_PWMN_Start+0x118>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a21      	ldr	r2, [pc, #132]	@ (8007c5c <HAL_TIMEx_PWMN_Start+0x168>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d018      	beq.n	8007c0c <HAL_TIMEx_PWMN_Start+0x118>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a20      	ldr	r2, [pc, #128]	@ (8007c60 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d013      	beq.n	8007c0c <HAL_TIMEx_PWMN_Start+0x118>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1e      	ldr	r2, [pc, #120]	@ (8007c64 <HAL_TIMEx_PWMN_Start+0x170>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00e      	beq.n	8007c0c <HAL_TIMEx_PWMN_Start+0x118>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8007c68 <HAL_TIMEx_PWMN_Start+0x174>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <HAL_TIMEx_PWMN_Start+0x118>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8007c6c <HAL_TIMEx_PWMN_Start+0x178>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <HAL_TIMEx_PWMN_Start+0x118>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a1a      	ldr	r2, [pc, #104]	@ (8007c70 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d115      	bne.n	8007c38 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	4b18      	ldr	r3, [pc, #96]	@ (8007c74 <HAL_TIMEx_PWMN_Start+0x180>)
 8007c14:	4013      	ands	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b06      	cmp	r3, #6
 8007c1c:	d015      	beq.n	8007c4a <HAL_TIMEx_PWMN_Start+0x156>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c24:	d011      	beq.n	8007c4a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f042 0201 	orr.w	r2, r2, #1
 8007c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c36:	e008      	b.n	8007c4a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	e000      	b.n	8007c4c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	40012c00 	.word	0x40012c00
 8007c5c:	40000400 	.word	0x40000400
 8007c60:	40000800 	.word	0x40000800
 8007c64:	40000c00 	.word	0x40000c00
 8007c68:	40013400 	.word	0x40013400
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40015000 	.word	0x40015000
 8007c74:	00010007 	.word	0x00010007

08007c78 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2200      	movs	r2, #0
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 f9d5 	bl	800803a <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6a1a      	ldr	r2, [r3, #32]
 8007c96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10f      	bne.n	8007cc0 <HAL_TIMEx_PWMN_Stop+0x48>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6a1a      	ldr	r2, [r3, #32]
 8007ca6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d107      	bne.n	8007cc0 <HAL_TIMEx_PWMN_Stop+0x48>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007cbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6a1a      	ldr	r2, [r3, #32]
 8007cc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007cca:	4013      	ands	r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10f      	bne.n	8007cf0 <HAL_TIMEx_PWMN_Stop+0x78>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6a1a      	ldr	r2, [r3, #32]
 8007cd6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d107      	bne.n	8007cf0 <HAL_TIMEx_PWMN_Stop+0x78>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 0201 	bic.w	r2, r2, #1
 8007cee:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <HAL_TIMEx_PWMN_Stop+0x88>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cfe:	e013      	b.n	8007d28 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	d104      	bne.n	8007d10 <HAL_TIMEx_PWMN_Stop+0x98>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d0e:	e00b      	b.n	8007d28 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d104      	bne.n	8007d20 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d1e:	e003      	b.n	8007d28 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d101      	bne.n	8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e074      	b.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a34      	ldr	r2, [pc, #208]	@ (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d009      	beq.n	8007d8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a33      	ldr	r2, [pc, #204]	@ (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a31      	ldr	r2, [pc, #196]	@ (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d108      	bne.n	8007d9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007d90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a21      	ldr	r2, [pc, #132]	@ (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d022      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dcc:	d01d      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d018      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d013      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a1c      	ldr	r2, [pc, #112]	@ (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00e      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a15      	ldr	r2, [pc, #84]	@ (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d009      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a18      	ldr	r2, [pc, #96]	@ (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d004      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a11      	ldr	r2, [pc, #68]	@ (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d10c      	bne.n	8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	40012c00 	.word	0x40012c00
 8007e48:	40013400 	.word	0x40013400
 8007e4c:	40015000 	.word	0x40015000
 8007e50:	40000400 	.word	0x40000400
 8007e54:	40000800 	.word	0x40000800
 8007e58:	40000c00 	.word	0x40000c00
 8007e5c:	40014000 	.word	0x40014000

08007e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e078      	b.n	8007f6e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	041b      	lsls	r3, r3, #16
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1c      	ldr	r2, [pc, #112]	@ (8007f7c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d009      	beq.n	8007f22 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1b      	ldr	r2, [pc, #108]	@ (8007f80 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d004      	beq.n	8007f22 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a19      	ldr	r2, [pc, #100]	@ (8007f84 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d11c      	bne.n	8007f5c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2c:	051b      	lsls	r3, r3, #20
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40012c00 	.word	0x40012c00
 8007f80:	40013400 	.word	0x40013400
 8007f84:	40015000 	.word	0x40015000

08007f88 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007f9e:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800803a:	b480      	push	{r7}
 800803c:	b087      	sub	sp, #28
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	2204      	movs	r2, #4
 800804e:	fa02 f303 	lsl.w	r3, r2, r3
 8008052:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a1a      	ldr	r2, [r3, #32]
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	43db      	mvns	r3, r3
 800805c:	401a      	ands	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6a1a      	ldr	r2, [r3, #32]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	6879      	ldr	r1, [r7, #4]
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	431a      	orrs	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	621a      	str	r2, [r3, #32]
}
 8008078:	bf00      	nop
 800807a:	371c      	adds	r7, #28
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e042      	b.n	800811c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800809c:	2b00      	cmp	r3, #0
 800809e:	d106      	bne.n	80080ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7fa f909 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2224      	movs	r2, #36	@ 0x24
 80080b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0201 	bic.w	r2, r2, #1
 80080c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 ff60 	bl	8008f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fc61 	bl	800899c <UART_SetConfig>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d101      	bne.n	80080e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e01b      	b.n	800811c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 ffdf 	bl	80090d8 <UART_CheckIdleState>
 800811a:	4603      	mov	r3, r0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08a      	sub	sp, #40	@ 0x28
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	4613      	mov	r3, r2
 8008132:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800813a:	2b20      	cmp	r3, #32
 800813c:	d17b      	bne.n	8008236 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <HAL_UART_Transmit+0x26>
 8008144:	88fb      	ldrh	r3, [r7, #6]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e074      	b.n	8008238 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2221      	movs	r2, #33	@ 0x21
 800815a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800815e:	f7fa fb7d 	bl	800285c <HAL_GetTick>
 8008162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	88fa      	ldrh	r2, [r7, #6]
 8008168:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	88fa      	ldrh	r2, [r7, #6]
 8008170:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800817c:	d108      	bne.n	8008190 <HAL_UART_Transmit+0x6c>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	61bb      	str	r3, [r7, #24]
 800818e:	e003      	b.n	8008198 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008194:	2300      	movs	r3, #0
 8008196:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008198:	e030      	b.n	80081fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2200      	movs	r2, #0
 80081a2:	2180      	movs	r1, #128	@ 0x80
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f001 f841 	bl	800922c <UART_WaitOnFlagUntilTimeout>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d005      	beq.n	80081bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e03d      	b.n	8008238 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10b      	bne.n	80081da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	3302      	adds	r3, #2
 80081d6:	61bb      	str	r3, [r7, #24]
 80081d8:	e007      	b.n	80081ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	781a      	ldrb	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	3301      	adds	r3, #1
 80081e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1c8      	bne.n	800819a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2200      	movs	r2, #0
 8008210:	2140      	movs	r1, #64	@ 0x40
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f001 f80a 	bl	800922c <UART_WaitOnFlagUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2220      	movs	r2, #32
 8008222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e006      	b.n	8008238 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2220      	movs	r2, #32
 800822e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	e000      	b.n	8008238 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008236:	2302      	movs	r3, #2
  }
}
 8008238:	4618      	mov	r0, r3
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08a      	sub	sp, #40	@ 0x28
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008254:	2b20      	cmp	r3, #32
 8008256:	d137      	bne.n	80082c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <HAL_UART_Receive_IT+0x24>
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e030      	b.n	80082ca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a18      	ldr	r2, [pc, #96]	@ (80082d4 <HAL_UART_Receive_IT+0x94>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d01f      	beq.n	80082b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d018      	beq.n	80082b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	613b      	str	r3, [r7, #16]
   return(result);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800829a:	627b      	str	r3, [r7, #36]	@ 0x24
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	623b      	str	r3, [r7, #32]
 80082a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	69f9      	ldr	r1, [r7, #28]
 80082aa:	6a3a      	ldr	r2, [r7, #32]
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e6      	bne.n	8008286 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	461a      	mov	r2, r3
 80082bc:	68b9      	ldr	r1, [r7, #8]
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f001 f822 	bl	8009308 <UART_Start_Receive_IT>
 80082c4:	4603      	mov	r3, r0
 80082c6:	e000      	b.n	80082ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80082c8:	2302      	movs	r3, #2
  }
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3728      	adds	r7, #40	@ 0x28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	40008000 	.word	0x40008000

080082d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b0ba      	sub	sp, #232	@ 0xe8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008302:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008306:	4013      	ands	r3, r2
 8008308:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800830c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008310:	2b00      	cmp	r3, #0
 8008312:	d11b      	bne.n	800834c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008318:	f003 0320 	and.w	r3, r3, #32
 800831c:	2b00      	cmp	r3, #0
 800831e:	d015      	beq.n	800834c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008324:	f003 0320 	and.w	r3, r3, #32
 8008328:	2b00      	cmp	r3, #0
 800832a:	d105      	bne.n	8008338 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800832c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d009      	beq.n	800834c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8300 	beq.w	8008942 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
      }
      return;
 800834a:	e2fa      	b.n	8008942 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800834c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 8123 	beq.w	800859c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008356:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800835a:	4b8d      	ldr	r3, [pc, #564]	@ (8008590 <HAL_UART_IRQHandler+0x2b8>)
 800835c:	4013      	ands	r3, r2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008366:	4b8b      	ldr	r3, [pc, #556]	@ (8008594 <HAL_UART_IRQHandler+0x2bc>)
 8008368:	4013      	ands	r3, r2
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 8116 	beq.w	800859c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d011      	beq.n	80083a0 <HAL_UART_IRQHandler+0xc8>
 800837c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2201      	movs	r2, #1
 800838e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008396:	f043 0201 	orr.w	r2, r3, #1
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d011      	beq.n	80083d0 <HAL_UART_IRQHandler+0xf8>
 80083ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2202      	movs	r2, #2
 80083be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083c6:	f043 0204 	orr.w	r2, r3, #4
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d011      	beq.n	8008400 <HAL_UART_IRQHandler+0x128>
 80083dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2204      	movs	r2, #4
 80083ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083f6:	f043 0202 	orr.w	r2, r3, #2
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b00      	cmp	r3, #0
 800840a:	d017      	beq.n	800843c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800840c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008410:	f003 0320 	and.w	r3, r3, #32
 8008414:	2b00      	cmp	r3, #0
 8008416:	d105      	bne.n	8008424 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008418:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800841c:	4b5c      	ldr	r3, [pc, #368]	@ (8008590 <HAL_UART_IRQHandler+0x2b8>)
 800841e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2208      	movs	r2, #8
 800842a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008432:	f043 0208 	orr.w	r2, r3, #8
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800843c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008444:	2b00      	cmp	r3, #0
 8008446:	d012      	beq.n	800846e <HAL_UART_IRQHandler+0x196>
 8008448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800844c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00c      	beq.n	800846e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800845c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008464:	f043 0220 	orr.w	r2, r3, #32
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8266 	beq.w	8008946 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800847a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800847e:	f003 0320 	and.w	r3, r3, #32
 8008482:	2b00      	cmp	r3, #0
 8008484:	d013      	beq.n	80084ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d105      	bne.n	800849e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084c2:	2b40      	cmp	r3, #64	@ 0x40
 80084c4:	d005      	beq.n	80084d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d054      	beq.n	800857c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 f83a 	bl	800954c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e2:	2b40      	cmp	r3, #64	@ 0x40
 80084e4:	d146      	bne.n	8008574 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3308      	adds	r3, #8
 80084ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80084fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008512:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800851e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800852a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1d9      	bne.n	80084e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008538:	2b00      	cmp	r3, #0
 800853a:	d017      	beq.n	800856c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008542:	4a15      	ldr	r2, [pc, #84]	@ (8008598 <HAL_UART_IRQHandler+0x2c0>)
 8008544:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800854c:	4618      	mov	r0, r3
 800854e:	f7fc fa27 	bl	80049a0 <HAL_DMA_Abort_IT>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d019      	beq.n	800858c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800855e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008566:	4610      	mov	r0, r2
 8008568:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800856a:	e00f      	b.n	800858c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f9ff 	bl	8008970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008572:	e00b      	b.n	800858c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f9fb 	bl	8008970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800857a:	e007      	b.n	800858c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f9f7 	bl	8008970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800858a:	e1dc      	b.n	8008946 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800858c:	bf00      	nop
    return;
 800858e:	e1da      	b.n	8008946 <HAL_UART_IRQHandler+0x66e>
 8008590:	10000001 	.word	0x10000001
 8008594:	04000120 	.word	0x04000120
 8008598:	08009619 	.word	0x08009619

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	f040 8170 	bne.w	8008886 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085aa:	f003 0310 	and.w	r3, r3, #16
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 8169 	beq.w	8008886 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8162 	beq.w	8008886 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2210      	movs	r2, #16
 80085c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d4:	2b40      	cmp	r3, #64	@ 0x40
 80085d6:	f040 80d8 	bne.w	800878a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 80af 	beq.w	8008750 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085fc:	429a      	cmp	r2, r3
 80085fe:	f080 80a7 	bcs.w	8008750 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008608:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0320 	and.w	r3, r3, #32
 800861a:	2b00      	cmp	r3, #0
 800861c:	f040 8087 	bne.w	800872e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800863c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800864a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800864e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008656:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1da      	bne.n	8008620 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3308      	adds	r3, #8
 8008670:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800867a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800867c:	f023 0301 	bic.w	r3, r3, #1
 8008680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3308      	adds	r3, #8
 800868a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800868e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008692:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008696:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80086a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e1      	bne.n	800866a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3308      	adds	r3, #8
 80086ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80086b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3308      	adds	r3, #8
 80086c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80086ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80086cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80086d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e3      	bne.n	80086a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086fc:	f023 0310 	bic.w	r3, r3, #16
 8008700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800870e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008710:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008714:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800871c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e4      	bne.n	80086ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008728:	4618      	mov	r0, r3
 800872a:	f7fc f8e0 	bl	80048ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2202      	movs	r2, #2
 8008732:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008740:	b29b      	uxth	r3, r3
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	b29b      	uxth	r3, r3
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f91b 	bl	8008984 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800874e:	e0fc      	b.n	800894a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800875a:	429a      	cmp	r2, r3
 800875c:	f040 80f5 	bne.w	800894a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b20      	cmp	r3, #32
 8008770:	f040 80eb 	bne.w	800894a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2202      	movs	r2, #2
 8008778:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f8fe 	bl	8008984 <HAL_UARTEx_RxEventCallback>
      return;
 8008788:	e0df      	b.n	800894a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008796:	b29b      	uxth	r3, r3
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 80d1 	beq.w	800894e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80087ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 80cc 	beq.w	800894e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80087da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e4      	bne.n	80087b6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3308      	adds	r3, #8
 80087f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f6:	e853 3f00 	ldrex	r3, [r3]
 80087fa:	623b      	str	r3, [r7, #32]
   return(result);
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008802:	f023 0301 	bic.w	r3, r3, #1
 8008806:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008814:	633a      	str	r2, [r7, #48]	@ 0x30
 8008816:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800881a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e1      	bne.n	80087ec <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	60fb      	str	r3, [r7, #12]
   return(result);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f023 0310 	bic.w	r3, r3, #16
 8008850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	69b9      	ldr	r1, [r7, #24]
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	617b      	str	r3, [r7, #20]
   return(result);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e4      	bne.n	800883c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f880 	bl	8008984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008884:	e063      	b.n	800894e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800888a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00e      	beq.n	80088b0 <HAL_UART_IRQHandler+0x5d8>
 8008892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d008      	beq.n	80088b0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80088a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 fc13 	bl	800a0d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088ae:	e051      	b.n	8008954 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80088b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d014      	beq.n	80088e6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d105      	bne.n	80088d4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d008      	beq.n	80088e6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d03a      	beq.n	8008952 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	4798      	blx	r3
    }
    return;
 80088e4:	e035      	b.n	8008952 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <HAL_UART_IRQHandler+0x62e>
 80088f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fe9c 	bl	800963c <UART_EndTransmit_IT>
    return;
 8008904:	e026      	b.n	8008954 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800890a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d009      	beq.n	8008926 <HAL_UART_IRQHandler+0x64e>
 8008912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008916:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 fbec 	bl	800a0fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008924:	e016      	b.n	8008954 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800892a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d010      	beq.n	8008954 <HAL_UART_IRQHandler+0x67c>
 8008932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008936:	2b00      	cmp	r3, #0
 8008938:	da0c      	bge.n	8008954 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 fbd4 	bl	800a0e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008940:	e008      	b.n	8008954 <HAL_UART_IRQHandler+0x67c>
      return;
 8008942:	bf00      	nop
 8008944:	e006      	b.n	8008954 <HAL_UART_IRQHandler+0x67c>
    return;
 8008946:	bf00      	nop
 8008948:	e004      	b.n	8008954 <HAL_UART_IRQHandler+0x67c>
      return;
 800894a:	bf00      	nop
 800894c:	e002      	b.n	8008954 <HAL_UART_IRQHandler+0x67c>
      return;
 800894e:	bf00      	nop
 8008950:	e000      	b.n	8008954 <HAL_UART_IRQHandler+0x67c>
    return;
 8008952:	bf00      	nop
  }
}
 8008954:	37e8      	adds	r7, #232	@ 0xe8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop

0800895c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800899c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089a0:	b08c      	sub	sp, #48	@ 0x30
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	431a      	orrs	r2, r3
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	431a      	orrs	r2, r3
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	4baa      	ldr	r3, [pc, #680]	@ (8008c74 <UART_SetConfig+0x2d8>)
 80089cc:	4013      	ands	r3, r2
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	6812      	ldr	r2, [r2, #0]
 80089d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089d4:	430b      	orrs	r3, r1
 80089d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a9f      	ldr	r2, [pc, #636]	@ (8008c78 <UART_SetConfig+0x2dc>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d004      	beq.n	8008a08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a04:	4313      	orrs	r3, r2
 8008a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008a12:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	6812      	ldr	r2, [r2, #0]
 8008a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a1c:	430b      	orrs	r3, r1
 8008a1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a26:	f023 010f 	bic.w	r1, r3, #15
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a90      	ldr	r2, [pc, #576]	@ (8008c7c <UART_SetConfig+0x2e0>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d125      	bne.n	8008a8c <UART_SetConfig+0xf0>
 8008a40:	4b8f      	ldr	r3, [pc, #572]	@ (8008c80 <UART_SetConfig+0x2e4>)
 8008a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d81a      	bhi.n	8008a84 <UART_SetConfig+0xe8>
 8008a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a54 <UART_SetConfig+0xb8>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008a65 	.word	0x08008a65
 8008a58:	08008a75 	.word	0x08008a75
 8008a5c:	08008a6d 	.word	0x08008a6d
 8008a60:	08008a7d 	.word	0x08008a7d
 8008a64:	2301      	movs	r3, #1
 8008a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a6a:	e116      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a72:	e112      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008a74:	2304      	movs	r3, #4
 8008a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a7a:	e10e      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008a7c:	2308      	movs	r3, #8
 8008a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a82:	e10a      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008a84:	2310      	movs	r3, #16
 8008a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a8a:	e106      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a7c      	ldr	r2, [pc, #496]	@ (8008c84 <UART_SetConfig+0x2e8>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d138      	bne.n	8008b08 <UART_SetConfig+0x16c>
 8008a96:	4b7a      	ldr	r3, [pc, #488]	@ (8008c80 <UART_SetConfig+0x2e4>)
 8008a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a9c:	f003 030c 	and.w	r3, r3, #12
 8008aa0:	2b0c      	cmp	r3, #12
 8008aa2:	d82d      	bhi.n	8008b00 <UART_SetConfig+0x164>
 8008aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8008aac <UART_SetConfig+0x110>)
 8008aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aaa:	bf00      	nop
 8008aac:	08008ae1 	.word	0x08008ae1
 8008ab0:	08008b01 	.word	0x08008b01
 8008ab4:	08008b01 	.word	0x08008b01
 8008ab8:	08008b01 	.word	0x08008b01
 8008abc:	08008af1 	.word	0x08008af1
 8008ac0:	08008b01 	.word	0x08008b01
 8008ac4:	08008b01 	.word	0x08008b01
 8008ac8:	08008b01 	.word	0x08008b01
 8008acc:	08008ae9 	.word	0x08008ae9
 8008ad0:	08008b01 	.word	0x08008b01
 8008ad4:	08008b01 	.word	0x08008b01
 8008ad8:	08008b01 	.word	0x08008b01
 8008adc:	08008af9 	.word	0x08008af9
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ae6:	e0d8      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aee:	e0d4      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008af0:	2304      	movs	r3, #4
 8008af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008af6:	e0d0      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008af8:	2308      	movs	r3, #8
 8008afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008afe:	e0cc      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008b00:	2310      	movs	r3, #16
 8008b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b06:	e0c8      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8008c88 <UART_SetConfig+0x2ec>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d125      	bne.n	8008b5e <UART_SetConfig+0x1c2>
 8008b12:	4b5b      	ldr	r3, [pc, #364]	@ (8008c80 <UART_SetConfig+0x2e4>)
 8008b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008b1c:	2b30      	cmp	r3, #48	@ 0x30
 8008b1e:	d016      	beq.n	8008b4e <UART_SetConfig+0x1b2>
 8008b20:	2b30      	cmp	r3, #48	@ 0x30
 8008b22:	d818      	bhi.n	8008b56 <UART_SetConfig+0x1ba>
 8008b24:	2b20      	cmp	r3, #32
 8008b26:	d00a      	beq.n	8008b3e <UART_SetConfig+0x1a2>
 8008b28:	2b20      	cmp	r3, #32
 8008b2a:	d814      	bhi.n	8008b56 <UART_SetConfig+0x1ba>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d002      	beq.n	8008b36 <UART_SetConfig+0x19a>
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	d008      	beq.n	8008b46 <UART_SetConfig+0x1aa>
 8008b34:	e00f      	b.n	8008b56 <UART_SetConfig+0x1ba>
 8008b36:	2300      	movs	r3, #0
 8008b38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b3c:	e0ad      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b44:	e0a9      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008b46:	2304      	movs	r3, #4
 8008b48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b4c:	e0a5      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008b4e:	2308      	movs	r3, #8
 8008b50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b54:	e0a1      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008b56:	2310      	movs	r3, #16
 8008b58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b5c:	e09d      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a4a      	ldr	r2, [pc, #296]	@ (8008c8c <UART_SetConfig+0x2f0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d125      	bne.n	8008bb4 <UART_SetConfig+0x218>
 8008b68:	4b45      	ldr	r3, [pc, #276]	@ (8008c80 <UART_SetConfig+0x2e4>)
 8008b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b74:	d016      	beq.n	8008ba4 <UART_SetConfig+0x208>
 8008b76:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b78:	d818      	bhi.n	8008bac <UART_SetConfig+0x210>
 8008b7a:	2b80      	cmp	r3, #128	@ 0x80
 8008b7c:	d00a      	beq.n	8008b94 <UART_SetConfig+0x1f8>
 8008b7e:	2b80      	cmp	r3, #128	@ 0x80
 8008b80:	d814      	bhi.n	8008bac <UART_SetConfig+0x210>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <UART_SetConfig+0x1f0>
 8008b86:	2b40      	cmp	r3, #64	@ 0x40
 8008b88:	d008      	beq.n	8008b9c <UART_SetConfig+0x200>
 8008b8a:	e00f      	b.n	8008bac <UART_SetConfig+0x210>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b92:	e082      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008b94:	2302      	movs	r3, #2
 8008b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b9a:	e07e      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ba2:	e07a      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008ba4:	2308      	movs	r3, #8
 8008ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008baa:	e076      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008bac:	2310      	movs	r3, #16
 8008bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bb2:	e072      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a35      	ldr	r2, [pc, #212]	@ (8008c90 <UART_SetConfig+0x2f4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d12a      	bne.n	8008c14 <UART_SetConfig+0x278>
 8008bbe:	4b30      	ldr	r3, [pc, #192]	@ (8008c80 <UART_SetConfig+0x2e4>)
 8008bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bcc:	d01a      	beq.n	8008c04 <UART_SetConfig+0x268>
 8008bce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bd2:	d81b      	bhi.n	8008c0c <UART_SetConfig+0x270>
 8008bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bd8:	d00c      	beq.n	8008bf4 <UART_SetConfig+0x258>
 8008bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bde:	d815      	bhi.n	8008c0c <UART_SetConfig+0x270>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d003      	beq.n	8008bec <UART_SetConfig+0x250>
 8008be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008be8:	d008      	beq.n	8008bfc <UART_SetConfig+0x260>
 8008bea:	e00f      	b.n	8008c0c <UART_SetConfig+0x270>
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bf2:	e052      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bfa:	e04e      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c02:	e04a      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c0a:	e046      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c12:	e042      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a17      	ldr	r2, [pc, #92]	@ (8008c78 <UART_SetConfig+0x2dc>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d13a      	bne.n	8008c94 <UART_SetConfig+0x2f8>
 8008c1e:	4b18      	ldr	r3, [pc, #96]	@ (8008c80 <UART_SetConfig+0x2e4>)
 8008c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008c28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c2c:	d01a      	beq.n	8008c64 <UART_SetConfig+0x2c8>
 8008c2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c32:	d81b      	bhi.n	8008c6c <UART_SetConfig+0x2d0>
 8008c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c38:	d00c      	beq.n	8008c54 <UART_SetConfig+0x2b8>
 8008c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c3e:	d815      	bhi.n	8008c6c <UART_SetConfig+0x2d0>
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <UART_SetConfig+0x2b0>
 8008c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c48:	d008      	beq.n	8008c5c <UART_SetConfig+0x2c0>
 8008c4a:	e00f      	b.n	8008c6c <UART_SetConfig+0x2d0>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c52:	e022      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008c54:	2302      	movs	r3, #2
 8008c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c5a:	e01e      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c62:	e01a      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008c64:	2308      	movs	r3, #8
 8008c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c6a:	e016      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c72:	e012      	b.n	8008c9a <UART_SetConfig+0x2fe>
 8008c74:	cfff69f3 	.word	0xcfff69f3
 8008c78:	40008000 	.word	0x40008000
 8008c7c:	40013800 	.word	0x40013800
 8008c80:	40021000 	.word	0x40021000
 8008c84:	40004400 	.word	0x40004400
 8008c88:	40004800 	.word	0x40004800
 8008c8c:	40004c00 	.word	0x40004c00
 8008c90:	40005000 	.word	0x40005000
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4aae      	ldr	r2, [pc, #696]	@ (8008f58 <UART_SetConfig+0x5bc>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	f040 8097 	bne.w	8008dd4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ca6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008caa:	2b08      	cmp	r3, #8
 8008cac:	d823      	bhi.n	8008cf6 <UART_SetConfig+0x35a>
 8008cae:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb4 <UART_SetConfig+0x318>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008cf7 	.word	0x08008cf7
 8008cbc:	08008ce1 	.word	0x08008ce1
 8008cc0:	08008cf7 	.word	0x08008cf7
 8008cc4:	08008ce7 	.word	0x08008ce7
 8008cc8:	08008cf7 	.word	0x08008cf7
 8008ccc:	08008cf7 	.word	0x08008cf7
 8008cd0:	08008cf7 	.word	0x08008cf7
 8008cd4:	08008cef 	.word	0x08008cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cd8:	f7fc ffd6 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 8008cdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cde:	e010      	b.n	8008d02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ce0:	4b9e      	ldr	r3, [pc, #632]	@ (8008f5c <UART_SetConfig+0x5c0>)
 8008ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ce4:	e00d      	b.n	8008d02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ce6:	f7fc ff61 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8008cea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cec:	e009      	b.n	8008d02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cf4:	e005      	b.n	8008d02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 8130 	beq.w	8008f6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0e:	4a94      	ldr	r2, [pc, #592]	@ (8008f60 <UART_SetConfig+0x5c4>)
 8008d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	4613      	mov	r3, r2
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	4413      	add	r3, r2
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d305      	bcc.n	8008d3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d903      	bls.n	8008d42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d40:	e113      	b.n	8008f6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d44:	2200      	movs	r2, #0
 8008d46:	60bb      	str	r3, [r7, #8]
 8008d48:	60fa      	str	r2, [r7, #12]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4e:	4a84      	ldr	r2, [pc, #528]	@ (8008f60 <UART_SetConfig+0x5c4>)
 8008d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	2200      	movs	r2, #0
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d64:	f7f7 ffc8 	bl	8000cf8 <__aeabi_uldivmod>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	f04f 0200 	mov.w	r2, #0
 8008d74:	f04f 0300 	mov.w	r3, #0
 8008d78:	020b      	lsls	r3, r1, #8
 8008d7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d7e:	0202      	lsls	r2, r0, #8
 8008d80:	6979      	ldr	r1, [r7, #20]
 8008d82:	6849      	ldr	r1, [r1, #4]
 8008d84:	0849      	lsrs	r1, r1, #1
 8008d86:	2000      	movs	r0, #0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	eb12 0804 	adds.w	r8, r2, r4
 8008d90:	eb43 0905 	adc.w	r9, r3, r5
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	469a      	mov	sl, r3
 8008d9c:	4693      	mov	fp, r2
 8008d9e:	4652      	mov	r2, sl
 8008da0:	465b      	mov	r3, fp
 8008da2:	4640      	mov	r0, r8
 8008da4:	4649      	mov	r1, r9
 8008da6:	f7f7 ffa7 	bl	8000cf8 <__aeabi_uldivmod>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	4613      	mov	r3, r2
 8008db0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008db8:	d308      	bcc.n	8008dcc <UART_SetConfig+0x430>
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dc0:	d204      	bcs.n	8008dcc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6a3a      	ldr	r2, [r7, #32]
 8008dc8:	60da      	str	r2, [r3, #12]
 8008dca:	e0ce      	b.n	8008f6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008dd2:	e0ca      	b.n	8008f6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ddc:	d166      	bne.n	8008eac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008dde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008de2:	2b08      	cmp	r3, #8
 8008de4:	d827      	bhi.n	8008e36 <UART_SetConfig+0x49a>
 8008de6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dec <UART_SetConfig+0x450>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e11 	.word	0x08008e11
 8008df0:	08008e19 	.word	0x08008e19
 8008df4:	08008e21 	.word	0x08008e21
 8008df8:	08008e37 	.word	0x08008e37
 8008dfc:	08008e27 	.word	0x08008e27
 8008e00:	08008e37 	.word	0x08008e37
 8008e04:	08008e37 	.word	0x08008e37
 8008e08:	08008e37 	.word	0x08008e37
 8008e0c:	08008e2f 	.word	0x08008e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e10:	f7fc ff3a 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 8008e14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e16:	e014      	b.n	8008e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e18:	f7fc ff4c 	bl	8005cb4 <HAL_RCC_GetPCLK2Freq>
 8008e1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e1e:	e010      	b.n	8008e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e20:	4b4e      	ldr	r3, [pc, #312]	@ (8008f5c <UART_SetConfig+0x5c0>)
 8008e22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e24:	e00d      	b.n	8008e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e26:	f7fc fec1 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8008e2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e2c:	e009      	b.n	8008e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e34:	e005      	b.n	8008e42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8090 	beq.w	8008f6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4e:	4a44      	ldr	r2, [pc, #272]	@ (8008f60 <UART_SetConfig+0x5c4>)
 8008e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e5c:	005a      	lsls	r2, r3, #1
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	441a      	add	r2, r3
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	d916      	bls.n	8008ea4 <UART_SetConfig+0x508>
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e7c:	d212      	bcs.n	8008ea4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	f023 030f 	bic.w	r3, r3, #15
 8008e86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	8bfb      	ldrh	r3, [r7, #30]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	8bfa      	ldrh	r2, [r7, #30]
 8008ea0:	60da      	str	r2, [r3, #12]
 8008ea2:	e062      	b.n	8008f6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008eaa:	e05e      	b.n	8008f6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008eac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d828      	bhi.n	8008f06 <UART_SetConfig+0x56a>
 8008eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ebc <UART_SetConfig+0x520>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ee1 	.word	0x08008ee1
 8008ec0:	08008ee9 	.word	0x08008ee9
 8008ec4:	08008ef1 	.word	0x08008ef1
 8008ec8:	08008f07 	.word	0x08008f07
 8008ecc:	08008ef7 	.word	0x08008ef7
 8008ed0:	08008f07 	.word	0x08008f07
 8008ed4:	08008f07 	.word	0x08008f07
 8008ed8:	08008f07 	.word	0x08008f07
 8008edc:	08008eff 	.word	0x08008eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ee0:	f7fc fed2 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 8008ee4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ee6:	e014      	b.n	8008f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ee8:	f7fc fee4 	bl	8005cb4 <HAL_RCC_GetPCLK2Freq>
 8008eec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eee:	e010      	b.n	8008f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8008f5c <UART_SetConfig+0x5c0>)
 8008ef2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ef4:	e00d      	b.n	8008f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ef6:	f7fc fe59 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8008efa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008efc:	e009      	b.n	8008f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f04:	e005      	b.n	8008f12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008f06:	2300      	movs	r3, #0
 8008f08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f10:	bf00      	nop
    }

    if (pclk != 0U)
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d028      	beq.n	8008f6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1c:	4a10      	ldr	r2, [pc, #64]	@ (8008f60 <UART_SetConfig+0x5c4>)
 8008f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f22:	461a      	mov	r2, r3
 8008f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f26:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	085b      	lsrs	r3, r3, #1
 8008f30:	441a      	add	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	2b0f      	cmp	r3, #15
 8008f40:	d910      	bls.n	8008f64 <UART_SetConfig+0x5c8>
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f48:	d20c      	bcs.n	8008f64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	60da      	str	r2, [r3, #12]
 8008f54:	e009      	b.n	8008f6a <UART_SetConfig+0x5ce>
 8008f56:	bf00      	nop
 8008f58:	40008000 	.word	0x40008000
 8008f5c:	00f42400 	.word	0x00f42400
 8008f60:	0800ebdc 	.word	0x0800ebdc
      }
      else
      {
        ret = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	2200      	movs	r2, #0
 8008f84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f86:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3730      	adds	r7, #48	@ 0x30
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00a      	beq.n	8008fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009006:	f003 0304 	and.w	r3, r3, #4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009028:	f003 0310 	and.w	r3, r3, #16
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00a      	beq.n	8009046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01a      	beq.n	80090aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800908e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009092:	d10a      	bne.n	80090aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	605a      	str	r2, [r3, #4]
  }
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b098      	sub	sp, #96	@ 0x60
 80090dc:	af02      	add	r7, sp, #8
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090e8:	f7f9 fbb8 	bl	800285c <HAL_GetTick>
 80090ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b08      	cmp	r3, #8
 80090fa:	d12f      	bne.n	800915c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009104:	2200      	movs	r2, #0
 8009106:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f88e 	bl	800922c <UART_WaitOnFlagUntilTimeout>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d022      	beq.n	800915c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800912a:	653b      	str	r3, [r7, #80]	@ 0x50
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	461a      	mov	r2, r3
 8009132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009134:	647b      	str	r3, [r7, #68]	@ 0x44
 8009136:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800913a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e6      	bne.n	8009116 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2220      	movs	r2, #32
 800914c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e063      	b.n	8009224 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b04      	cmp	r3, #4
 8009168:	d149      	bne.n	80091fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800916a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009172:	2200      	movs	r2, #0
 8009174:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f857 	bl	800922c <UART_WaitOnFlagUntilTimeout>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d03c      	beq.n	80091fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	623b      	str	r3, [r7, #32]
   return(result);
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009198:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80091a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e6      	bne.n	8009184 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f023 0301 	bic.w	r3, r3, #1
 80091cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3308      	adds	r3, #8
 80091d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091d6:	61fa      	str	r2, [r7, #28]
 80091d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	69b9      	ldr	r1, [r7, #24]
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	617b      	str	r3, [r7, #20]
   return(result);
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e5      	bne.n	80091b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e012      	b.n	8009224 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3758      	adds	r7, #88	@ 0x58
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	4613      	mov	r3, r2
 800923a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800923c:	e04f      	b.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d04b      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009246:	f7f9 fb09 	bl	800285c <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	429a      	cmp	r2, r3
 8009254:	d302      	bcc.n	800925c <UART_WaitOnFlagUntilTimeout+0x30>
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e04e      	b.n	80092fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0304 	and.w	r3, r3, #4
 800926a:	2b00      	cmp	r3, #0
 800926c:	d037      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b80      	cmp	r3, #128	@ 0x80
 8009272:	d034      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b40      	cmp	r3, #64	@ 0x40
 8009278:	d031      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	f003 0308 	and.w	r3, r3, #8
 8009284:	2b08      	cmp	r3, #8
 8009286:	d110      	bne.n	80092aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2208      	movs	r2, #8
 800928e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 f95b 	bl	800954c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2208      	movs	r2, #8
 800929a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e029      	b.n	80092fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092b8:	d111      	bne.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f941 	bl	800954c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e00f      	b.n	80092fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69da      	ldr	r2, [r3, #28]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4013      	ands	r3, r2
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	bf0c      	ite	eq
 80092ee:	2301      	moveq	r3, #1
 80092f0:	2300      	movne	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d0a0      	beq.n	800923e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009308:	b480      	push	{r7}
 800930a:	b0a3      	sub	sp, #140	@ 0x8c
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	4613      	mov	r3, r2
 8009314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	88fa      	ldrh	r2, [r7, #6]
 8009320:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800933a:	d10e      	bne.n	800935a <UART_Start_Receive_IT+0x52>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d105      	bne.n	8009350 <UART_Start_Receive_IT+0x48>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800934a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800934e:	e02d      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	22ff      	movs	r2, #255	@ 0xff
 8009354:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009358:	e028      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10d      	bne.n	800937e <UART_Start_Receive_IT+0x76>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d104      	bne.n	8009374 <UART_Start_Receive_IT+0x6c>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	22ff      	movs	r2, #255	@ 0xff
 800936e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009372:	e01b      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	227f      	movs	r2, #127	@ 0x7f
 8009378:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800937c:	e016      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009386:	d10d      	bne.n	80093a4 <UART_Start_Receive_IT+0x9c>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d104      	bne.n	800939a <UART_Start_Receive_IT+0x92>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	227f      	movs	r2, #127	@ 0x7f
 8009394:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009398:	e008      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	223f      	movs	r2, #63	@ 0x3f
 800939e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093a2:	e003      	b.n	80093ac <UART_Start_Receive_IT+0xa4>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2222      	movs	r2, #34	@ 0x22
 80093b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3308      	adds	r3, #8
 80093c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80093cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093ce:	f043 0301 	orr.w	r3, r3, #1
 80093d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80093e0:	673a      	str	r2, [r7, #112]	@ 0x70
 80093e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80093e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80093ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e3      	bne.n	80093bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093fc:	d14f      	bne.n	800949e <UART_Start_Receive_IT+0x196>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009404:	88fa      	ldrh	r2, [r7, #6]
 8009406:	429a      	cmp	r2, r3
 8009408:	d349      	bcc.n	800949e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009412:	d107      	bne.n	8009424 <UART_Start_Receive_IT+0x11c>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d103      	bne.n	8009424 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a47      	ldr	r2, [pc, #284]	@ (800953c <UART_Start_Receive_IT+0x234>)
 8009420:	675a      	str	r2, [r3, #116]	@ 0x74
 8009422:	e002      	b.n	800942a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4a46      	ldr	r2, [pc, #280]	@ (8009540 <UART_Start_Receive_IT+0x238>)
 8009428:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d01a      	beq.n	8009468 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009446:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009456:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800945a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e4      	bne.n	8009432 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800947e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3308      	adds	r3, #8
 8009486:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009488:	64ba      	str	r2, [r7, #72]	@ 0x48
 800948a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800948e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e5      	bne.n	8009468 <UART_Start_Receive_IT+0x160>
 800949c:	e046      	b.n	800952c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094a6:	d107      	bne.n	80094b8 <UART_Start_Receive_IT+0x1b0>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d103      	bne.n	80094b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a24      	ldr	r2, [pc, #144]	@ (8009544 <UART_Start_Receive_IT+0x23c>)
 80094b4:	675a      	str	r2, [r3, #116]	@ 0x74
 80094b6:	e002      	b.n	80094be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4a23      	ldr	r2, [pc, #140]	@ (8009548 <UART_Start_Receive_IT+0x240>)
 80094bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d019      	beq.n	80094fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80094da:	677b      	str	r3, [r7, #116]	@ 0x74
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	461a      	mov	r2, r3
 80094e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80094f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e6      	bne.n	80094c6 <UART_Start_Receive_IT+0x1be>
 80094f8:	e018      	b.n	800952c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	613b      	str	r3, [r7, #16]
   return(result);
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f043 0320 	orr.w	r3, r3, #32
 800950e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009518:	623b      	str	r3, [r7, #32]
 800951a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	69f9      	ldr	r1, [r7, #28]
 800951e:	6a3a      	ldr	r2, [r7, #32]
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	61bb      	str	r3, [r7, #24]
   return(result);
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e6      	bne.n	80094fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	378c      	adds	r7, #140	@ 0x8c
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	08009d69 	.word	0x08009d69
 8009540:	08009a05 	.word	0x08009a05
 8009544:	0800984d 	.word	0x0800984d
 8009548:	08009695 	.word	0x08009695

0800954c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800954c:	b480      	push	{r7}
 800954e:	b095      	sub	sp, #84	@ 0x54
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009568:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009572:	643b      	str	r3, [r7, #64]	@ 0x40
 8009574:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009578:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e6      	bne.n	8009554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3308      	adds	r3, #8
 800958c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	61fb      	str	r3, [r7, #28]
   return(result);
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800959c:	f023 0301 	bic.w	r3, r3, #1
 80095a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3308      	adds	r3, #8
 80095a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1e3      	bne.n	8009586 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d118      	bne.n	80095f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	f023 0310 	bic.w	r3, r3, #16
 80095da:	647b      	str	r3, [r7, #68]	@ 0x44
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	461a      	mov	r2, r3
 80095e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	6979      	ldr	r1, [r7, #20]
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	613b      	str	r3, [r7, #16]
   return(result);
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e6      	bne.n	80095c6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2220      	movs	r2, #32
 80095fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800960c:	bf00      	nop
 800960e:	3754      	adds	r7, #84	@ 0x54
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff f99e 	bl	8008970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009634:	bf00      	nop
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	60bb      	str	r3, [r7, #8]
   return(result);
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	61bb      	str	r3, [r7, #24]
 8009664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6979      	ldr	r1, [r7, #20]
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	613b      	str	r3, [r7, #16]
   return(result);
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e6      	bne.n	8009644 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2220      	movs	r2, #32
 800967a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff f969 	bl	800895c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800968a:	bf00      	nop
 800968c:	3720      	adds	r7, #32
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b09c      	sub	sp, #112	@ 0x70
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80096a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096ac:	2b22      	cmp	r3, #34	@ 0x22
 80096ae:	f040 80be 	bne.w	800982e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80096bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80096c0:	b2d9      	uxtb	r1, r3
 80096c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096cc:	400a      	ands	r2, r1
 80096ce:	b2d2      	uxtb	r2, r2
 80096d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f040 80a1 	bne.w	800983e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800970a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800970c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009710:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800971a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800971c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009720:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e6      	bne.n	80096fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3308      	adds	r3, #8
 8009734:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800973e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009740:	f023 0301 	bic.w	r3, r3, #1
 8009744:	667b      	str	r3, [r7, #100]	@ 0x64
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3308      	adds	r3, #8
 800974c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800974e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009750:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009754:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800975c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e5      	bne.n	800972e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2220      	movs	r2, #32
 8009766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a33      	ldr	r2, [pc, #204]	@ (8009848 <UART_RxISR_8BIT+0x1b4>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d01f      	beq.n	80097c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d018      	beq.n	80097c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	623b      	str	r3, [r7, #32]
   return(result);
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80097ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b4:	e841 2300 	strex	r3, r2, [r1]
 80097b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e6      	bne.n	800978e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d12e      	bne.n	8009826 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	e853 3f00 	ldrex	r3, [r3]
 80097da:	60fb      	str	r3, [r7, #12]
   return(result);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f023 0310 	bic.w	r3, r3, #16
 80097e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	461a      	mov	r2, r3
 80097ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097ec:	61fb      	str	r3, [r7, #28]
 80097ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f0:	69b9      	ldr	r1, [r7, #24]
 80097f2:	69fa      	ldr	r2, [r7, #28]
 80097f4:	e841 2300 	strex	r3, r2, [r1]
 80097f8:	617b      	str	r3, [r7, #20]
   return(result);
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e6      	bne.n	80097ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	f003 0310 	and.w	r3, r3, #16
 800980a:	2b10      	cmp	r3, #16
 800980c:	d103      	bne.n	8009816 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2210      	movs	r2, #16
 8009814:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7ff f8b0 	bl	8008984 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009824:	e00b      	b.n	800983e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7f8 f942 	bl	8001ab0 <HAL_UART_RxCpltCallback>
}
 800982c:	e007      	b.n	800983e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	699a      	ldr	r2, [r3, #24]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f042 0208 	orr.w	r2, r2, #8
 800983c:	619a      	str	r2, [r3, #24]
}
 800983e:	bf00      	nop
 8009840:	3770      	adds	r7, #112	@ 0x70
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	40008000 	.word	0x40008000

0800984c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b09c      	sub	sp, #112	@ 0x70
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800985a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009864:	2b22      	cmp	r3, #34	@ 0x22
 8009866:	f040 80be 	bne.w	80099e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009870:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009878:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800987a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800987e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009882:	4013      	ands	r3, r2
 8009884:	b29a      	uxth	r2, r3
 8009886:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009888:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800988e:	1c9a      	adds	r2, r3, #2
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800989a:	b29b      	uxth	r3, r3
 800989c:	3b01      	subs	r3, #1
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f040 80a1 	bne.w	80099f6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098bc:	e853 3f00 	ldrex	r3, [r3]
 80098c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80098d4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098da:	e841 2300 	strex	r3, r2, [r1]
 80098de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80098e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e6      	bne.n	80098b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3308      	adds	r3, #8
 80098ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f8:	f023 0301 	bic.w	r3, r3, #1
 80098fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3308      	adds	r3, #8
 8009904:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009906:	643a      	str	r2, [r7, #64]	@ 0x40
 8009908:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800990c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e5      	bne.n	80098e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2220      	movs	r2, #32
 800991e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a33      	ldr	r2, [pc, #204]	@ (8009a00 <UART_RxISR_16BIT+0x1b4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d01f      	beq.n	8009978 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d018      	beq.n	8009978 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	61fb      	str	r3, [r7, #28]
   return(result);
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800995a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	461a      	mov	r2, r3
 8009962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009966:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800996a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e6      	bne.n	8009946 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800997c:	2b01      	cmp	r3, #1
 800997e:	d12e      	bne.n	80099de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	e853 3f00 	ldrex	r3, [r3]
 8009992:	60bb      	str	r3, [r7, #8]
   return(result);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f023 0310 	bic.w	r3, r3, #16
 800999a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	461a      	mov	r2, r3
 80099a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80099a4:	61bb      	str	r3, [r7, #24]
 80099a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a8:	6979      	ldr	r1, [r7, #20]
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	e841 2300 	strex	r3, r2, [r1]
 80099b0:	613b      	str	r3, [r7, #16]
   return(result);
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1e6      	bne.n	8009986 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	f003 0310 	and.w	r3, r3, #16
 80099c2:	2b10      	cmp	r3, #16
 80099c4:	d103      	bne.n	80099ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2210      	movs	r2, #16
 80099cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7fe ffd4 	bl	8008984 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099dc:	e00b      	b.n	80099f6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7f8 f866 	bl	8001ab0 <HAL_UART_RxCpltCallback>
}
 80099e4:	e007      	b.n	80099f6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	699a      	ldr	r2, [r3, #24]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f042 0208 	orr.w	r2, r2, #8
 80099f4:	619a      	str	r2, [r3, #24]
}
 80099f6:	bf00      	nop
 80099f8:	3770      	adds	r7, #112	@ 0x70
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	40008000 	.word	0x40008000

08009a04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b0ac      	sub	sp, #176	@ 0xb0
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a12:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a3a:	2b22      	cmp	r3, #34	@ 0x22
 8009a3c:	f040 8183 	bne.w	8009d46 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a46:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a4a:	e126      	b.n	8009c9a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a52:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009a5a:	b2d9      	uxtb	r1, r3
 8009a5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a66:	400a      	ands	r2, r1
 8009a68:	b2d2      	uxtb	r2, r2
 8009a6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d053      	beq.n	8009b46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d011      	beq.n	8009ace <UART_RxISR_8BIT_FIFOEN+0xca>
 8009aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2201      	movs	r2, #1
 8009abc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ac4:	f043 0201 	orr.w	r2, r3, #1
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d011      	beq.n	8009afe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00b      	beq.n	8009afe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2202      	movs	r2, #2
 8009aec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009af4:	f043 0204 	orr.w	r2, r3, #4
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b02:	f003 0304 	and.w	r3, r3, #4
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d011      	beq.n	8009b2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00b      	beq.n	8009b2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2204      	movs	r2, #4
 8009b1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b24:	f043 0202 	orr.w	r2, r3, #2
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d006      	beq.n	8009b46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7fe ff19 	bl	8008970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f040 80a3 	bne.w	8009c9a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b78:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009b7c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e4      	bne.n	8009b54 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009b9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ba0:	f023 0301 	bic.w	r3, r3, #1
 8009ba4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3308      	adds	r3, #8
 8009bae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009bb2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009bb4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009bb8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009bba:	e841 2300 	strex	r3, r2, [r1]
 8009bbe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009bc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1e1      	bne.n	8009b8a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a60      	ldr	r2, [pc, #384]	@ (8009d60 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d021      	beq.n	8009c28 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d01a      	beq.n	8009c28 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bfa:	e853 3f00 	ldrex	r3, [r3]
 8009bfe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c14:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c16:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c1c:	e841 2300 	strex	r3, r2, [r1]
 8009c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e4      	bne.n	8009bf2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d130      	bne.n	8009c92 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c3e:	e853 3f00 	ldrex	r3, [r3]
 8009c42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c46:	f023 0310 	bic.w	r3, r3, #16
 8009c4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c58:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c60:	e841 2300 	strex	r3, r2, [r1]
 8009c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e4      	bne.n	8009c36 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	69db      	ldr	r3, [r3, #28]
 8009c72:	f003 0310 	and.w	r3, r3, #16
 8009c76:	2b10      	cmp	r3, #16
 8009c78:	d103      	bne.n	8009c82 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2210      	movs	r2, #16
 8009c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7fe fe7a 	bl	8008984 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009c90:	e00e      	b.n	8009cb0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7f7 ff0c 	bl	8001ab0 <HAL_UART_RxCpltCallback>
        break;
 8009c98:	e00a      	b.n	8009cb0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c9a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d006      	beq.n	8009cb0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8009ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ca6:	f003 0320 	and.w	r3, r3, #32
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f47f aece 	bne.w	8009a4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cb6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009cba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d049      	beq.n	8009d56 <UART_RxISR_8BIT_FIFOEN+0x352>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cc8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d242      	bcs.n	8009d56 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	e853 3f00 	ldrex	r3, [r3]
 8009cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cfc:	e841 2300 	strex	r3, r2, [r1]
 8009d00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1e3      	bne.n	8009cd0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a16      	ldr	r2, [pc, #88]	@ (8009d64 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009d0c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	f043 0320 	orr.w	r3, r3, #32
 8009d22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d30:	61bb      	str	r3, [r7, #24]
 8009d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d34:	6979      	ldr	r1, [r7, #20]
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	e841 2300 	strex	r3, r2, [r1]
 8009d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e4      	bne.n	8009d0e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d44:	e007      	b.n	8009d56 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	699a      	ldr	r2, [r3, #24]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f042 0208 	orr.w	r2, r2, #8
 8009d54:	619a      	str	r2, [r3, #24]
}
 8009d56:	bf00      	nop
 8009d58:	37b0      	adds	r7, #176	@ 0xb0
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	40008000 	.word	0x40008000
 8009d64:	08009695 	.word	0x08009695

08009d68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b0ae      	sub	sp, #184	@ 0xb8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d76:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d9e:	2b22      	cmp	r3, #34	@ 0x22
 8009da0:	f040 8187 	bne.w	800a0b2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009daa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dae:	e12a      	b.n	800a006 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009dc2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009dc6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009dca:	4013      	ands	r3, r2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009dd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd8:	1c9a      	adds	r2, r3, #2
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	3b01      	subs	r3, #1
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009dfe:	f003 0307 	and.w	r3, r3, #7
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d053      	beq.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d011      	beq.n	8009e36 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2201      	movs	r2, #1
 8009e24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e2c:	f043 0201 	orr.w	r2, r3, #1
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d011      	beq.n	8009e66 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00b      	beq.n	8009e66 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2202      	movs	r2, #2
 8009e54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e5c:	f043 0204 	orr.w	r2, r3, #4
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e6a:	f003 0304 	and.w	r3, r3, #4
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d011      	beq.n	8009e96 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00b      	beq.n	8009e96 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2204      	movs	r2, #4
 8009e84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e8c:	f043 0202 	orr.w	r2, r3, #2
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d006      	beq.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7fe fd65 	bl	8008970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f040 80a5 	bne.w	800a006 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009eca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ed0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ede:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ee2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009eea:	e841 2300 	strex	r3, r2, [r1]
 8009eee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e2      	bne.n	8009ebc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3308      	adds	r3, #8
 8009efc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f00:	e853 3f00 	ldrex	r3, [r3]
 8009f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f0c:	f023 0301 	bic.w	r3, r3, #1
 8009f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3308      	adds	r3, #8
 8009f1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009f1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f26:	e841 2300 	strex	r3, r2, [r1]
 8009f2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1e1      	bne.n	8009ef6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a60      	ldr	r2, [pc, #384]	@ (800a0cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d021      	beq.n	8009f94 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d01a      	beq.n	8009f94 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f66:	e853 3f00 	ldrex	r3, [r3]
 8009f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009f80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f82:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f88:	e841 2300 	strex	r3, r2, [r1]
 8009f8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1e4      	bne.n	8009f5e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d130      	bne.n	8009ffe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009faa:	e853 3f00 	ldrex	r3, [r3]
 8009fae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb2:	f023 0310 	bic.w	r3, r3, #16
 8009fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fcc:	e841 2300 	strex	r3, r2, [r1]
 8009fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1e4      	bne.n	8009fa2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	69db      	ldr	r3, [r3, #28]
 8009fde:	f003 0310 	and.w	r3, r3, #16
 8009fe2:	2b10      	cmp	r3, #16
 8009fe4:	d103      	bne.n	8009fee <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2210      	movs	r2, #16
 8009fec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7fe fcc4 	bl	8008984 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009ffc:	e00e      	b.n	800a01c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7f7 fd56 	bl	8001ab0 <HAL_UART_RxCpltCallback>
        break;
 800a004:	e00a      	b.n	800a01c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a006:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d006      	beq.n	800a01c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800a00e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	2b00      	cmp	r3, #0
 800a018:	f47f aeca 	bne.w	8009db0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a022:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a026:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d049      	beq.n	800a0c2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a034:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a038:	429a      	cmp	r2, r3
 800a03a:	d242      	bcs.n	800a0c2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3308      	adds	r3, #8
 800a042:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	623b      	str	r3, [r7, #32]
   return(result);
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a052:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3308      	adds	r3, #8
 800a05c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a060:	633a      	str	r2, [r7, #48]	@ 0x30
 800a062:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a068:	e841 2300 	strex	r3, r2, [r1]
 800a06c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1e3      	bne.n	800a03c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a16      	ldr	r2, [pc, #88]	@ (800a0d0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a078:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	e853 3f00 	ldrex	r3, [r3]
 800a086:	60fb      	str	r3, [r7, #12]
   return(result);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f043 0320 	orr.w	r3, r3, #32
 800a08e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a09c:	61fb      	str	r3, [r7, #28]
 800a09e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a0:	69b9      	ldr	r1, [r7, #24]
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e4      	bne.n	800a07a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0b0:	e007      	b.n	800a0c2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	699a      	ldr	r2, [r3, #24]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f042 0208 	orr.w	r2, r2, #8
 800a0c0:	619a      	str	r2, [r3, #24]
}
 800a0c2:	bf00      	nop
 800a0c4:	37b8      	adds	r7, #184	@ 0xb8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	40008000 	.word	0x40008000
 800a0d0:	0800984d 	.word	0x0800984d

0800a0d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d101      	bne.n	800a126 <HAL_UARTEx_DisableFifoMode+0x16>
 800a122:	2302      	movs	r3, #2
 800a124:	e027      	b.n	800a176 <HAL_UARTEx_DisableFifoMode+0x66>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2224      	movs	r2, #36	@ 0x24
 800a132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f022 0201 	bic.w	r2, r2, #1
 800a14c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a154:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2220      	movs	r2, #32
 800a168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b084      	sub	sp, #16
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a192:	2b01      	cmp	r3, #1
 800a194:	d101      	bne.n	800a19a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a196:	2302      	movs	r3, #2
 800a198:	e02d      	b.n	800a1f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2224      	movs	r2, #36	@ 0x24
 800a1a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0201 	bic.w	r2, r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f850 	bl	800a27c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d101      	bne.n	800a216 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a212:	2302      	movs	r3, #2
 800a214:	e02d      	b.n	800a272 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2224      	movs	r2, #36	@ 0x24
 800a222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0201 	bic.w	r2, r2, #1
 800a23c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f812 	bl	800a27c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d108      	bne.n	800a29e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a29c:	e031      	b.n	800a302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a29e:	2308      	movs	r3, #8
 800a2a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2a2:	2308      	movs	r3, #8
 800a2a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	0e5b      	lsrs	r3, r3, #25
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 0307 	and.w	r3, r3, #7
 800a2b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	0f5b      	lsrs	r3, r3, #29
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	f003 0307 	and.w	r3, r3, #7
 800a2c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	7b3a      	ldrb	r2, [r7, #12]
 800a2ca:	4911      	ldr	r1, [pc, #68]	@ (800a310 <UARTEx_SetNbDataToProcess+0x94>)
 800a2cc:	5c8a      	ldrb	r2, [r1, r2]
 800a2ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2d2:	7b3a      	ldrb	r2, [r7, #12]
 800a2d4:	490f      	ldr	r1, [pc, #60]	@ (800a314 <UARTEx_SetNbDataToProcess+0x98>)
 800a2d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	7b7a      	ldrb	r2, [r7, #13]
 800a2e8:	4909      	ldr	r1, [pc, #36]	@ (800a310 <UARTEx_SetNbDataToProcess+0x94>)
 800a2ea:	5c8a      	ldrb	r2, [r1, r2]
 800a2ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2f0:	7b7a      	ldrb	r2, [r7, #13]
 800a2f2:	4908      	ldr	r1, [pc, #32]	@ (800a314 <UARTEx_SetNbDataToProcess+0x98>)
 800a2f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a302:	bf00      	nop
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	0800ebf4 	.word	0x0800ebf4
 800a314:	0800ebfc 	.word	0x0800ebfc

0800a318 <atoi>:
 800a318:	220a      	movs	r2, #10
 800a31a:	2100      	movs	r1, #0
 800a31c:	f000 b87c 	b.w	800a418 <strtol>

0800a320 <_strtol_l.constprop.0>:
 800a320:	2b24      	cmp	r3, #36	@ 0x24
 800a322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a326:	4686      	mov	lr, r0
 800a328:	4690      	mov	r8, r2
 800a32a:	d801      	bhi.n	800a330 <_strtol_l.constprop.0+0x10>
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d106      	bne.n	800a33e <_strtol_l.constprop.0+0x1e>
 800a330:	f001 f8f0 	bl	800b514 <__errno>
 800a334:	2316      	movs	r3, #22
 800a336:	6003      	str	r3, [r0, #0]
 800a338:	2000      	movs	r0, #0
 800a33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a33e:	4834      	ldr	r0, [pc, #208]	@ (800a410 <_strtol_l.constprop.0+0xf0>)
 800a340:	460d      	mov	r5, r1
 800a342:	462a      	mov	r2, r5
 800a344:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a348:	5d06      	ldrb	r6, [r0, r4]
 800a34a:	f016 0608 	ands.w	r6, r6, #8
 800a34e:	d1f8      	bne.n	800a342 <_strtol_l.constprop.0+0x22>
 800a350:	2c2d      	cmp	r4, #45	@ 0x2d
 800a352:	d12d      	bne.n	800a3b0 <_strtol_l.constprop.0+0x90>
 800a354:	782c      	ldrb	r4, [r5, #0]
 800a356:	2601      	movs	r6, #1
 800a358:	1c95      	adds	r5, r2, #2
 800a35a:	f033 0210 	bics.w	r2, r3, #16
 800a35e:	d109      	bne.n	800a374 <_strtol_l.constprop.0+0x54>
 800a360:	2c30      	cmp	r4, #48	@ 0x30
 800a362:	d12a      	bne.n	800a3ba <_strtol_l.constprop.0+0x9a>
 800a364:	782a      	ldrb	r2, [r5, #0]
 800a366:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a36a:	2a58      	cmp	r2, #88	@ 0x58
 800a36c:	d125      	bne.n	800a3ba <_strtol_l.constprop.0+0x9a>
 800a36e:	786c      	ldrb	r4, [r5, #1]
 800a370:	2310      	movs	r3, #16
 800a372:	3502      	adds	r5, #2
 800a374:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a378:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a37c:	2200      	movs	r2, #0
 800a37e:	fbbc f9f3 	udiv	r9, ip, r3
 800a382:	4610      	mov	r0, r2
 800a384:	fb03 ca19 	mls	sl, r3, r9, ip
 800a388:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a38c:	2f09      	cmp	r7, #9
 800a38e:	d81b      	bhi.n	800a3c8 <_strtol_l.constprop.0+0xa8>
 800a390:	463c      	mov	r4, r7
 800a392:	42a3      	cmp	r3, r4
 800a394:	dd27      	ble.n	800a3e6 <_strtol_l.constprop.0+0xc6>
 800a396:	1c57      	adds	r7, r2, #1
 800a398:	d007      	beq.n	800a3aa <_strtol_l.constprop.0+0x8a>
 800a39a:	4581      	cmp	r9, r0
 800a39c:	d320      	bcc.n	800a3e0 <_strtol_l.constprop.0+0xc0>
 800a39e:	d101      	bne.n	800a3a4 <_strtol_l.constprop.0+0x84>
 800a3a0:	45a2      	cmp	sl, r4
 800a3a2:	db1d      	blt.n	800a3e0 <_strtol_l.constprop.0+0xc0>
 800a3a4:	fb00 4003 	mla	r0, r0, r3, r4
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3ae:	e7eb      	b.n	800a388 <_strtol_l.constprop.0+0x68>
 800a3b0:	2c2b      	cmp	r4, #43	@ 0x2b
 800a3b2:	bf04      	itt	eq
 800a3b4:	782c      	ldrbeq	r4, [r5, #0]
 800a3b6:	1c95      	addeq	r5, r2, #2
 800a3b8:	e7cf      	b.n	800a35a <_strtol_l.constprop.0+0x3a>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1da      	bne.n	800a374 <_strtol_l.constprop.0+0x54>
 800a3be:	2c30      	cmp	r4, #48	@ 0x30
 800a3c0:	bf0c      	ite	eq
 800a3c2:	2308      	moveq	r3, #8
 800a3c4:	230a      	movne	r3, #10
 800a3c6:	e7d5      	b.n	800a374 <_strtol_l.constprop.0+0x54>
 800a3c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a3cc:	2f19      	cmp	r7, #25
 800a3ce:	d801      	bhi.n	800a3d4 <_strtol_l.constprop.0+0xb4>
 800a3d0:	3c37      	subs	r4, #55	@ 0x37
 800a3d2:	e7de      	b.n	800a392 <_strtol_l.constprop.0+0x72>
 800a3d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a3d8:	2f19      	cmp	r7, #25
 800a3da:	d804      	bhi.n	800a3e6 <_strtol_l.constprop.0+0xc6>
 800a3dc:	3c57      	subs	r4, #87	@ 0x57
 800a3de:	e7d8      	b.n	800a392 <_strtol_l.constprop.0+0x72>
 800a3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e4:	e7e1      	b.n	800a3aa <_strtol_l.constprop.0+0x8a>
 800a3e6:	1c53      	adds	r3, r2, #1
 800a3e8:	d108      	bne.n	800a3fc <_strtol_l.constprop.0+0xdc>
 800a3ea:	2322      	movs	r3, #34	@ 0x22
 800a3ec:	f8ce 3000 	str.w	r3, [lr]
 800a3f0:	4660      	mov	r0, ip
 800a3f2:	f1b8 0f00 	cmp.w	r8, #0
 800a3f6:	d0a0      	beq.n	800a33a <_strtol_l.constprop.0+0x1a>
 800a3f8:	1e69      	subs	r1, r5, #1
 800a3fa:	e006      	b.n	800a40a <_strtol_l.constprop.0+0xea>
 800a3fc:	b106      	cbz	r6, 800a400 <_strtol_l.constprop.0+0xe0>
 800a3fe:	4240      	negs	r0, r0
 800a400:	f1b8 0f00 	cmp.w	r8, #0
 800a404:	d099      	beq.n	800a33a <_strtol_l.constprop.0+0x1a>
 800a406:	2a00      	cmp	r2, #0
 800a408:	d1f6      	bne.n	800a3f8 <_strtol_l.constprop.0+0xd8>
 800a40a:	f8c8 1000 	str.w	r1, [r8]
 800a40e:	e794      	b.n	800a33a <_strtol_l.constprop.0+0x1a>
 800a410:	0800ec05 	.word	0x0800ec05

0800a414 <_strtol_r>:
 800a414:	f7ff bf84 	b.w	800a320 <_strtol_l.constprop.0>

0800a418 <strtol>:
 800a418:	4613      	mov	r3, r2
 800a41a:	460a      	mov	r2, r1
 800a41c:	4601      	mov	r1, r0
 800a41e:	4802      	ldr	r0, [pc, #8]	@ (800a428 <strtol+0x10>)
 800a420:	6800      	ldr	r0, [r0, #0]
 800a422:	f7ff bf7d 	b.w	800a320 <_strtol_l.constprop.0>
 800a426:	bf00      	nop
 800a428:	20000254 	.word	0x20000254

0800a42c <__cvt>:
 800a42c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a430:	ec57 6b10 	vmov	r6, r7, d0
 800a434:	2f00      	cmp	r7, #0
 800a436:	460c      	mov	r4, r1
 800a438:	4619      	mov	r1, r3
 800a43a:	463b      	mov	r3, r7
 800a43c:	bfbb      	ittet	lt
 800a43e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a442:	461f      	movlt	r7, r3
 800a444:	2300      	movge	r3, #0
 800a446:	232d      	movlt	r3, #45	@ 0x2d
 800a448:	700b      	strb	r3, [r1, #0]
 800a44a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a44c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a450:	4691      	mov	r9, r2
 800a452:	f023 0820 	bic.w	r8, r3, #32
 800a456:	bfbc      	itt	lt
 800a458:	4632      	movlt	r2, r6
 800a45a:	4616      	movlt	r6, r2
 800a45c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a460:	d005      	beq.n	800a46e <__cvt+0x42>
 800a462:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a466:	d100      	bne.n	800a46a <__cvt+0x3e>
 800a468:	3401      	adds	r4, #1
 800a46a:	2102      	movs	r1, #2
 800a46c:	e000      	b.n	800a470 <__cvt+0x44>
 800a46e:	2103      	movs	r1, #3
 800a470:	ab03      	add	r3, sp, #12
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	ab02      	add	r3, sp, #8
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	ec47 6b10 	vmov	d0, r6, r7
 800a47c:	4653      	mov	r3, sl
 800a47e:	4622      	mov	r2, r4
 800a480:	f001 f922 	bl	800b6c8 <_dtoa_r>
 800a484:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a488:	4605      	mov	r5, r0
 800a48a:	d119      	bne.n	800a4c0 <__cvt+0x94>
 800a48c:	f019 0f01 	tst.w	r9, #1
 800a490:	d00e      	beq.n	800a4b0 <__cvt+0x84>
 800a492:	eb00 0904 	add.w	r9, r0, r4
 800a496:	2200      	movs	r2, #0
 800a498:	2300      	movs	r3, #0
 800a49a:	4630      	mov	r0, r6
 800a49c:	4639      	mov	r1, r7
 800a49e:	f7f6 fb4b 	bl	8000b38 <__aeabi_dcmpeq>
 800a4a2:	b108      	cbz	r0, 800a4a8 <__cvt+0x7c>
 800a4a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4a8:	2230      	movs	r2, #48	@ 0x30
 800a4aa:	9b03      	ldr	r3, [sp, #12]
 800a4ac:	454b      	cmp	r3, r9
 800a4ae:	d31e      	bcc.n	800a4ee <__cvt+0xc2>
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4b4:	1b5b      	subs	r3, r3, r5
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	b004      	add	sp, #16
 800a4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4c4:	eb00 0904 	add.w	r9, r0, r4
 800a4c8:	d1e5      	bne.n	800a496 <__cvt+0x6a>
 800a4ca:	7803      	ldrb	r3, [r0, #0]
 800a4cc:	2b30      	cmp	r3, #48	@ 0x30
 800a4ce:	d10a      	bne.n	800a4e6 <__cvt+0xba>
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	f7f6 fb2e 	bl	8000b38 <__aeabi_dcmpeq>
 800a4dc:	b918      	cbnz	r0, 800a4e6 <__cvt+0xba>
 800a4de:	f1c4 0401 	rsb	r4, r4, #1
 800a4e2:	f8ca 4000 	str.w	r4, [sl]
 800a4e6:	f8da 3000 	ldr.w	r3, [sl]
 800a4ea:	4499      	add	r9, r3
 800a4ec:	e7d3      	b.n	800a496 <__cvt+0x6a>
 800a4ee:	1c59      	adds	r1, r3, #1
 800a4f0:	9103      	str	r1, [sp, #12]
 800a4f2:	701a      	strb	r2, [r3, #0]
 800a4f4:	e7d9      	b.n	800a4aa <__cvt+0x7e>

0800a4f6 <__exponent>:
 800a4f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4f8:	2900      	cmp	r1, #0
 800a4fa:	bfba      	itte	lt
 800a4fc:	4249      	neglt	r1, r1
 800a4fe:	232d      	movlt	r3, #45	@ 0x2d
 800a500:	232b      	movge	r3, #43	@ 0x2b
 800a502:	2909      	cmp	r1, #9
 800a504:	7002      	strb	r2, [r0, #0]
 800a506:	7043      	strb	r3, [r0, #1]
 800a508:	dd29      	ble.n	800a55e <__exponent+0x68>
 800a50a:	f10d 0307 	add.w	r3, sp, #7
 800a50e:	461d      	mov	r5, r3
 800a510:	270a      	movs	r7, #10
 800a512:	461a      	mov	r2, r3
 800a514:	fbb1 f6f7 	udiv	r6, r1, r7
 800a518:	fb07 1416 	mls	r4, r7, r6, r1
 800a51c:	3430      	adds	r4, #48	@ 0x30
 800a51e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a522:	460c      	mov	r4, r1
 800a524:	2c63      	cmp	r4, #99	@ 0x63
 800a526:	f103 33ff 	add.w	r3, r3, #4294967295
 800a52a:	4631      	mov	r1, r6
 800a52c:	dcf1      	bgt.n	800a512 <__exponent+0x1c>
 800a52e:	3130      	adds	r1, #48	@ 0x30
 800a530:	1e94      	subs	r4, r2, #2
 800a532:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a536:	1c41      	adds	r1, r0, #1
 800a538:	4623      	mov	r3, r4
 800a53a:	42ab      	cmp	r3, r5
 800a53c:	d30a      	bcc.n	800a554 <__exponent+0x5e>
 800a53e:	f10d 0309 	add.w	r3, sp, #9
 800a542:	1a9b      	subs	r3, r3, r2
 800a544:	42ac      	cmp	r4, r5
 800a546:	bf88      	it	hi
 800a548:	2300      	movhi	r3, #0
 800a54a:	3302      	adds	r3, #2
 800a54c:	4403      	add	r3, r0
 800a54e:	1a18      	subs	r0, r3, r0
 800a550:	b003      	add	sp, #12
 800a552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a554:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a558:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a55c:	e7ed      	b.n	800a53a <__exponent+0x44>
 800a55e:	2330      	movs	r3, #48	@ 0x30
 800a560:	3130      	adds	r1, #48	@ 0x30
 800a562:	7083      	strb	r3, [r0, #2]
 800a564:	70c1      	strb	r1, [r0, #3]
 800a566:	1d03      	adds	r3, r0, #4
 800a568:	e7f1      	b.n	800a54e <__exponent+0x58>
	...

0800a56c <_printf_float>:
 800a56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a570:	b08d      	sub	sp, #52	@ 0x34
 800a572:	460c      	mov	r4, r1
 800a574:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a578:	4616      	mov	r6, r2
 800a57a:	461f      	mov	r7, r3
 800a57c:	4605      	mov	r5, r0
 800a57e:	f000 ff7f 	bl	800b480 <_localeconv_r>
 800a582:	6803      	ldr	r3, [r0, #0]
 800a584:	9304      	str	r3, [sp, #16]
 800a586:	4618      	mov	r0, r3
 800a588:	f7f5 feaa 	bl	80002e0 <strlen>
 800a58c:	2300      	movs	r3, #0
 800a58e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a590:	f8d8 3000 	ldr.w	r3, [r8]
 800a594:	9005      	str	r0, [sp, #20]
 800a596:	3307      	adds	r3, #7
 800a598:	f023 0307 	bic.w	r3, r3, #7
 800a59c:	f103 0208 	add.w	r2, r3, #8
 800a5a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a5a4:	f8d4 b000 	ldr.w	fp, [r4]
 800a5a8:	f8c8 2000 	str.w	r2, [r8]
 800a5ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a5b4:	9307      	str	r3, [sp, #28]
 800a5b6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a5be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5c2:	4b9c      	ldr	r3, [pc, #624]	@ (800a834 <_printf_float+0x2c8>)
 800a5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c8:	f7f6 fae8 	bl	8000b9c <__aeabi_dcmpun>
 800a5cc:	bb70      	cbnz	r0, 800a62c <_printf_float+0xc0>
 800a5ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5d2:	4b98      	ldr	r3, [pc, #608]	@ (800a834 <_printf_float+0x2c8>)
 800a5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d8:	f7f6 fac2 	bl	8000b60 <__aeabi_dcmple>
 800a5dc:	bb30      	cbnz	r0, 800a62c <_printf_float+0xc0>
 800a5de:	2200      	movs	r2, #0
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	f7f6 fab1 	bl	8000b4c <__aeabi_dcmplt>
 800a5ea:	b110      	cbz	r0, 800a5f2 <_printf_float+0x86>
 800a5ec:	232d      	movs	r3, #45	@ 0x2d
 800a5ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5f2:	4a91      	ldr	r2, [pc, #580]	@ (800a838 <_printf_float+0x2cc>)
 800a5f4:	4b91      	ldr	r3, [pc, #580]	@ (800a83c <_printf_float+0x2d0>)
 800a5f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a5fa:	bf94      	ite	ls
 800a5fc:	4690      	movls	r8, r2
 800a5fe:	4698      	movhi	r8, r3
 800a600:	2303      	movs	r3, #3
 800a602:	6123      	str	r3, [r4, #16]
 800a604:	f02b 0304 	bic.w	r3, fp, #4
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	f04f 0900 	mov.w	r9, #0
 800a60e:	9700      	str	r7, [sp, #0]
 800a610:	4633      	mov	r3, r6
 800a612:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a614:	4621      	mov	r1, r4
 800a616:	4628      	mov	r0, r5
 800a618:	f000 f9d2 	bl	800a9c0 <_printf_common>
 800a61c:	3001      	adds	r0, #1
 800a61e:	f040 808d 	bne.w	800a73c <_printf_float+0x1d0>
 800a622:	f04f 30ff 	mov.w	r0, #4294967295
 800a626:	b00d      	add	sp, #52	@ 0x34
 800a628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62c:	4642      	mov	r2, r8
 800a62e:	464b      	mov	r3, r9
 800a630:	4640      	mov	r0, r8
 800a632:	4649      	mov	r1, r9
 800a634:	f7f6 fab2 	bl	8000b9c <__aeabi_dcmpun>
 800a638:	b140      	cbz	r0, 800a64c <_printf_float+0xe0>
 800a63a:	464b      	mov	r3, r9
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bfbc      	itt	lt
 800a640:	232d      	movlt	r3, #45	@ 0x2d
 800a642:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a646:	4a7e      	ldr	r2, [pc, #504]	@ (800a840 <_printf_float+0x2d4>)
 800a648:	4b7e      	ldr	r3, [pc, #504]	@ (800a844 <_printf_float+0x2d8>)
 800a64a:	e7d4      	b.n	800a5f6 <_printf_float+0x8a>
 800a64c:	6863      	ldr	r3, [r4, #4]
 800a64e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a652:	9206      	str	r2, [sp, #24]
 800a654:	1c5a      	adds	r2, r3, #1
 800a656:	d13b      	bne.n	800a6d0 <_printf_float+0x164>
 800a658:	2306      	movs	r3, #6
 800a65a:	6063      	str	r3, [r4, #4]
 800a65c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a660:	2300      	movs	r3, #0
 800a662:	6022      	str	r2, [r4, #0]
 800a664:	9303      	str	r3, [sp, #12]
 800a666:	ab0a      	add	r3, sp, #40	@ 0x28
 800a668:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a66c:	ab09      	add	r3, sp, #36	@ 0x24
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	6861      	ldr	r1, [r4, #4]
 800a672:	ec49 8b10 	vmov	d0, r8, r9
 800a676:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a67a:	4628      	mov	r0, r5
 800a67c:	f7ff fed6 	bl	800a42c <__cvt>
 800a680:	9b06      	ldr	r3, [sp, #24]
 800a682:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a684:	2b47      	cmp	r3, #71	@ 0x47
 800a686:	4680      	mov	r8, r0
 800a688:	d129      	bne.n	800a6de <_printf_float+0x172>
 800a68a:	1cc8      	adds	r0, r1, #3
 800a68c:	db02      	blt.n	800a694 <_printf_float+0x128>
 800a68e:	6863      	ldr	r3, [r4, #4]
 800a690:	4299      	cmp	r1, r3
 800a692:	dd41      	ble.n	800a718 <_printf_float+0x1ac>
 800a694:	f1aa 0a02 	sub.w	sl, sl, #2
 800a698:	fa5f fa8a 	uxtb.w	sl, sl
 800a69c:	3901      	subs	r1, #1
 800a69e:	4652      	mov	r2, sl
 800a6a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a6a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6a6:	f7ff ff26 	bl	800a4f6 <__exponent>
 800a6aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6ac:	1813      	adds	r3, r2, r0
 800a6ae:	2a01      	cmp	r2, #1
 800a6b0:	4681      	mov	r9, r0
 800a6b2:	6123      	str	r3, [r4, #16]
 800a6b4:	dc02      	bgt.n	800a6bc <_printf_float+0x150>
 800a6b6:	6822      	ldr	r2, [r4, #0]
 800a6b8:	07d2      	lsls	r2, r2, #31
 800a6ba:	d501      	bpl.n	800a6c0 <_printf_float+0x154>
 800a6bc:	3301      	adds	r3, #1
 800a6be:	6123      	str	r3, [r4, #16]
 800a6c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d0a2      	beq.n	800a60e <_printf_float+0xa2>
 800a6c8:	232d      	movs	r3, #45	@ 0x2d
 800a6ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6ce:	e79e      	b.n	800a60e <_printf_float+0xa2>
 800a6d0:	9a06      	ldr	r2, [sp, #24]
 800a6d2:	2a47      	cmp	r2, #71	@ 0x47
 800a6d4:	d1c2      	bne.n	800a65c <_printf_float+0xf0>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1c0      	bne.n	800a65c <_printf_float+0xf0>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e7bd      	b.n	800a65a <_printf_float+0xee>
 800a6de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a6e2:	d9db      	bls.n	800a69c <_printf_float+0x130>
 800a6e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a6e8:	d118      	bne.n	800a71c <_printf_float+0x1b0>
 800a6ea:	2900      	cmp	r1, #0
 800a6ec:	6863      	ldr	r3, [r4, #4]
 800a6ee:	dd0b      	ble.n	800a708 <_printf_float+0x19c>
 800a6f0:	6121      	str	r1, [r4, #16]
 800a6f2:	b913      	cbnz	r3, 800a6fa <_printf_float+0x18e>
 800a6f4:	6822      	ldr	r2, [r4, #0]
 800a6f6:	07d0      	lsls	r0, r2, #31
 800a6f8:	d502      	bpl.n	800a700 <_printf_float+0x194>
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	440b      	add	r3, r1
 800a6fe:	6123      	str	r3, [r4, #16]
 800a700:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a702:	f04f 0900 	mov.w	r9, #0
 800a706:	e7db      	b.n	800a6c0 <_printf_float+0x154>
 800a708:	b913      	cbnz	r3, 800a710 <_printf_float+0x1a4>
 800a70a:	6822      	ldr	r2, [r4, #0]
 800a70c:	07d2      	lsls	r2, r2, #31
 800a70e:	d501      	bpl.n	800a714 <_printf_float+0x1a8>
 800a710:	3302      	adds	r3, #2
 800a712:	e7f4      	b.n	800a6fe <_printf_float+0x192>
 800a714:	2301      	movs	r3, #1
 800a716:	e7f2      	b.n	800a6fe <_printf_float+0x192>
 800a718:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a71c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a71e:	4299      	cmp	r1, r3
 800a720:	db05      	blt.n	800a72e <_printf_float+0x1c2>
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	6121      	str	r1, [r4, #16]
 800a726:	07d8      	lsls	r0, r3, #31
 800a728:	d5ea      	bpl.n	800a700 <_printf_float+0x194>
 800a72a:	1c4b      	adds	r3, r1, #1
 800a72c:	e7e7      	b.n	800a6fe <_printf_float+0x192>
 800a72e:	2900      	cmp	r1, #0
 800a730:	bfd4      	ite	le
 800a732:	f1c1 0202 	rsble	r2, r1, #2
 800a736:	2201      	movgt	r2, #1
 800a738:	4413      	add	r3, r2
 800a73a:	e7e0      	b.n	800a6fe <_printf_float+0x192>
 800a73c:	6823      	ldr	r3, [r4, #0]
 800a73e:	055a      	lsls	r2, r3, #21
 800a740:	d407      	bmi.n	800a752 <_printf_float+0x1e6>
 800a742:	6923      	ldr	r3, [r4, #16]
 800a744:	4642      	mov	r2, r8
 800a746:	4631      	mov	r1, r6
 800a748:	4628      	mov	r0, r5
 800a74a:	47b8      	blx	r7
 800a74c:	3001      	adds	r0, #1
 800a74e:	d12b      	bne.n	800a7a8 <_printf_float+0x23c>
 800a750:	e767      	b.n	800a622 <_printf_float+0xb6>
 800a752:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a756:	f240 80dd 	bls.w	800a914 <_printf_float+0x3a8>
 800a75a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a75e:	2200      	movs	r2, #0
 800a760:	2300      	movs	r3, #0
 800a762:	f7f6 f9e9 	bl	8000b38 <__aeabi_dcmpeq>
 800a766:	2800      	cmp	r0, #0
 800a768:	d033      	beq.n	800a7d2 <_printf_float+0x266>
 800a76a:	4a37      	ldr	r2, [pc, #220]	@ (800a848 <_printf_float+0x2dc>)
 800a76c:	2301      	movs	r3, #1
 800a76e:	4631      	mov	r1, r6
 800a770:	4628      	mov	r0, r5
 800a772:	47b8      	blx	r7
 800a774:	3001      	adds	r0, #1
 800a776:	f43f af54 	beq.w	800a622 <_printf_float+0xb6>
 800a77a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a77e:	4543      	cmp	r3, r8
 800a780:	db02      	blt.n	800a788 <_printf_float+0x21c>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	07d8      	lsls	r0, r3, #31
 800a786:	d50f      	bpl.n	800a7a8 <_printf_float+0x23c>
 800a788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a78c:	4631      	mov	r1, r6
 800a78e:	4628      	mov	r0, r5
 800a790:	47b8      	blx	r7
 800a792:	3001      	adds	r0, #1
 800a794:	f43f af45 	beq.w	800a622 <_printf_float+0xb6>
 800a798:	f04f 0900 	mov.w	r9, #0
 800a79c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7a0:	f104 0a1a 	add.w	sl, r4, #26
 800a7a4:	45c8      	cmp	r8, r9
 800a7a6:	dc09      	bgt.n	800a7bc <_printf_float+0x250>
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	079b      	lsls	r3, r3, #30
 800a7ac:	f100 8103 	bmi.w	800a9b6 <_printf_float+0x44a>
 800a7b0:	68e0      	ldr	r0, [r4, #12]
 800a7b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7b4:	4298      	cmp	r0, r3
 800a7b6:	bfb8      	it	lt
 800a7b8:	4618      	movlt	r0, r3
 800a7ba:	e734      	b.n	800a626 <_printf_float+0xba>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	4652      	mov	r2, sl
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	47b8      	blx	r7
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f43f af2b 	beq.w	800a622 <_printf_float+0xb6>
 800a7cc:	f109 0901 	add.w	r9, r9, #1
 800a7d0:	e7e8      	b.n	800a7a4 <_printf_float+0x238>
 800a7d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	dc39      	bgt.n	800a84c <_printf_float+0x2e0>
 800a7d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a848 <_printf_float+0x2dc>)
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4631      	mov	r1, r6
 800a7de:	4628      	mov	r0, r5
 800a7e0:	47b8      	blx	r7
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	f43f af1d 	beq.w	800a622 <_printf_float+0xb6>
 800a7e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a7ec:	ea59 0303 	orrs.w	r3, r9, r3
 800a7f0:	d102      	bne.n	800a7f8 <_printf_float+0x28c>
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	07d9      	lsls	r1, r3, #31
 800a7f6:	d5d7      	bpl.n	800a7a8 <_printf_float+0x23c>
 800a7f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	4628      	mov	r0, r5
 800a800:	47b8      	blx	r7
 800a802:	3001      	adds	r0, #1
 800a804:	f43f af0d 	beq.w	800a622 <_printf_float+0xb6>
 800a808:	f04f 0a00 	mov.w	sl, #0
 800a80c:	f104 0b1a 	add.w	fp, r4, #26
 800a810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a812:	425b      	negs	r3, r3
 800a814:	4553      	cmp	r3, sl
 800a816:	dc01      	bgt.n	800a81c <_printf_float+0x2b0>
 800a818:	464b      	mov	r3, r9
 800a81a:	e793      	b.n	800a744 <_printf_float+0x1d8>
 800a81c:	2301      	movs	r3, #1
 800a81e:	465a      	mov	r2, fp
 800a820:	4631      	mov	r1, r6
 800a822:	4628      	mov	r0, r5
 800a824:	47b8      	blx	r7
 800a826:	3001      	adds	r0, #1
 800a828:	f43f aefb 	beq.w	800a622 <_printf_float+0xb6>
 800a82c:	f10a 0a01 	add.w	sl, sl, #1
 800a830:	e7ee      	b.n	800a810 <_printf_float+0x2a4>
 800a832:	bf00      	nop
 800a834:	7fefffff 	.word	0x7fefffff
 800a838:	0800ed05 	.word	0x0800ed05
 800a83c:	0800ed09 	.word	0x0800ed09
 800a840:	0800ed0d 	.word	0x0800ed0d
 800a844:	0800ed11 	.word	0x0800ed11
 800a848:	0800ed15 	.word	0x0800ed15
 800a84c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a84e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a852:	4553      	cmp	r3, sl
 800a854:	bfa8      	it	ge
 800a856:	4653      	movge	r3, sl
 800a858:	2b00      	cmp	r3, #0
 800a85a:	4699      	mov	r9, r3
 800a85c:	dc36      	bgt.n	800a8cc <_printf_float+0x360>
 800a85e:	f04f 0b00 	mov.w	fp, #0
 800a862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a866:	f104 021a 	add.w	r2, r4, #26
 800a86a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a86c:	9306      	str	r3, [sp, #24]
 800a86e:	eba3 0309 	sub.w	r3, r3, r9
 800a872:	455b      	cmp	r3, fp
 800a874:	dc31      	bgt.n	800a8da <_printf_float+0x36e>
 800a876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a878:	459a      	cmp	sl, r3
 800a87a:	dc3a      	bgt.n	800a8f2 <_printf_float+0x386>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	07da      	lsls	r2, r3, #31
 800a880:	d437      	bmi.n	800a8f2 <_printf_float+0x386>
 800a882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a884:	ebaa 0903 	sub.w	r9, sl, r3
 800a888:	9b06      	ldr	r3, [sp, #24]
 800a88a:	ebaa 0303 	sub.w	r3, sl, r3
 800a88e:	4599      	cmp	r9, r3
 800a890:	bfa8      	it	ge
 800a892:	4699      	movge	r9, r3
 800a894:	f1b9 0f00 	cmp.w	r9, #0
 800a898:	dc33      	bgt.n	800a902 <_printf_float+0x396>
 800a89a:	f04f 0800 	mov.w	r8, #0
 800a89e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8a2:	f104 0b1a 	add.w	fp, r4, #26
 800a8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a8:	ebaa 0303 	sub.w	r3, sl, r3
 800a8ac:	eba3 0309 	sub.w	r3, r3, r9
 800a8b0:	4543      	cmp	r3, r8
 800a8b2:	f77f af79 	ble.w	800a7a8 <_printf_float+0x23c>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	465a      	mov	r2, fp
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b8      	blx	r7
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	f43f aeae 	beq.w	800a622 <_printf_float+0xb6>
 800a8c6:	f108 0801 	add.w	r8, r8, #1
 800a8ca:	e7ec      	b.n	800a8a6 <_printf_float+0x33a>
 800a8cc:	4642      	mov	r2, r8
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b8      	blx	r7
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d1c2      	bne.n	800a85e <_printf_float+0x2f2>
 800a8d8:	e6a3      	b.n	800a622 <_printf_float+0xb6>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4628      	mov	r0, r5
 800a8e0:	9206      	str	r2, [sp, #24]
 800a8e2:	47b8      	blx	r7
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	f43f ae9c 	beq.w	800a622 <_printf_float+0xb6>
 800a8ea:	9a06      	ldr	r2, [sp, #24]
 800a8ec:	f10b 0b01 	add.w	fp, fp, #1
 800a8f0:	e7bb      	b.n	800a86a <_printf_float+0x2fe>
 800a8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	47b8      	blx	r7
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	d1c0      	bne.n	800a882 <_printf_float+0x316>
 800a900:	e68f      	b.n	800a622 <_printf_float+0xb6>
 800a902:	9a06      	ldr	r2, [sp, #24]
 800a904:	464b      	mov	r3, r9
 800a906:	4442      	add	r2, r8
 800a908:	4631      	mov	r1, r6
 800a90a:	4628      	mov	r0, r5
 800a90c:	47b8      	blx	r7
 800a90e:	3001      	adds	r0, #1
 800a910:	d1c3      	bne.n	800a89a <_printf_float+0x32e>
 800a912:	e686      	b.n	800a622 <_printf_float+0xb6>
 800a914:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a918:	f1ba 0f01 	cmp.w	sl, #1
 800a91c:	dc01      	bgt.n	800a922 <_printf_float+0x3b6>
 800a91e:	07db      	lsls	r3, r3, #31
 800a920:	d536      	bpl.n	800a990 <_printf_float+0x424>
 800a922:	2301      	movs	r3, #1
 800a924:	4642      	mov	r2, r8
 800a926:	4631      	mov	r1, r6
 800a928:	4628      	mov	r0, r5
 800a92a:	47b8      	blx	r7
 800a92c:	3001      	adds	r0, #1
 800a92e:	f43f ae78 	beq.w	800a622 <_printf_float+0xb6>
 800a932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a936:	4631      	mov	r1, r6
 800a938:	4628      	mov	r0, r5
 800a93a:	47b8      	blx	r7
 800a93c:	3001      	adds	r0, #1
 800a93e:	f43f ae70 	beq.w	800a622 <_printf_float+0xb6>
 800a942:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a946:	2200      	movs	r2, #0
 800a948:	2300      	movs	r3, #0
 800a94a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a94e:	f7f6 f8f3 	bl	8000b38 <__aeabi_dcmpeq>
 800a952:	b9c0      	cbnz	r0, 800a986 <_printf_float+0x41a>
 800a954:	4653      	mov	r3, sl
 800a956:	f108 0201 	add.w	r2, r8, #1
 800a95a:	4631      	mov	r1, r6
 800a95c:	4628      	mov	r0, r5
 800a95e:	47b8      	blx	r7
 800a960:	3001      	adds	r0, #1
 800a962:	d10c      	bne.n	800a97e <_printf_float+0x412>
 800a964:	e65d      	b.n	800a622 <_printf_float+0xb6>
 800a966:	2301      	movs	r3, #1
 800a968:	465a      	mov	r2, fp
 800a96a:	4631      	mov	r1, r6
 800a96c:	4628      	mov	r0, r5
 800a96e:	47b8      	blx	r7
 800a970:	3001      	adds	r0, #1
 800a972:	f43f ae56 	beq.w	800a622 <_printf_float+0xb6>
 800a976:	f108 0801 	add.w	r8, r8, #1
 800a97a:	45d0      	cmp	r8, sl
 800a97c:	dbf3      	blt.n	800a966 <_printf_float+0x3fa>
 800a97e:	464b      	mov	r3, r9
 800a980:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a984:	e6df      	b.n	800a746 <_printf_float+0x1da>
 800a986:	f04f 0800 	mov.w	r8, #0
 800a98a:	f104 0b1a 	add.w	fp, r4, #26
 800a98e:	e7f4      	b.n	800a97a <_printf_float+0x40e>
 800a990:	2301      	movs	r3, #1
 800a992:	4642      	mov	r2, r8
 800a994:	e7e1      	b.n	800a95a <_printf_float+0x3ee>
 800a996:	2301      	movs	r3, #1
 800a998:	464a      	mov	r2, r9
 800a99a:	4631      	mov	r1, r6
 800a99c:	4628      	mov	r0, r5
 800a99e:	47b8      	blx	r7
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	f43f ae3e 	beq.w	800a622 <_printf_float+0xb6>
 800a9a6:	f108 0801 	add.w	r8, r8, #1
 800a9aa:	68e3      	ldr	r3, [r4, #12]
 800a9ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9ae:	1a5b      	subs	r3, r3, r1
 800a9b0:	4543      	cmp	r3, r8
 800a9b2:	dcf0      	bgt.n	800a996 <_printf_float+0x42a>
 800a9b4:	e6fc      	b.n	800a7b0 <_printf_float+0x244>
 800a9b6:	f04f 0800 	mov.w	r8, #0
 800a9ba:	f104 0919 	add.w	r9, r4, #25
 800a9be:	e7f4      	b.n	800a9aa <_printf_float+0x43e>

0800a9c0 <_printf_common>:
 800a9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c4:	4616      	mov	r6, r2
 800a9c6:	4698      	mov	r8, r3
 800a9c8:	688a      	ldr	r2, [r1, #8]
 800a9ca:	690b      	ldr	r3, [r1, #16]
 800a9cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	bfb8      	it	lt
 800a9d4:	4613      	movlt	r3, r2
 800a9d6:	6033      	str	r3, [r6, #0]
 800a9d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9dc:	4607      	mov	r7, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	b10a      	cbz	r2, 800a9e6 <_printf_common+0x26>
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	6033      	str	r3, [r6, #0]
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	0699      	lsls	r1, r3, #26
 800a9ea:	bf42      	ittt	mi
 800a9ec:	6833      	ldrmi	r3, [r6, #0]
 800a9ee:	3302      	addmi	r3, #2
 800a9f0:	6033      	strmi	r3, [r6, #0]
 800a9f2:	6825      	ldr	r5, [r4, #0]
 800a9f4:	f015 0506 	ands.w	r5, r5, #6
 800a9f8:	d106      	bne.n	800aa08 <_printf_common+0x48>
 800a9fa:	f104 0a19 	add.w	sl, r4, #25
 800a9fe:	68e3      	ldr	r3, [r4, #12]
 800aa00:	6832      	ldr	r2, [r6, #0]
 800aa02:	1a9b      	subs	r3, r3, r2
 800aa04:	42ab      	cmp	r3, r5
 800aa06:	dc26      	bgt.n	800aa56 <_printf_common+0x96>
 800aa08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa0c:	6822      	ldr	r2, [r4, #0]
 800aa0e:	3b00      	subs	r3, #0
 800aa10:	bf18      	it	ne
 800aa12:	2301      	movne	r3, #1
 800aa14:	0692      	lsls	r2, r2, #26
 800aa16:	d42b      	bmi.n	800aa70 <_printf_common+0xb0>
 800aa18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa1c:	4641      	mov	r1, r8
 800aa1e:	4638      	mov	r0, r7
 800aa20:	47c8      	blx	r9
 800aa22:	3001      	adds	r0, #1
 800aa24:	d01e      	beq.n	800aa64 <_printf_common+0xa4>
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	6922      	ldr	r2, [r4, #16]
 800aa2a:	f003 0306 	and.w	r3, r3, #6
 800aa2e:	2b04      	cmp	r3, #4
 800aa30:	bf02      	ittt	eq
 800aa32:	68e5      	ldreq	r5, [r4, #12]
 800aa34:	6833      	ldreq	r3, [r6, #0]
 800aa36:	1aed      	subeq	r5, r5, r3
 800aa38:	68a3      	ldr	r3, [r4, #8]
 800aa3a:	bf0c      	ite	eq
 800aa3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa40:	2500      	movne	r5, #0
 800aa42:	4293      	cmp	r3, r2
 800aa44:	bfc4      	itt	gt
 800aa46:	1a9b      	subgt	r3, r3, r2
 800aa48:	18ed      	addgt	r5, r5, r3
 800aa4a:	2600      	movs	r6, #0
 800aa4c:	341a      	adds	r4, #26
 800aa4e:	42b5      	cmp	r5, r6
 800aa50:	d11a      	bne.n	800aa88 <_printf_common+0xc8>
 800aa52:	2000      	movs	r0, #0
 800aa54:	e008      	b.n	800aa68 <_printf_common+0xa8>
 800aa56:	2301      	movs	r3, #1
 800aa58:	4652      	mov	r2, sl
 800aa5a:	4641      	mov	r1, r8
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	47c8      	blx	r9
 800aa60:	3001      	adds	r0, #1
 800aa62:	d103      	bne.n	800aa6c <_printf_common+0xac>
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295
 800aa68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	e7c6      	b.n	800a9fe <_printf_common+0x3e>
 800aa70:	18e1      	adds	r1, r4, r3
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	2030      	movs	r0, #48	@ 0x30
 800aa76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa7a:	4422      	add	r2, r4
 800aa7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa84:	3302      	adds	r3, #2
 800aa86:	e7c7      	b.n	800aa18 <_printf_common+0x58>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	4641      	mov	r1, r8
 800aa8e:	4638      	mov	r0, r7
 800aa90:	47c8      	blx	r9
 800aa92:	3001      	adds	r0, #1
 800aa94:	d0e6      	beq.n	800aa64 <_printf_common+0xa4>
 800aa96:	3601      	adds	r6, #1
 800aa98:	e7d9      	b.n	800aa4e <_printf_common+0x8e>
	...

0800aa9c <_printf_i>:
 800aa9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa0:	7e0f      	ldrb	r7, [r1, #24]
 800aaa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aaa4:	2f78      	cmp	r7, #120	@ 0x78
 800aaa6:	4691      	mov	r9, r2
 800aaa8:	4680      	mov	r8, r0
 800aaaa:	460c      	mov	r4, r1
 800aaac:	469a      	mov	sl, r3
 800aaae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aab2:	d807      	bhi.n	800aac4 <_printf_i+0x28>
 800aab4:	2f62      	cmp	r7, #98	@ 0x62
 800aab6:	d80a      	bhi.n	800aace <_printf_i+0x32>
 800aab8:	2f00      	cmp	r7, #0
 800aaba:	f000 80d2 	beq.w	800ac62 <_printf_i+0x1c6>
 800aabe:	2f58      	cmp	r7, #88	@ 0x58
 800aac0:	f000 80b9 	beq.w	800ac36 <_printf_i+0x19a>
 800aac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aac8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aacc:	e03a      	b.n	800ab44 <_printf_i+0xa8>
 800aace:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aad2:	2b15      	cmp	r3, #21
 800aad4:	d8f6      	bhi.n	800aac4 <_printf_i+0x28>
 800aad6:	a101      	add	r1, pc, #4	@ (adr r1, 800aadc <_printf_i+0x40>)
 800aad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aadc:	0800ab35 	.word	0x0800ab35
 800aae0:	0800ab49 	.word	0x0800ab49
 800aae4:	0800aac5 	.word	0x0800aac5
 800aae8:	0800aac5 	.word	0x0800aac5
 800aaec:	0800aac5 	.word	0x0800aac5
 800aaf0:	0800aac5 	.word	0x0800aac5
 800aaf4:	0800ab49 	.word	0x0800ab49
 800aaf8:	0800aac5 	.word	0x0800aac5
 800aafc:	0800aac5 	.word	0x0800aac5
 800ab00:	0800aac5 	.word	0x0800aac5
 800ab04:	0800aac5 	.word	0x0800aac5
 800ab08:	0800ac49 	.word	0x0800ac49
 800ab0c:	0800ab73 	.word	0x0800ab73
 800ab10:	0800ac03 	.word	0x0800ac03
 800ab14:	0800aac5 	.word	0x0800aac5
 800ab18:	0800aac5 	.word	0x0800aac5
 800ab1c:	0800ac6b 	.word	0x0800ac6b
 800ab20:	0800aac5 	.word	0x0800aac5
 800ab24:	0800ab73 	.word	0x0800ab73
 800ab28:	0800aac5 	.word	0x0800aac5
 800ab2c:	0800aac5 	.word	0x0800aac5
 800ab30:	0800ac0b 	.word	0x0800ac0b
 800ab34:	6833      	ldr	r3, [r6, #0]
 800ab36:	1d1a      	adds	r2, r3, #4
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6032      	str	r2, [r6, #0]
 800ab3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab44:	2301      	movs	r3, #1
 800ab46:	e09d      	b.n	800ac84 <_printf_i+0x1e8>
 800ab48:	6833      	ldr	r3, [r6, #0]
 800ab4a:	6820      	ldr	r0, [r4, #0]
 800ab4c:	1d19      	adds	r1, r3, #4
 800ab4e:	6031      	str	r1, [r6, #0]
 800ab50:	0606      	lsls	r6, r0, #24
 800ab52:	d501      	bpl.n	800ab58 <_printf_i+0xbc>
 800ab54:	681d      	ldr	r5, [r3, #0]
 800ab56:	e003      	b.n	800ab60 <_printf_i+0xc4>
 800ab58:	0645      	lsls	r5, r0, #25
 800ab5a:	d5fb      	bpl.n	800ab54 <_printf_i+0xb8>
 800ab5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	da03      	bge.n	800ab6c <_printf_i+0xd0>
 800ab64:	232d      	movs	r3, #45	@ 0x2d
 800ab66:	426d      	negs	r5, r5
 800ab68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab6c:	4859      	ldr	r0, [pc, #356]	@ (800acd4 <_printf_i+0x238>)
 800ab6e:	230a      	movs	r3, #10
 800ab70:	e011      	b.n	800ab96 <_printf_i+0xfa>
 800ab72:	6821      	ldr	r1, [r4, #0]
 800ab74:	6833      	ldr	r3, [r6, #0]
 800ab76:	0608      	lsls	r0, r1, #24
 800ab78:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab7c:	d402      	bmi.n	800ab84 <_printf_i+0xe8>
 800ab7e:	0649      	lsls	r1, r1, #25
 800ab80:	bf48      	it	mi
 800ab82:	b2ad      	uxthmi	r5, r5
 800ab84:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab86:	4853      	ldr	r0, [pc, #332]	@ (800acd4 <_printf_i+0x238>)
 800ab88:	6033      	str	r3, [r6, #0]
 800ab8a:	bf14      	ite	ne
 800ab8c:	230a      	movne	r3, #10
 800ab8e:	2308      	moveq	r3, #8
 800ab90:	2100      	movs	r1, #0
 800ab92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab96:	6866      	ldr	r6, [r4, #4]
 800ab98:	60a6      	str	r6, [r4, #8]
 800ab9a:	2e00      	cmp	r6, #0
 800ab9c:	bfa2      	ittt	ge
 800ab9e:	6821      	ldrge	r1, [r4, #0]
 800aba0:	f021 0104 	bicge.w	r1, r1, #4
 800aba4:	6021      	strge	r1, [r4, #0]
 800aba6:	b90d      	cbnz	r5, 800abac <_printf_i+0x110>
 800aba8:	2e00      	cmp	r6, #0
 800abaa:	d04b      	beq.n	800ac44 <_printf_i+0x1a8>
 800abac:	4616      	mov	r6, r2
 800abae:	fbb5 f1f3 	udiv	r1, r5, r3
 800abb2:	fb03 5711 	mls	r7, r3, r1, r5
 800abb6:	5dc7      	ldrb	r7, [r0, r7]
 800abb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abbc:	462f      	mov	r7, r5
 800abbe:	42bb      	cmp	r3, r7
 800abc0:	460d      	mov	r5, r1
 800abc2:	d9f4      	bls.n	800abae <_printf_i+0x112>
 800abc4:	2b08      	cmp	r3, #8
 800abc6:	d10b      	bne.n	800abe0 <_printf_i+0x144>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	07df      	lsls	r7, r3, #31
 800abcc:	d508      	bpl.n	800abe0 <_printf_i+0x144>
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	6861      	ldr	r1, [r4, #4]
 800abd2:	4299      	cmp	r1, r3
 800abd4:	bfde      	ittt	le
 800abd6:	2330      	movle	r3, #48	@ 0x30
 800abd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abe0:	1b92      	subs	r2, r2, r6
 800abe2:	6122      	str	r2, [r4, #16]
 800abe4:	f8cd a000 	str.w	sl, [sp]
 800abe8:	464b      	mov	r3, r9
 800abea:	aa03      	add	r2, sp, #12
 800abec:	4621      	mov	r1, r4
 800abee:	4640      	mov	r0, r8
 800abf0:	f7ff fee6 	bl	800a9c0 <_printf_common>
 800abf4:	3001      	adds	r0, #1
 800abf6:	d14a      	bne.n	800ac8e <_printf_i+0x1f2>
 800abf8:	f04f 30ff 	mov.w	r0, #4294967295
 800abfc:	b004      	add	sp, #16
 800abfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	f043 0320 	orr.w	r3, r3, #32
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	4833      	ldr	r0, [pc, #204]	@ (800acd8 <_printf_i+0x23c>)
 800ac0c:	2778      	movs	r7, #120	@ 0x78
 800ac0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	6831      	ldr	r1, [r6, #0]
 800ac16:	061f      	lsls	r7, r3, #24
 800ac18:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac1c:	d402      	bmi.n	800ac24 <_printf_i+0x188>
 800ac1e:	065f      	lsls	r7, r3, #25
 800ac20:	bf48      	it	mi
 800ac22:	b2ad      	uxthmi	r5, r5
 800ac24:	6031      	str	r1, [r6, #0]
 800ac26:	07d9      	lsls	r1, r3, #31
 800ac28:	bf44      	itt	mi
 800ac2a:	f043 0320 	orrmi.w	r3, r3, #32
 800ac2e:	6023      	strmi	r3, [r4, #0]
 800ac30:	b11d      	cbz	r5, 800ac3a <_printf_i+0x19e>
 800ac32:	2310      	movs	r3, #16
 800ac34:	e7ac      	b.n	800ab90 <_printf_i+0xf4>
 800ac36:	4827      	ldr	r0, [pc, #156]	@ (800acd4 <_printf_i+0x238>)
 800ac38:	e7e9      	b.n	800ac0e <_printf_i+0x172>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	f023 0320 	bic.w	r3, r3, #32
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	e7f6      	b.n	800ac32 <_printf_i+0x196>
 800ac44:	4616      	mov	r6, r2
 800ac46:	e7bd      	b.n	800abc4 <_printf_i+0x128>
 800ac48:	6833      	ldr	r3, [r6, #0]
 800ac4a:	6825      	ldr	r5, [r4, #0]
 800ac4c:	6961      	ldr	r1, [r4, #20]
 800ac4e:	1d18      	adds	r0, r3, #4
 800ac50:	6030      	str	r0, [r6, #0]
 800ac52:	062e      	lsls	r6, r5, #24
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	d501      	bpl.n	800ac5c <_printf_i+0x1c0>
 800ac58:	6019      	str	r1, [r3, #0]
 800ac5a:	e002      	b.n	800ac62 <_printf_i+0x1c6>
 800ac5c:	0668      	lsls	r0, r5, #25
 800ac5e:	d5fb      	bpl.n	800ac58 <_printf_i+0x1bc>
 800ac60:	8019      	strh	r1, [r3, #0]
 800ac62:	2300      	movs	r3, #0
 800ac64:	6123      	str	r3, [r4, #16]
 800ac66:	4616      	mov	r6, r2
 800ac68:	e7bc      	b.n	800abe4 <_printf_i+0x148>
 800ac6a:	6833      	ldr	r3, [r6, #0]
 800ac6c:	1d1a      	adds	r2, r3, #4
 800ac6e:	6032      	str	r2, [r6, #0]
 800ac70:	681e      	ldr	r6, [r3, #0]
 800ac72:	6862      	ldr	r2, [r4, #4]
 800ac74:	2100      	movs	r1, #0
 800ac76:	4630      	mov	r0, r6
 800ac78:	f7f5 fae2 	bl	8000240 <memchr>
 800ac7c:	b108      	cbz	r0, 800ac82 <_printf_i+0x1e6>
 800ac7e:	1b80      	subs	r0, r0, r6
 800ac80:	6060      	str	r0, [r4, #4]
 800ac82:	6863      	ldr	r3, [r4, #4]
 800ac84:	6123      	str	r3, [r4, #16]
 800ac86:	2300      	movs	r3, #0
 800ac88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac8c:	e7aa      	b.n	800abe4 <_printf_i+0x148>
 800ac8e:	6923      	ldr	r3, [r4, #16]
 800ac90:	4632      	mov	r2, r6
 800ac92:	4649      	mov	r1, r9
 800ac94:	4640      	mov	r0, r8
 800ac96:	47d0      	blx	sl
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d0ad      	beq.n	800abf8 <_printf_i+0x15c>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	079b      	lsls	r3, r3, #30
 800aca0:	d413      	bmi.n	800acca <_printf_i+0x22e>
 800aca2:	68e0      	ldr	r0, [r4, #12]
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	4298      	cmp	r0, r3
 800aca8:	bfb8      	it	lt
 800acaa:	4618      	movlt	r0, r3
 800acac:	e7a6      	b.n	800abfc <_printf_i+0x160>
 800acae:	2301      	movs	r3, #1
 800acb0:	4632      	mov	r2, r6
 800acb2:	4649      	mov	r1, r9
 800acb4:	4640      	mov	r0, r8
 800acb6:	47d0      	blx	sl
 800acb8:	3001      	adds	r0, #1
 800acba:	d09d      	beq.n	800abf8 <_printf_i+0x15c>
 800acbc:	3501      	adds	r5, #1
 800acbe:	68e3      	ldr	r3, [r4, #12]
 800acc0:	9903      	ldr	r1, [sp, #12]
 800acc2:	1a5b      	subs	r3, r3, r1
 800acc4:	42ab      	cmp	r3, r5
 800acc6:	dcf2      	bgt.n	800acae <_printf_i+0x212>
 800acc8:	e7eb      	b.n	800aca2 <_printf_i+0x206>
 800acca:	2500      	movs	r5, #0
 800accc:	f104 0619 	add.w	r6, r4, #25
 800acd0:	e7f5      	b.n	800acbe <_printf_i+0x222>
 800acd2:	bf00      	nop
 800acd4:	0800ed17 	.word	0x0800ed17
 800acd8:	0800ed28 	.word	0x0800ed28

0800acdc <_scanf_float>:
 800acdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	b087      	sub	sp, #28
 800ace2:	4617      	mov	r7, r2
 800ace4:	9303      	str	r3, [sp, #12]
 800ace6:	688b      	ldr	r3, [r1, #8]
 800ace8:	1e5a      	subs	r2, r3, #1
 800acea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800acee:	bf81      	itttt	hi
 800acf0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800acf4:	eb03 0b05 	addhi.w	fp, r3, r5
 800acf8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800acfc:	608b      	strhi	r3, [r1, #8]
 800acfe:	680b      	ldr	r3, [r1, #0]
 800ad00:	460a      	mov	r2, r1
 800ad02:	f04f 0500 	mov.w	r5, #0
 800ad06:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ad0a:	f842 3b1c 	str.w	r3, [r2], #28
 800ad0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ad12:	4680      	mov	r8, r0
 800ad14:	460c      	mov	r4, r1
 800ad16:	bf98      	it	ls
 800ad18:	f04f 0b00 	movls.w	fp, #0
 800ad1c:	9201      	str	r2, [sp, #4]
 800ad1e:	4616      	mov	r6, r2
 800ad20:	46aa      	mov	sl, r5
 800ad22:	46a9      	mov	r9, r5
 800ad24:	9502      	str	r5, [sp, #8]
 800ad26:	68a2      	ldr	r2, [r4, #8]
 800ad28:	b152      	cbz	r2, 800ad40 <_scanf_float+0x64>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	2b4e      	cmp	r3, #78	@ 0x4e
 800ad30:	d864      	bhi.n	800adfc <_scanf_float+0x120>
 800ad32:	2b40      	cmp	r3, #64	@ 0x40
 800ad34:	d83c      	bhi.n	800adb0 <_scanf_float+0xd4>
 800ad36:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ad3a:	b2c8      	uxtb	r0, r1
 800ad3c:	280e      	cmp	r0, #14
 800ad3e:	d93a      	bls.n	800adb6 <_scanf_float+0xda>
 800ad40:	f1b9 0f00 	cmp.w	r9, #0
 800ad44:	d003      	beq.n	800ad4e <_scanf_float+0x72>
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad52:	f1ba 0f01 	cmp.w	sl, #1
 800ad56:	f200 8117 	bhi.w	800af88 <_scanf_float+0x2ac>
 800ad5a:	9b01      	ldr	r3, [sp, #4]
 800ad5c:	429e      	cmp	r6, r3
 800ad5e:	f200 8108 	bhi.w	800af72 <_scanf_float+0x296>
 800ad62:	2001      	movs	r0, #1
 800ad64:	b007      	add	sp, #28
 800ad66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ad6e:	2a0d      	cmp	r2, #13
 800ad70:	d8e6      	bhi.n	800ad40 <_scanf_float+0x64>
 800ad72:	a101      	add	r1, pc, #4	@ (adr r1, 800ad78 <_scanf_float+0x9c>)
 800ad74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad78:	0800aebf 	.word	0x0800aebf
 800ad7c:	0800ad41 	.word	0x0800ad41
 800ad80:	0800ad41 	.word	0x0800ad41
 800ad84:	0800ad41 	.word	0x0800ad41
 800ad88:	0800af1f 	.word	0x0800af1f
 800ad8c:	0800aef7 	.word	0x0800aef7
 800ad90:	0800ad41 	.word	0x0800ad41
 800ad94:	0800ad41 	.word	0x0800ad41
 800ad98:	0800aecd 	.word	0x0800aecd
 800ad9c:	0800ad41 	.word	0x0800ad41
 800ada0:	0800ad41 	.word	0x0800ad41
 800ada4:	0800ad41 	.word	0x0800ad41
 800ada8:	0800ad41 	.word	0x0800ad41
 800adac:	0800ae85 	.word	0x0800ae85
 800adb0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800adb4:	e7db      	b.n	800ad6e <_scanf_float+0x92>
 800adb6:	290e      	cmp	r1, #14
 800adb8:	d8c2      	bhi.n	800ad40 <_scanf_float+0x64>
 800adba:	a001      	add	r0, pc, #4	@ (adr r0, 800adc0 <_scanf_float+0xe4>)
 800adbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800adc0:	0800ae75 	.word	0x0800ae75
 800adc4:	0800ad41 	.word	0x0800ad41
 800adc8:	0800ae75 	.word	0x0800ae75
 800adcc:	0800af0b 	.word	0x0800af0b
 800add0:	0800ad41 	.word	0x0800ad41
 800add4:	0800ae1d 	.word	0x0800ae1d
 800add8:	0800ae5b 	.word	0x0800ae5b
 800addc:	0800ae5b 	.word	0x0800ae5b
 800ade0:	0800ae5b 	.word	0x0800ae5b
 800ade4:	0800ae5b 	.word	0x0800ae5b
 800ade8:	0800ae5b 	.word	0x0800ae5b
 800adec:	0800ae5b 	.word	0x0800ae5b
 800adf0:	0800ae5b 	.word	0x0800ae5b
 800adf4:	0800ae5b 	.word	0x0800ae5b
 800adf8:	0800ae5b 	.word	0x0800ae5b
 800adfc:	2b6e      	cmp	r3, #110	@ 0x6e
 800adfe:	d809      	bhi.n	800ae14 <_scanf_float+0x138>
 800ae00:	2b60      	cmp	r3, #96	@ 0x60
 800ae02:	d8b2      	bhi.n	800ad6a <_scanf_float+0x8e>
 800ae04:	2b54      	cmp	r3, #84	@ 0x54
 800ae06:	d07b      	beq.n	800af00 <_scanf_float+0x224>
 800ae08:	2b59      	cmp	r3, #89	@ 0x59
 800ae0a:	d199      	bne.n	800ad40 <_scanf_float+0x64>
 800ae0c:	2d07      	cmp	r5, #7
 800ae0e:	d197      	bne.n	800ad40 <_scanf_float+0x64>
 800ae10:	2508      	movs	r5, #8
 800ae12:	e02c      	b.n	800ae6e <_scanf_float+0x192>
 800ae14:	2b74      	cmp	r3, #116	@ 0x74
 800ae16:	d073      	beq.n	800af00 <_scanf_float+0x224>
 800ae18:	2b79      	cmp	r3, #121	@ 0x79
 800ae1a:	e7f6      	b.n	800ae0a <_scanf_float+0x12e>
 800ae1c:	6821      	ldr	r1, [r4, #0]
 800ae1e:	05c8      	lsls	r0, r1, #23
 800ae20:	d51b      	bpl.n	800ae5a <_scanf_float+0x17e>
 800ae22:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ae26:	6021      	str	r1, [r4, #0]
 800ae28:	f109 0901 	add.w	r9, r9, #1
 800ae2c:	f1bb 0f00 	cmp.w	fp, #0
 800ae30:	d003      	beq.n	800ae3a <_scanf_float+0x15e>
 800ae32:	3201      	adds	r2, #1
 800ae34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae38:	60a2      	str	r2, [r4, #8]
 800ae3a:	68a3      	ldr	r3, [r4, #8]
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	60a3      	str	r3, [r4, #8]
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	3301      	adds	r3, #1
 800ae44:	6123      	str	r3, [r4, #16]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	607b      	str	r3, [r7, #4]
 800ae4e:	f340 8087 	ble.w	800af60 <_scanf_float+0x284>
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	3301      	adds	r3, #1
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	e765      	b.n	800ad26 <_scanf_float+0x4a>
 800ae5a:	eb1a 0105 	adds.w	r1, sl, r5
 800ae5e:	f47f af6f 	bne.w	800ad40 <_scanf_float+0x64>
 800ae62:	6822      	ldr	r2, [r4, #0]
 800ae64:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ae68:	6022      	str	r2, [r4, #0]
 800ae6a:	460d      	mov	r5, r1
 800ae6c:	468a      	mov	sl, r1
 800ae6e:	f806 3b01 	strb.w	r3, [r6], #1
 800ae72:	e7e2      	b.n	800ae3a <_scanf_float+0x15e>
 800ae74:	6822      	ldr	r2, [r4, #0]
 800ae76:	0610      	lsls	r0, r2, #24
 800ae78:	f57f af62 	bpl.w	800ad40 <_scanf_float+0x64>
 800ae7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ae80:	6022      	str	r2, [r4, #0]
 800ae82:	e7f4      	b.n	800ae6e <_scanf_float+0x192>
 800ae84:	f1ba 0f00 	cmp.w	sl, #0
 800ae88:	d10e      	bne.n	800aea8 <_scanf_float+0x1cc>
 800ae8a:	f1b9 0f00 	cmp.w	r9, #0
 800ae8e:	d10e      	bne.n	800aeae <_scanf_float+0x1d2>
 800ae90:	6822      	ldr	r2, [r4, #0]
 800ae92:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ae96:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ae9a:	d108      	bne.n	800aeae <_scanf_float+0x1d2>
 800ae9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aea0:	6022      	str	r2, [r4, #0]
 800aea2:	f04f 0a01 	mov.w	sl, #1
 800aea6:	e7e2      	b.n	800ae6e <_scanf_float+0x192>
 800aea8:	f1ba 0f02 	cmp.w	sl, #2
 800aeac:	d055      	beq.n	800af5a <_scanf_float+0x27e>
 800aeae:	2d01      	cmp	r5, #1
 800aeb0:	d002      	beq.n	800aeb8 <_scanf_float+0x1dc>
 800aeb2:	2d04      	cmp	r5, #4
 800aeb4:	f47f af44 	bne.w	800ad40 <_scanf_float+0x64>
 800aeb8:	3501      	adds	r5, #1
 800aeba:	b2ed      	uxtb	r5, r5
 800aebc:	e7d7      	b.n	800ae6e <_scanf_float+0x192>
 800aebe:	f1ba 0f01 	cmp.w	sl, #1
 800aec2:	f47f af3d 	bne.w	800ad40 <_scanf_float+0x64>
 800aec6:	f04f 0a02 	mov.w	sl, #2
 800aeca:	e7d0      	b.n	800ae6e <_scanf_float+0x192>
 800aecc:	b97d      	cbnz	r5, 800aeee <_scanf_float+0x212>
 800aece:	f1b9 0f00 	cmp.w	r9, #0
 800aed2:	f47f af38 	bne.w	800ad46 <_scanf_float+0x6a>
 800aed6:	6822      	ldr	r2, [r4, #0]
 800aed8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aedc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aee0:	f040 8108 	bne.w	800b0f4 <_scanf_float+0x418>
 800aee4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aee8:	6022      	str	r2, [r4, #0]
 800aeea:	2501      	movs	r5, #1
 800aeec:	e7bf      	b.n	800ae6e <_scanf_float+0x192>
 800aeee:	2d03      	cmp	r5, #3
 800aef0:	d0e2      	beq.n	800aeb8 <_scanf_float+0x1dc>
 800aef2:	2d05      	cmp	r5, #5
 800aef4:	e7de      	b.n	800aeb4 <_scanf_float+0x1d8>
 800aef6:	2d02      	cmp	r5, #2
 800aef8:	f47f af22 	bne.w	800ad40 <_scanf_float+0x64>
 800aefc:	2503      	movs	r5, #3
 800aefe:	e7b6      	b.n	800ae6e <_scanf_float+0x192>
 800af00:	2d06      	cmp	r5, #6
 800af02:	f47f af1d 	bne.w	800ad40 <_scanf_float+0x64>
 800af06:	2507      	movs	r5, #7
 800af08:	e7b1      	b.n	800ae6e <_scanf_float+0x192>
 800af0a:	6822      	ldr	r2, [r4, #0]
 800af0c:	0591      	lsls	r1, r2, #22
 800af0e:	f57f af17 	bpl.w	800ad40 <_scanf_float+0x64>
 800af12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800af16:	6022      	str	r2, [r4, #0]
 800af18:	f8cd 9008 	str.w	r9, [sp, #8]
 800af1c:	e7a7      	b.n	800ae6e <_scanf_float+0x192>
 800af1e:	6822      	ldr	r2, [r4, #0]
 800af20:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800af24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800af28:	d006      	beq.n	800af38 <_scanf_float+0x25c>
 800af2a:	0550      	lsls	r0, r2, #21
 800af2c:	f57f af08 	bpl.w	800ad40 <_scanf_float+0x64>
 800af30:	f1b9 0f00 	cmp.w	r9, #0
 800af34:	f000 80de 	beq.w	800b0f4 <_scanf_float+0x418>
 800af38:	0591      	lsls	r1, r2, #22
 800af3a:	bf58      	it	pl
 800af3c:	9902      	ldrpl	r1, [sp, #8]
 800af3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af42:	bf58      	it	pl
 800af44:	eba9 0101 	subpl.w	r1, r9, r1
 800af48:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800af4c:	bf58      	it	pl
 800af4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800af52:	6022      	str	r2, [r4, #0]
 800af54:	f04f 0900 	mov.w	r9, #0
 800af58:	e789      	b.n	800ae6e <_scanf_float+0x192>
 800af5a:	f04f 0a03 	mov.w	sl, #3
 800af5e:	e786      	b.n	800ae6e <_scanf_float+0x192>
 800af60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800af64:	4639      	mov	r1, r7
 800af66:	4640      	mov	r0, r8
 800af68:	4798      	blx	r3
 800af6a:	2800      	cmp	r0, #0
 800af6c:	f43f aedb 	beq.w	800ad26 <_scanf_float+0x4a>
 800af70:	e6e6      	b.n	800ad40 <_scanf_float+0x64>
 800af72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af7a:	463a      	mov	r2, r7
 800af7c:	4640      	mov	r0, r8
 800af7e:	4798      	blx	r3
 800af80:	6923      	ldr	r3, [r4, #16]
 800af82:	3b01      	subs	r3, #1
 800af84:	6123      	str	r3, [r4, #16]
 800af86:	e6e8      	b.n	800ad5a <_scanf_float+0x7e>
 800af88:	1e6b      	subs	r3, r5, #1
 800af8a:	2b06      	cmp	r3, #6
 800af8c:	d824      	bhi.n	800afd8 <_scanf_float+0x2fc>
 800af8e:	2d02      	cmp	r5, #2
 800af90:	d836      	bhi.n	800b000 <_scanf_float+0x324>
 800af92:	9b01      	ldr	r3, [sp, #4]
 800af94:	429e      	cmp	r6, r3
 800af96:	f67f aee4 	bls.w	800ad62 <_scanf_float+0x86>
 800af9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afa2:	463a      	mov	r2, r7
 800afa4:	4640      	mov	r0, r8
 800afa6:	4798      	blx	r3
 800afa8:	6923      	ldr	r3, [r4, #16]
 800afaa:	3b01      	subs	r3, #1
 800afac:	6123      	str	r3, [r4, #16]
 800afae:	e7f0      	b.n	800af92 <_scanf_float+0x2b6>
 800afb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800afb4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800afb8:	463a      	mov	r2, r7
 800afba:	4640      	mov	r0, r8
 800afbc:	4798      	blx	r3
 800afbe:	6923      	ldr	r3, [r4, #16]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	6123      	str	r3, [r4, #16]
 800afc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afc8:	fa5f fa8a 	uxtb.w	sl, sl
 800afcc:	f1ba 0f02 	cmp.w	sl, #2
 800afd0:	d1ee      	bne.n	800afb0 <_scanf_float+0x2d4>
 800afd2:	3d03      	subs	r5, #3
 800afd4:	b2ed      	uxtb	r5, r5
 800afd6:	1b76      	subs	r6, r6, r5
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	05da      	lsls	r2, r3, #23
 800afdc:	d530      	bpl.n	800b040 <_scanf_float+0x364>
 800afde:	055b      	lsls	r3, r3, #21
 800afe0:	d511      	bpl.n	800b006 <_scanf_float+0x32a>
 800afe2:	9b01      	ldr	r3, [sp, #4]
 800afe4:	429e      	cmp	r6, r3
 800afe6:	f67f aebc 	bls.w	800ad62 <_scanf_float+0x86>
 800afea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800afee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aff2:	463a      	mov	r2, r7
 800aff4:	4640      	mov	r0, r8
 800aff6:	4798      	blx	r3
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	3b01      	subs	r3, #1
 800affc:	6123      	str	r3, [r4, #16]
 800affe:	e7f0      	b.n	800afe2 <_scanf_float+0x306>
 800b000:	46aa      	mov	sl, r5
 800b002:	46b3      	mov	fp, r6
 800b004:	e7de      	b.n	800afc4 <_scanf_float+0x2e8>
 800b006:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b00a:	6923      	ldr	r3, [r4, #16]
 800b00c:	2965      	cmp	r1, #101	@ 0x65
 800b00e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b012:	f106 35ff 	add.w	r5, r6, #4294967295
 800b016:	6123      	str	r3, [r4, #16]
 800b018:	d00c      	beq.n	800b034 <_scanf_float+0x358>
 800b01a:	2945      	cmp	r1, #69	@ 0x45
 800b01c:	d00a      	beq.n	800b034 <_scanf_float+0x358>
 800b01e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b022:	463a      	mov	r2, r7
 800b024:	4640      	mov	r0, r8
 800b026:	4798      	blx	r3
 800b028:	6923      	ldr	r3, [r4, #16]
 800b02a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b02e:	3b01      	subs	r3, #1
 800b030:	1eb5      	subs	r5, r6, #2
 800b032:	6123      	str	r3, [r4, #16]
 800b034:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b038:	463a      	mov	r2, r7
 800b03a:	4640      	mov	r0, r8
 800b03c:	4798      	blx	r3
 800b03e:	462e      	mov	r6, r5
 800b040:	6822      	ldr	r2, [r4, #0]
 800b042:	f012 0210 	ands.w	r2, r2, #16
 800b046:	d001      	beq.n	800b04c <_scanf_float+0x370>
 800b048:	2000      	movs	r0, #0
 800b04a:	e68b      	b.n	800ad64 <_scanf_float+0x88>
 800b04c:	7032      	strb	r2, [r6, #0]
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b058:	d11c      	bne.n	800b094 <_scanf_float+0x3b8>
 800b05a:	9b02      	ldr	r3, [sp, #8]
 800b05c:	454b      	cmp	r3, r9
 800b05e:	eba3 0209 	sub.w	r2, r3, r9
 800b062:	d123      	bne.n	800b0ac <_scanf_float+0x3d0>
 800b064:	9901      	ldr	r1, [sp, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	4640      	mov	r0, r8
 800b06a:	f002 fca5 	bl	800d9b8 <_strtod_r>
 800b06e:	9b03      	ldr	r3, [sp, #12]
 800b070:	6821      	ldr	r1, [r4, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f011 0f02 	tst.w	r1, #2
 800b078:	ec57 6b10 	vmov	r6, r7, d0
 800b07c:	f103 0204 	add.w	r2, r3, #4
 800b080:	d01f      	beq.n	800b0c2 <_scanf_float+0x3e6>
 800b082:	9903      	ldr	r1, [sp, #12]
 800b084:	600a      	str	r2, [r1, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	e9c3 6700 	strd	r6, r7, [r3]
 800b08c:	68e3      	ldr	r3, [r4, #12]
 800b08e:	3301      	adds	r3, #1
 800b090:	60e3      	str	r3, [r4, #12]
 800b092:	e7d9      	b.n	800b048 <_scanf_float+0x36c>
 800b094:	9b04      	ldr	r3, [sp, #16]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d0e4      	beq.n	800b064 <_scanf_float+0x388>
 800b09a:	9905      	ldr	r1, [sp, #20]
 800b09c:	230a      	movs	r3, #10
 800b09e:	3101      	adds	r1, #1
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	f7ff f9b7 	bl	800a414 <_strtol_r>
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	9e05      	ldr	r6, [sp, #20]
 800b0aa:	1ac2      	subs	r2, r0, r3
 800b0ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b0b0:	429e      	cmp	r6, r3
 800b0b2:	bf28      	it	cs
 800b0b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b0b8:	4910      	ldr	r1, [pc, #64]	@ (800b0fc <_scanf_float+0x420>)
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f000 f918 	bl	800b2f0 <siprintf>
 800b0c0:	e7d0      	b.n	800b064 <_scanf_float+0x388>
 800b0c2:	f011 0f04 	tst.w	r1, #4
 800b0c6:	9903      	ldr	r1, [sp, #12]
 800b0c8:	600a      	str	r2, [r1, #0]
 800b0ca:	d1dc      	bne.n	800b086 <_scanf_float+0x3aa>
 800b0cc:	681d      	ldr	r5, [r3, #0]
 800b0ce:	4632      	mov	r2, r6
 800b0d0:	463b      	mov	r3, r7
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	f7f5 fd61 	bl	8000b9c <__aeabi_dcmpun>
 800b0da:	b128      	cbz	r0, 800b0e8 <_scanf_float+0x40c>
 800b0dc:	4808      	ldr	r0, [pc, #32]	@ (800b100 <_scanf_float+0x424>)
 800b0de:	f000 fa47 	bl	800b570 <nanf>
 800b0e2:	ed85 0a00 	vstr	s0, [r5]
 800b0e6:	e7d1      	b.n	800b08c <_scanf_float+0x3b0>
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	f7f5 fdb4 	bl	8000c58 <__aeabi_d2f>
 800b0f0:	6028      	str	r0, [r5, #0]
 800b0f2:	e7cb      	b.n	800b08c <_scanf_float+0x3b0>
 800b0f4:	f04f 0900 	mov.w	r9, #0
 800b0f8:	e629      	b.n	800ad4e <_scanf_float+0x72>
 800b0fa:	bf00      	nop
 800b0fc:	0800ed39 	.word	0x0800ed39
 800b100:	0800edea 	.word	0x0800edea

0800b104 <std>:
 800b104:	2300      	movs	r3, #0
 800b106:	b510      	push	{r4, lr}
 800b108:	4604      	mov	r4, r0
 800b10a:	e9c0 3300 	strd	r3, r3, [r0]
 800b10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b112:	6083      	str	r3, [r0, #8]
 800b114:	8181      	strh	r1, [r0, #12]
 800b116:	6643      	str	r3, [r0, #100]	@ 0x64
 800b118:	81c2      	strh	r2, [r0, #14]
 800b11a:	6183      	str	r3, [r0, #24]
 800b11c:	4619      	mov	r1, r3
 800b11e:	2208      	movs	r2, #8
 800b120:	305c      	adds	r0, #92	@ 0x5c
 800b122:	f000 f948 	bl	800b3b6 <memset>
 800b126:	4b0d      	ldr	r3, [pc, #52]	@ (800b15c <std+0x58>)
 800b128:	6263      	str	r3, [r4, #36]	@ 0x24
 800b12a:	4b0d      	ldr	r3, [pc, #52]	@ (800b160 <std+0x5c>)
 800b12c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b12e:	4b0d      	ldr	r3, [pc, #52]	@ (800b164 <std+0x60>)
 800b130:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b132:	4b0d      	ldr	r3, [pc, #52]	@ (800b168 <std+0x64>)
 800b134:	6323      	str	r3, [r4, #48]	@ 0x30
 800b136:	4b0d      	ldr	r3, [pc, #52]	@ (800b16c <std+0x68>)
 800b138:	6224      	str	r4, [r4, #32]
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d006      	beq.n	800b14c <std+0x48>
 800b13e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b142:	4294      	cmp	r4, r2
 800b144:	d002      	beq.n	800b14c <std+0x48>
 800b146:	33d0      	adds	r3, #208	@ 0xd0
 800b148:	429c      	cmp	r4, r3
 800b14a:	d105      	bne.n	800b158 <std+0x54>
 800b14c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b154:	f000 ba08 	b.w	800b568 <__retarget_lock_init_recursive>
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	bf00      	nop
 800b15c:	0800b331 	.word	0x0800b331
 800b160:	0800b353 	.word	0x0800b353
 800b164:	0800b38b 	.word	0x0800b38b
 800b168:	0800b3af 	.word	0x0800b3af
 800b16c:	200007d0 	.word	0x200007d0

0800b170 <stdio_exit_handler>:
 800b170:	4a02      	ldr	r2, [pc, #8]	@ (800b17c <stdio_exit_handler+0xc>)
 800b172:	4903      	ldr	r1, [pc, #12]	@ (800b180 <stdio_exit_handler+0x10>)
 800b174:	4803      	ldr	r0, [pc, #12]	@ (800b184 <stdio_exit_handler+0x14>)
 800b176:	f000 b869 	b.w	800b24c <_fwalk_sglue>
 800b17a:	bf00      	nop
 800b17c:	20000248 	.word	0x20000248
 800b180:	0800dd7d 	.word	0x0800dd7d
 800b184:	20000258 	.word	0x20000258

0800b188 <cleanup_stdio>:
 800b188:	6841      	ldr	r1, [r0, #4]
 800b18a:	4b0c      	ldr	r3, [pc, #48]	@ (800b1bc <cleanup_stdio+0x34>)
 800b18c:	4299      	cmp	r1, r3
 800b18e:	b510      	push	{r4, lr}
 800b190:	4604      	mov	r4, r0
 800b192:	d001      	beq.n	800b198 <cleanup_stdio+0x10>
 800b194:	f002 fdf2 	bl	800dd7c <_fflush_r>
 800b198:	68a1      	ldr	r1, [r4, #8]
 800b19a:	4b09      	ldr	r3, [pc, #36]	@ (800b1c0 <cleanup_stdio+0x38>)
 800b19c:	4299      	cmp	r1, r3
 800b19e:	d002      	beq.n	800b1a6 <cleanup_stdio+0x1e>
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f002 fdeb 	bl	800dd7c <_fflush_r>
 800b1a6:	68e1      	ldr	r1, [r4, #12]
 800b1a8:	4b06      	ldr	r3, [pc, #24]	@ (800b1c4 <cleanup_stdio+0x3c>)
 800b1aa:	4299      	cmp	r1, r3
 800b1ac:	d004      	beq.n	800b1b8 <cleanup_stdio+0x30>
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b4:	f002 bde2 	b.w	800dd7c <_fflush_r>
 800b1b8:	bd10      	pop	{r4, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200007d0 	.word	0x200007d0
 800b1c0:	20000838 	.word	0x20000838
 800b1c4:	200008a0 	.word	0x200008a0

0800b1c8 <global_stdio_init.part.0>:
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b1f8 <global_stdio_init.part.0+0x30>)
 800b1cc:	4c0b      	ldr	r4, [pc, #44]	@ (800b1fc <global_stdio_init.part.0+0x34>)
 800b1ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b200 <global_stdio_init.part.0+0x38>)
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2104      	movs	r1, #4
 800b1d8:	f7ff ff94 	bl	800b104 <std>
 800b1dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	2109      	movs	r1, #9
 800b1e4:	f7ff ff8e 	bl	800b104 <std>
 800b1e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f2:	2112      	movs	r1, #18
 800b1f4:	f7ff bf86 	b.w	800b104 <std>
 800b1f8:	20000908 	.word	0x20000908
 800b1fc:	200007d0 	.word	0x200007d0
 800b200:	0800b171 	.word	0x0800b171

0800b204 <__sfp_lock_acquire>:
 800b204:	4801      	ldr	r0, [pc, #4]	@ (800b20c <__sfp_lock_acquire+0x8>)
 800b206:	f000 b9b0 	b.w	800b56a <__retarget_lock_acquire_recursive>
 800b20a:	bf00      	nop
 800b20c:	20000911 	.word	0x20000911

0800b210 <__sfp_lock_release>:
 800b210:	4801      	ldr	r0, [pc, #4]	@ (800b218 <__sfp_lock_release+0x8>)
 800b212:	f000 b9ab 	b.w	800b56c <__retarget_lock_release_recursive>
 800b216:	bf00      	nop
 800b218:	20000911 	.word	0x20000911

0800b21c <__sinit>:
 800b21c:	b510      	push	{r4, lr}
 800b21e:	4604      	mov	r4, r0
 800b220:	f7ff fff0 	bl	800b204 <__sfp_lock_acquire>
 800b224:	6a23      	ldr	r3, [r4, #32]
 800b226:	b11b      	cbz	r3, 800b230 <__sinit+0x14>
 800b228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b22c:	f7ff bff0 	b.w	800b210 <__sfp_lock_release>
 800b230:	4b04      	ldr	r3, [pc, #16]	@ (800b244 <__sinit+0x28>)
 800b232:	6223      	str	r3, [r4, #32]
 800b234:	4b04      	ldr	r3, [pc, #16]	@ (800b248 <__sinit+0x2c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1f5      	bne.n	800b228 <__sinit+0xc>
 800b23c:	f7ff ffc4 	bl	800b1c8 <global_stdio_init.part.0>
 800b240:	e7f2      	b.n	800b228 <__sinit+0xc>
 800b242:	bf00      	nop
 800b244:	0800b189 	.word	0x0800b189
 800b248:	20000908 	.word	0x20000908

0800b24c <_fwalk_sglue>:
 800b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b250:	4607      	mov	r7, r0
 800b252:	4688      	mov	r8, r1
 800b254:	4614      	mov	r4, r2
 800b256:	2600      	movs	r6, #0
 800b258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b25c:	f1b9 0901 	subs.w	r9, r9, #1
 800b260:	d505      	bpl.n	800b26e <_fwalk_sglue+0x22>
 800b262:	6824      	ldr	r4, [r4, #0]
 800b264:	2c00      	cmp	r4, #0
 800b266:	d1f7      	bne.n	800b258 <_fwalk_sglue+0xc>
 800b268:	4630      	mov	r0, r6
 800b26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26e:	89ab      	ldrh	r3, [r5, #12]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d907      	bls.n	800b284 <_fwalk_sglue+0x38>
 800b274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b278:	3301      	adds	r3, #1
 800b27a:	d003      	beq.n	800b284 <_fwalk_sglue+0x38>
 800b27c:	4629      	mov	r1, r5
 800b27e:	4638      	mov	r0, r7
 800b280:	47c0      	blx	r8
 800b282:	4306      	orrs	r6, r0
 800b284:	3568      	adds	r5, #104	@ 0x68
 800b286:	e7e9      	b.n	800b25c <_fwalk_sglue+0x10>

0800b288 <sniprintf>:
 800b288:	b40c      	push	{r2, r3}
 800b28a:	b530      	push	{r4, r5, lr}
 800b28c:	4b17      	ldr	r3, [pc, #92]	@ (800b2ec <sniprintf+0x64>)
 800b28e:	1e0c      	subs	r4, r1, #0
 800b290:	681d      	ldr	r5, [r3, #0]
 800b292:	b09d      	sub	sp, #116	@ 0x74
 800b294:	da08      	bge.n	800b2a8 <sniprintf+0x20>
 800b296:	238b      	movs	r3, #139	@ 0x8b
 800b298:	602b      	str	r3, [r5, #0]
 800b29a:	f04f 30ff 	mov.w	r0, #4294967295
 800b29e:	b01d      	add	sp, #116	@ 0x74
 800b2a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2a4:	b002      	add	sp, #8
 800b2a6:	4770      	bx	lr
 800b2a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b2ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b2b0:	bf14      	ite	ne
 800b2b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2b6:	4623      	moveq	r3, r4
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	9307      	str	r3, [sp, #28]
 800b2bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2c0:	9002      	str	r0, [sp, #8]
 800b2c2:	9006      	str	r0, [sp, #24]
 800b2c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b2c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b2ca:	ab21      	add	r3, sp, #132	@ 0x84
 800b2cc:	a902      	add	r1, sp, #8
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	f002 fbd3 	bl	800da7c <_svfiprintf_r>
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	bfbc      	itt	lt
 800b2da:	238b      	movlt	r3, #139	@ 0x8b
 800b2dc:	602b      	strlt	r3, [r5, #0]
 800b2de:	2c00      	cmp	r4, #0
 800b2e0:	d0dd      	beq.n	800b29e <sniprintf+0x16>
 800b2e2:	9b02      	ldr	r3, [sp, #8]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	701a      	strb	r2, [r3, #0]
 800b2e8:	e7d9      	b.n	800b29e <sniprintf+0x16>
 800b2ea:	bf00      	nop
 800b2ec:	20000254 	.word	0x20000254

0800b2f0 <siprintf>:
 800b2f0:	b40e      	push	{r1, r2, r3}
 800b2f2:	b500      	push	{lr}
 800b2f4:	b09c      	sub	sp, #112	@ 0x70
 800b2f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800b2f8:	9002      	str	r0, [sp, #8]
 800b2fa:	9006      	str	r0, [sp, #24]
 800b2fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b300:	4809      	ldr	r0, [pc, #36]	@ (800b328 <siprintf+0x38>)
 800b302:	9107      	str	r1, [sp, #28]
 800b304:	9104      	str	r1, [sp, #16]
 800b306:	4909      	ldr	r1, [pc, #36]	@ (800b32c <siprintf+0x3c>)
 800b308:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30c:	9105      	str	r1, [sp, #20]
 800b30e:	6800      	ldr	r0, [r0, #0]
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	a902      	add	r1, sp, #8
 800b314:	f002 fbb2 	bl	800da7c <_svfiprintf_r>
 800b318:	9b02      	ldr	r3, [sp, #8]
 800b31a:	2200      	movs	r2, #0
 800b31c:	701a      	strb	r2, [r3, #0]
 800b31e:	b01c      	add	sp, #112	@ 0x70
 800b320:	f85d eb04 	ldr.w	lr, [sp], #4
 800b324:	b003      	add	sp, #12
 800b326:	4770      	bx	lr
 800b328:	20000254 	.word	0x20000254
 800b32c:	ffff0208 	.word	0xffff0208

0800b330 <__sread>:
 800b330:	b510      	push	{r4, lr}
 800b332:	460c      	mov	r4, r1
 800b334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b338:	f000 f8c8 	bl	800b4cc <_read_r>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	bfab      	itete	ge
 800b340:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b342:	89a3      	ldrhlt	r3, [r4, #12]
 800b344:	181b      	addge	r3, r3, r0
 800b346:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b34a:	bfac      	ite	ge
 800b34c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b34e:	81a3      	strhlt	r3, [r4, #12]
 800b350:	bd10      	pop	{r4, pc}

0800b352 <__swrite>:
 800b352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b356:	461f      	mov	r7, r3
 800b358:	898b      	ldrh	r3, [r1, #12]
 800b35a:	05db      	lsls	r3, r3, #23
 800b35c:	4605      	mov	r5, r0
 800b35e:	460c      	mov	r4, r1
 800b360:	4616      	mov	r6, r2
 800b362:	d505      	bpl.n	800b370 <__swrite+0x1e>
 800b364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b368:	2302      	movs	r3, #2
 800b36a:	2200      	movs	r2, #0
 800b36c:	f000 f89c 	bl	800b4a8 <_lseek_r>
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b376:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b37a:	81a3      	strh	r3, [r4, #12]
 800b37c:	4632      	mov	r2, r6
 800b37e:	463b      	mov	r3, r7
 800b380:	4628      	mov	r0, r5
 800b382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b386:	f000 b8b3 	b.w	800b4f0 <_write_r>

0800b38a <__sseek>:
 800b38a:	b510      	push	{r4, lr}
 800b38c:	460c      	mov	r4, r1
 800b38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b392:	f000 f889 	bl	800b4a8 <_lseek_r>
 800b396:	1c43      	adds	r3, r0, #1
 800b398:	89a3      	ldrh	r3, [r4, #12]
 800b39a:	bf15      	itete	ne
 800b39c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b39e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3a6:	81a3      	strheq	r3, [r4, #12]
 800b3a8:	bf18      	it	ne
 800b3aa:	81a3      	strhne	r3, [r4, #12]
 800b3ac:	bd10      	pop	{r4, pc}

0800b3ae <__sclose>:
 800b3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b2:	f000 b869 	b.w	800b488 <_close_r>

0800b3b6 <memset>:
 800b3b6:	4402      	add	r2, r0
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d100      	bne.n	800b3c0 <memset+0xa>
 800b3be:	4770      	bx	lr
 800b3c0:	f803 1b01 	strb.w	r1, [r3], #1
 800b3c4:	e7f9      	b.n	800b3ba <memset+0x4>
	...

0800b3c8 <strtok>:
 800b3c8:	4b16      	ldr	r3, [pc, #88]	@ (800b424 <strtok+0x5c>)
 800b3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ce:	681f      	ldr	r7, [r3, #0]
 800b3d0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	460e      	mov	r6, r1
 800b3d6:	b9ec      	cbnz	r4, 800b414 <strtok+0x4c>
 800b3d8:	2050      	movs	r0, #80	@ 0x50
 800b3da:	f000 ff83 	bl	800c2e4 <malloc>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	6478      	str	r0, [r7, #68]	@ 0x44
 800b3e2:	b920      	cbnz	r0, 800b3ee <strtok+0x26>
 800b3e4:	4b10      	ldr	r3, [pc, #64]	@ (800b428 <strtok+0x60>)
 800b3e6:	4811      	ldr	r0, [pc, #68]	@ (800b42c <strtok+0x64>)
 800b3e8:	215b      	movs	r1, #91	@ 0x5b
 800b3ea:	f000 f8c7 	bl	800b57c <__assert_func>
 800b3ee:	e9c0 4400 	strd	r4, r4, [r0]
 800b3f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b3f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b3fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b3fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b402:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b406:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b40a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b40e:	6184      	str	r4, [r0, #24]
 800b410:	7704      	strb	r4, [r0, #28]
 800b412:	6244      	str	r4, [r0, #36]	@ 0x24
 800b414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b416:	4631      	mov	r1, r6
 800b418:	4628      	mov	r0, r5
 800b41a:	2301      	movs	r3, #1
 800b41c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b420:	f000 b806 	b.w	800b430 <__strtok_r>
 800b424:	20000254 	.word	0x20000254
 800b428:	0800ed3e 	.word	0x0800ed3e
 800b42c:	0800ed55 	.word	0x0800ed55

0800b430 <__strtok_r>:
 800b430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b432:	4604      	mov	r4, r0
 800b434:	b908      	cbnz	r0, 800b43a <__strtok_r+0xa>
 800b436:	6814      	ldr	r4, [r2, #0]
 800b438:	b144      	cbz	r4, 800b44c <__strtok_r+0x1c>
 800b43a:	4620      	mov	r0, r4
 800b43c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b440:	460f      	mov	r7, r1
 800b442:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b446:	b91e      	cbnz	r6, 800b450 <__strtok_r+0x20>
 800b448:	b965      	cbnz	r5, 800b464 <__strtok_r+0x34>
 800b44a:	6015      	str	r5, [r2, #0]
 800b44c:	2000      	movs	r0, #0
 800b44e:	e005      	b.n	800b45c <__strtok_r+0x2c>
 800b450:	42b5      	cmp	r5, r6
 800b452:	d1f6      	bne.n	800b442 <__strtok_r+0x12>
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1f0      	bne.n	800b43a <__strtok_r+0xa>
 800b458:	6014      	str	r4, [r2, #0]
 800b45a:	7003      	strb	r3, [r0, #0]
 800b45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b45e:	461c      	mov	r4, r3
 800b460:	e00c      	b.n	800b47c <__strtok_r+0x4c>
 800b462:	b915      	cbnz	r5, 800b46a <__strtok_r+0x3a>
 800b464:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b468:	460e      	mov	r6, r1
 800b46a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b46e:	42ab      	cmp	r3, r5
 800b470:	d1f7      	bne.n	800b462 <__strtok_r+0x32>
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0f3      	beq.n	800b45e <__strtok_r+0x2e>
 800b476:	2300      	movs	r3, #0
 800b478:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b47c:	6014      	str	r4, [r2, #0]
 800b47e:	e7ed      	b.n	800b45c <__strtok_r+0x2c>

0800b480 <_localeconv_r>:
 800b480:	4800      	ldr	r0, [pc, #0]	@ (800b484 <_localeconv_r+0x4>)
 800b482:	4770      	bx	lr
 800b484:	20000394 	.word	0x20000394

0800b488 <_close_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4d06      	ldr	r5, [pc, #24]	@ (800b4a4 <_close_r+0x1c>)
 800b48c:	2300      	movs	r3, #0
 800b48e:	4604      	mov	r4, r0
 800b490:	4608      	mov	r0, r1
 800b492:	602b      	str	r3, [r5, #0]
 800b494:	f7f7 f912 	bl	80026bc <_close>
 800b498:	1c43      	adds	r3, r0, #1
 800b49a:	d102      	bne.n	800b4a2 <_close_r+0x1a>
 800b49c:	682b      	ldr	r3, [r5, #0]
 800b49e:	b103      	cbz	r3, 800b4a2 <_close_r+0x1a>
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	bd38      	pop	{r3, r4, r5, pc}
 800b4a4:	2000090c 	.word	0x2000090c

0800b4a8 <_lseek_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4d07      	ldr	r5, [pc, #28]	@ (800b4c8 <_lseek_r+0x20>)
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	4608      	mov	r0, r1
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	602a      	str	r2, [r5, #0]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f7f7 f927 	bl	800270a <_lseek>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d102      	bne.n	800b4c6 <_lseek_r+0x1e>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	b103      	cbz	r3, 800b4c6 <_lseek_r+0x1e>
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	2000090c 	.word	0x2000090c

0800b4cc <_read_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4d07      	ldr	r5, [pc, #28]	@ (800b4ec <_read_r+0x20>)
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	4608      	mov	r0, r1
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	602a      	str	r2, [r5, #0]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	f7f7 f8b5 	bl	800264a <_read>
 800b4e0:	1c43      	adds	r3, r0, #1
 800b4e2:	d102      	bne.n	800b4ea <_read_r+0x1e>
 800b4e4:	682b      	ldr	r3, [r5, #0]
 800b4e6:	b103      	cbz	r3, 800b4ea <_read_r+0x1e>
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	bd38      	pop	{r3, r4, r5, pc}
 800b4ec:	2000090c 	.word	0x2000090c

0800b4f0 <_write_r>:
 800b4f0:	b538      	push	{r3, r4, r5, lr}
 800b4f2:	4d07      	ldr	r5, [pc, #28]	@ (800b510 <_write_r+0x20>)
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	4608      	mov	r0, r1
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	602a      	str	r2, [r5, #0]
 800b4fe:	461a      	mov	r2, r3
 800b500:	f7f7 f8c0 	bl	8002684 <_write>
 800b504:	1c43      	adds	r3, r0, #1
 800b506:	d102      	bne.n	800b50e <_write_r+0x1e>
 800b508:	682b      	ldr	r3, [r5, #0]
 800b50a:	b103      	cbz	r3, 800b50e <_write_r+0x1e>
 800b50c:	6023      	str	r3, [r4, #0]
 800b50e:	bd38      	pop	{r3, r4, r5, pc}
 800b510:	2000090c 	.word	0x2000090c

0800b514 <__errno>:
 800b514:	4b01      	ldr	r3, [pc, #4]	@ (800b51c <__errno+0x8>)
 800b516:	6818      	ldr	r0, [r3, #0]
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	20000254 	.word	0x20000254

0800b520 <__libc_init_array>:
 800b520:	b570      	push	{r4, r5, r6, lr}
 800b522:	4d0d      	ldr	r5, [pc, #52]	@ (800b558 <__libc_init_array+0x38>)
 800b524:	4c0d      	ldr	r4, [pc, #52]	@ (800b55c <__libc_init_array+0x3c>)
 800b526:	1b64      	subs	r4, r4, r5
 800b528:	10a4      	asrs	r4, r4, #2
 800b52a:	2600      	movs	r6, #0
 800b52c:	42a6      	cmp	r6, r4
 800b52e:	d109      	bne.n	800b544 <__libc_init_array+0x24>
 800b530:	4d0b      	ldr	r5, [pc, #44]	@ (800b560 <__libc_init_array+0x40>)
 800b532:	4c0c      	ldr	r4, [pc, #48]	@ (800b564 <__libc_init_array+0x44>)
 800b534:	f003 faf6 	bl	800eb24 <_init>
 800b538:	1b64      	subs	r4, r4, r5
 800b53a:	10a4      	asrs	r4, r4, #2
 800b53c:	2600      	movs	r6, #0
 800b53e:	42a6      	cmp	r6, r4
 800b540:	d105      	bne.n	800b54e <__libc_init_array+0x2e>
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	f855 3b04 	ldr.w	r3, [r5], #4
 800b548:	4798      	blx	r3
 800b54a:	3601      	adds	r6, #1
 800b54c:	e7ee      	b.n	800b52c <__libc_init_array+0xc>
 800b54e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b552:	4798      	blx	r3
 800b554:	3601      	adds	r6, #1
 800b556:	e7f2      	b.n	800b53e <__libc_init_array+0x1e>
 800b558:	0800f094 	.word	0x0800f094
 800b55c:	0800f094 	.word	0x0800f094
 800b560:	0800f094 	.word	0x0800f094
 800b564:	0800f098 	.word	0x0800f098

0800b568 <__retarget_lock_init_recursive>:
 800b568:	4770      	bx	lr

0800b56a <__retarget_lock_acquire_recursive>:
 800b56a:	4770      	bx	lr

0800b56c <__retarget_lock_release_recursive>:
 800b56c:	4770      	bx	lr
	...

0800b570 <nanf>:
 800b570:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b578 <nanf+0x8>
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	7fc00000 	.word	0x7fc00000

0800b57c <__assert_func>:
 800b57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b57e:	4614      	mov	r4, r2
 800b580:	461a      	mov	r2, r3
 800b582:	4b09      	ldr	r3, [pc, #36]	@ (800b5a8 <__assert_func+0x2c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4605      	mov	r5, r0
 800b588:	68d8      	ldr	r0, [r3, #12]
 800b58a:	b954      	cbnz	r4, 800b5a2 <__assert_func+0x26>
 800b58c:	4b07      	ldr	r3, [pc, #28]	@ (800b5ac <__assert_func+0x30>)
 800b58e:	461c      	mov	r4, r3
 800b590:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b594:	9100      	str	r1, [sp, #0]
 800b596:	462b      	mov	r3, r5
 800b598:	4905      	ldr	r1, [pc, #20]	@ (800b5b0 <__assert_func+0x34>)
 800b59a:	f002 fc17 	bl	800ddcc <fiprintf>
 800b59e:	f002 fc7b 	bl	800de98 <abort>
 800b5a2:	4b04      	ldr	r3, [pc, #16]	@ (800b5b4 <__assert_func+0x38>)
 800b5a4:	e7f4      	b.n	800b590 <__assert_func+0x14>
 800b5a6:	bf00      	nop
 800b5a8:	20000254 	.word	0x20000254
 800b5ac:	0800edea 	.word	0x0800edea
 800b5b0:	0800edbc 	.word	0x0800edbc
 800b5b4:	0800edaf 	.word	0x0800edaf

0800b5b8 <quorem>:
 800b5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	6903      	ldr	r3, [r0, #16]
 800b5be:	690c      	ldr	r4, [r1, #16]
 800b5c0:	42a3      	cmp	r3, r4
 800b5c2:	4607      	mov	r7, r0
 800b5c4:	db7e      	blt.n	800b6c4 <quorem+0x10c>
 800b5c6:	3c01      	subs	r4, #1
 800b5c8:	f101 0814 	add.w	r8, r1, #20
 800b5cc:	00a3      	lsls	r3, r4, #2
 800b5ce:	f100 0514 	add.w	r5, r0, #20
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5ee:	d32e      	bcc.n	800b64e <quorem+0x96>
 800b5f0:	f04f 0a00 	mov.w	sl, #0
 800b5f4:	46c4      	mov	ip, r8
 800b5f6:	46ae      	mov	lr, r5
 800b5f8:	46d3      	mov	fp, sl
 800b5fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5fe:	b298      	uxth	r0, r3
 800b600:	fb06 a000 	mla	r0, r6, r0, sl
 800b604:	0c02      	lsrs	r2, r0, #16
 800b606:	0c1b      	lsrs	r3, r3, #16
 800b608:	fb06 2303 	mla	r3, r6, r3, r2
 800b60c:	f8de 2000 	ldr.w	r2, [lr]
 800b610:	b280      	uxth	r0, r0
 800b612:	b292      	uxth	r2, r2
 800b614:	1a12      	subs	r2, r2, r0
 800b616:	445a      	add	r2, fp
 800b618:	f8de 0000 	ldr.w	r0, [lr]
 800b61c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b620:	b29b      	uxth	r3, r3
 800b622:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b626:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b62a:	b292      	uxth	r2, r2
 800b62c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b630:	45e1      	cmp	r9, ip
 800b632:	f84e 2b04 	str.w	r2, [lr], #4
 800b636:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b63a:	d2de      	bcs.n	800b5fa <quorem+0x42>
 800b63c:	9b00      	ldr	r3, [sp, #0]
 800b63e:	58eb      	ldr	r3, [r5, r3]
 800b640:	b92b      	cbnz	r3, 800b64e <quorem+0x96>
 800b642:	9b01      	ldr	r3, [sp, #4]
 800b644:	3b04      	subs	r3, #4
 800b646:	429d      	cmp	r5, r3
 800b648:	461a      	mov	r2, r3
 800b64a:	d32f      	bcc.n	800b6ac <quorem+0xf4>
 800b64c:	613c      	str	r4, [r7, #16]
 800b64e:	4638      	mov	r0, r7
 800b650:	f001 f9c2 	bl	800c9d8 <__mcmp>
 800b654:	2800      	cmp	r0, #0
 800b656:	db25      	blt.n	800b6a4 <quorem+0xec>
 800b658:	4629      	mov	r1, r5
 800b65a:	2000      	movs	r0, #0
 800b65c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b660:	f8d1 c000 	ldr.w	ip, [r1]
 800b664:	fa1f fe82 	uxth.w	lr, r2
 800b668:	fa1f f38c 	uxth.w	r3, ip
 800b66c:	eba3 030e 	sub.w	r3, r3, lr
 800b670:	4403      	add	r3, r0
 800b672:	0c12      	lsrs	r2, r2, #16
 800b674:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b678:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b682:	45c1      	cmp	r9, r8
 800b684:	f841 3b04 	str.w	r3, [r1], #4
 800b688:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b68c:	d2e6      	bcs.n	800b65c <quorem+0xa4>
 800b68e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b696:	b922      	cbnz	r2, 800b6a2 <quorem+0xea>
 800b698:	3b04      	subs	r3, #4
 800b69a:	429d      	cmp	r5, r3
 800b69c:	461a      	mov	r2, r3
 800b69e:	d30b      	bcc.n	800b6b8 <quorem+0x100>
 800b6a0:	613c      	str	r4, [r7, #16]
 800b6a2:	3601      	adds	r6, #1
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	b003      	add	sp, #12
 800b6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ac:	6812      	ldr	r2, [r2, #0]
 800b6ae:	3b04      	subs	r3, #4
 800b6b0:	2a00      	cmp	r2, #0
 800b6b2:	d1cb      	bne.n	800b64c <quorem+0x94>
 800b6b4:	3c01      	subs	r4, #1
 800b6b6:	e7c6      	b.n	800b646 <quorem+0x8e>
 800b6b8:	6812      	ldr	r2, [r2, #0]
 800b6ba:	3b04      	subs	r3, #4
 800b6bc:	2a00      	cmp	r2, #0
 800b6be:	d1ef      	bne.n	800b6a0 <quorem+0xe8>
 800b6c0:	3c01      	subs	r4, #1
 800b6c2:	e7ea      	b.n	800b69a <quorem+0xe2>
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	e7ee      	b.n	800b6a6 <quorem+0xee>

0800b6c8 <_dtoa_r>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	69c7      	ldr	r7, [r0, #28]
 800b6ce:	b099      	sub	sp, #100	@ 0x64
 800b6d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6d4:	ec55 4b10 	vmov	r4, r5, d0
 800b6d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b6da:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6dc:	4683      	mov	fp, r0
 800b6de:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b6e2:	b97f      	cbnz	r7, 800b704 <_dtoa_r+0x3c>
 800b6e4:	2010      	movs	r0, #16
 800b6e6:	f000 fdfd 	bl	800c2e4 <malloc>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800b6f0:	b920      	cbnz	r0, 800b6fc <_dtoa_r+0x34>
 800b6f2:	4ba7      	ldr	r3, [pc, #668]	@ (800b990 <_dtoa_r+0x2c8>)
 800b6f4:	21ef      	movs	r1, #239	@ 0xef
 800b6f6:	48a7      	ldr	r0, [pc, #668]	@ (800b994 <_dtoa_r+0x2cc>)
 800b6f8:	f7ff ff40 	bl	800b57c <__assert_func>
 800b6fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b700:	6007      	str	r7, [r0, #0]
 800b702:	60c7      	str	r7, [r0, #12]
 800b704:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b708:	6819      	ldr	r1, [r3, #0]
 800b70a:	b159      	cbz	r1, 800b724 <_dtoa_r+0x5c>
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	604a      	str	r2, [r1, #4]
 800b710:	2301      	movs	r3, #1
 800b712:	4093      	lsls	r3, r2
 800b714:	608b      	str	r3, [r1, #8]
 800b716:	4658      	mov	r0, fp
 800b718:	f000 feda 	bl	800c4d0 <_Bfree>
 800b71c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	1e2b      	subs	r3, r5, #0
 800b726:	bfb9      	ittee	lt
 800b728:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b72c:	9303      	strlt	r3, [sp, #12]
 800b72e:	2300      	movge	r3, #0
 800b730:	6033      	strge	r3, [r6, #0]
 800b732:	9f03      	ldr	r7, [sp, #12]
 800b734:	4b98      	ldr	r3, [pc, #608]	@ (800b998 <_dtoa_r+0x2d0>)
 800b736:	bfbc      	itt	lt
 800b738:	2201      	movlt	r2, #1
 800b73a:	6032      	strlt	r2, [r6, #0]
 800b73c:	43bb      	bics	r3, r7
 800b73e:	d112      	bne.n	800b766 <_dtoa_r+0x9e>
 800b740:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b742:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b746:	6013      	str	r3, [r2, #0]
 800b748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b74c:	4323      	orrs	r3, r4
 800b74e:	f000 854d 	beq.w	800c1ec <_dtoa_r+0xb24>
 800b752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b754:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b9ac <_dtoa_r+0x2e4>
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 854f 	beq.w	800c1fc <_dtoa_r+0xb34>
 800b75e:	f10a 0303 	add.w	r3, sl, #3
 800b762:	f000 bd49 	b.w	800c1f8 <_dtoa_r+0xb30>
 800b766:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b76a:	2200      	movs	r2, #0
 800b76c:	ec51 0b17 	vmov	r0, r1, d7
 800b770:	2300      	movs	r3, #0
 800b772:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b776:	f7f5 f9df 	bl	8000b38 <__aeabi_dcmpeq>
 800b77a:	4680      	mov	r8, r0
 800b77c:	b158      	cbz	r0, 800b796 <_dtoa_r+0xce>
 800b77e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b780:	2301      	movs	r3, #1
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b786:	b113      	cbz	r3, 800b78e <_dtoa_r+0xc6>
 800b788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b78a:	4b84      	ldr	r3, [pc, #528]	@ (800b99c <_dtoa_r+0x2d4>)
 800b78c:	6013      	str	r3, [r2, #0]
 800b78e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b9b0 <_dtoa_r+0x2e8>
 800b792:	f000 bd33 	b.w	800c1fc <_dtoa_r+0xb34>
 800b796:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b79a:	aa16      	add	r2, sp, #88	@ 0x58
 800b79c:	a917      	add	r1, sp, #92	@ 0x5c
 800b79e:	4658      	mov	r0, fp
 800b7a0:	f001 fa3a 	bl	800cc18 <__d2b>
 800b7a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b7a8:	4681      	mov	r9, r0
 800b7aa:	2e00      	cmp	r6, #0
 800b7ac:	d077      	beq.n	800b89e <_dtoa_r+0x1d6>
 800b7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b7b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b7c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b7c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	4b74      	ldr	r3, [pc, #464]	@ (800b9a0 <_dtoa_r+0x2d8>)
 800b7ce:	f7f4 fd93 	bl	80002f8 <__aeabi_dsub>
 800b7d2:	a369      	add	r3, pc, #420	@ (adr r3, 800b978 <_dtoa_r+0x2b0>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f7f4 ff46 	bl	8000668 <__aeabi_dmul>
 800b7dc:	a368      	add	r3, pc, #416	@ (adr r3, 800b980 <_dtoa_r+0x2b8>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fd8b 	bl	80002fc <__adddf3>
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	f7f4 fed2 	bl	8000594 <__aeabi_i2d>
 800b7f0:	a365      	add	r3, pc, #404	@ (adr r3, 800b988 <_dtoa_r+0x2c0>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f7f4 ff37 	bl	8000668 <__aeabi_dmul>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4620      	mov	r0, r4
 800b800:	4629      	mov	r1, r5
 800b802:	f7f4 fd7b 	bl	80002fc <__adddf3>
 800b806:	4604      	mov	r4, r0
 800b808:	460d      	mov	r5, r1
 800b80a:	f7f5 f9dd 	bl	8000bc8 <__aeabi_d2iz>
 800b80e:	2200      	movs	r2, #0
 800b810:	4607      	mov	r7, r0
 800b812:	2300      	movs	r3, #0
 800b814:	4620      	mov	r0, r4
 800b816:	4629      	mov	r1, r5
 800b818:	f7f5 f998 	bl	8000b4c <__aeabi_dcmplt>
 800b81c:	b140      	cbz	r0, 800b830 <_dtoa_r+0x168>
 800b81e:	4638      	mov	r0, r7
 800b820:	f7f4 feb8 	bl	8000594 <__aeabi_i2d>
 800b824:	4622      	mov	r2, r4
 800b826:	462b      	mov	r3, r5
 800b828:	f7f5 f986 	bl	8000b38 <__aeabi_dcmpeq>
 800b82c:	b900      	cbnz	r0, 800b830 <_dtoa_r+0x168>
 800b82e:	3f01      	subs	r7, #1
 800b830:	2f16      	cmp	r7, #22
 800b832:	d851      	bhi.n	800b8d8 <_dtoa_r+0x210>
 800b834:	4b5b      	ldr	r3, [pc, #364]	@ (800b9a4 <_dtoa_r+0x2dc>)
 800b836:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b842:	f7f5 f983 	bl	8000b4c <__aeabi_dcmplt>
 800b846:	2800      	cmp	r0, #0
 800b848:	d048      	beq.n	800b8dc <_dtoa_r+0x214>
 800b84a:	3f01      	subs	r7, #1
 800b84c:	2300      	movs	r3, #0
 800b84e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b850:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b852:	1b9b      	subs	r3, r3, r6
 800b854:	1e5a      	subs	r2, r3, #1
 800b856:	bf44      	itt	mi
 800b858:	f1c3 0801 	rsbmi	r8, r3, #1
 800b85c:	2300      	movmi	r3, #0
 800b85e:	9208      	str	r2, [sp, #32]
 800b860:	bf54      	ite	pl
 800b862:	f04f 0800 	movpl.w	r8, #0
 800b866:	9308      	strmi	r3, [sp, #32]
 800b868:	2f00      	cmp	r7, #0
 800b86a:	db39      	blt.n	800b8e0 <_dtoa_r+0x218>
 800b86c:	9b08      	ldr	r3, [sp, #32]
 800b86e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b870:	443b      	add	r3, r7
 800b872:	9308      	str	r3, [sp, #32]
 800b874:	2300      	movs	r3, #0
 800b876:	930a      	str	r3, [sp, #40]	@ 0x28
 800b878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b87a:	2b09      	cmp	r3, #9
 800b87c:	d864      	bhi.n	800b948 <_dtoa_r+0x280>
 800b87e:	2b05      	cmp	r3, #5
 800b880:	bfc4      	itt	gt
 800b882:	3b04      	subgt	r3, #4
 800b884:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b888:	f1a3 0302 	sub.w	r3, r3, #2
 800b88c:	bfcc      	ite	gt
 800b88e:	2400      	movgt	r4, #0
 800b890:	2401      	movle	r4, #1
 800b892:	2b03      	cmp	r3, #3
 800b894:	d863      	bhi.n	800b95e <_dtoa_r+0x296>
 800b896:	e8df f003 	tbb	[pc, r3]
 800b89a:	372a      	.short	0x372a
 800b89c:	5535      	.short	0x5535
 800b89e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b8a2:	441e      	add	r6, r3
 800b8a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b8a8:	2b20      	cmp	r3, #32
 800b8aa:	bfc1      	itttt	gt
 800b8ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b8b0:	409f      	lslgt	r7, r3
 800b8b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b8b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b8ba:	bfd6      	itet	le
 800b8bc:	f1c3 0320 	rsble	r3, r3, #32
 800b8c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b8c4:	fa04 f003 	lslle.w	r0, r4, r3
 800b8c8:	f7f4 fe54 	bl	8000574 <__aeabi_ui2d>
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b8d2:	3e01      	subs	r6, #1
 800b8d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b8d6:	e777      	b.n	800b7c8 <_dtoa_r+0x100>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e7b8      	b.n	800b84e <_dtoa_r+0x186>
 800b8dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b8de:	e7b7      	b.n	800b850 <_dtoa_r+0x188>
 800b8e0:	427b      	negs	r3, r7
 800b8e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	eba8 0807 	sub.w	r8, r8, r7
 800b8ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8ec:	e7c4      	b.n	800b878 <_dtoa_r+0x1b0>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	dc35      	bgt.n	800b964 <_dtoa_r+0x29c>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	9307      	str	r3, [sp, #28]
 800b8fe:	461a      	mov	r2, r3
 800b900:	920e      	str	r2, [sp, #56]	@ 0x38
 800b902:	e00b      	b.n	800b91c <_dtoa_r+0x254>
 800b904:	2301      	movs	r3, #1
 800b906:	e7f3      	b.n	800b8f0 <_dtoa_r+0x228>
 800b908:	2300      	movs	r3, #0
 800b90a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b90c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b90e:	18fb      	adds	r3, r7, r3
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	3301      	adds	r3, #1
 800b914:	2b01      	cmp	r3, #1
 800b916:	9307      	str	r3, [sp, #28]
 800b918:	bfb8      	it	lt
 800b91a:	2301      	movlt	r3, #1
 800b91c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b920:	2100      	movs	r1, #0
 800b922:	2204      	movs	r2, #4
 800b924:	f102 0514 	add.w	r5, r2, #20
 800b928:	429d      	cmp	r5, r3
 800b92a:	d91f      	bls.n	800b96c <_dtoa_r+0x2a4>
 800b92c:	6041      	str	r1, [r0, #4]
 800b92e:	4658      	mov	r0, fp
 800b930:	f000 fd8e 	bl	800c450 <_Balloc>
 800b934:	4682      	mov	sl, r0
 800b936:	2800      	cmp	r0, #0
 800b938:	d13c      	bne.n	800b9b4 <_dtoa_r+0x2ec>
 800b93a:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a8 <_dtoa_r+0x2e0>)
 800b93c:	4602      	mov	r2, r0
 800b93e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b942:	e6d8      	b.n	800b6f6 <_dtoa_r+0x2e>
 800b944:	2301      	movs	r3, #1
 800b946:	e7e0      	b.n	800b90a <_dtoa_r+0x242>
 800b948:	2401      	movs	r4, #1
 800b94a:	2300      	movs	r3, #0
 800b94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b94e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b950:	f04f 33ff 	mov.w	r3, #4294967295
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	9307      	str	r3, [sp, #28]
 800b958:	2200      	movs	r2, #0
 800b95a:	2312      	movs	r3, #18
 800b95c:	e7d0      	b.n	800b900 <_dtoa_r+0x238>
 800b95e:	2301      	movs	r3, #1
 800b960:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b962:	e7f5      	b.n	800b950 <_dtoa_r+0x288>
 800b964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	9307      	str	r3, [sp, #28]
 800b96a:	e7d7      	b.n	800b91c <_dtoa_r+0x254>
 800b96c:	3101      	adds	r1, #1
 800b96e:	0052      	lsls	r2, r2, #1
 800b970:	e7d8      	b.n	800b924 <_dtoa_r+0x25c>
 800b972:	bf00      	nop
 800b974:	f3af 8000 	nop.w
 800b978:	636f4361 	.word	0x636f4361
 800b97c:	3fd287a7 	.word	0x3fd287a7
 800b980:	8b60c8b3 	.word	0x8b60c8b3
 800b984:	3fc68a28 	.word	0x3fc68a28
 800b988:	509f79fb 	.word	0x509f79fb
 800b98c:	3fd34413 	.word	0x3fd34413
 800b990:	0800ed3e 	.word	0x0800ed3e
 800b994:	0800edf8 	.word	0x0800edf8
 800b998:	7ff00000 	.word	0x7ff00000
 800b99c:	0800ed16 	.word	0x0800ed16
 800b9a0:	3ff80000 	.word	0x3ff80000
 800b9a4:	0800eef0 	.word	0x0800eef0
 800b9a8:	0800ee50 	.word	0x0800ee50
 800b9ac:	0800edf4 	.word	0x0800edf4
 800b9b0:	0800ed15 	.word	0x0800ed15
 800b9b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b9b8:	6018      	str	r0, [r3, #0]
 800b9ba:	9b07      	ldr	r3, [sp, #28]
 800b9bc:	2b0e      	cmp	r3, #14
 800b9be:	f200 80a4 	bhi.w	800bb0a <_dtoa_r+0x442>
 800b9c2:	2c00      	cmp	r4, #0
 800b9c4:	f000 80a1 	beq.w	800bb0a <_dtoa_r+0x442>
 800b9c8:	2f00      	cmp	r7, #0
 800b9ca:	dd33      	ble.n	800ba34 <_dtoa_r+0x36c>
 800b9cc:	4bad      	ldr	r3, [pc, #692]	@ (800bc84 <_dtoa_r+0x5bc>)
 800b9ce:	f007 020f 	and.w	r2, r7, #15
 800b9d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9d6:	ed93 7b00 	vldr	d7, [r3]
 800b9da:	05f8      	lsls	r0, r7, #23
 800b9dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b9e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b9e4:	d516      	bpl.n	800ba14 <_dtoa_r+0x34c>
 800b9e6:	4ba8      	ldr	r3, [pc, #672]	@ (800bc88 <_dtoa_r+0x5c0>)
 800b9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9f0:	f7f4 ff64 	bl	80008bc <__aeabi_ddiv>
 800b9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9f8:	f004 040f 	and.w	r4, r4, #15
 800b9fc:	2603      	movs	r6, #3
 800b9fe:	4da2      	ldr	r5, [pc, #648]	@ (800bc88 <_dtoa_r+0x5c0>)
 800ba00:	b954      	cbnz	r4, 800ba18 <_dtoa_r+0x350>
 800ba02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba0a:	f7f4 ff57 	bl	80008bc <__aeabi_ddiv>
 800ba0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba12:	e028      	b.n	800ba66 <_dtoa_r+0x39e>
 800ba14:	2602      	movs	r6, #2
 800ba16:	e7f2      	b.n	800b9fe <_dtoa_r+0x336>
 800ba18:	07e1      	lsls	r1, r4, #31
 800ba1a:	d508      	bpl.n	800ba2e <_dtoa_r+0x366>
 800ba1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba24:	f7f4 fe20 	bl	8000668 <__aeabi_dmul>
 800ba28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba2c:	3601      	adds	r6, #1
 800ba2e:	1064      	asrs	r4, r4, #1
 800ba30:	3508      	adds	r5, #8
 800ba32:	e7e5      	b.n	800ba00 <_dtoa_r+0x338>
 800ba34:	f000 80d2 	beq.w	800bbdc <_dtoa_r+0x514>
 800ba38:	427c      	negs	r4, r7
 800ba3a:	4b92      	ldr	r3, [pc, #584]	@ (800bc84 <_dtoa_r+0x5bc>)
 800ba3c:	4d92      	ldr	r5, [pc, #584]	@ (800bc88 <_dtoa_r+0x5c0>)
 800ba3e:	f004 020f 	and.w	r2, r4, #15
 800ba42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba4e:	f7f4 fe0b 	bl	8000668 <__aeabi_dmul>
 800ba52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba56:	1124      	asrs	r4, r4, #4
 800ba58:	2300      	movs	r3, #0
 800ba5a:	2602      	movs	r6, #2
 800ba5c:	2c00      	cmp	r4, #0
 800ba5e:	f040 80b2 	bne.w	800bbc6 <_dtoa_r+0x4fe>
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1d3      	bne.n	800ba0e <_dtoa_r+0x346>
 800ba66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 80b7 	beq.w	800bbe0 <_dtoa_r+0x518>
 800ba72:	4b86      	ldr	r3, [pc, #536]	@ (800bc8c <_dtoa_r+0x5c4>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	4620      	mov	r0, r4
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7f5 f867 	bl	8000b4c <__aeabi_dcmplt>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	f000 80ae 	beq.w	800bbe0 <_dtoa_r+0x518>
 800ba84:	9b07      	ldr	r3, [sp, #28]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 80aa 	beq.w	800bbe0 <_dtoa_r+0x518>
 800ba8c:	9b00      	ldr	r3, [sp, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	dd37      	ble.n	800bb02 <_dtoa_r+0x43a>
 800ba92:	1e7b      	subs	r3, r7, #1
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	4620      	mov	r0, r4
 800ba98:	4b7d      	ldr	r3, [pc, #500]	@ (800bc90 <_dtoa_r+0x5c8>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	f7f4 fde3 	bl	8000668 <__aeabi_dmul>
 800baa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa6:	9c00      	ldr	r4, [sp, #0]
 800baa8:	3601      	adds	r6, #1
 800baaa:	4630      	mov	r0, r6
 800baac:	f7f4 fd72 	bl	8000594 <__aeabi_i2d>
 800bab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bab4:	f7f4 fdd8 	bl	8000668 <__aeabi_dmul>
 800bab8:	4b76      	ldr	r3, [pc, #472]	@ (800bc94 <_dtoa_r+0x5cc>)
 800baba:	2200      	movs	r2, #0
 800babc:	f7f4 fc1e 	bl	80002fc <__adddf3>
 800bac0:	4605      	mov	r5, r0
 800bac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bac6:	2c00      	cmp	r4, #0
 800bac8:	f040 808d 	bne.w	800bbe6 <_dtoa_r+0x51e>
 800bacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bad0:	4b71      	ldr	r3, [pc, #452]	@ (800bc98 <_dtoa_r+0x5d0>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	f7f4 fc10 	bl	80002f8 <__aeabi_dsub>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bae0:	462a      	mov	r2, r5
 800bae2:	4633      	mov	r3, r6
 800bae4:	f7f5 f850 	bl	8000b88 <__aeabi_dcmpgt>
 800bae8:	2800      	cmp	r0, #0
 800baea:	f040 828b 	bne.w	800c004 <_dtoa_r+0x93c>
 800baee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baf2:	462a      	mov	r2, r5
 800baf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800baf8:	f7f5 f828 	bl	8000b4c <__aeabi_dcmplt>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	f040 8128 	bne.w	800bd52 <_dtoa_r+0x68a>
 800bb02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bb06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bb0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f2c0 815a 	blt.w	800bdc6 <_dtoa_r+0x6fe>
 800bb12:	2f0e      	cmp	r7, #14
 800bb14:	f300 8157 	bgt.w	800bdc6 <_dtoa_r+0x6fe>
 800bb18:	4b5a      	ldr	r3, [pc, #360]	@ (800bc84 <_dtoa_r+0x5bc>)
 800bb1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb1e:	ed93 7b00 	vldr	d7, [r3]
 800bb22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	ed8d 7b00 	vstr	d7, [sp]
 800bb2a:	da03      	bge.n	800bb34 <_dtoa_r+0x46c>
 800bb2c:	9b07      	ldr	r3, [sp, #28]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f340 8101 	ble.w	800bd36 <_dtoa_r+0x66e>
 800bb34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb38:	4656      	mov	r6, sl
 800bb3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 febb 	bl	80008bc <__aeabi_ddiv>
 800bb46:	f7f5 f83f 	bl	8000bc8 <__aeabi_d2iz>
 800bb4a:	4680      	mov	r8, r0
 800bb4c:	f7f4 fd22 	bl	8000594 <__aeabi_i2d>
 800bb50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb54:	f7f4 fd88 	bl	8000668 <__aeabi_dmul>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	4629      	mov	r1, r5
 800bb60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bb64:	f7f4 fbc8 	bl	80002f8 <__aeabi_dsub>
 800bb68:	f806 4b01 	strb.w	r4, [r6], #1
 800bb6c:	9d07      	ldr	r5, [sp, #28]
 800bb6e:	eba6 040a 	sub.w	r4, r6, sl
 800bb72:	42a5      	cmp	r5, r4
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	f040 8117 	bne.w	800bdaa <_dtoa_r+0x6e2>
 800bb7c:	f7f4 fbbe 	bl	80002fc <__adddf3>
 800bb80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb84:	4604      	mov	r4, r0
 800bb86:	460d      	mov	r5, r1
 800bb88:	f7f4 fffe 	bl	8000b88 <__aeabi_dcmpgt>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f040 80f9 	bne.w	800bd84 <_dtoa_r+0x6bc>
 800bb92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb96:	4620      	mov	r0, r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	f7f4 ffcd 	bl	8000b38 <__aeabi_dcmpeq>
 800bb9e:	b118      	cbz	r0, 800bba8 <_dtoa_r+0x4e0>
 800bba0:	f018 0f01 	tst.w	r8, #1
 800bba4:	f040 80ee 	bne.w	800bd84 <_dtoa_r+0x6bc>
 800bba8:	4649      	mov	r1, r9
 800bbaa:	4658      	mov	r0, fp
 800bbac:	f000 fc90 	bl	800c4d0 <_Bfree>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	7033      	strb	r3, [r6, #0]
 800bbb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bbb6:	3701      	adds	r7, #1
 800bbb8:	601f      	str	r7, [r3, #0]
 800bbba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 831d 	beq.w	800c1fc <_dtoa_r+0xb34>
 800bbc2:	601e      	str	r6, [r3, #0]
 800bbc4:	e31a      	b.n	800c1fc <_dtoa_r+0xb34>
 800bbc6:	07e2      	lsls	r2, r4, #31
 800bbc8:	d505      	bpl.n	800bbd6 <_dtoa_r+0x50e>
 800bbca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbce:	f7f4 fd4b 	bl	8000668 <__aeabi_dmul>
 800bbd2:	3601      	adds	r6, #1
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	1064      	asrs	r4, r4, #1
 800bbd8:	3508      	adds	r5, #8
 800bbda:	e73f      	b.n	800ba5c <_dtoa_r+0x394>
 800bbdc:	2602      	movs	r6, #2
 800bbde:	e742      	b.n	800ba66 <_dtoa_r+0x39e>
 800bbe0:	9c07      	ldr	r4, [sp, #28]
 800bbe2:	9704      	str	r7, [sp, #16]
 800bbe4:	e761      	b.n	800baaa <_dtoa_r+0x3e2>
 800bbe6:	4b27      	ldr	r3, [pc, #156]	@ (800bc84 <_dtoa_r+0x5bc>)
 800bbe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bbee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbf2:	4454      	add	r4, sl
 800bbf4:	2900      	cmp	r1, #0
 800bbf6:	d053      	beq.n	800bca0 <_dtoa_r+0x5d8>
 800bbf8:	4928      	ldr	r1, [pc, #160]	@ (800bc9c <_dtoa_r+0x5d4>)
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	f7f4 fe5e 	bl	80008bc <__aeabi_ddiv>
 800bc00:	4633      	mov	r3, r6
 800bc02:	462a      	mov	r2, r5
 800bc04:	f7f4 fb78 	bl	80002f8 <__aeabi_dsub>
 800bc08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc0c:	4656      	mov	r6, sl
 800bc0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc12:	f7f4 ffd9 	bl	8000bc8 <__aeabi_d2iz>
 800bc16:	4605      	mov	r5, r0
 800bc18:	f7f4 fcbc 	bl	8000594 <__aeabi_i2d>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc24:	f7f4 fb68 	bl	80002f8 <__aeabi_dsub>
 800bc28:	3530      	adds	r5, #48	@ 0x30
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc32:	f806 5b01 	strb.w	r5, [r6], #1
 800bc36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc3a:	f7f4 ff87 	bl	8000b4c <__aeabi_dcmplt>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d171      	bne.n	800bd26 <_dtoa_r+0x65e>
 800bc42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc46:	4911      	ldr	r1, [pc, #68]	@ (800bc8c <_dtoa_r+0x5c4>)
 800bc48:	2000      	movs	r0, #0
 800bc4a:	f7f4 fb55 	bl	80002f8 <__aeabi_dsub>
 800bc4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc52:	f7f4 ff7b 	bl	8000b4c <__aeabi_dcmplt>
 800bc56:	2800      	cmp	r0, #0
 800bc58:	f040 8095 	bne.w	800bd86 <_dtoa_r+0x6be>
 800bc5c:	42a6      	cmp	r6, r4
 800bc5e:	f43f af50 	beq.w	800bb02 <_dtoa_r+0x43a>
 800bc62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc66:	4b0a      	ldr	r3, [pc, #40]	@ (800bc90 <_dtoa_r+0x5c8>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f7f4 fcfd 	bl	8000668 <__aeabi_dmul>
 800bc6e:	4b08      	ldr	r3, [pc, #32]	@ (800bc90 <_dtoa_r+0x5c8>)
 800bc70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc74:	2200      	movs	r2, #0
 800bc76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7a:	f7f4 fcf5 	bl	8000668 <__aeabi_dmul>
 800bc7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc82:	e7c4      	b.n	800bc0e <_dtoa_r+0x546>
 800bc84:	0800eef0 	.word	0x0800eef0
 800bc88:	0800eec8 	.word	0x0800eec8
 800bc8c:	3ff00000 	.word	0x3ff00000
 800bc90:	40240000 	.word	0x40240000
 800bc94:	401c0000 	.word	0x401c0000
 800bc98:	40140000 	.word	0x40140000
 800bc9c:	3fe00000 	.word	0x3fe00000
 800bca0:	4631      	mov	r1, r6
 800bca2:	4628      	mov	r0, r5
 800bca4:	f7f4 fce0 	bl	8000668 <__aeabi_dmul>
 800bca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcac:	9415      	str	r4, [sp, #84]	@ 0x54
 800bcae:	4656      	mov	r6, sl
 800bcb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb4:	f7f4 ff88 	bl	8000bc8 <__aeabi_d2iz>
 800bcb8:	4605      	mov	r5, r0
 800bcba:	f7f4 fc6b 	bl	8000594 <__aeabi_i2d>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc6:	f7f4 fb17 	bl	80002f8 <__aeabi_dsub>
 800bcca:	3530      	adds	r5, #48	@ 0x30
 800bccc:	f806 5b01 	strb.w	r5, [r6], #1
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	42a6      	cmp	r6, r4
 800bcd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcda:	f04f 0200 	mov.w	r2, #0
 800bcde:	d124      	bne.n	800bd2a <_dtoa_r+0x662>
 800bce0:	4bac      	ldr	r3, [pc, #688]	@ (800bf94 <_dtoa_r+0x8cc>)
 800bce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bce6:	f7f4 fb09 	bl	80002fc <__adddf3>
 800bcea:	4602      	mov	r2, r0
 800bcec:	460b      	mov	r3, r1
 800bcee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcf2:	f7f4 ff49 	bl	8000b88 <__aeabi_dcmpgt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d145      	bne.n	800bd86 <_dtoa_r+0x6be>
 800bcfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcfe:	49a5      	ldr	r1, [pc, #660]	@ (800bf94 <_dtoa_r+0x8cc>)
 800bd00:	2000      	movs	r0, #0
 800bd02:	f7f4 faf9 	bl	80002f8 <__aeabi_dsub>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd0e:	f7f4 ff1d 	bl	8000b4c <__aeabi_dcmplt>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f43f aef5 	beq.w	800bb02 <_dtoa_r+0x43a>
 800bd18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bd1a:	1e73      	subs	r3, r6, #1
 800bd1c:	9315      	str	r3, [sp, #84]	@ 0x54
 800bd1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd22:	2b30      	cmp	r3, #48	@ 0x30
 800bd24:	d0f8      	beq.n	800bd18 <_dtoa_r+0x650>
 800bd26:	9f04      	ldr	r7, [sp, #16]
 800bd28:	e73e      	b.n	800bba8 <_dtoa_r+0x4e0>
 800bd2a:	4b9b      	ldr	r3, [pc, #620]	@ (800bf98 <_dtoa_r+0x8d0>)
 800bd2c:	f7f4 fc9c 	bl	8000668 <__aeabi_dmul>
 800bd30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd34:	e7bc      	b.n	800bcb0 <_dtoa_r+0x5e8>
 800bd36:	d10c      	bne.n	800bd52 <_dtoa_r+0x68a>
 800bd38:	4b98      	ldr	r3, [pc, #608]	@ (800bf9c <_dtoa_r+0x8d4>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd40:	f7f4 fc92 	bl	8000668 <__aeabi_dmul>
 800bd44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd48:	f7f4 ff14 	bl	8000b74 <__aeabi_dcmpge>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	f000 8157 	beq.w	800c000 <_dtoa_r+0x938>
 800bd52:	2400      	movs	r4, #0
 800bd54:	4625      	mov	r5, r4
 800bd56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd58:	43db      	mvns	r3, r3
 800bd5a:	9304      	str	r3, [sp, #16]
 800bd5c:	4656      	mov	r6, sl
 800bd5e:	2700      	movs	r7, #0
 800bd60:	4621      	mov	r1, r4
 800bd62:	4658      	mov	r0, fp
 800bd64:	f000 fbb4 	bl	800c4d0 <_Bfree>
 800bd68:	2d00      	cmp	r5, #0
 800bd6a:	d0dc      	beq.n	800bd26 <_dtoa_r+0x65e>
 800bd6c:	b12f      	cbz	r7, 800bd7a <_dtoa_r+0x6b2>
 800bd6e:	42af      	cmp	r7, r5
 800bd70:	d003      	beq.n	800bd7a <_dtoa_r+0x6b2>
 800bd72:	4639      	mov	r1, r7
 800bd74:	4658      	mov	r0, fp
 800bd76:	f000 fbab 	bl	800c4d0 <_Bfree>
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	4658      	mov	r0, fp
 800bd7e:	f000 fba7 	bl	800c4d0 <_Bfree>
 800bd82:	e7d0      	b.n	800bd26 <_dtoa_r+0x65e>
 800bd84:	9704      	str	r7, [sp, #16]
 800bd86:	4633      	mov	r3, r6
 800bd88:	461e      	mov	r6, r3
 800bd8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd8e:	2a39      	cmp	r2, #57	@ 0x39
 800bd90:	d107      	bne.n	800bda2 <_dtoa_r+0x6da>
 800bd92:	459a      	cmp	sl, r3
 800bd94:	d1f8      	bne.n	800bd88 <_dtoa_r+0x6c0>
 800bd96:	9a04      	ldr	r2, [sp, #16]
 800bd98:	3201      	adds	r2, #1
 800bd9a:	9204      	str	r2, [sp, #16]
 800bd9c:	2230      	movs	r2, #48	@ 0x30
 800bd9e:	f88a 2000 	strb.w	r2, [sl]
 800bda2:	781a      	ldrb	r2, [r3, #0]
 800bda4:	3201      	adds	r2, #1
 800bda6:	701a      	strb	r2, [r3, #0]
 800bda8:	e7bd      	b.n	800bd26 <_dtoa_r+0x65e>
 800bdaa:	4b7b      	ldr	r3, [pc, #492]	@ (800bf98 <_dtoa_r+0x8d0>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	f7f4 fc5b 	bl	8000668 <__aeabi_dmul>
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	460d      	mov	r5, r1
 800bdba:	f7f4 febd 	bl	8000b38 <__aeabi_dcmpeq>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	f43f aebb 	beq.w	800bb3a <_dtoa_r+0x472>
 800bdc4:	e6f0      	b.n	800bba8 <_dtoa_r+0x4e0>
 800bdc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bdc8:	2a00      	cmp	r2, #0
 800bdca:	f000 80db 	beq.w	800bf84 <_dtoa_r+0x8bc>
 800bdce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdd0:	2a01      	cmp	r2, #1
 800bdd2:	f300 80bf 	bgt.w	800bf54 <_dtoa_r+0x88c>
 800bdd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bdd8:	2a00      	cmp	r2, #0
 800bdda:	f000 80b7 	beq.w	800bf4c <_dtoa_r+0x884>
 800bdde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bde2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bde4:	4646      	mov	r6, r8
 800bde6:	9a08      	ldr	r2, [sp, #32]
 800bde8:	2101      	movs	r1, #1
 800bdea:	441a      	add	r2, r3
 800bdec:	4658      	mov	r0, fp
 800bdee:	4498      	add	r8, r3
 800bdf0:	9208      	str	r2, [sp, #32]
 800bdf2:	f000 fc6b 	bl	800c6cc <__i2b>
 800bdf6:	4605      	mov	r5, r0
 800bdf8:	b15e      	cbz	r6, 800be12 <_dtoa_r+0x74a>
 800bdfa:	9b08      	ldr	r3, [sp, #32]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	dd08      	ble.n	800be12 <_dtoa_r+0x74a>
 800be00:	42b3      	cmp	r3, r6
 800be02:	9a08      	ldr	r2, [sp, #32]
 800be04:	bfa8      	it	ge
 800be06:	4633      	movge	r3, r6
 800be08:	eba8 0803 	sub.w	r8, r8, r3
 800be0c:	1af6      	subs	r6, r6, r3
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	9308      	str	r3, [sp, #32]
 800be12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be14:	b1f3      	cbz	r3, 800be54 <_dtoa_r+0x78c>
 800be16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 80b7 	beq.w	800bf8c <_dtoa_r+0x8c4>
 800be1e:	b18c      	cbz	r4, 800be44 <_dtoa_r+0x77c>
 800be20:	4629      	mov	r1, r5
 800be22:	4622      	mov	r2, r4
 800be24:	4658      	mov	r0, fp
 800be26:	f000 fd11 	bl	800c84c <__pow5mult>
 800be2a:	464a      	mov	r2, r9
 800be2c:	4601      	mov	r1, r0
 800be2e:	4605      	mov	r5, r0
 800be30:	4658      	mov	r0, fp
 800be32:	f000 fc61 	bl	800c6f8 <__multiply>
 800be36:	4649      	mov	r1, r9
 800be38:	9004      	str	r0, [sp, #16]
 800be3a:	4658      	mov	r0, fp
 800be3c:	f000 fb48 	bl	800c4d0 <_Bfree>
 800be40:	9b04      	ldr	r3, [sp, #16]
 800be42:	4699      	mov	r9, r3
 800be44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be46:	1b1a      	subs	r2, r3, r4
 800be48:	d004      	beq.n	800be54 <_dtoa_r+0x78c>
 800be4a:	4649      	mov	r1, r9
 800be4c:	4658      	mov	r0, fp
 800be4e:	f000 fcfd 	bl	800c84c <__pow5mult>
 800be52:	4681      	mov	r9, r0
 800be54:	2101      	movs	r1, #1
 800be56:	4658      	mov	r0, fp
 800be58:	f000 fc38 	bl	800c6cc <__i2b>
 800be5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be5e:	4604      	mov	r4, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	f000 81cf 	beq.w	800c204 <_dtoa_r+0xb3c>
 800be66:	461a      	mov	r2, r3
 800be68:	4601      	mov	r1, r0
 800be6a:	4658      	mov	r0, fp
 800be6c:	f000 fcee 	bl	800c84c <__pow5mult>
 800be70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be72:	2b01      	cmp	r3, #1
 800be74:	4604      	mov	r4, r0
 800be76:	f300 8095 	bgt.w	800bfa4 <_dtoa_r+0x8dc>
 800be7a:	9b02      	ldr	r3, [sp, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f040 8087 	bne.w	800bf90 <_dtoa_r+0x8c8>
 800be82:	9b03      	ldr	r3, [sp, #12]
 800be84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f040 8089 	bne.w	800bfa0 <_dtoa_r+0x8d8>
 800be8e:	9b03      	ldr	r3, [sp, #12]
 800be90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be94:	0d1b      	lsrs	r3, r3, #20
 800be96:	051b      	lsls	r3, r3, #20
 800be98:	b12b      	cbz	r3, 800bea6 <_dtoa_r+0x7de>
 800be9a:	9b08      	ldr	r3, [sp, #32]
 800be9c:	3301      	adds	r3, #1
 800be9e:	9308      	str	r3, [sp, #32]
 800bea0:	f108 0801 	add.w	r8, r8, #1
 800bea4:	2301      	movs	r3, #1
 800bea6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 81b0 	beq.w	800c210 <_dtoa_r+0xb48>
 800beb0:	6923      	ldr	r3, [r4, #16]
 800beb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800beb6:	6918      	ldr	r0, [r3, #16]
 800beb8:	f000 fbbc 	bl	800c634 <__hi0bits>
 800bebc:	f1c0 0020 	rsb	r0, r0, #32
 800bec0:	9b08      	ldr	r3, [sp, #32]
 800bec2:	4418      	add	r0, r3
 800bec4:	f010 001f 	ands.w	r0, r0, #31
 800bec8:	d077      	beq.n	800bfba <_dtoa_r+0x8f2>
 800beca:	f1c0 0320 	rsb	r3, r0, #32
 800bece:	2b04      	cmp	r3, #4
 800bed0:	dd6b      	ble.n	800bfaa <_dtoa_r+0x8e2>
 800bed2:	9b08      	ldr	r3, [sp, #32]
 800bed4:	f1c0 001c 	rsb	r0, r0, #28
 800bed8:	4403      	add	r3, r0
 800beda:	4480      	add	r8, r0
 800bedc:	4406      	add	r6, r0
 800bede:	9308      	str	r3, [sp, #32]
 800bee0:	f1b8 0f00 	cmp.w	r8, #0
 800bee4:	dd05      	ble.n	800bef2 <_dtoa_r+0x82a>
 800bee6:	4649      	mov	r1, r9
 800bee8:	4642      	mov	r2, r8
 800beea:	4658      	mov	r0, fp
 800beec:	f000 fd08 	bl	800c900 <__lshift>
 800bef0:	4681      	mov	r9, r0
 800bef2:	9b08      	ldr	r3, [sp, #32]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	dd05      	ble.n	800bf04 <_dtoa_r+0x83c>
 800bef8:	4621      	mov	r1, r4
 800befa:	461a      	mov	r2, r3
 800befc:	4658      	mov	r0, fp
 800befe:	f000 fcff 	bl	800c900 <__lshift>
 800bf02:	4604      	mov	r4, r0
 800bf04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d059      	beq.n	800bfbe <_dtoa_r+0x8f6>
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	4648      	mov	r0, r9
 800bf0e:	f000 fd63 	bl	800c9d8 <__mcmp>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	da53      	bge.n	800bfbe <_dtoa_r+0x8f6>
 800bf16:	1e7b      	subs	r3, r7, #1
 800bf18:	9304      	str	r3, [sp, #16]
 800bf1a:	4649      	mov	r1, r9
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	220a      	movs	r2, #10
 800bf20:	4658      	mov	r0, fp
 800bf22:	f000 faf7 	bl	800c514 <__multadd>
 800bf26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf28:	4681      	mov	r9, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f000 8172 	beq.w	800c214 <_dtoa_r+0xb4c>
 800bf30:	2300      	movs	r3, #0
 800bf32:	4629      	mov	r1, r5
 800bf34:	220a      	movs	r2, #10
 800bf36:	4658      	mov	r0, fp
 800bf38:	f000 faec 	bl	800c514 <__multadd>
 800bf3c:	9b00      	ldr	r3, [sp, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	4605      	mov	r5, r0
 800bf42:	dc67      	bgt.n	800c014 <_dtoa_r+0x94c>
 800bf44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	dc41      	bgt.n	800bfce <_dtoa_r+0x906>
 800bf4a:	e063      	b.n	800c014 <_dtoa_r+0x94c>
 800bf4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bf52:	e746      	b.n	800bde2 <_dtoa_r+0x71a>
 800bf54:	9b07      	ldr	r3, [sp, #28]
 800bf56:	1e5c      	subs	r4, r3, #1
 800bf58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf5a:	42a3      	cmp	r3, r4
 800bf5c:	bfbf      	itttt	lt
 800bf5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bf60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bf62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bf64:	1ae3      	sublt	r3, r4, r3
 800bf66:	bfb4      	ite	lt
 800bf68:	18d2      	addlt	r2, r2, r3
 800bf6a:	1b1c      	subge	r4, r3, r4
 800bf6c:	9b07      	ldr	r3, [sp, #28]
 800bf6e:	bfbc      	itt	lt
 800bf70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bf72:	2400      	movlt	r4, #0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	bfb5      	itete	lt
 800bf78:	eba8 0603 	sublt.w	r6, r8, r3
 800bf7c:	9b07      	ldrge	r3, [sp, #28]
 800bf7e:	2300      	movlt	r3, #0
 800bf80:	4646      	movge	r6, r8
 800bf82:	e730      	b.n	800bde6 <_dtoa_r+0x71e>
 800bf84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf88:	4646      	mov	r6, r8
 800bf8a:	e735      	b.n	800bdf8 <_dtoa_r+0x730>
 800bf8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf8e:	e75c      	b.n	800be4a <_dtoa_r+0x782>
 800bf90:	2300      	movs	r3, #0
 800bf92:	e788      	b.n	800bea6 <_dtoa_r+0x7de>
 800bf94:	3fe00000 	.word	0x3fe00000
 800bf98:	40240000 	.word	0x40240000
 800bf9c:	40140000 	.word	0x40140000
 800bfa0:	9b02      	ldr	r3, [sp, #8]
 800bfa2:	e780      	b.n	800bea6 <_dtoa_r+0x7de>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfa8:	e782      	b.n	800beb0 <_dtoa_r+0x7e8>
 800bfaa:	d099      	beq.n	800bee0 <_dtoa_r+0x818>
 800bfac:	9a08      	ldr	r2, [sp, #32]
 800bfae:	331c      	adds	r3, #28
 800bfb0:	441a      	add	r2, r3
 800bfb2:	4498      	add	r8, r3
 800bfb4:	441e      	add	r6, r3
 800bfb6:	9208      	str	r2, [sp, #32]
 800bfb8:	e792      	b.n	800bee0 <_dtoa_r+0x818>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	e7f6      	b.n	800bfac <_dtoa_r+0x8e4>
 800bfbe:	9b07      	ldr	r3, [sp, #28]
 800bfc0:	9704      	str	r7, [sp, #16]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dc20      	bgt.n	800c008 <_dtoa_r+0x940>
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	dd1e      	ble.n	800c00c <_dtoa_r+0x944>
 800bfce:	9b00      	ldr	r3, [sp, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f47f aec0 	bne.w	800bd56 <_dtoa_r+0x68e>
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	2205      	movs	r2, #5
 800bfda:	4658      	mov	r0, fp
 800bfdc:	f000 fa9a 	bl	800c514 <__multadd>
 800bfe0:	4601      	mov	r1, r0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4648      	mov	r0, r9
 800bfe6:	f000 fcf7 	bl	800c9d8 <__mcmp>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	f77f aeb3 	ble.w	800bd56 <_dtoa_r+0x68e>
 800bff0:	4656      	mov	r6, sl
 800bff2:	2331      	movs	r3, #49	@ 0x31
 800bff4:	f806 3b01 	strb.w	r3, [r6], #1
 800bff8:	9b04      	ldr	r3, [sp, #16]
 800bffa:	3301      	adds	r3, #1
 800bffc:	9304      	str	r3, [sp, #16]
 800bffe:	e6ae      	b.n	800bd5e <_dtoa_r+0x696>
 800c000:	9c07      	ldr	r4, [sp, #28]
 800c002:	9704      	str	r7, [sp, #16]
 800c004:	4625      	mov	r5, r4
 800c006:	e7f3      	b.n	800bff0 <_dtoa_r+0x928>
 800c008:	9b07      	ldr	r3, [sp, #28]
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f000 8104 	beq.w	800c21c <_dtoa_r+0xb54>
 800c014:	2e00      	cmp	r6, #0
 800c016:	dd05      	ble.n	800c024 <_dtoa_r+0x95c>
 800c018:	4629      	mov	r1, r5
 800c01a:	4632      	mov	r2, r6
 800c01c:	4658      	mov	r0, fp
 800c01e:	f000 fc6f 	bl	800c900 <__lshift>
 800c022:	4605      	mov	r5, r0
 800c024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c026:	2b00      	cmp	r3, #0
 800c028:	d05a      	beq.n	800c0e0 <_dtoa_r+0xa18>
 800c02a:	6869      	ldr	r1, [r5, #4]
 800c02c:	4658      	mov	r0, fp
 800c02e:	f000 fa0f 	bl	800c450 <_Balloc>
 800c032:	4606      	mov	r6, r0
 800c034:	b928      	cbnz	r0, 800c042 <_dtoa_r+0x97a>
 800c036:	4b84      	ldr	r3, [pc, #528]	@ (800c248 <_dtoa_r+0xb80>)
 800c038:	4602      	mov	r2, r0
 800c03a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c03e:	f7ff bb5a 	b.w	800b6f6 <_dtoa_r+0x2e>
 800c042:	692a      	ldr	r2, [r5, #16]
 800c044:	3202      	adds	r2, #2
 800c046:	0092      	lsls	r2, r2, #2
 800c048:	f105 010c 	add.w	r1, r5, #12
 800c04c:	300c      	adds	r0, #12
 800c04e:	f001 ff0b 	bl	800de68 <memcpy>
 800c052:	2201      	movs	r2, #1
 800c054:	4631      	mov	r1, r6
 800c056:	4658      	mov	r0, fp
 800c058:	f000 fc52 	bl	800c900 <__lshift>
 800c05c:	f10a 0301 	add.w	r3, sl, #1
 800c060:	9307      	str	r3, [sp, #28]
 800c062:	9b00      	ldr	r3, [sp, #0]
 800c064:	4453      	add	r3, sl
 800c066:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c068:	9b02      	ldr	r3, [sp, #8]
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	462f      	mov	r7, r5
 800c070:	930a      	str	r3, [sp, #40]	@ 0x28
 800c072:	4605      	mov	r5, r0
 800c074:	9b07      	ldr	r3, [sp, #28]
 800c076:	4621      	mov	r1, r4
 800c078:	3b01      	subs	r3, #1
 800c07a:	4648      	mov	r0, r9
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	f7ff fa9b 	bl	800b5b8 <quorem>
 800c082:	4639      	mov	r1, r7
 800c084:	9002      	str	r0, [sp, #8]
 800c086:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c08a:	4648      	mov	r0, r9
 800c08c:	f000 fca4 	bl	800c9d8 <__mcmp>
 800c090:	462a      	mov	r2, r5
 800c092:	9008      	str	r0, [sp, #32]
 800c094:	4621      	mov	r1, r4
 800c096:	4658      	mov	r0, fp
 800c098:	f000 fcba 	bl	800ca10 <__mdiff>
 800c09c:	68c2      	ldr	r2, [r0, #12]
 800c09e:	4606      	mov	r6, r0
 800c0a0:	bb02      	cbnz	r2, 800c0e4 <_dtoa_r+0xa1c>
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	4648      	mov	r0, r9
 800c0a6:	f000 fc97 	bl	800c9d8 <__mcmp>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	4631      	mov	r1, r6
 800c0ae:	4658      	mov	r0, fp
 800c0b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0b2:	f000 fa0d 	bl	800c4d0 <_Bfree>
 800c0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0ba:	9e07      	ldr	r6, [sp, #28]
 800c0bc:	ea43 0102 	orr.w	r1, r3, r2
 800c0c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0c2:	4319      	orrs	r1, r3
 800c0c4:	d110      	bne.n	800c0e8 <_dtoa_r+0xa20>
 800c0c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0ca:	d029      	beq.n	800c120 <_dtoa_r+0xa58>
 800c0cc:	9b08      	ldr	r3, [sp, #32]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	dd02      	ble.n	800c0d8 <_dtoa_r+0xa10>
 800c0d2:	9b02      	ldr	r3, [sp, #8]
 800c0d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c0d8:	9b00      	ldr	r3, [sp, #0]
 800c0da:	f883 8000 	strb.w	r8, [r3]
 800c0de:	e63f      	b.n	800bd60 <_dtoa_r+0x698>
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	e7bb      	b.n	800c05c <_dtoa_r+0x994>
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	e7e1      	b.n	800c0ac <_dtoa_r+0x9e4>
 800c0e8:	9b08      	ldr	r3, [sp, #32]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	db04      	blt.n	800c0f8 <_dtoa_r+0xa30>
 800c0ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0f0:	430b      	orrs	r3, r1
 800c0f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0f4:	430b      	orrs	r3, r1
 800c0f6:	d120      	bne.n	800c13a <_dtoa_r+0xa72>
 800c0f8:	2a00      	cmp	r2, #0
 800c0fa:	dded      	ble.n	800c0d8 <_dtoa_r+0xa10>
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	2201      	movs	r2, #1
 800c100:	4658      	mov	r0, fp
 800c102:	f000 fbfd 	bl	800c900 <__lshift>
 800c106:	4621      	mov	r1, r4
 800c108:	4681      	mov	r9, r0
 800c10a:	f000 fc65 	bl	800c9d8 <__mcmp>
 800c10e:	2800      	cmp	r0, #0
 800c110:	dc03      	bgt.n	800c11a <_dtoa_r+0xa52>
 800c112:	d1e1      	bne.n	800c0d8 <_dtoa_r+0xa10>
 800c114:	f018 0f01 	tst.w	r8, #1
 800c118:	d0de      	beq.n	800c0d8 <_dtoa_r+0xa10>
 800c11a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c11e:	d1d8      	bne.n	800c0d2 <_dtoa_r+0xa0a>
 800c120:	9a00      	ldr	r2, [sp, #0]
 800c122:	2339      	movs	r3, #57	@ 0x39
 800c124:	7013      	strb	r3, [r2, #0]
 800c126:	4633      	mov	r3, r6
 800c128:	461e      	mov	r6, r3
 800c12a:	3b01      	subs	r3, #1
 800c12c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c130:	2a39      	cmp	r2, #57	@ 0x39
 800c132:	d052      	beq.n	800c1da <_dtoa_r+0xb12>
 800c134:	3201      	adds	r2, #1
 800c136:	701a      	strb	r2, [r3, #0]
 800c138:	e612      	b.n	800bd60 <_dtoa_r+0x698>
 800c13a:	2a00      	cmp	r2, #0
 800c13c:	dd07      	ble.n	800c14e <_dtoa_r+0xa86>
 800c13e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c142:	d0ed      	beq.n	800c120 <_dtoa_r+0xa58>
 800c144:	9a00      	ldr	r2, [sp, #0]
 800c146:	f108 0301 	add.w	r3, r8, #1
 800c14a:	7013      	strb	r3, [r2, #0]
 800c14c:	e608      	b.n	800bd60 <_dtoa_r+0x698>
 800c14e:	9b07      	ldr	r3, [sp, #28]
 800c150:	9a07      	ldr	r2, [sp, #28]
 800c152:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c158:	4293      	cmp	r3, r2
 800c15a:	d028      	beq.n	800c1ae <_dtoa_r+0xae6>
 800c15c:	4649      	mov	r1, r9
 800c15e:	2300      	movs	r3, #0
 800c160:	220a      	movs	r2, #10
 800c162:	4658      	mov	r0, fp
 800c164:	f000 f9d6 	bl	800c514 <__multadd>
 800c168:	42af      	cmp	r7, r5
 800c16a:	4681      	mov	r9, r0
 800c16c:	f04f 0300 	mov.w	r3, #0
 800c170:	f04f 020a 	mov.w	r2, #10
 800c174:	4639      	mov	r1, r7
 800c176:	4658      	mov	r0, fp
 800c178:	d107      	bne.n	800c18a <_dtoa_r+0xac2>
 800c17a:	f000 f9cb 	bl	800c514 <__multadd>
 800c17e:	4607      	mov	r7, r0
 800c180:	4605      	mov	r5, r0
 800c182:	9b07      	ldr	r3, [sp, #28]
 800c184:	3301      	adds	r3, #1
 800c186:	9307      	str	r3, [sp, #28]
 800c188:	e774      	b.n	800c074 <_dtoa_r+0x9ac>
 800c18a:	f000 f9c3 	bl	800c514 <__multadd>
 800c18e:	4629      	mov	r1, r5
 800c190:	4607      	mov	r7, r0
 800c192:	2300      	movs	r3, #0
 800c194:	220a      	movs	r2, #10
 800c196:	4658      	mov	r0, fp
 800c198:	f000 f9bc 	bl	800c514 <__multadd>
 800c19c:	4605      	mov	r5, r0
 800c19e:	e7f0      	b.n	800c182 <_dtoa_r+0xaba>
 800c1a0:	9b00      	ldr	r3, [sp, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	bfcc      	ite	gt
 800c1a6:	461e      	movgt	r6, r3
 800c1a8:	2601      	movle	r6, #1
 800c1aa:	4456      	add	r6, sl
 800c1ac:	2700      	movs	r7, #0
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	4658      	mov	r0, fp
 800c1b4:	f000 fba4 	bl	800c900 <__lshift>
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	4681      	mov	r9, r0
 800c1bc:	f000 fc0c 	bl	800c9d8 <__mcmp>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	dcb0      	bgt.n	800c126 <_dtoa_r+0xa5e>
 800c1c4:	d102      	bne.n	800c1cc <_dtoa_r+0xb04>
 800c1c6:	f018 0f01 	tst.w	r8, #1
 800c1ca:	d1ac      	bne.n	800c126 <_dtoa_r+0xa5e>
 800c1cc:	4633      	mov	r3, r6
 800c1ce:	461e      	mov	r6, r3
 800c1d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1d4:	2a30      	cmp	r2, #48	@ 0x30
 800c1d6:	d0fa      	beq.n	800c1ce <_dtoa_r+0xb06>
 800c1d8:	e5c2      	b.n	800bd60 <_dtoa_r+0x698>
 800c1da:	459a      	cmp	sl, r3
 800c1dc:	d1a4      	bne.n	800c128 <_dtoa_r+0xa60>
 800c1de:	9b04      	ldr	r3, [sp, #16]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	2331      	movs	r3, #49	@ 0x31
 800c1e6:	f88a 3000 	strb.w	r3, [sl]
 800c1ea:	e5b9      	b.n	800bd60 <_dtoa_r+0x698>
 800c1ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c24c <_dtoa_r+0xb84>
 800c1f2:	b11b      	cbz	r3, 800c1fc <_dtoa_r+0xb34>
 800c1f4:	f10a 0308 	add.w	r3, sl, #8
 800c1f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c1fa:	6013      	str	r3, [r2, #0]
 800c1fc:	4650      	mov	r0, sl
 800c1fe:	b019      	add	sp, #100	@ 0x64
 800c200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c206:	2b01      	cmp	r3, #1
 800c208:	f77f ae37 	ble.w	800be7a <_dtoa_r+0x7b2>
 800c20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c210:	2001      	movs	r0, #1
 800c212:	e655      	b.n	800bec0 <_dtoa_r+0x7f8>
 800c214:	9b00      	ldr	r3, [sp, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	f77f aed6 	ble.w	800bfc8 <_dtoa_r+0x900>
 800c21c:	4656      	mov	r6, sl
 800c21e:	4621      	mov	r1, r4
 800c220:	4648      	mov	r0, r9
 800c222:	f7ff f9c9 	bl	800b5b8 <quorem>
 800c226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c22a:	f806 8b01 	strb.w	r8, [r6], #1
 800c22e:	9b00      	ldr	r3, [sp, #0]
 800c230:	eba6 020a 	sub.w	r2, r6, sl
 800c234:	4293      	cmp	r3, r2
 800c236:	ddb3      	ble.n	800c1a0 <_dtoa_r+0xad8>
 800c238:	4649      	mov	r1, r9
 800c23a:	2300      	movs	r3, #0
 800c23c:	220a      	movs	r2, #10
 800c23e:	4658      	mov	r0, fp
 800c240:	f000 f968 	bl	800c514 <__multadd>
 800c244:	4681      	mov	r9, r0
 800c246:	e7ea      	b.n	800c21e <_dtoa_r+0xb56>
 800c248:	0800ee50 	.word	0x0800ee50
 800c24c:	0800edeb 	.word	0x0800edeb

0800c250 <_free_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4605      	mov	r5, r0
 800c254:	2900      	cmp	r1, #0
 800c256:	d041      	beq.n	800c2dc <_free_r+0x8c>
 800c258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c25c:	1f0c      	subs	r4, r1, #4
 800c25e:	2b00      	cmp	r3, #0
 800c260:	bfb8      	it	lt
 800c262:	18e4      	addlt	r4, r4, r3
 800c264:	f000 f8e8 	bl	800c438 <__malloc_lock>
 800c268:	4a1d      	ldr	r2, [pc, #116]	@ (800c2e0 <_free_r+0x90>)
 800c26a:	6813      	ldr	r3, [r2, #0]
 800c26c:	b933      	cbnz	r3, 800c27c <_free_r+0x2c>
 800c26e:	6063      	str	r3, [r4, #4]
 800c270:	6014      	str	r4, [r2, #0]
 800c272:	4628      	mov	r0, r5
 800c274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c278:	f000 b8e4 	b.w	800c444 <__malloc_unlock>
 800c27c:	42a3      	cmp	r3, r4
 800c27e:	d908      	bls.n	800c292 <_free_r+0x42>
 800c280:	6820      	ldr	r0, [r4, #0]
 800c282:	1821      	adds	r1, r4, r0
 800c284:	428b      	cmp	r3, r1
 800c286:	bf01      	itttt	eq
 800c288:	6819      	ldreq	r1, [r3, #0]
 800c28a:	685b      	ldreq	r3, [r3, #4]
 800c28c:	1809      	addeq	r1, r1, r0
 800c28e:	6021      	streq	r1, [r4, #0]
 800c290:	e7ed      	b.n	800c26e <_free_r+0x1e>
 800c292:	461a      	mov	r2, r3
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	b10b      	cbz	r3, 800c29c <_free_r+0x4c>
 800c298:	42a3      	cmp	r3, r4
 800c29a:	d9fa      	bls.n	800c292 <_free_r+0x42>
 800c29c:	6811      	ldr	r1, [r2, #0]
 800c29e:	1850      	adds	r0, r2, r1
 800c2a0:	42a0      	cmp	r0, r4
 800c2a2:	d10b      	bne.n	800c2bc <_free_r+0x6c>
 800c2a4:	6820      	ldr	r0, [r4, #0]
 800c2a6:	4401      	add	r1, r0
 800c2a8:	1850      	adds	r0, r2, r1
 800c2aa:	4283      	cmp	r3, r0
 800c2ac:	6011      	str	r1, [r2, #0]
 800c2ae:	d1e0      	bne.n	800c272 <_free_r+0x22>
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	6053      	str	r3, [r2, #4]
 800c2b6:	4408      	add	r0, r1
 800c2b8:	6010      	str	r0, [r2, #0]
 800c2ba:	e7da      	b.n	800c272 <_free_r+0x22>
 800c2bc:	d902      	bls.n	800c2c4 <_free_r+0x74>
 800c2be:	230c      	movs	r3, #12
 800c2c0:	602b      	str	r3, [r5, #0]
 800c2c2:	e7d6      	b.n	800c272 <_free_r+0x22>
 800c2c4:	6820      	ldr	r0, [r4, #0]
 800c2c6:	1821      	adds	r1, r4, r0
 800c2c8:	428b      	cmp	r3, r1
 800c2ca:	bf04      	itt	eq
 800c2cc:	6819      	ldreq	r1, [r3, #0]
 800c2ce:	685b      	ldreq	r3, [r3, #4]
 800c2d0:	6063      	str	r3, [r4, #4]
 800c2d2:	bf04      	itt	eq
 800c2d4:	1809      	addeq	r1, r1, r0
 800c2d6:	6021      	streq	r1, [r4, #0]
 800c2d8:	6054      	str	r4, [r2, #4]
 800c2da:	e7ca      	b.n	800c272 <_free_r+0x22>
 800c2dc:	bd38      	pop	{r3, r4, r5, pc}
 800c2de:	bf00      	nop
 800c2e0:	20000918 	.word	0x20000918

0800c2e4 <malloc>:
 800c2e4:	4b02      	ldr	r3, [pc, #8]	@ (800c2f0 <malloc+0xc>)
 800c2e6:	4601      	mov	r1, r0
 800c2e8:	6818      	ldr	r0, [r3, #0]
 800c2ea:	f000 b825 	b.w	800c338 <_malloc_r>
 800c2ee:	bf00      	nop
 800c2f0:	20000254 	.word	0x20000254

0800c2f4 <sbrk_aligned>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	4e0f      	ldr	r6, [pc, #60]	@ (800c334 <sbrk_aligned+0x40>)
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	6831      	ldr	r1, [r6, #0]
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	b911      	cbnz	r1, 800c306 <sbrk_aligned+0x12>
 800c300:	f001 fda2 	bl	800de48 <_sbrk_r>
 800c304:	6030      	str	r0, [r6, #0]
 800c306:	4621      	mov	r1, r4
 800c308:	4628      	mov	r0, r5
 800c30a:	f001 fd9d 	bl	800de48 <_sbrk_r>
 800c30e:	1c43      	adds	r3, r0, #1
 800c310:	d103      	bne.n	800c31a <sbrk_aligned+0x26>
 800c312:	f04f 34ff 	mov.w	r4, #4294967295
 800c316:	4620      	mov	r0, r4
 800c318:	bd70      	pop	{r4, r5, r6, pc}
 800c31a:	1cc4      	adds	r4, r0, #3
 800c31c:	f024 0403 	bic.w	r4, r4, #3
 800c320:	42a0      	cmp	r0, r4
 800c322:	d0f8      	beq.n	800c316 <sbrk_aligned+0x22>
 800c324:	1a21      	subs	r1, r4, r0
 800c326:	4628      	mov	r0, r5
 800c328:	f001 fd8e 	bl	800de48 <_sbrk_r>
 800c32c:	3001      	adds	r0, #1
 800c32e:	d1f2      	bne.n	800c316 <sbrk_aligned+0x22>
 800c330:	e7ef      	b.n	800c312 <sbrk_aligned+0x1e>
 800c332:	bf00      	nop
 800c334:	20000914 	.word	0x20000914

0800c338 <_malloc_r>:
 800c338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c33c:	1ccd      	adds	r5, r1, #3
 800c33e:	f025 0503 	bic.w	r5, r5, #3
 800c342:	3508      	adds	r5, #8
 800c344:	2d0c      	cmp	r5, #12
 800c346:	bf38      	it	cc
 800c348:	250c      	movcc	r5, #12
 800c34a:	2d00      	cmp	r5, #0
 800c34c:	4606      	mov	r6, r0
 800c34e:	db01      	blt.n	800c354 <_malloc_r+0x1c>
 800c350:	42a9      	cmp	r1, r5
 800c352:	d904      	bls.n	800c35e <_malloc_r+0x26>
 800c354:	230c      	movs	r3, #12
 800c356:	6033      	str	r3, [r6, #0]
 800c358:	2000      	movs	r0, #0
 800c35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c35e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c434 <_malloc_r+0xfc>
 800c362:	f000 f869 	bl	800c438 <__malloc_lock>
 800c366:	f8d8 3000 	ldr.w	r3, [r8]
 800c36a:	461c      	mov	r4, r3
 800c36c:	bb44      	cbnz	r4, 800c3c0 <_malloc_r+0x88>
 800c36e:	4629      	mov	r1, r5
 800c370:	4630      	mov	r0, r6
 800c372:	f7ff ffbf 	bl	800c2f4 <sbrk_aligned>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	4604      	mov	r4, r0
 800c37a:	d158      	bne.n	800c42e <_malloc_r+0xf6>
 800c37c:	f8d8 4000 	ldr.w	r4, [r8]
 800c380:	4627      	mov	r7, r4
 800c382:	2f00      	cmp	r7, #0
 800c384:	d143      	bne.n	800c40e <_malloc_r+0xd6>
 800c386:	2c00      	cmp	r4, #0
 800c388:	d04b      	beq.n	800c422 <_malloc_r+0xea>
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	4639      	mov	r1, r7
 800c38e:	4630      	mov	r0, r6
 800c390:	eb04 0903 	add.w	r9, r4, r3
 800c394:	f001 fd58 	bl	800de48 <_sbrk_r>
 800c398:	4581      	cmp	r9, r0
 800c39a:	d142      	bne.n	800c422 <_malloc_r+0xea>
 800c39c:	6821      	ldr	r1, [r4, #0]
 800c39e:	1a6d      	subs	r5, r5, r1
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	f7ff ffa6 	bl	800c2f4 <sbrk_aligned>
 800c3a8:	3001      	adds	r0, #1
 800c3aa:	d03a      	beq.n	800c422 <_malloc_r+0xea>
 800c3ac:	6823      	ldr	r3, [r4, #0]
 800c3ae:	442b      	add	r3, r5
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	bb62      	cbnz	r2, 800c414 <_malloc_r+0xdc>
 800c3ba:	f8c8 7000 	str.w	r7, [r8]
 800c3be:	e00f      	b.n	800c3e0 <_malloc_r+0xa8>
 800c3c0:	6822      	ldr	r2, [r4, #0]
 800c3c2:	1b52      	subs	r2, r2, r5
 800c3c4:	d420      	bmi.n	800c408 <_malloc_r+0xd0>
 800c3c6:	2a0b      	cmp	r2, #11
 800c3c8:	d917      	bls.n	800c3fa <_malloc_r+0xc2>
 800c3ca:	1961      	adds	r1, r4, r5
 800c3cc:	42a3      	cmp	r3, r4
 800c3ce:	6025      	str	r5, [r4, #0]
 800c3d0:	bf18      	it	ne
 800c3d2:	6059      	strne	r1, [r3, #4]
 800c3d4:	6863      	ldr	r3, [r4, #4]
 800c3d6:	bf08      	it	eq
 800c3d8:	f8c8 1000 	streq.w	r1, [r8]
 800c3dc:	5162      	str	r2, [r4, r5]
 800c3de:	604b      	str	r3, [r1, #4]
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	f000 f82f 	bl	800c444 <__malloc_unlock>
 800c3e6:	f104 000b 	add.w	r0, r4, #11
 800c3ea:	1d23      	adds	r3, r4, #4
 800c3ec:	f020 0007 	bic.w	r0, r0, #7
 800c3f0:	1ac2      	subs	r2, r0, r3
 800c3f2:	bf1c      	itt	ne
 800c3f4:	1a1b      	subne	r3, r3, r0
 800c3f6:	50a3      	strne	r3, [r4, r2]
 800c3f8:	e7af      	b.n	800c35a <_malloc_r+0x22>
 800c3fa:	6862      	ldr	r2, [r4, #4]
 800c3fc:	42a3      	cmp	r3, r4
 800c3fe:	bf0c      	ite	eq
 800c400:	f8c8 2000 	streq.w	r2, [r8]
 800c404:	605a      	strne	r2, [r3, #4]
 800c406:	e7eb      	b.n	800c3e0 <_malloc_r+0xa8>
 800c408:	4623      	mov	r3, r4
 800c40a:	6864      	ldr	r4, [r4, #4]
 800c40c:	e7ae      	b.n	800c36c <_malloc_r+0x34>
 800c40e:	463c      	mov	r4, r7
 800c410:	687f      	ldr	r7, [r7, #4]
 800c412:	e7b6      	b.n	800c382 <_malloc_r+0x4a>
 800c414:	461a      	mov	r2, r3
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	42a3      	cmp	r3, r4
 800c41a:	d1fb      	bne.n	800c414 <_malloc_r+0xdc>
 800c41c:	2300      	movs	r3, #0
 800c41e:	6053      	str	r3, [r2, #4]
 800c420:	e7de      	b.n	800c3e0 <_malloc_r+0xa8>
 800c422:	230c      	movs	r3, #12
 800c424:	6033      	str	r3, [r6, #0]
 800c426:	4630      	mov	r0, r6
 800c428:	f000 f80c 	bl	800c444 <__malloc_unlock>
 800c42c:	e794      	b.n	800c358 <_malloc_r+0x20>
 800c42e:	6005      	str	r5, [r0, #0]
 800c430:	e7d6      	b.n	800c3e0 <_malloc_r+0xa8>
 800c432:	bf00      	nop
 800c434:	20000918 	.word	0x20000918

0800c438 <__malloc_lock>:
 800c438:	4801      	ldr	r0, [pc, #4]	@ (800c440 <__malloc_lock+0x8>)
 800c43a:	f7ff b896 	b.w	800b56a <__retarget_lock_acquire_recursive>
 800c43e:	bf00      	nop
 800c440:	20000910 	.word	0x20000910

0800c444 <__malloc_unlock>:
 800c444:	4801      	ldr	r0, [pc, #4]	@ (800c44c <__malloc_unlock+0x8>)
 800c446:	f7ff b891 	b.w	800b56c <__retarget_lock_release_recursive>
 800c44a:	bf00      	nop
 800c44c:	20000910 	.word	0x20000910

0800c450 <_Balloc>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	69c6      	ldr	r6, [r0, #28]
 800c454:	4604      	mov	r4, r0
 800c456:	460d      	mov	r5, r1
 800c458:	b976      	cbnz	r6, 800c478 <_Balloc+0x28>
 800c45a:	2010      	movs	r0, #16
 800c45c:	f7ff ff42 	bl	800c2e4 <malloc>
 800c460:	4602      	mov	r2, r0
 800c462:	61e0      	str	r0, [r4, #28]
 800c464:	b920      	cbnz	r0, 800c470 <_Balloc+0x20>
 800c466:	4b18      	ldr	r3, [pc, #96]	@ (800c4c8 <_Balloc+0x78>)
 800c468:	4818      	ldr	r0, [pc, #96]	@ (800c4cc <_Balloc+0x7c>)
 800c46a:	216b      	movs	r1, #107	@ 0x6b
 800c46c:	f7ff f886 	bl	800b57c <__assert_func>
 800c470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c474:	6006      	str	r6, [r0, #0]
 800c476:	60c6      	str	r6, [r0, #12]
 800c478:	69e6      	ldr	r6, [r4, #28]
 800c47a:	68f3      	ldr	r3, [r6, #12]
 800c47c:	b183      	cbz	r3, 800c4a0 <_Balloc+0x50>
 800c47e:	69e3      	ldr	r3, [r4, #28]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c486:	b9b8      	cbnz	r0, 800c4b8 <_Balloc+0x68>
 800c488:	2101      	movs	r1, #1
 800c48a:	fa01 f605 	lsl.w	r6, r1, r5
 800c48e:	1d72      	adds	r2, r6, #5
 800c490:	0092      	lsls	r2, r2, #2
 800c492:	4620      	mov	r0, r4
 800c494:	f001 fd07 	bl	800dea6 <_calloc_r>
 800c498:	b160      	cbz	r0, 800c4b4 <_Balloc+0x64>
 800c49a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c49e:	e00e      	b.n	800c4be <_Balloc+0x6e>
 800c4a0:	2221      	movs	r2, #33	@ 0x21
 800c4a2:	2104      	movs	r1, #4
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f001 fcfe 	bl	800dea6 <_calloc_r>
 800c4aa:	69e3      	ldr	r3, [r4, #28]
 800c4ac:	60f0      	str	r0, [r6, #12]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1e4      	bne.n	800c47e <_Balloc+0x2e>
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	6802      	ldr	r2, [r0, #0]
 800c4ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4c4:	e7f7      	b.n	800c4b6 <_Balloc+0x66>
 800c4c6:	bf00      	nop
 800c4c8:	0800ed3e 	.word	0x0800ed3e
 800c4cc:	0800ee61 	.word	0x0800ee61

0800c4d0 <_Bfree>:
 800c4d0:	b570      	push	{r4, r5, r6, lr}
 800c4d2:	69c6      	ldr	r6, [r0, #28]
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	b976      	cbnz	r6, 800c4f8 <_Bfree+0x28>
 800c4da:	2010      	movs	r0, #16
 800c4dc:	f7ff ff02 	bl	800c2e4 <malloc>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	61e8      	str	r0, [r5, #28]
 800c4e4:	b920      	cbnz	r0, 800c4f0 <_Bfree+0x20>
 800c4e6:	4b09      	ldr	r3, [pc, #36]	@ (800c50c <_Bfree+0x3c>)
 800c4e8:	4809      	ldr	r0, [pc, #36]	@ (800c510 <_Bfree+0x40>)
 800c4ea:	218f      	movs	r1, #143	@ 0x8f
 800c4ec:	f7ff f846 	bl	800b57c <__assert_func>
 800c4f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4f4:	6006      	str	r6, [r0, #0]
 800c4f6:	60c6      	str	r6, [r0, #12]
 800c4f8:	b13c      	cbz	r4, 800c50a <_Bfree+0x3a>
 800c4fa:	69eb      	ldr	r3, [r5, #28]
 800c4fc:	6862      	ldr	r2, [r4, #4]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c504:	6021      	str	r1, [r4, #0]
 800c506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
 800c50c:	0800ed3e 	.word	0x0800ed3e
 800c510:	0800ee61 	.word	0x0800ee61

0800c514 <__multadd>:
 800c514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c518:	690d      	ldr	r5, [r1, #16]
 800c51a:	4607      	mov	r7, r0
 800c51c:	460c      	mov	r4, r1
 800c51e:	461e      	mov	r6, r3
 800c520:	f101 0c14 	add.w	ip, r1, #20
 800c524:	2000      	movs	r0, #0
 800c526:	f8dc 3000 	ldr.w	r3, [ip]
 800c52a:	b299      	uxth	r1, r3
 800c52c:	fb02 6101 	mla	r1, r2, r1, r6
 800c530:	0c1e      	lsrs	r6, r3, #16
 800c532:	0c0b      	lsrs	r3, r1, #16
 800c534:	fb02 3306 	mla	r3, r2, r6, r3
 800c538:	b289      	uxth	r1, r1
 800c53a:	3001      	adds	r0, #1
 800c53c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c540:	4285      	cmp	r5, r0
 800c542:	f84c 1b04 	str.w	r1, [ip], #4
 800c546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c54a:	dcec      	bgt.n	800c526 <__multadd+0x12>
 800c54c:	b30e      	cbz	r6, 800c592 <__multadd+0x7e>
 800c54e:	68a3      	ldr	r3, [r4, #8]
 800c550:	42ab      	cmp	r3, r5
 800c552:	dc19      	bgt.n	800c588 <__multadd+0x74>
 800c554:	6861      	ldr	r1, [r4, #4]
 800c556:	4638      	mov	r0, r7
 800c558:	3101      	adds	r1, #1
 800c55a:	f7ff ff79 	bl	800c450 <_Balloc>
 800c55e:	4680      	mov	r8, r0
 800c560:	b928      	cbnz	r0, 800c56e <__multadd+0x5a>
 800c562:	4602      	mov	r2, r0
 800c564:	4b0c      	ldr	r3, [pc, #48]	@ (800c598 <__multadd+0x84>)
 800c566:	480d      	ldr	r0, [pc, #52]	@ (800c59c <__multadd+0x88>)
 800c568:	21ba      	movs	r1, #186	@ 0xba
 800c56a:	f7ff f807 	bl	800b57c <__assert_func>
 800c56e:	6922      	ldr	r2, [r4, #16]
 800c570:	3202      	adds	r2, #2
 800c572:	f104 010c 	add.w	r1, r4, #12
 800c576:	0092      	lsls	r2, r2, #2
 800c578:	300c      	adds	r0, #12
 800c57a:	f001 fc75 	bl	800de68 <memcpy>
 800c57e:	4621      	mov	r1, r4
 800c580:	4638      	mov	r0, r7
 800c582:	f7ff ffa5 	bl	800c4d0 <_Bfree>
 800c586:	4644      	mov	r4, r8
 800c588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c58c:	3501      	adds	r5, #1
 800c58e:	615e      	str	r6, [r3, #20]
 800c590:	6125      	str	r5, [r4, #16]
 800c592:	4620      	mov	r0, r4
 800c594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c598:	0800ee50 	.word	0x0800ee50
 800c59c:	0800ee61 	.word	0x0800ee61

0800c5a0 <__s2b>:
 800c5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5a4:	460c      	mov	r4, r1
 800c5a6:	4615      	mov	r5, r2
 800c5a8:	461f      	mov	r7, r3
 800c5aa:	2209      	movs	r2, #9
 800c5ac:	3308      	adds	r3, #8
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	db09      	blt.n	800c5d0 <__s2b+0x30>
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7ff ff47 	bl	800c450 <_Balloc>
 800c5c2:	b940      	cbnz	r0, 800c5d6 <__s2b+0x36>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	4b19      	ldr	r3, [pc, #100]	@ (800c62c <__s2b+0x8c>)
 800c5c8:	4819      	ldr	r0, [pc, #100]	@ (800c630 <__s2b+0x90>)
 800c5ca:	21d3      	movs	r1, #211	@ 0xd3
 800c5cc:	f7fe ffd6 	bl	800b57c <__assert_func>
 800c5d0:	0052      	lsls	r2, r2, #1
 800c5d2:	3101      	adds	r1, #1
 800c5d4:	e7f0      	b.n	800c5b8 <__s2b+0x18>
 800c5d6:	9b08      	ldr	r3, [sp, #32]
 800c5d8:	6143      	str	r3, [r0, #20]
 800c5da:	2d09      	cmp	r5, #9
 800c5dc:	f04f 0301 	mov.w	r3, #1
 800c5e0:	6103      	str	r3, [r0, #16]
 800c5e2:	dd16      	ble.n	800c612 <__s2b+0x72>
 800c5e4:	f104 0909 	add.w	r9, r4, #9
 800c5e8:	46c8      	mov	r8, r9
 800c5ea:	442c      	add	r4, r5
 800c5ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c5f0:	4601      	mov	r1, r0
 800c5f2:	3b30      	subs	r3, #48	@ 0x30
 800c5f4:	220a      	movs	r2, #10
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	f7ff ff8c 	bl	800c514 <__multadd>
 800c5fc:	45a0      	cmp	r8, r4
 800c5fe:	d1f5      	bne.n	800c5ec <__s2b+0x4c>
 800c600:	f1a5 0408 	sub.w	r4, r5, #8
 800c604:	444c      	add	r4, r9
 800c606:	1b2d      	subs	r5, r5, r4
 800c608:	1963      	adds	r3, r4, r5
 800c60a:	42bb      	cmp	r3, r7
 800c60c:	db04      	blt.n	800c618 <__s2b+0x78>
 800c60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c612:	340a      	adds	r4, #10
 800c614:	2509      	movs	r5, #9
 800c616:	e7f6      	b.n	800c606 <__s2b+0x66>
 800c618:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c61c:	4601      	mov	r1, r0
 800c61e:	3b30      	subs	r3, #48	@ 0x30
 800c620:	220a      	movs	r2, #10
 800c622:	4630      	mov	r0, r6
 800c624:	f7ff ff76 	bl	800c514 <__multadd>
 800c628:	e7ee      	b.n	800c608 <__s2b+0x68>
 800c62a:	bf00      	nop
 800c62c:	0800ee50 	.word	0x0800ee50
 800c630:	0800ee61 	.word	0x0800ee61

0800c634 <__hi0bits>:
 800c634:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c638:	4603      	mov	r3, r0
 800c63a:	bf36      	itet	cc
 800c63c:	0403      	lslcc	r3, r0, #16
 800c63e:	2000      	movcs	r0, #0
 800c640:	2010      	movcc	r0, #16
 800c642:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c646:	bf3c      	itt	cc
 800c648:	021b      	lslcc	r3, r3, #8
 800c64a:	3008      	addcc	r0, #8
 800c64c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c650:	bf3c      	itt	cc
 800c652:	011b      	lslcc	r3, r3, #4
 800c654:	3004      	addcc	r0, #4
 800c656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c65a:	bf3c      	itt	cc
 800c65c:	009b      	lslcc	r3, r3, #2
 800c65e:	3002      	addcc	r0, #2
 800c660:	2b00      	cmp	r3, #0
 800c662:	db05      	blt.n	800c670 <__hi0bits+0x3c>
 800c664:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c668:	f100 0001 	add.w	r0, r0, #1
 800c66c:	bf08      	it	eq
 800c66e:	2020      	moveq	r0, #32
 800c670:	4770      	bx	lr

0800c672 <__lo0bits>:
 800c672:	6803      	ldr	r3, [r0, #0]
 800c674:	4602      	mov	r2, r0
 800c676:	f013 0007 	ands.w	r0, r3, #7
 800c67a:	d00b      	beq.n	800c694 <__lo0bits+0x22>
 800c67c:	07d9      	lsls	r1, r3, #31
 800c67e:	d421      	bmi.n	800c6c4 <__lo0bits+0x52>
 800c680:	0798      	lsls	r0, r3, #30
 800c682:	bf49      	itett	mi
 800c684:	085b      	lsrmi	r3, r3, #1
 800c686:	089b      	lsrpl	r3, r3, #2
 800c688:	2001      	movmi	r0, #1
 800c68a:	6013      	strmi	r3, [r2, #0]
 800c68c:	bf5c      	itt	pl
 800c68e:	6013      	strpl	r3, [r2, #0]
 800c690:	2002      	movpl	r0, #2
 800c692:	4770      	bx	lr
 800c694:	b299      	uxth	r1, r3
 800c696:	b909      	cbnz	r1, 800c69c <__lo0bits+0x2a>
 800c698:	0c1b      	lsrs	r3, r3, #16
 800c69a:	2010      	movs	r0, #16
 800c69c:	b2d9      	uxtb	r1, r3
 800c69e:	b909      	cbnz	r1, 800c6a4 <__lo0bits+0x32>
 800c6a0:	3008      	adds	r0, #8
 800c6a2:	0a1b      	lsrs	r3, r3, #8
 800c6a4:	0719      	lsls	r1, r3, #28
 800c6a6:	bf04      	itt	eq
 800c6a8:	091b      	lsreq	r3, r3, #4
 800c6aa:	3004      	addeq	r0, #4
 800c6ac:	0799      	lsls	r1, r3, #30
 800c6ae:	bf04      	itt	eq
 800c6b0:	089b      	lsreq	r3, r3, #2
 800c6b2:	3002      	addeq	r0, #2
 800c6b4:	07d9      	lsls	r1, r3, #31
 800c6b6:	d403      	bmi.n	800c6c0 <__lo0bits+0x4e>
 800c6b8:	085b      	lsrs	r3, r3, #1
 800c6ba:	f100 0001 	add.w	r0, r0, #1
 800c6be:	d003      	beq.n	800c6c8 <__lo0bits+0x56>
 800c6c0:	6013      	str	r3, [r2, #0]
 800c6c2:	4770      	bx	lr
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	4770      	bx	lr
 800c6c8:	2020      	movs	r0, #32
 800c6ca:	4770      	bx	lr

0800c6cc <__i2b>:
 800c6cc:	b510      	push	{r4, lr}
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	f7ff febd 	bl	800c450 <_Balloc>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	b928      	cbnz	r0, 800c6e6 <__i2b+0x1a>
 800c6da:	4b05      	ldr	r3, [pc, #20]	@ (800c6f0 <__i2b+0x24>)
 800c6dc:	4805      	ldr	r0, [pc, #20]	@ (800c6f4 <__i2b+0x28>)
 800c6de:	f240 1145 	movw	r1, #325	@ 0x145
 800c6e2:	f7fe ff4b 	bl	800b57c <__assert_func>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	6144      	str	r4, [r0, #20]
 800c6ea:	6103      	str	r3, [r0, #16]
 800c6ec:	bd10      	pop	{r4, pc}
 800c6ee:	bf00      	nop
 800c6f0:	0800ee50 	.word	0x0800ee50
 800c6f4:	0800ee61 	.word	0x0800ee61

0800c6f8 <__multiply>:
 800c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fc:	4614      	mov	r4, r2
 800c6fe:	690a      	ldr	r2, [r1, #16]
 800c700:	6923      	ldr	r3, [r4, #16]
 800c702:	429a      	cmp	r2, r3
 800c704:	bfa8      	it	ge
 800c706:	4623      	movge	r3, r4
 800c708:	460f      	mov	r7, r1
 800c70a:	bfa4      	itt	ge
 800c70c:	460c      	movge	r4, r1
 800c70e:	461f      	movge	r7, r3
 800c710:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c714:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c718:	68a3      	ldr	r3, [r4, #8]
 800c71a:	6861      	ldr	r1, [r4, #4]
 800c71c:	eb0a 0609 	add.w	r6, sl, r9
 800c720:	42b3      	cmp	r3, r6
 800c722:	b085      	sub	sp, #20
 800c724:	bfb8      	it	lt
 800c726:	3101      	addlt	r1, #1
 800c728:	f7ff fe92 	bl	800c450 <_Balloc>
 800c72c:	b930      	cbnz	r0, 800c73c <__multiply+0x44>
 800c72e:	4602      	mov	r2, r0
 800c730:	4b44      	ldr	r3, [pc, #272]	@ (800c844 <__multiply+0x14c>)
 800c732:	4845      	ldr	r0, [pc, #276]	@ (800c848 <__multiply+0x150>)
 800c734:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c738:	f7fe ff20 	bl	800b57c <__assert_func>
 800c73c:	f100 0514 	add.w	r5, r0, #20
 800c740:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c744:	462b      	mov	r3, r5
 800c746:	2200      	movs	r2, #0
 800c748:	4543      	cmp	r3, r8
 800c74a:	d321      	bcc.n	800c790 <__multiply+0x98>
 800c74c:	f107 0114 	add.w	r1, r7, #20
 800c750:	f104 0214 	add.w	r2, r4, #20
 800c754:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c758:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c75c:	9302      	str	r3, [sp, #8]
 800c75e:	1b13      	subs	r3, r2, r4
 800c760:	3b15      	subs	r3, #21
 800c762:	f023 0303 	bic.w	r3, r3, #3
 800c766:	3304      	adds	r3, #4
 800c768:	f104 0715 	add.w	r7, r4, #21
 800c76c:	42ba      	cmp	r2, r7
 800c76e:	bf38      	it	cc
 800c770:	2304      	movcc	r3, #4
 800c772:	9301      	str	r3, [sp, #4]
 800c774:	9b02      	ldr	r3, [sp, #8]
 800c776:	9103      	str	r1, [sp, #12]
 800c778:	428b      	cmp	r3, r1
 800c77a:	d80c      	bhi.n	800c796 <__multiply+0x9e>
 800c77c:	2e00      	cmp	r6, #0
 800c77e:	dd03      	ble.n	800c788 <__multiply+0x90>
 800c780:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c784:	2b00      	cmp	r3, #0
 800c786:	d05b      	beq.n	800c840 <__multiply+0x148>
 800c788:	6106      	str	r6, [r0, #16]
 800c78a:	b005      	add	sp, #20
 800c78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c790:	f843 2b04 	str.w	r2, [r3], #4
 800c794:	e7d8      	b.n	800c748 <__multiply+0x50>
 800c796:	f8b1 a000 	ldrh.w	sl, [r1]
 800c79a:	f1ba 0f00 	cmp.w	sl, #0
 800c79e:	d024      	beq.n	800c7ea <__multiply+0xf2>
 800c7a0:	f104 0e14 	add.w	lr, r4, #20
 800c7a4:	46a9      	mov	r9, r5
 800c7a6:	f04f 0c00 	mov.w	ip, #0
 800c7aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c7ae:	f8d9 3000 	ldr.w	r3, [r9]
 800c7b2:	fa1f fb87 	uxth.w	fp, r7
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c7bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c7c0:	f8d9 7000 	ldr.w	r7, [r9]
 800c7c4:	4463      	add	r3, ip
 800c7c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c7ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800c7ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c7d8:	4572      	cmp	r2, lr
 800c7da:	f849 3b04 	str.w	r3, [r9], #4
 800c7de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c7e2:	d8e2      	bhi.n	800c7aa <__multiply+0xb2>
 800c7e4:	9b01      	ldr	r3, [sp, #4]
 800c7e6:	f845 c003 	str.w	ip, [r5, r3]
 800c7ea:	9b03      	ldr	r3, [sp, #12]
 800c7ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c7f0:	3104      	adds	r1, #4
 800c7f2:	f1b9 0f00 	cmp.w	r9, #0
 800c7f6:	d021      	beq.n	800c83c <__multiply+0x144>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	f104 0c14 	add.w	ip, r4, #20
 800c7fe:	46ae      	mov	lr, r5
 800c800:	f04f 0a00 	mov.w	sl, #0
 800c804:	f8bc b000 	ldrh.w	fp, [ip]
 800c808:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c80c:	fb09 770b 	mla	r7, r9, fp, r7
 800c810:	4457      	add	r7, sl
 800c812:	b29b      	uxth	r3, r3
 800c814:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c818:	f84e 3b04 	str.w	r3, [lr], #4
 800c81c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c820:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c824:	f8be 3000 	ldrh.w	r3, [lr]
 800c828:	fb09 330a 	mla	r3, r9, sl, r3
 800c82c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c830:	4562      	cmp	r2, ip
 800c832:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c836:	d8e5      	bhi.n	800c804 <__multiply+0x10c>
 800c838:	9f01      	ldr	r7, [sp, #4]
 800c83a:	51eb      	str	r3, [r5, r7]
 800c83c:	3504      	adds	r5, #4
 800c83e:	e799      	b.n	800c774 <__multiply+0x7c>
 800c840:	3e01      	subs	r6, #1
 800c842:	e79b      	b.n	800c77c <__multiply+0x84>
 800c844:	0800ee50 	.word	0x0800ee50
 800c848:	0800ee61 	.word	0x0800ee61

0800c84c <__pow5mult>:
 800c84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c850:	4615      	mov	r5, r2
 800c852:	f012 0203 	ands.w	r2, r2, #3
 800c856:	4607      	mov	r7, r0
 800c858:	460e      	mov	r6, r1
 800c85a:	d007      	beq.n	800c86c <__pow5mult+0x20>
 800c85c:	4c25      	ldr	r4, [pc, #148]	@ (800c8f4 <__pow5mult+0xa8>)
 800c85e:	3a01      	subs	r2, #1
 800c860:	2300      	movs	r3, #0
 800c862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c866:	f7ff fe55 	bl	800c514 <__multadd>
 800c86a:	4606      	mov	r6, r0
 800c86c:	10ad      	asrs	r5, r5, #2
 800c86e:	d03d      	beq.n	800c8ec <__pow5mult+0xa0>
 800c870:	69fc      	ldr	r4, [r7, #28]
 800c872:	b97c      	cbnz	r4, 800c894 <__pow5mult+0x48>
 800c874:	2010      	movs	r0, #16
 800c876:	f7ff fd35 	bl	800c2e4 <malloc>
 800c87a:	4602      	mov	r2, r0
 800c87c:	61f8      	str	r0, [r7, #28]
 800c87e:	b928      	cbnz	r0, 800c88c <__pow5mult+0x40>
 800c880:	4b1d      	ldr	r3, [pc, #116]	@ (800c8f8 <__pow5mult+0xac>)
 800c882:	481e      	ldr	r0, [pc, #120]	@ (800c8fc <__pow5mult+0xb0>)
 800c884:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c888:	f7fe fe78 	bl	800b57c <__assert_func>
 800c88c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c890:	6004      	str	r4, [r0, #0]
 800c892:	60c4      	str	r4, [r0, #12]
 800c894:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c89c:	b94c      	cbnz	r4, 800c8b2 <__pow5mult+0x66>
 800c89e:	f240 2171 	movw	r1, #625	@ 0x271
 800c8a2:	4638      	mov	r0, r7
 800c8a4:	f7ff ff12 	bl	800c6cc <__i2b>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	6003      	str	r3, [r0, #0]
 800c8b2:	f04f 0900 	mov.w	r9, #0
 800c8b6:	07eb      	lsls	r3, r5, #31
 800c8b8:	d50a      	bpl.n	800c8d0 <__pow5mult+0x84>
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	4622      	mov	r2, r4
 800c8be:	4638      	mov	r0, r7
 800c8c0:	f7ff ff1a 	bl	800c6f8 <__multiply>
 800c8c4:	4631      	mov	r1, r6
 800c8c6:	4680      	mov	r8, r0
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	f7ff fe01 	bl	800c4d0 <_Bfree>
 800c8ce:	4646      	mov	r6, r8
 800c8d0:	106d      	asrs	r5, r5, #1
 800c8d2:	d00b      	beq.n	800c8ec <__pow5mult+0xa0>
 800c8d4:	6820      	ldr	r0, [r4, #0]
 800c8d6:	b938      	cbnz	r0, 800c8e8 <__pow5mult+0x9c>
 800c8d8:	4622      	mov	r2, r4
 800c8da:	4621      	mov	r1, r4
 800c8dc:	4638      	mov	r0, r7
 800c8de:	f7ff ff0b 	bl	800c6f8 <__multiply>
 800c8e2:	6020      	str	r0, [r4, #0]
 800c8e4:	f8c0 9000 	str.w	r9, [r0]
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	e7e4      	b.n	800c8b6 <__pow5mult+0x6a>
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8f2:	bf00      	nop
 800c8f4:	0800eebc 	.word	0x0800eebc
 800c8f8:	0800ed3e 	.word	0x0800ed3e
 800c8fc:	0800ee61 	.word	0x0800ee61

0800c900 <__lshift>:
 800c900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c904:	460c      	mov	r4, r1
 800c906:	6849      	ldr	r1, [r1, #4]
 800c908:	6923      	ldr	r3, [r4, #16]
 800c90a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c90e:	68a3      	ldr	r3, [r4, #8]
 800c910:	4607      	mov	r7, r0
 800c912:	4691      	mov	r9, r2
 800c914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c918:	f108 0601 	add.w	r6, r8, #1
 800c91c:	42b3      	cmp	r3, r6
 800c91e:	db0b      	blt.n	800c938 <__lshift+0x38>
 800c920:	4638      	mov	r0, r7
 800c922:	f7ff fd95 	bl	800c450 <_Balloc>
 800c926:	4605      	mov	r5, r0
 800c928:	b948      	cbnz	r0, 800c93e <__lshift+0x3e>
 800c92a:	4602      	mov	r2, r0
 800c92c:	4b28      	ldr	r3, [pc, #160]	@ (800c9d0 <__lshift+0xd0>)
 800c92e:	4829      	ldr	r0, [pc, #164]	@ (800c9d4 <__lshift+0xd4>)
 800c930:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c934:	f7fe fe22 	bl	800b57c <__assert_func>
 800c938:	3101      	adds	r1, #1
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	e7ee      	b.n	800c91c <__lshift+0x1c>
 800c93e:	2300      	movs	r3, #0
 800c940:	f100 0114 	add.w	r1, r0, #20
 800c944:	f100 0210 	add.w	r2, r0, #16
 800c948:	4618      	mov	r0, r3
 800c94a:	4553      	cmp	r3, sl
 800c94c:	db33      	blt.n	800c9b6 <__lshift+0xb6>
 800c94e:	6920      	ldr	r0, [r4, #16]
 800c950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c954:	f104 0314 	add.w	r3, r4, #20
 800c958:	f019 091f 	ands.w	r9, r9, #31
 800c95c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c960:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c964:	d02b      	beq.n	800c9be <__lshift+0xbe>
 800c966:	f1c9 0e20 	rsb	lr, r9, #32
 800c96a:	468a      	mov	sl, r1
 800c96c:	2200      	movs	r2, #0
 800c96e:	6818      	ldr	r0, [r3, #0]
 800c970:	fa00 f009 	lsl.w	r0, r0, r9
 800c974:	4310      	orrs	r0, r2
 800c976:	f84a 0b04 	str.w	r0, [sl], #4
 800c97a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c97e:	459c      	cmp	ip, r3
 800c980:	fa22 f20e 	lsr.w	r2, r2, lr
 800c984:	d8f3      	bhi.n	800c96e <__lshift+0x6e>
 800c986:	ebac 0304 	sub.w	r3, ip, r4
 800c98a:	3b15      	subs	r3, #21
 800c98c:	f023 0303 	bic.w	r3, r3, #3
 800c990:	3304      	adds	r3, #4
 800c992:	f104 0015 	add.w	r0, r4, #21
 800c996:	4584      	cmp	ip, r0
 800c998:	bf38      	it	cc
 800c99a:	2304      	movcc	r3, #4
 800c99c:	50ca      	str	r2, [r1, r3]
 800c99e:	b10a      	cbz	r2, 800c9a4 <__lshift+0xa4>
 800c9a0:	f108 0602 	add.w	r6, r8, #2
 800c9a4:	3e01      	subs	r6, #1
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	612e      	str	r6, [r5, #16]
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	f7ff fd90 	bl	800c4d0 <_Bfree>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	e7c5      	b.n	800c94a <__lshift+0x4a>
 800c9be:	3904      	subs	r1, #4
 800c9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9c8:	459c      	cmp	ip, r3
 800c9ca:	d8f9      	bhi.n	800c9c0 <__lshift+0xc0>
 800c9cc:	e7ea      	b.n	800c9a4 <__lshift+0xa4>
 800c9ce:	bf00      	nop
 800c9d0:	0800ee50 	.word	0x0800ee50
 800c9d4:	0800ee61 	.word	0x0800ee61

0800c9d8 <__mcmp>:
 800c9d8:	690a      	ldr	r2, [r1, #16]
 800c9da:	4603      	mov	r3, r0
 800c9dc:	6900      	ldr	r0, [r0, #16]
 800c9de:	1a80      	subs	r0, r0, r2
 800c9e0:	b530      	push	{r4, r5, lr}
 800c9e2:	d10e      	bne.n	800ca02 <__mcmp+0x2a>
 800c9e4:	3314      	adds	r3, #20
 800c9e6:	3114      	adds	r1, #20
 800c9e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c9ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c9f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c9f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c9f8:	4295      	cmp	r5, r2
 800c9fa:	d003      	beq.n	800ca04 <__mcmp+0x2c>
 800c9fc:	d205      	bcs.n	800ca0a <__mcmp+0x32>
 800c9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ca02:	bd30      	pop	{r4, r5, pc}
 800ca04:	42a3      	cmp	r3, r4
 800ca06:	d3f3      	bcc.n	800c9f0 <__mcmp+0x18>
 800ca08:	e7fb      	b.n	800ca02 <__mcmp+0x2a>
 800ca0a:	2001      	movs	r0, #1
 800ca0c:	e7f9      	b.n	800ca02 <__mcmp+0x2a>
	...

0800ca10 <__mdiff>:
 800ca10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca14:	4689      	mov	r9, r1
 800ca16:	4606      	mov	r6, r0
 800ca18:	4611      	mov	r1, r2
 800ca1a:	4648      	mov	r0, r9
 800ca1c:	4614      	mov	r4, r2
 800ca1e:	f7ff ffdb 	bl	800c9d8 <__mcmp>
 800ca22:	1e05      	subs	r5, r0, #0
 800ca24:	d112      	bne.n	800ca4c <__mdiff+0x3c>
 800ca26:	4629      	mov	r1, r5
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7ff fd11 	bl	800c450 <_Balloc>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	b928      	cbnz	r0, 800ca3e <__mdiff+0x2e>
 800ca32:	4b3f      	ldr	r3, [pc, #252]	@ (800cb30 <__mdiff+0x120>)
 800ca34:	f240 2137 	movw	r1, #567	@ 0x237
 800ca38:	483e      	ldr	r0, [pc, #248]	@ (800cb34 <__mdiff+0x124>)
 800ca3a:	f7fe fd9f 	bl	800b57c <__assert_func>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca44:	4610      	mov	r0, r2
 800ca46:	b003      	add	sp, #12
 800ca48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca4c:	bfbc      	itt	lt
 800ca4e:	464b      	movlt	r3, r9
 800ca50:	46a1      	movlt	r9, r4
 800ca52:	4630      	mov	r0, r6
 800ca54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ca58:	bfba      	itte	lt
 800ca5a:	461c      	movlt	r4, r3
 800ca5c:	2501      	movlt	r5, #1
 800ca5e:	2500      	movge	r5, #0
 800ca60:	f7ff fcf6 	bl	800c450 <_Balloc>
 800ca64:	4602      	mov	r2, r0
 800ca66:	b918      	cbnz	r0, 800ca70 <__mdiff+0x60>
 800ca68:	4b31      	ldr	r3, [pc, #196]	@ (800cb30 <__mdiff+0x120>)
 800ca6a:	f240 2145 	movw	r1, #581	@ 0x245
 800ca6e:	e7e3      	b.n	800ca38 <__mdiff+0x28>
 800ca70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ca74:	6926      	ldr	r6, [r4, #16]
 800ca76:	60c5      	str	r5, [r0, #12]
 800ca78:	f109 0310 	add.w	r3, r9, #16
 800ca7c:	f109 0514 	add.w	r5, r9, #20
 800ca80:	f104 0e14 	add.w	lr, r4, #20
 800ca84:	f100 0b14 	add.w	fp, r0, #20
 800ca88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ca8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ca90:	9301      	str	r3, [sp, #4]
 800ca92:	46d9      	mov	r9, fp
 800ca94:	f04f 0c00 	mov.w	ip, #0
 800ca98:	9b01      	ldr	r3, [sp, #4]
 800ca9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ca9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	fa1f f38a 	uxth.w	r3, sl
 800caa8:	4619      	mov	r1, r3
 800caaa:	b283      	uxth	r3, r0
 800caac:	1acb      	subs	r3, r1, r3
 800caae:	0c00      	lsrs	r0, r0, #16
 800cab0:	4463      	add	r3, ip
 800cab2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cab6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800caba:	b29b      	uxth	r3, r3
 800cabc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cac0:	4576      	cmp	r6, lr
 800cac2:	f849 3b04 	str.w	r3, [r9], #4
 800cac6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800caca:	d8e5      	bhi.n	800ca98 <__mdiff+0x88>
 800cacc:	1b33      	subs	r3, r6, r4
 800cace:	3b15      	subs	r3, #21
 800cad0:	f023 0303 	bic.w	r3, r3, #3
 800cad4:	3415      	adds	r4, #21
 800cad6:	3304      	adds	r3, #4
 800cad8:	42a6      	cmp	r6, r4
 800cada:	bf38      	it	cc
 800cadc:	2304      	movcc	r3, #4
 800cade:	441d      	add	r5, r3
 800cae0:	445b      	add	r3, fp
 800cae2:	461e      	mov	r6, r3
 800cae4:	462c      	mov	r4, r5
 800cae6:	4544      	cmp	r4, r8
 800cae8:	d30e      	bcc.n	800cb08 <__mdiff+0xf8>
 800caea:	f108 0103 	add.w	r1, r8, #3
 800caee:	1b49      	subs	r1, r1, r5
 800caf0:	f021 0103 	bic.w	r1, r1, #3
 800caf4:	3d03      	subs	r5, #3
 800caf6:	45a8      	cmp	r8, r5
 800caf8:	bf38      	it	cc
 800cafa:	2100      	movcc	r1, #0
 800cafc:	440b      	add	r3, r1
 800cafe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb02:	b191      	cbz	r1, 800cb2a <__mdiff+0x11a>
 800cb04:	6117      	str	r7, [r2, #16]
 800cb06:	e79d      	b.n	800ca44 <__mdiff+0x34>
 800cb08:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb0c:	46e6      	mov	lr, ip
 800cb0e:	0c08      	lsrs	r0, r1, #16
 800cb10:	fa1c fc81 	uxtah	ip, ip, r1
 800cb14:	4471      	add	r1, lr
 800cb16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cb1a:	b289      	uxth	r1, r1
 800cb1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb20:	f846 1b04 	str.w	r1, [r6], #4
 800cb24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb28:	e7dd      	b.n	800cae6 <__mdiff+0xd6>
 800cb2a:	3f01      	subs	r7, #1
 800cb2c:	e7e7      	b.n	800cafe <__mdiff+0xee>
 800cb2e:	bf00      	nop
 800cb30:	0800ee50 	.word	0x0800ee50
 800cb34:	0800ee61 	.word	0x0800ee61

0800cb38 <__ulp>:
 800cb38:	b082      	sub	sp, #8
 800cb3a:	ed8d 0b00 	vstr	d0, [sp]
 800cb3e:	9a01      	ldr	r2, [sp, #4]
 800cb40:	4b0f      	ldr	r3, [pc, #60]	@ (800cb80 <__ulp+0x48>)
 800cb42:	4013      	ands	r3, r2
 800cb44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	dc08      	bgt.n	800cb5e <__ulp+0x26>
 800cb4c:	425b      	negs	r3, r3
 800cb4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cb52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cb56:	da04      	bge.n	800cb62 <__ulp+0x2a>
 800cb58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cb5c:	4113      	asrs	r3, r2
 800cb5e:	2200      	movs	r2, #0
 800cb60:	e008      	b.n	800cb74 <__ulp+0x3c>
 800cb62:	f1a2 0314 	sub.w	r3, r2, #20
 800cb66:	2b1e      	cmp	r3, #30
 800cb68:	bfda      	itte	le
 800cb6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cb6e:	40da      	lsrle	r2, r3
 800cb70:	2201      	movgt	r2, #1
 800cb72:	2300      	movs	r3, #0
 800cb74:	4619      	mov	r1, r3
 800cb76:	4610      	mov	r0, r2
 800cb78:	ec41 0b10 	vmov	d0, r0, r1
 800cb7c:	b002      	add	sp, #8
 800cb7e:	4770      	bx	lr
 800cb80:	7ff00000 	.word	0x7ff00000

0800cb84 <__b2d>:
 800cb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	6906      	ldr	r6, [r0, #16]
 800cb8a:	f100 0814 	add.w	r8, r0, #20
 800cb8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cb92:	1f37      	subs	r7, r6, #4
 800cb94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb98:	4610      	mov	r0, r2
 800cb9a:	f7ff fd4b 	bl	800c634 <__hi0bits>
 800cb9e:	f1c0 0320 	rsb	r3, r0, #32
 800cba2:	280a      	cmp	r0, #10
 800cba4:	600b      	str	r3, [r1, #0]
 800cba6:	491b      	ldr	r1, [pc, #108]	@ (800cc14 <__b2d+0x90>)
 800cba8:	dc15      	bgt.n	800cbd6 <__b2d+0x52>
 800cbaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800cbae:	fa22 f30c 	lsr.w	r3, r2, ip
 800cbb2:	45b8      	cmp	r8, r7
 800cbb4:	ea43 0501 	orr.w	r5, r3, r1
 800cbb8:	bf34      	ite	cc
 800cbba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cbbe:	2300      	movcs	r3, #0
 800cbc0:	3015      	adds	r0, #21
 800cbc2:	fa02 f000 	lsl.w	r0, r2, r0
 800cbc6:	fa23 f30c 	lsr.w	r3, r3, ip
 800cbca:	4303      	orrs	r3, r0
 800cbcc:	461c      	mov	r4, r3
 800cbce:	ec45 4b10 	vmov	d0, r4, r5
 800cbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd6:	45b8      	cmp	r8, r7
 800cbd8:	bf3a      	itte	cc
 800cbda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cbde:	f1a6 0708 	subcc.w	r7, r6, #8
 800cbe2:	2300      	movcs	r3, #0
 800cbe4:	380b      	subs	r0, #11
 800cbe6:	d012      	beq.n	800cc0e <__b2d+0x8a>
 800cbe8:	f1c0 0120 	rsb	r1, r0, #32
 800cbec:	fa23 f401 	lsr.w	r4, r3, r1
 800cbf0:	4082      	lsls	r2, r0
 800cbf2:	4322      	orrs	r2, r4
 800cbf4:	4547      	cmp	r7, r8
 800cbf6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cbfa:	bf8c      	ite	hi
 800cbfc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cc00:	2200      	movls	r2, #0
 800cc02:	4083      	lsls	r3, r0
 800cc04:	40ca      	lsrs	r2, r1
 800cc06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	e7de      	b.n	800cbcc <__b2d+0x48>
 800cc0e:	ea42 0501 	orr.w	r5, r2, r1
 800cc12:	e7db      	b.n	800cbcc <__b2d+0x48>
 800cc14:	3ff00000 	.word	0x3ff00000

0800cc18 <__d2b>:
 800cc18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	2101      	movs	r1, #1
 800cc20:	ec59 8b10 	vmov	r8, r9, d0
 800cc24:	4616      	mov	r6, r2
 800cc26:	f7ff fc13 	bl	800c450 <_Balloc>
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	b930      	cbnz	r0, 800cc3c <__d2b+0x24>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	4b23      	ldr	r3, [pc, #140]	@ (800ccc0 <__d2b+0xa8>)
 800cc32:	4824      	ldr	r0, [pc, #144]	@ (800ccc4 <__d2b+0xac>)
 800cc34:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc38:	f7fe fca0 	bl	800b57c <__assert_func>
 800cc3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc44:	b10d      	cbz	r5, 800cc4a <__d2b+0x32>
 800cc46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc4a:	9301      	str	r3, [sp, #4]
 800cc4c:	f1b8 0300 	subs.w	r3, r8, #0
 800cc50:	d023      	beq.n	800cc9a <__d2b+0x82>
 800cc52:	4668      	mov	r0, sp
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	f7ff fd0c 	bl	800c672 <__lo0bits>
 800cc5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc5e:	b1d0      	cbz	r0, 800cc96 <__d2b+0x7e>
 800cc60:	f1c0 0320 	rsb	r3, r0, #32
 800cc64:	fa02 f303 	lsl.w	r3, r2, r3
 800cc68:	430b      	orrs	r3, r1
 800cc6a:	40c2      	lsrs	r2, r0
 800cc6c:	6163      	str	r3, [r4, #20]
 800cc6e:	9201      	str	r2, [sp, #4]
 800cc70:	9b01      	ldr	r3, [sp, #4]
 800cc72:	61a3      	str	r3, [r4, #24]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	bf0c      	ite	eq
 800cc78:	2201      	moveq	r2, #1
 800cc7a:	2202      	movne	r2, #2
 800cc7c:	6122      	str	r2, [r4, #16]
 800cc7e:	b1a5      	cbz	r5, 800ccaa <__d2b+0x92>
 800cc80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc84:	4405      	add	r5, r0
 800cc86:	603d      	str	r5, [r7, #0]
 800cc88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc8c:	6030      	str	r0, [r6, #0]
 800cc8e:	4620      	mov	r0, r4
 800cc90:	b003      	add	sp, #12
 800cc92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc96:	6161      	str	r1, [r4, #20]
 800cc98:	e7ea      	b.n	800cc70 <__d2b+0x58>
 800cc9a:	a801      	add	r0, sp, #4
 800cc9c:	f7ff fce9 	bl	800c672 <__lo0bits>
 800cca0:	9b01      	ldr	r3, [sp, #4]
 800cca2:	6163      	str	r3, [r4, #20]
 800cca4:	3020      	adds	r0, #32
 800cca6:	2201      	movs	r2, #1
 800cca8:	e7e8      	b.n	800cc7c <__d2b+0x64>
 800ccaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ccb2:	6038      	str	r0, [r7, #0]
 800ccb4:	6918      	ldr	r0, [r3, #16]
 800ccb6:	f7ff fcbd 	bl	800c634 <__hi0bits>
 800ccba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccbe:	e7e5      	b.n	800cc8c <__d2b+0x74>
 800ccc0:	0800ee50 	.word	0x0800ee50
 800ccc4:	0800ee61 	.word	0x0800ee61

0800ccc8 <__ratio>:
 800ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cccc:	b085      	sub	sp, #20
 800ccce:	e9cd 1000 	strd	r1, r0, [sp]
 800ccd2:	a902      	add	r1, sp, #8
 800ccd4:	f7ff ff56 	bl	800cb84 <__b2d>
 800ccd8:	9800      	ldr	r0, [sp, #0]
 800ccda:	a903      	add	r1, sp, #12
 800ccdc:	ec55 4b10 	vmov	r4, r5, d0
 800cce0:	f7ff ff50 	bl	800cb84 <__b2d>
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	6919      	ldr	r1, [r3, #16]
 800cce8:	9b00      	ldr	r3, [sp, #0]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	1ac9      	subs	r1, r1, r3
 800ccee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ccf2:	1a9b      	subs	r3, r3, r2
 800ccf4:	ec5b ab10 	vmov	sl, fp, d0
 800ccf8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	bfce      	itee	gt
 800cd00:	462a      	movgt	r2, r5
 800cd02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd06:	465a      	movle	r2, fp
 800cd08:	462f      	mov	r7, r5
 800cd0a:	46d9      	mov	r9, fp
 800cd0c:	bfcc      	ite	gt
 800cd0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cd16:	464b      	mov	r3, r9
 800cd18:	4652      	mov	r2, sl
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	4639      	mov	r1, r7
 800cd1e:	f7f3 fdcd 	bl	80008bc <__aeabi_ddiv>
 800cd22:	ec41 0b10 	vmov	d0, r0, r1
 800cd26:	b005      	add	sp, #20
 800cd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd2c <__copybits>:
 800cd2c:	3901      	subs	r1, #1
 800cd2e:	b570      	push	{r4, r5, r6, lr}
 800cd30:	1149      	asrs	r1, r1, #5
 800cd32:	6914      	ldr	r4, [r2, #16]
 800cd34:	3101      	adds	r1, #1
 800cd36:	f102 0314 	add.w	r3, r2, #20
 800cd3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd42:	1f05      	subs	r5, r0, #4
 800cd44:	42a3      	cmp	r3, r4
 800cd46:	d30c      	bcc.n	800cd62 <__copybits+0x36>
 800cd48:	1aa3      	subs	r3, r4, r2
 800cd4a:	3b11      	subs	r3, #17
 800cd4c:	f023 0303 	bic.w	r3, r3, #3
 800cd50:	3211      	adds	r2, #17
 800cd52:	42a2      	cmp	r2, r4
 800cd54:	bf88      	it	hi
 800cd56:	2300      	movhi	r3, #0
 800cd58:	4418      	add	r0, r3
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	4288      	cmp	r0, r1
 800cd5e:	d305      	bcc.n	800cd6c <__copybits+0x40>
 800cd60:	bd70      	pop	{r4, r5, r6, pc}
 800cd62:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd66:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd6a:	e7eb      	b.n	800cd44 <__copybits+0x18>
 800cd6c:	f840 3b04 	str.w	r3, [r0], #4
 800cd70:	e7f4      	b.n	800cd5c <__copybits+0x30>

0800cd72 <__any_on>:
 800cd72:	f100 0214 	add.w	r2, r0, #20
 800cd76:	6900      	ldr	r0, [r0, #16]
 800cd78:	114b      	asrs	r3, r1, #5
 800cd7a:	4298      	cmp	r0, r3
 800cd7c:	b510      	push	{r4, lr}
 800cd7e:	db11      	blt.n	800cda4 <__any_on+0x32>
 800cd80:	dd0a      	ble.n	800cd98 <__any_on+0x26>
 800cd82:	f011 011f 	ands.w	r1, r1, #31
 800cd86:	d007      	beq.n	800cd98 <__any_on+0x26>
 800cd88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd8c:	fa24 f001 	lsr.w	r0, r4, r1
 800cd90:	fa00 f101 	lsl.w	r1, r0, r1
 800cd94:	428c      	cmp	r4, r1
 800cd96:	d10b      	bne.n	800cdb0 <__any_on+0x3e>
 800cd98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d803      	bhi.n	800cda8 <__any_on+0x36>
 800cda0:	2000      	movs	r0, #0
 800cda2:	bd10      	pop	{r4, pc}
 800cda4:	4603      	mov	r3, r0
 800cda6:	e7f7      	b.n	800cd98 <__any_on+0x26>
 800cda8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdac:	2900      	cmp	r1, #0
 800cdae:	d0f5      	beq.n	800cd9c <__any_on+0x2a>
 800cdb0:	2001      	movs	r0, #1
 800cdb2:	e7f6      	b.n	800cda2 <__any_on+0x30>

0800cdb4 <sulp>:
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	460d      	mov	r5, r1
 800cdba:	ec45 4b10 	vmov	d0, r4, r5
 800cdbe:	4616      	mov	r6, r2
 800cdc0:	f7ff feba 	bl	800cb38 <__ulp>
 800cdc4:	ec51 0b10 	vmov	r0, r1, d0
 800cdc8:	b17e      	cbz	r6, 800cdea <sulp+0x36>
 800cdca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cdce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	dd09      	ble.n	800cdea <sulp+0x36>
 800cdd6:	051b      	lsls	r3, r3, #20
 800cdd8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cddc:	2400      	movs	r4, #0
 800cdde:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cde2:	4622      	mov	r2, r4
 800cde4:	462b      	mov	r3, r5
 800cde6:	f7f3 fc3f 	bl	8000668 <__aeabi_dmul>
 800cdea:	ec41 0b10 	vmov	d0, r0, r1
 800cdee:	bd70      	pop	{r4, r5, r6, pc}

0800cdf0 <_strtod_l>:
 800cdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	b09f      	sub	sp, #124	@ 0x7c
 800cdf6:	460c      	mov	r4, r1
 800cdf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	921a      	str	r2, [sp, #104]	@ 0x68
 800cdfe:	9005      	str	r0, [sp, #20]
 800ce00:	f04f 0a00 	mov.w	sl, #0
 800ce04:	f04f 0b00 	mov.w	fp, #0
 800ce08:	460a      	mov	r2, r1
 800ce0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce0c:	7811      	ldrb	r1, [r2, #0]
 800ce0e:	292b      	cmp	r1, #43	@ 0x2b
 800ce10:	d04a      	beq.n	800cea8 <_strtod_l+0xb8>
 800ce12:	d838      	bhi.n	800ce86 <_strtod_l+0x96>
 800ce14:	290d      	cmp	r1, #13
 800ce16:	d832      	bhi.n	800ce7e <_strtod_l+0x8e>
 800ce18:	2908      	cmp	r1, #8
 800ce1a:	d832      	bhi.n	800ce82 <_strtod_l+0x92>
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	d03b      	beq.n	800ce98 <_strtod_l+0xa8>
 800ce20:	2200      	movs	r2, #0
 800ce22:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ce24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ce26:	782a      	ldrb	r2, [r5, #0]
 800ce28:	2a30      	cmp	r2, #48	@ 0x30
 800ce2a:	f040 80b3 	bne.w	800cf94 <_strtod_l+0x1a4>
 800ce2e:	786a      	ldrb	r2, [r5, #1]
 800ce30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce34:	2a58      	cmp	r2, #88	@ 0x58
 800ce36:	d16e      	bne.n	800cf16 <_strtod_l+0x126>
 800ce38:	9302      	str	r3, [sp, #8]
 800ce3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce3c:	9301      	str	r3, [sp, #4]
 800ce3e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	4a8e      	ldr	r2, [pc, #568]	@ (800d07c <_strtod_l+0x28c>)
 800ce44:	9805      	ldr	r0, [sp, #20]
 800ce46:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ce48:	a919      	add	r1, sp, #100	@ 0x64
 800ce4a:	f001 f8a7 	bl	800df9c <__gethex>
 800ce4e:	f010 060f 	ands.w	r6, r0, #15
 800ce52:	4604      	mov	r4, r0
 800ce54:	d005      	beq.n	800ce62 <_strtod_l+0x72>
 800ce56:	2e06      	cmp	r6, #6
 800ce58:	d128      	bne.n	800ceac <_strtod_l+0xbc>
 800ce5a:	3501      	adds	r5, #1
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ce60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f040 858e 	bne.w	800d986 <_strtod_l+0xb96>
 800ce6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce6c:	b1cb      	cbz	r3, 800cea2 <_strtod_l+0xb2>
 800ce6e:	4652      	mov	r2, sl
 800ce70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ce74:	ec43 2b10 	vmov	d0, r2, r3
 800ce78:	b01f      	add	sp, #124	@ 0x7c
 800ce7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7e:	2920      	cmp	r1, #32
 800ce80:	d1ce      	bne.n	800ce20 <_strtod_l+0x30>
 800ce82:	3201      	adds	r2, #1
 800ce84:	e7c1      	b.n	800ce0a <_strtod_l+0x1a>
 800ce86:	292d      	cmp	r1, #45	@ 0x2d
 800ce88:	d1ca      	bne.n	800ce20 <_strtod_l+0x30>
 800ce8a:	2101      	movs	r1, #1
 800ce8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ce8e:	1c51      	adds	r1, r2, #1
 800ce90:	9119      	str	r1, [sp, #100]	@ 0x64
 800ce92:	7852      	ldrb	r2, [r2, #1]
 800ce94:	2a00      	cmp	r2, #0
 800ce96:	d1c5      	bne.n	800ce24 <_strtod_l+0x34>
 800ce98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ce9a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f040 8570 	bne.w	800d982 <_strtod_l+0xb92>
 800cea2:	4652      	mov	r2, sl
 800cea4:	465b      	mov	r3, fp
 800cea6:	e7e5      	b.n	800ce74 <_strtod_l+0x84>
 800cea8:	2100      	movs	r1, #0
 800ceaa:	e7ef      	b.n	800ce8c <_strtod_l+0x9c>
 800ceac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ceae:	b13a      	cbz	r2, 800cec0 <_strtod_l+0xd0>
 800ceb0:	2135      	movs	r1, #53	@ 0x35
 800ceb2:	a81c      	add	r0, sp, #112	@ 0x70
 800ceb4:	f7ff ff3a 	bl	800cd2c <__copybits>
 800ceb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ceba:	9805      	ldr	r0, [sp, #20]
 800cebc:	f7ff fb08 	bl	800c4d0 <_Bfree>
 800cec0:	3e01      	subs	r6, #1
 800cec2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cec4:	2e04      	cmp	r6, #4
 800cec6:	d806      	bhi.n	800ced6 <_strtod_l+0xe6>
 800cec8:	e8df f006 	tbb	[pc, r6]
 800cecc:	201d0314 	.word	0x201d0314
 800ced0:	14          	.byte	0x14
 800ced1:	00          	.byte	0x00
 800ced2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ced6:	05e1      	lsls	r1, r4, #23
 800ced8:	bf48      	it	mi
 800ceda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cede:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cee2:	0d1b      	lsrs	r3, r3, #20
 800cee4:	051b      	lsls	r3, r3, #20
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1bb      	bne.n	800ce62 <_strtod_l+0x72>
 800ceea:	f7fe fb13 	bl	800b514 <__errno>
 800ceee:	2322      	movs	r3, #34	@ 0x22
 800cef0:	6003      	str	r3, [r0, #0]
 800cef2:	e7b6      	b.n	800ce62 <_strtod_l+0x72>
 800cef4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cef8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cefc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cf00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cf04:	e7e7      	b.n	800ced6 <_strtod_l+0xe6>
 800cf06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d084 <_strtod_l+0x294>
 800cf0a:	e7e4      	b.n	800ced6 <_strtod_l+0xe6>
 800cf0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cf10:	f04f 3aff 	mov.w	sl, #4294967295
 800cf14:	e7df      	b.n	800ced6 <_strtod_l+0xe6>
 800cf16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf18:	1c5a      	adds	r2, r3, #1
 800cf1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf1c:	785b      	ldrb	r3, [r3, #1]
 800cf1e:	2b30      	cmp	r3, #48	@ 0x30
 800cf20:	d0f9      	beq.n	800cf16 <_strtod_l+0x126>
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d09d      	beq.n	800ce62 <_strtod_l+0x72>
 800cf26:	2301      	movs	r3, #1
 800cf28:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf2e:	2300      	movs	r3, #0
 800cf30:	9308      	str	r3, [sp, #32]
 800cf32:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf34:	461f      	mov	r7, r3
 800cf36:	220a      	movs	r2, #10
 800cf38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cf3a:	7805      	ldrb	r5, [r0, #0]
 800cf3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cf40:	b2d9      	uxtb	r1, r3
 800cf42:	2909      	cmp	r1, #9
 800cf44:	d928      	bls.n	800cf98 <_strtod_l+0x1a8>
 800cf46:	494e      	ldr	r1, [pc, #312]	@ (800d080 <_strtod_l+0x290>)
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f000 ff6b 	bl	800de24 <strncmp>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d032      	beq.n	800cfb8 <_strtod_l+0x1c8>
 800cf52:	2000      	movs	r0, #0
 800cf54:	462a      	mov	r2, r5
 800cf56:	4681      	mov	r9, r0
 800cf58:	463d      	mov	r5, r7
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2a65      	cmp	r2, #101	@ 0x65
 800cf5e:	d001      	beq.n	800cf64 <_strtod_l+0x174>
 800cf60:	2a45      	cmp	r2, #69	@ 0x45
 800cf62:	d114      	bne.n	800cf8e <_strtod_l+0x19e>
 800cf64:	b91d      	cbnz	r5, 800cf6e <_strtod_l+0x17e>
 800cf66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf68:	4302      	orrs	r2, r0
 800cf6a:	d095      	beq.n	800ce98 <_strtod_l+0xa8>
 800cf6c:	2500      	movs	r5, #0
 800cf6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cf70:	1c62      	adds	r2, r4, #1
 800cf72:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf74:	7862      	ldrb	r2, [r4, #1]
 800cf76:	2a2b      	cmp	r2, #43	@ 0x2b
 800cf78:	d077      	beq.n	800d06a <_strtod_l+0x27a>
 800cf7a:	2a2d      	cmp	r2, #45	@ 0x2d
 800cf7c:	d07b      	beq.n	800d076 <_strtod_l+0x286>
 800cf7e:	f04f 0c00 	mov.w	ip, #0
 800cf82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cf86:	2909      	cmp	r1, #9
 800cf88:	f240 8082 	bls.w	800d090 <_strtod_l+0x2a0>
 800cf8c:	9419      	str	r4, [sp, #100]	@ 0x64
 800cf8e:	f04f 0800 	mov.w	r8, #0
 800cf92:	e0a2      	b.n	800d0da <_strtod_l+0x2ea>
 800cf94:	2300      	movs	r3, #0
 800cf96:	e7c7      	b.n	800cf28 <_strtod_l+0x138>
 800cf98:	2f08      	cmp	r7, #8
 800cf9a:	bfd5      	itete	le
 800cf9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cf9e:	9908      	ldrgt	r1, [sp, #32]
 800cfa0:	fb02 3301 	mlale	r3, r2, r1, r3
 800cfa4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cfa8:	f100 0001 	add.w	r0, r0, #1
 800cfac:	bfd4      	ite	le
 800cfae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cfb0:	9308      	strgt	r3, [sp, #32]
 800cfb2:	3701      	adds	r7, #1
 800cfb4:	9019      	str	r0, [sp, #100]	@ 0x64
 800cfb6:	e7bf      	b.n	800cf38 <_strtod_l+0x148>
 800cfb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfba:	1c5a      	adds	r2, r3, #1
 800cfbc:	9219      	str	r2, [sp, #100]	@ 0x64
 800cfbe:	785a      	ldrb	r2, [r3, #1]
 800cfc0:	b37f      	cbz	r7, 800d022 <_strtod_l+0x232>
 800cfc2:	4681      	mov	r9, r0
 800cfc4:	463d      	mov	r5, r7
 800cfc6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cfca:	2b09      	cmp	r3, #9
 800cfcc:	d912      	bls.n	800cff4 <_strtod_l+0x204>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e7c4      	b.n	800cf5c <_strtod_l+0x16c>
 800cfd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfd4:	1c5a      	adds	r2, r3, #1
 800cfd6:	9219      	str	r2, [sp, #100]	@ 0x64
 800cfd8:	785a      	ldrb	r2, [r3, #1]
 800cfda:	3001      	adds	r0, #1
 800cfdc:	2a30      	cmp	r2, #48	@ 0x30
 800cfde:	d0f8      	beq.n	800cfd2 <_strtod_l+0x1e2>
 800cfe0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cfe4:	2b08      	cmp	r3, #8
 800cfe6:	f200 84d3 	bhi.w	800d990 <_strtod_l+0xba0>
 800cfea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfec:	930c      	str	r3, [sp, #48]	@ 0x30
 800cfee:	4681      	mov	r9, r0
 800cff0:	2000      	movs	r0, #0
 800cff2:	4605      	mov	r5, r0
 800cff4:	3a30      	subs	r2, #48	@ 0x30
 800cff6:	f100 0301 	add.w	r3, r0, #1
 800cffa:	d02a      	beq.n	800d052 <_strtod_l+0x262>
 800cffc:	4499      	add	r9, r3
 800cffe:	eb00 0c05 	add.w	ip, r0, r5
 800d002:	462b      	mov	r3, r5
 800d004:	210a      	movs	r1, #10
 800d006:	4563      	cmp	r3, ip
 800d008:	d10d      	bne.n	800d026 <_strtod_l+0x236>
 800d00a:	1c69      	adds	r1, r5, #1
 800d00c:	4401      	add	r1, r0
 800d00e:	4428      	add	r0, r5
 800d010:	2808      	cmp	r0, #8
 800d012:	dc16      	bgt.n	800d042 <_strtod_l+0x252>
 800d014:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d016:	230a      	movs	r3, #10
 800d018:	fb03 2300 	mla	r3, r3, r0, r2
 800d01c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d01e:	2300      	movs	r3, #0
 800d020:	e018      	b.n	800d054 <_strtod_l+0x264>
 800d022:	4638      	mov	r0, r7
 800d024:	e7da      	b.n	800cfdc <_strtod_l+0x1ec>
 800d026:	2b08      	cmp	r3, #8
 800d028:	f103 0301 	add.w	r3, r3, #1
 800d02c:	dc03      	bgt.n	800d036 <_strtod_l+0x246>
 800d02e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d030:	434e      	muls	r6, r1
 800d032:	960a      	str	r6, [sp, #40]	@ 0x28
 800d034:	e7e7      	b.n	800d006 <_strtod_l+0x216>
 800d036:	2b10      	cmp	r3, #16
 800d038:	bfde      	ittt	le
 800d03a:	9e08      	ldrle	r6, [sp, #32]
 800d03c:	434e      	mulle	r6, r1
 800d03e:	9608      	strle	r6, [sp, #32]
 800d040:	e7e1      	b.n	800d006 <_strtod_l+0x216>
 800d042:	280f      	cmp	r0, #15
 800d044:	dceb      	bgt.n	800d01e <_strtod_l+0x22e>
 800d046:	9808      	ldr	r0, [sp, #32]
 800d048:	230a      	movs	r3, #10
 800d04a:	fb03 2300 	mla	r3, r3, r0, r2
 800d04e:	9308      	str	r3, [sp, #32]
 800d050:	e7e5      	b.n	800d01e <_strtod_l+0x22e>
 800d052:	4629      	mov	r1, r5
 800d054:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d056:	1c50      	adds	r0, r2, #1
 800d058:	9019      	str	r0, [sp, #100]	@ 0x64
 800d05a:	7852      	ldrb	r2, [r2, #1]
 800d05c:	4618      	mov	r0, r3
 800d05e:	460d      	mov	r5, r1
 800d060:	e7b1      	b.n	800cfc6 <_strtod_l+0x1d6>
 800d062:	f04f 0900 	mov.w	r9, #0
 800d066:	2301      	movs	r3, #1
 800d068:	e77d      	b.n	800cf66 <_strtod_l+0x176>
 800d06a:	f04f 0c00 	mov.w	ip, #0
 800d06e:	1ca2      	adds	r2, r4, #2
 800d070:	9219      	str	r2, [sp, #100]	@ 0x64
 800d072:	78a2      	ldrb	r2, [r4, #2]
 800d074:	e785      	b.n	800cf82 <_strtod_l+0x192>
 800d076:	f04f 0c01 	mov.w	ip, #1
 800d07a:	e7f8      	b.n	800d06e <_strtod_l+0x27e>
 800d07c:	0800efd0 	.word	0x0800efd0
 800d080:	0800efb8 	.word	0x0800efb8
 800d084:	7ff00000 	.word	0x7ff00000
 800d088:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d08a:	1c51      	adds	r1, r2, #1
 800d08c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d08e:	7852      	ldrb	r2, [r2, #1]
 800d090:	2a30      	cmp	r2, #48	@ 0x30
 800d092:	d0f9      	beq.n	800d088 <_strtod_l+0x298>
 800d094:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d098:	2908      	cmp	r1, #8
 800d09a:	f63f af78 	bhi.w	800cf8e <_strtod_l+0x19e>
 800d09e:	3a30      	subs	r2, #48	@ 0x30
 800d0a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d0a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d0a6:	f04f 080a 	mov.w	r8, #10
 800d0aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d0ac:	1c56      	adds	r6, r2, #1
 800d0ae:	9619      	str	r6, [sp, #100]	@ 0x64
 800d0b0:	7852      	ldrb	r2, [r2, #1]
 800d0b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d0b6:	f1be 0f09 	cmp.w	lr, #9
 800d0ba:	d939      	bls.n	800d130 <_strtod_l+0x340>
 800d0bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d0be:	1a76      	subs	r6, r6, r1
 800d0c0:	2e08      	cmp	r6, #8
 800d0c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d0c6:	dc03      	bgt.n	800d0d0 <_strtod_l+0x2e0>
 800d0c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d0ca:	4588      	cmp	r8, r1
 800d0cc:	bfa8      	it	ge
 800d0ce:	4688      	movge	r8, r1
 800d0d0:	f1bc 0f00 	cmp.w	ip, #0
 800d0d4:	d001      	beq.n	800d0da <_strtod_l+0x2ea>
 800d0d6:	f1c8 0800 	rsb	r8, r8, #0
 800d0da:	2d00      	cmp	r5, #0
 800d0dc:	d14e      	bne.n	800d17c <_strtod_l+0x38c>
 800d0de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0e0:	4308      	orrs	r0, r1
 800d0e2:	f47f aebe 	bne.w	800ce62 <_strtod_l+0x72>
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f47f aed6 	bne.w	800ce98 <_strtod_l+0xa8>
 800d0ec:	2a69      	cmp	r2, #105	@ 0x69
 800d0ee:	d028      	beq.n	800d142 <_strtod_l+0x352>
 800d0f0:	dc25      	bgt.n	800d13e <_strtod_l+0x34e>
 800d0f2:	2a49      	cmp	r2, #73	@ 0x49
 800d0f4:	d025      	beq.n	800d142 <_strtod_l+0x352>
 800d0f6:	2a4e      	cmp	r2, #78	@ 0x4e
 800d0f8:	f47f aece 	bne.w	800ce98 <_strtod_l+0xa8>
 800d0fc:	499b      	ldr	r1, [pc, #620]	@ (800d36c <_strtod_l+0x57c>)
 800d0fe:	a819      	add	r0, sp, #100	@ 0x64
 800d100:	f001 f96e 	bl	800e3e0 <__match>
 800d104:	2800      	cmp	r0, #0
 800d106:	f43f aec7 	beq.w	800ce98 <_strtod_l+0xa8>
 800d10a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	2b28      	cmp	r3, #40	@ 0x28
 800d110:	d12e      	bne.n	800d170 <_strtod_l+0x380>
 800d112:	4997      	ldr	r1, [pc, #604]	@ (800d370 <_strtod_l+0x580>)
 800d114:	aa1c      	add	r2, sp, #112	@ 0x70
 800d116:	a819      	add	r0, sp, #100	@ 0x64
 800d118:	f001 f976 	bl	800e408 <__hexnan>
 800d11c:	2805      	cmp	r0, #5
 800d11e:	d127      	bne.n	800d170 <_strtod_l+0x380>
 800d120:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d122:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d126:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d12a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d12e:	e698      	b.n	800ce62 <_strtod_l+0x72>
 800d130:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d132:	fb08 2101 	mla	r1, r8, r1, r2
 800d136:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d13a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d13c:	e7b5      	b.n	800d0aa <_strtod_l+0x2ba>
 800d13e:	2a6e      	cmp	r2, #110	@ 0x6e
 800d140:	e7da      	b.n	800d0f8 <_strtod_l+0x308>
 800d142:	498c      	ldr	r1, [pc, #560]	@ (800d374 <_strtod_l+0x584>)
 800d144:	a819      	add	r0, sp, #100	@ 0x64
 800d146:	f001 f94b 	bl	800e3e0 <__match>
 800d14a:	2800      	cmp	r0, #0
 800d14c:	f43f aea4 	beq.w	800ce98 <_strtod_l+0xa8>
 800d150:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d152:	4989      	ldr	r1, [pc, #548]	@ (800d378 <_strtod_l+0x588>)
 800d154:	3b01      	subs	r3, #1
 800d156:	a819      	add	r0, sp, #100	@ 0x64
 800d158:	9319      	str	r3, [sp, #100]	@ 0x64
 800d15a:	f001 f941 	bl	800e3e0 <__match>
 800d15e:	b910      	cbnz	r0, 800d166 <_strtod_l+0x376>
 800d160:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d162:	3301      	adds	r3, #1
 800d164:	9319      	str	r3, [sp, #100]	@ 0x64
 800d166:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d388 <_strtod_l+0x598>
 800d16a:	f04f 0a00 	mov.w	sl, #0
 800d16e:	e678      	b.n	800ce62 <_strtod_l+0x72>
 800d170:	4882      	ldr	r0, [pc, #520]	@ (800d37c <_strtod_l+0x58c>)
 800d172:	f000 fe89 	bl	800de88 <nan>
 800d176:	ec5b ab10 	vmov	sl, fp, d0
 800d17a:	e672      	b.n	800ce62 <_strtod_l+0x72>
 800d17c:	eba8 0309 	sub.w	r3, r8, r9
 800d180:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d182:	9309      	str	r3, [sp, #36]	@ 0x24
 800d184:	2f00      	cmp	r7, #0
 800d186:	bf08      	it	eq
 800d188:	462f      	moveq	r7, r5
 800d18a:	2d10      	cmp	r5, #16
 800d18c:	462c      	mov	r4, r5
 800d18e:	bfa8      	it	ge
 800d190:	2410      	movge	r4, #16
 800d192:	f7f3 f9ef 	bl	8000574 <__aeabi_ui2d>
 800d196:	2d09      	cmp	r5, #9
 800d198:	4682      	mov	sl, r0
 800d19a:	468b      	mov	fp, r1
 800d19c:	dc13      	bgt.n	800d1c6 <_strtod_l+0x3d6>
 800d19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f43f ae5e 	beq.w	800ce62 <_strtod_l+0x72>
 800d1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1a8:	dd78      	ble.n	800d29c <_strtod_l+0x4ac>
 800d1aa:	2b16      	cmp	r3, #22
 800d1ac:	dc5f      	bgt.n	800d26e <_strtod_l+0x47e>
 800d1ae:	4974      	ldr	r1, [pc, #464]	@ (800d380 <_strtod_l+0x590>)
 800d1b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d1b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1b8:	4652      	mov	r2, sl
 800d1ba:	465b      	mov	r3, fp
 800d1bc:	f7f3 fa54 	bl	8000668 <__aeabi_dmul>
 800d1c0:	4682      	mov	sl, r0
 800d1c2:	468b      	mov	fp, r1
 800d1c4:	e64d      	b.n	800ce62 <_strtod_l+0x72>
 800d1c6:	4b6e      	ldr	r3, [pc, #440]	@ (800d380 <_strtod_l+0x590>)
 800d1c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d1cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d1d0:	f7f3 fa4a 	bl	8000668 <__aeabi_dmul>
 800d1d4:	4682      	mov	sl, r0
 800d1d6:	9808      	ldr	r0, [sp, #32]
 800d1d8:	468b      	mov	fp, r1
 800d1da:	f7f3 f9cb 	bl	8000574 <__aeabi_ui2d>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	4650      	mov	r0, sl
 800d1e4:	4659      	mov	r1, fp
 800d1e6:	f7f3 f889 	bl	80002fc <__adddf3>
 800d1ea:	2d0f      	cmp	r5, #15
 800d1ec:	4682      	mov	sl, r0
 800d1ee:	468b      	mov	fp, r1
 800d1f0:	ddd5      	ble.n	800d19e <_strtod_l+0x3ae>
 800d1f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1f4:	1b2c      	subs	r4, r5, r4
 800d1f6:	441c      	add	r4, r3
 800d1f8:	2c00      	cmp	r4, #0
 800d1fa:	f340 8096 	ble.w	800d32a <_strtod_l+0x53a>
 800d1fe:	f014 030f 	ands.w	r3, r4, #15
 800d202:	d00a      	beq.n	800d21a <_strtod_l+0x42a>
 800d204:	495e      	ldr	r1, [pc, #376]	@ (800d380 <_strtod_l+0x590>)
 800d206:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d20a:	4652      	mov	r2, sl
 800d20c:	465b      	mov	r3, fp
 800d20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d212:	f7f3 fa29 	bl	8000668 <__aeabi_dmul>
 800d216:	4682      	mov	sl, r0
 800d218:	468b      	mov	fp, r1
 800d21a:	f034 040f 	bics.w	r4, r4, #15
 800d21e:	d073      	beq.n	800d308 <_strtod_l+0x518>
 800d220:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d224:	dd48      	ble.n	800d2b8 <_strtod_l+0x4c8>
 800d226:	2400      	movs	r4, #0
 800d228:	46a0      	mov	r8, r4
 800d22a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d22c:	46a1      	mov	r9, r4
 800d22e:	9a05      	ldr	r2, [sp, #20]
 800d230:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d388 <_strtod_l+0x598>
 800d234:	2322      	movs	r3, #34	@ 0x22
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	f04f 0a00 	mov.w	sl, #0
 800d23c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d23e:	2b00      	cmp	r3, #0
 800d240:	f43f ae0f 	beq.w	800ce62 <_strtod_l+0x72>
 800d244:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d246:	9805      	ldr	r0, [sp, #20]
 800d248:	f7ff f942 	bl	800c4d0 <_Bfree>
 800d24c:	9805      	ldr	r0, [sp, #20]
 800d24e:	4649      	mov	r1, r9
 800d250:	f7ff f93e 	bl	800c4d0 <_Bfree>
 800d254:	9805      	ldr	r0, [sp, #20]
 800d256:	4641      	mov	r1, r8
 800d258:	f7ff f93a 	bl	800c4d0 <_Bfree>
 800d25c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d25e:	9805      	ldr	r0, [sp, #20]
 800d260:	f7ff f936 	bl	800c4d0 <_Bfree>
 800d264:	9805      	ldr	r0, [sp, #20]
 800d266:	4621      	mov	r1, r4
 800d268:	f7ff f932 	bl	800c4d0 <_Bfree>
 800d26c:	e5f9      	b.n	800ce62 <_strtod_l+0x72>
 800d26e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d270:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d274:	4293      	cmp	r3, r2
 800d276:	dbbc      	blt.n	800d1f2 <_strtod_l+0x402>
 800d278:	4c41      	ldr	r4, [pc, #260]	@ (800d380 <_strtod_l+0x590>)
 800d27a:	f1c5 050f 	rsb	r5, r5, #15
 800d27e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d282:	4652      	mov	r2, sl
 800d284:	465b      	mov	r3, fp
 800d286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d28a:	f7f3 f9ed 	bl	8000668 <__aeabi_dmul>
 800d28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d290:	1b5d      	subs	r5, r3, r5
 800d292:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d296:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d29a:	e78f      	b.n	800d1bc <_strtod_l+0x3cc>
 800d29c:	3316      	adds	r3, #22
 800d29e:	dba8      	blt.n	800d1f2 <_strtod_l+0x402>
 800d2a0:	4b37      	ldr	r3, [pc, #220]	@ (800d380 <_strtod_l+0x590>)
 800d2a2:	eba9 0808 	sub.w	r8, r9, r8
 800d2a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d2aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d2ae:	4650      	mov	r0, sl
 800d2b0:	4659      	mov	r1, fp
 800d2b2:	f7f3 fb03 	bl	80008bc <__aeabi_ddiv>
 800d2b6:	e783      	b.n	800d1c0 <_strtod_l+0x3d0>
 800d2b8:	4b32      	ldr	r3, [pc, #200]	@ (800d384 <_strtod_l+0x594>)
 800d2ba:	9308      	str	r3, [sp, #32]
 800d2bc:	2300      	movs	r3, #0
 800d2be:	1124      	asrs	r4, r4, #4
 800d2c0:	4650      	mov	r0, sl
 800d2c2:	4659      	mov	r1, fp
 800d2c4:	461e      	mov	r6, r3
 800d2c6:	2c01      	cmp	r4, #1
 800d2c8:	dc21      	bgt.n	800d30e <_strtod_l+0x51e>
 800d2ca:	b10b      	cbz	r3, 800d2d0 <_strtod_l+0x4e0>
 800d2cc:	4682      	mov	sl, r0
 800d2ce:	468b      	mov	fp, r1
 800d2d0:	492c      	ldr	r1, [pc, #176]	@ (800d384 <_strtod_l+0x594>)
 800d2d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d2d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d2da:	4652      	mov	r2, sl
 800d2dc:	465b      	mov	r3, fp
 800d2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2e2:	f7f3 f9c1 	bl	8000668 <__aeabi_dmul>
 800d2e6:	4b28      	ldr	r3, [pc, #160]	@ (800d388 <_strtod_l+0x598>)
 800d2e8:	460a      	mov	r2, r1
 800d2ea:	400b      	ands	r3, r1
 800d2ec:	4927      	ldr	r1, [pc, #156]	@ (800d38c <_strtod_l+0x59c>)
 800d2ee:	428b      	cmp	r3, r1
 800d2f0:	4682      	mov	sl, r0
 800d2f2:	d898      	bhi.n	800d226 <_strtod_l+0x436>
 800d2f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d2f8:	428b      	cmp	r3, r1
 800d2fa:	bf86      	itte	hi
 800d2fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d390 <_strtod_l+0x5a0>
 800d300:	f04f 3aff 	movhi.w	sl, #4294967295
 800d304:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d308:	2300      	movs	r3, #0
 800d30a:	9308      	str	r3, [sp, #32]
 800d30c:	e07a      	b.n	800d404 <_strtod_l+0x614>
 800d30e:	07e2      	lsls	r2, r4, #31
 800d310:	d505      	bpl.n	800d31e <_strtod_l+0x52e>
 800d312:	9b08      	ldr	r3, [sp, #32]
 800d314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d318:	f7f3 f9a6 	bl	8000668 <__aeabi_dmul>
 800d31c:	2301      	movs	r3, #1
 800d31e:	9a08      	ldr	r2, [sp, #32]
 800d320:	3208      	adds	r2, #8
 800d322:	3601      	adds	r6, #1
 800d324:	1064      	asrs	r4, r4, #1
 800d326:	9208      	str	r2, [sp, #32]
 800d328:	e7cd      	b.n	800d2c6 <_strtod_l+0x4d6>
 800d32a:	d0ed      	beq.n	800d308 <_strtod_l+0x518>
 800d32c:	4264      	negs	r4, r4
 800d32e:	f014 020f 	ands.w	r2, r4, #15
 800d332:	d00a      	beq.n	800d34a <_strtod_l+0x55a>
 800d334:	4b12      	ldr	r3, [pc, #72]	@ (800d380 <_strtod_l+0x590>)
 800d336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d33a:	4650      	mov	r0, sl
 800d33c:	4659      	mov	r1, fp
 800d33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d342:	f7f3 fabb 	bl	80008bc <__aeabi_ddiv>
 800d346:	4682      	mov	sl, r0
 800d348:	468b      	mov	fp, r1
 800d34a:	1124      	asrs	r4, r4, #4
 800d34c:	d0dc      	beq.n	800d308 <_strtod_l+0x518>
 800d34e:	2c1f      	cmp	r4, #31
 800d350:	dd20      	ble.n	800d394 <_strtod_l+0x5a4>
 800d352:	2400      	movs	r4, #0
 800d354:	46a0      	mov	r8, r4
 800d356:	940a      	str	r4, [sp, #40]	@ 0x28
 800d358:	46a1      	mov	r9, r4
 800d35a:	9a05      	ldr	r2, [sp, #20]
 800d35c:	2322      	movs	r3, #34	@ 0x22
 800d35e:	f04f 0a00 	mov.w	sl, #0
 800d362:	f04f 0b00 	mov.w	fp, #0
 800d366:	6013      	str	r3, [r2, #0]
 800d368:	e768      	b.n	800d23c <_strtod_l+0x44c>
 800d36a:	bf00      	nop
 800d36c:	0800ed12 	.word	0x0800ed12
 800d370:	0800efbc 	.word	0x0800efbc
 800d374:	0800ed0a 	.word	0x0800ed0a
 800d378:	0800edee 	.word	0x0800edee
 800d37c:	0800edea 	.word	0x0800edea
 800d380:	0800eef0 	.word	0x0800eef0
 800d384:	0800eec8 	.word	0x0800eec8
 800d388:	7ff00000 	.word	0x7ff00000
 800d38c:	7ca00000 	.word	0x7ca00000
 800d390:	7fefffff 	.word	0x7fefffff
 800d394:	f014 0310 	ands.w	r3, r4, #16
 800d398:	bf18      	it	ne
 800d39a:	236a      	movne	r3, #106	@ 0x6a
 800d39c:	4ea9      	ldr	r6, [pc, #676]	@ (800d644 <_strtod_l+0x854>)
 800d39e:	9308      	str	r3, [sp, #32]
 800d3a0:	4650      	mov	r0, sl
 800d3a2:	4659      	mov	r1, fp
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	07e2      	lsls	r2, r4, #31
 800d3a8:	d504      	bpl.n	800d3b4 <_strtod_l+0x5c4>
 800d3aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d3ae:	f7f3 f95b 	bl	8000668 <__aeabi_dmul>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	1064      	asrs	r4, r4, #1
 800d3b6:	f106 0608 	add.w	r6, r6, #8
 800d3ba:	d1f4      	bne.n	800d3a6 <_strtod_l+0x5b6>
 800d3bc:	b10b      	cbz	r3, 800d3c2 <_strtod_l+0x5d2>
 800d3be:	4682      	mov	sl, r0
 800d3c0:	468b      	mov	fp, r1
 800d3c2:	9b08      	ldr	r3, [sp, #32]
 800d3c4:	b1b3      	cbz	r3, 800d3f4 <_strtod_l+0x604>
 800d3c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d3ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	4659      	mov	r1, fp
 800d3d2:	dd0f      	ble.n	800d3f4 <_strtod_l+0x604>
 800d3d4:	2b1f      	cmp	r3, #31
 800d3d6:	dd55      	ble.n	800d484 <_strtod_l+0x694>
 800d3d8:	2b34      	cmp	r3, #52	@ 0x34
 800d3da:	bfde      	ittt	le
 800d3dc:	f04f 33ff 	movle.w	r3, #4294967295
 800d3e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d3e4:	4093      	lslle	r3, r2
 800d3e6:	f04f 0a00 	mov.w	sl, #0
 800d3ea:	bfcc      	ite	gt
 800d3ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d3f0:	ea03 0b01 	andle.w	fp, r3, r1
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	4650      	mov	r0, sl
 800d3fa:	4659      	mov	r1, fp
 800d3fc:	f7f3 fb9c 	bl	8000b38 <__aeabi_dcmpeq>
 800d400:	2800      	cmp	r0, #0
 800d402:	d1a6      	bne.n	800d352 <_strtod_l+0x562>
 800d404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d406:	9300      	str	r3, [sp, #0]
 800d408:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d40a:	9805      	ldr	r0, [sp, #20]
 800d40c:	462b      	mov	r3, r5
 800d40e:	463a      	mov	r2, r7
 800d410:	f7ff f8c6 	bl	800c5a0 <__s2b>
 800d414:	900a      	str	r0, [sp, #40]	@ 0x28
 800d416:	2800      	cmp	r0, #0
 800d418:	f43f af05 	beq.w	800d226 <_strtod_l+0x436>
 800d41c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d41e:	2a00      	cmp	r2, #0
 800d420:	eba9 0308 	sub.w	r3, r9, r8
 800d424:	bfa8      	it	ge
 800d426:	2300      	movge	r3, #0
 800d428:	9312      	str	r3, [sp, #72]	@ 0x48
 800d42a:	2400      	movs	r4, #0
 800d42c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d430:	9316      	str	r3, [sp, #88]	@ 0x58
 800d432:	46a0      	mov	r8, r4
 800d434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d436:	9805      	ldr	r0, [sp, #20]
 800d438:	6859      	ldr	r1, [r3, #4]
 800d43a:	f7ff f809 	bl	800c450 <_Balloc>
 800d43e:	4681      	mov	r9, r0
 800d440:	2800      	cmp	r0, #0
 800d442:	f43f aef4 	beq.w	800d22e <_strtod_l+0x43e>
 800d446:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d448:	691a      	ldr	r2, [r3, #16]
 800d44a:	3202      	adds	r2, #2
 800d44c:	f103 010c 	add.w	r1, r3, #12
 800d450:	0092      	lsls	r2, r2, #2
 800d452:	300c      	adds	r0, #12
 800d454:	f000 fd08 	bl	800de68 <memcpy>
 800d458:	ec4b ab10 	vmov	d0, sl, fp
 800d45c:	9805      	ldr	r0, [sp, #20]
 800d45e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d460:	a91b      	add	r1, sp, #108	@ 0x6c
 800d462:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d466:	f7ff fbd7 	bl	800cc18 <__d2b>
 800d46a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d46c:	2800      	cmp	r0, #0
 800d46e:	f43f aede 	beq.w	800d22e <_strtod_l+0x43e>
 800d472:	9805      	ldr	r0, [sp, #20]
 800d474:	2101      	movs	r1, #1
 800d476:	f7ff f929 	bl	800c6cc <__i2b>
 800d47a:	4680      	mov	r8, r0
 800d47c:	b948      	cbnz	r0, 800d492 <_strtod_l+0x6a2>
 800d47e:	f04f 0800 	mov.w	r8, #0
 800d482:	e6d4      	b.n	800d22e <_strtod_l+0x43e>
 800d484:	f04f 32ff 	mov.w	r2, #4294967295
 800d488:	fa02 f303 	lsl.w	r3, r2, r3
 800d48c:	ea03 0a0a 	and.w	sl, r3, sl
 800d490:	e7b0      	b.n	800d3f4 <_strtod_l+0x604>
 800d492:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d494:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d496:	2d00      	cmp	r5, #0
 800d498:	bfab      	itete	ge
 800d49a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d49c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d49e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d4a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d4a2:	bfac      	ite	ge
 800d4a4:	18ef      	addge	r7, r5, r3
 800d4a6:	1b5e      	sublt	r6, r3, r5
 800d4a8:	9b08      	ldr	r3, [sp, #32]
 800d4aa:	1aed      	subs	r5, r5, r3
 800d4ac:	4415      	add	r5, r2
 800d4ae:	4b66      	ldr	r3, [pc, #408]	@ (800d648 <_strtod_l+0x858>)
 800d4b0:	3d01      	subs	r5, #1
 800d4b2:	429d      	cmp	r5, r3
 800d4b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d4b8:	da50      	bge.n	800d55c <_strtod_l+0x76c>
 800d4ba:	1b5b      	subs	r3, r3, r5
 800d4bc:	2b1f      	cmp	r3, #31
 800d4be:	eba2 0203 	sub.w	r2, r2, r3
 800d4c2:	f04f 0101 	mov.w	r1, #1
 800d4c6:	dc3d      	bgt.n	800d544 <_strtod_l+0x754>
 800d4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800d4cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d4d2:	18bd      	adds	r5, r7, r2
 800d4d4:	9b08      	ldr	r3, [sp, #32]
 800d4d6:	42af      	cmp	r7, r5
 800d4d8:	4416      	add	r6, r2
 800d4da:	441e      	add	r6, r3
 800d4dc:	463b      	mov	r3, r7
 800d4de:	bfa8      	it	ge
 800d4e0:	462b      	movge	r3, r5
 800d4e2:	42b3      	cmp	r3, r6
 800d4e4:	bfa8      	it	ge
 800d4e6:	4633      	movge	r3, r6
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	bfc2      	ittt	gt
 800d4ec:	1aed      	subgt	r5, r5, r3
 800d4ee:	1af6      	subgt	r6, r6, r3
 800d4f0:	1aff      	subgt	r7, r7, r3
 800d4f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	dd16      	ble.n	800d526 <_strtod_l+0x736>
 800d4f8:	4641      	mov	r1, r8
 800d4fa:	9805      	ldr	r0, [sp, #20]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	f7ff f9a5 	bl	800c84c <__pow5mult>
 800d502:	4680      	mov	r8, r0
 800d504:	2800      	cmp	r0, #0
 800d506:	d0ba      	beq.n	800d47e <_strtod_l+0x68e>
 800d508:	4601      	mov	r1, r0
 800d50a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d50c:	9805      	ldr	r0, [sp, #20]
 800d50e:	f7ff f8f3 	bl	800c6f8 <__multiply>
 800d512:	900e      	str	r0, [sp, #56]	@ 0x38
 800d514:	2800      	cmp	r0, #0
 800d516:	f43f ae8a 	beq.w	800d22e <_strtod_l+0x43e>
 800d51a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d51c:	9805      	ldr	r0, [sp, #20]
 800d51e:	f7fe ffd7 	bl	800c4d0 <_Bfree>
 800d522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d524:	931a      	str	r3, [sp, #104]	@ 0x68
 800d526:	2d00      	cmp	r5, #0
 800d528:	dc1d      	bgt.n	800d566 <_strtod_l+0x776>
 800d52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	dd23      	ble.n	800d578 <_strtod_l+0x788>
 800d530:	4649      	mov	r1, r9
 800d532:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d534:	9805      	ldr	r0, [sp, #20]
 800d536:	f7ff f989 	bl	800c84c <__pow5mult>
 800d53a:	4681      	mov	r9, r0
 800d53c:	b9e0      	cbnz	r0, 800d578 <_strtod_l+0x788>
 800d53e:	f04f 0900 	mov.w	r9, #0
 800d542:	e674      	b.n	800d22e <_strtod_l+0x43e>
 800d544:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d548:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d54c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d550:	35e2      	adds	r5, #226	@ 0xe2
 800d552:	fa01 f305 	lsl.w	r3, r1, r5
 800d556:	9310      	str	r3, [sp, #64]	@ 0x40
 800d558:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d55a:	e7ba      	b.n	800d4d2 <_strtod_l+0x6e2>
 800d55c:	2300      	movs	r3, #0
 800d55e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d560:	2301      	movs	r3, #1
 800d562:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d564:	e7b5      	b.n	800d4d2 <_strtod_l+0x6e2>
 800d566:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d568:	9805      	ldr	r0, [sp, #20]
 800d56a:	462a      	mov	r2, r5
 800d56c:	f7ff f9c8 	bl	800c900 <__lshift>
 800d570:	901a      	str	r0, [sp, #104]	@ 0x68
 800d572:	2800      	cmp	r0, #0
 800d574:	d1d9      	bne.n	800d52a <_strtod_l+0x73a>
 800d576:	e65a      	b.n	800d22e <_strtod_l+0x43e>
 800d578:	2e00      	cmp	r6, #0
 800d57a:	dd07      	ble.n	800d58c <_strtod_l+0x79c>
 800d57c:	4649      	mov	r1, r9
 800d57e:	9805      	ldr	r0, [sp, #20]
 800d580:	4632      	mov	r2, r6
 800d582:	f7ff f9bd 	bl	800c900 <__lshift>
 800d586:	4681      	mov	r9, r0
 800d588:	2800      	cmp	r0, #0
 800d58a:	d0d8      	beq.n	800d53e <_strtod_l+0x74e>
 800d58c:	2f00      	cmp	r7, #0
 800d58e:	dd08      	ble.n	800d5a2 <_strtod_l+0x7b2>
 800d590:	4641      	mov	r1, r8
 800d592:	9805      	ldr	r0, [sp, #20]
 800d594:	463a      	mov	r2, r7
 800d596:	f7ff f9b3 	bl	800c900 <__lshift>
 800d59a:	4680      	mov	r8, r0
 800d59c:	2800      	cmp	r0, #0
 800d59e:	f43f ae46 	beq.w	800d22e <_strtod_l+0x43e>
 800d5a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5a4:	9805      	ldr	r0, [sp, #20]
 800d5a6:	464a      	mov	r2, r9
 800d5a8:	f7ff fa32 	bl	800ca10 <__mdiff>
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	f43f ae3d 	beq.w	800d22e <_strtod_l+0x43e>
 800d5b4:	68c3      	ldr	r3, [r0, #12]
 800d5b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	60c3      	str	r3, [r0, #12]
 800d5bc:	4641      	mov	r1, r8
 800d5be:	f7ff fa0b 	bl	800c9d8 <__mcmp>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	da46      	bge.n	800d654 <_strtod_l+0x864>
 800d5c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5c8:	ea53 030a 	orrs.w	r3, r3, sl
 800d5cc:	d16c      	bne.n	800d6a8 <_strtod_l+0x8b8>
 800d5ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d168      	bne.n	800d6a8 <_strtod_l+0x8b8>
 800d5d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d5da:	0d1b      	lsrs	r3, r3, #20
 800d5dc:	051b      	lsls	r3, r3, #20
 800d5de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d5e2:	d961      	bls.n	800d6a8 <_strtod_l+0x8b8>
 800d5e4:	6963      	ldr	r3, [r4, #20]
 800d5e6:	b913      	cbnz	r3, 800d5ee <_strtod_l+0x7fe>
 800d5e8:	6923      	ldr	r3, [r4, #16]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	dd5c      	ble.n	800d6a8 <_strtod_l+0x8b8>
 800d5ee:	4621      	mov	r1, r4
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	9805      	ldr	r0, [sp, #20]
 800d5f4:	f7ff f984 	bl	800c900 <__lshift>
 800d5f8:	4641      	mov	r1, r8
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	f7ff f9ec 	bl	800c9d8 <__mcmp>
 800d600:	2800      	cmp	r0, #0
 800d602:	dd51      	ble.n	800d6a8 <_strtod_l+0x8b8>
 800d604:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d608:	9a08      	ldr	r2, [sp, #32]
 800d60a:	0d1b      	lsrs	r3, r3, #20
 800d60c:	051b      	lsls	r3, r3, #20
 800d60e:	2a00      	cmp	r2, #0
 800d610:	d06b      	beq.n	800d6ea <_strtod_l+0x8fa>
 800d612:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d616:	d868      	bhi.n	800d6ea <_strtod_l+0x8fa>
 800d618:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d61c:	f67f ae9d 	bls.w	800d35a <_strtod_l+0x56a>
 800d620:	4b0a      	ldr	r3, [pc, #40]	@ (800d64c <_strtod_l+0x85c>)
 800d622:	4650      	mov	r0, sl
 800d624:	4659      	mov	r1, fp
 800d626:	2200      	movs	r2, #0
 800d628:	f7f3 f81e 	bl	8000668 <__aeabi_dmul>
 800d62c:	4b08      	ldr	r3, [pc, #32]	@ (800d650 <_strtod_l+0x860>)
 800d62e:	400b      	ands	r3, r1
 800d630:	4682      	mov	sl, r0
 800d632:	468b      	mov	fp, r1
 800d634:	2b00      	cmp	r3, #0
 800d636:	f47f ae05 	bne.w	800d244 <_strtod_l+0x454>
 800d63a:	9a05      	ldr	r2, [sp, #20]
 800d63c:	2322      	movs	r3, #34	@ 0x22
 800d63e:	6013      	str	r3, [r2, #0]
 800d640:	e600      	b.n	800d244 <_strtod_l+0x454>
 800d642:	bf00      	nop
 800d644:	0800efe8 	.word	0x0800efe8
 800d648:	fffffc02 	.word	0xfffffc02
 800d64c:	39500000 	.word	0x39500000
 800d650:	7ff00000 	.word	0x7ff00000
 800d654:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d658:	d165      	bne.n	800d726 <_strtod_l+0x936>
 800d65a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d65c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d660:	b35a      	cbz	r2, 800d6ba <_strtod_l+0x8ca>
 800d662:	4a9f      	ldr	r2, [pc, #636]	@ (800d8e0 <_strtod_l+0xaf0>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d12b      	bne.n	800d6c0 <_strtod_l+0x8d0>
 800d668:	9b08      	ldr	r3, [sp, #32]
 800d66a:	4651      	mov	r1, sl
 800d66c:	b303      	cbz	r3, 800d6b0 <_strtod_l+0x8c0>
 800d66e:	4b9d      	ldr	r3, [pc, #628]	@ (800d8e4 <_strtod_l+0xaf4>)
 800d670:	465a      	mov	r2, fp
 800d672:	4013      	ands	r3, r2
 800d674:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d678:	f04f 32ff 	mov.w	r2, #4294967295
 800d67c:	d81b      	bhi.n	800d6b6 <_strtod_l+0x8c6>
 800d67e:	0d1b      	lsrs	r3, r3, #20
 800d680:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d684:	fa02 f303 	lsl.w	r3, r2, r3
 800d688:	4299      	cmp	r1, r3
 800d68a:	d119      	bne.n	800d6c0 <_strtod_l+0x8d0>
 800d68c:	4b96      	ldr	r3, [pc, #600]	@ (800d8e8 <_strtod_l+0xaf8>)
 800d68e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d690:	429a      	cmp	r2, r3
 800d692:	d102      	bne.n	800d69a <_strtod_l+0x8aa>
 800d694:	3101      	adds	r1, #1
 800d696:	f43f adca 	beq.w	800d22e <_strtod_l+0x43e>
 800d69a:	4b92      	ldr	r3, [pc, #584]	@ (800d8e4 <_strtod_l+0xaf4>)
 800d69c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d69e:	401a      	ands	r2, r3
 800d6a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d6a4:	f04f 0a00 	mov.w	sl, #0
 800d6a8:	9b08      	ldr	r3, [sp, #32]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1b8      	bne.n	800d620 <_strtod_l+0x830>
 800d6ae:	e5c9      	b.n	800d244 <_strtod_l+0x454>
 800d6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b4:	e7e8      	b.n	800d688 <_strtod_l+0x898>
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	e7e6      	b.n	800d688 <_strtod_l+0x898>
 800d6ba:	ea53 030a 	orrs.w	r3, r3, sl
 800d6be:	d0a1      	beq.n	800d604 <_strtod_l+0x814>
 800d6c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d6c2:	b1db      	cbz	r3, 800d6fc <_strtod_l+0x90c>
 800d6c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6c6:	4213      	tst	r3, r2
 800d6c8:	d0ee      	beq.n	800d6a8 <_strtod_l+0x8b8>
 800d6ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6cc:	9a08      	ldr	r2, [sp, #32]
 800d6ce:	4650      	mov	r0, sl
 800d6d0:	4659      	mov	r1, fp
 800d6d2:	b1bb      	cbz	r3, 800d704 <_strtod_l+0x914>
 800d6d4:	f7ff fb6e 	bl	800cdb4 <sulp>
 800d6d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6dc:	ec53 2b10 	vmov	r2, r3, d0
 800d6e0:	f7f2 fe0c 	bl	80002fc <__adddf3>
 800d6e4:	4682      	mov	sl, r0
 800d6e6:	468b      	mov	fp, r1
 800d6e8:	e7de      	b.n	800d6a8 <_strtod_l+0x8b8>
 800d6ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d6ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d6f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d6f6:	f04f 3aff 	mov.w	sl, #4294967295
 800d6fa:	e7d5      	b.n	800d6a8 <_strtod_l+0x8b8>
 800d6fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d6fe:	ea13 0f0a 	tst.w	r3, sl
 800d702:	e7e1      	b.n	800d6c8 <_strtod_l+0x8d8>
 800d704:	f7ff fb56 	bl	800cdb4 <sulp>
 800d708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d70c:	ec53 2b10 	vmov	r2, r3, d0
 800d710:	f7f2 fdf2 	bl	80002f8 <__aeabi_dsub>
 800d714:	2200      	movs	r2, #0
 800d716:	2300      	movs	r3, #0
 800d718:	4682      	mov	sl, r0
 800d71a:	468b      	mov	fp, r1
 800d71c:	f7f3 fa0c 	bl	8000b38 <__aeabi_dcmpeq>
 800d720:	2800      	cmp	r0, #0
 800d722:	d0c1      	beq.n	800d6a8 <_strtod_l+0x8b8>
 800d724:	e619      	b.n	800d35a <_strtod_l+0x56a>
 800d726:	4641      	mov	r1, r8
 800d728:	4620      	mov	r0, r4
 800d72a:	f7ff facd 	bl	800ccc8 <__ratio>
 800d72e:	ec57 6b10 	vmov	r6, r7, d0
 800d732:	2200      	movs	r2, #0
 800d734:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d738:	4630      	mov	r0, r6
 800d73a:	4639      	mov	r1, r7
 800d73c:	f7f3 fa10 	bl	8000b60 <__aeabi_dcmple>
 800d740:	2800      	cmp	r0, #0
 800d742:	d06f      	beq.n	800d824 <_strtod_l+0xa34>
 800d744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d746:	2b00      	cmp	r3, #0
 800d748:	d17a      	bne.n	800d840 <_strtod_l+0xa50>
 800d74a:	f1ba 0f00 	cmp.w	sl, #0
 800d74e:	d158      	bne.n	800d802 <_strtod_l+0xa12>
 800d750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d752:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d756:	2b00      	cmp	r3, #0
 800d758:	d15a      	bne.n	800d810 <_strtod_l+0xa20>
 800d75a:	4b64      	ldr	r3, [pc, #400]	@ (800d8ec <_strtod_l+0xafc>)
 800d75c:	2200      	movs	r2, #0
 800d75e:	4630      	mov	r0, r6
 800d760:	4639      	mov	r1, r7
 800d762:	f7f3 f9f3 	bl	8000b4c <__aeabi_dcmplt>
 800d766:	2800      	cmp	r0, #0
 800d768:	d159      	bne.n	800d81e <_strtod_l+0xa2e>
 800d76a:	4630      	mov	r0, r6
 800d76c:	4639      	mov	r1, r7
 800d76e:	4b60      	ldr	r3, [pc, #384]	@ (800d8f0 <_strtod_l+0xb00>)
 800d770:	2200      	movs	r2, #0
 800d772:	f7f2 ff79 	bl	8000668 <__aeabi_dmul>
 800d776:	4606      	mov	r6, r0
 800d778:	460f      	mov	r7, r1
 800d77a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d77e:	9606      	str	r6, [sp, #24]
 800d780:	9307      	str	r3, [sp, #28]
 800d782:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d786:	4d57      	ldr	r5, [pc, #348]	@ (800d8e4 <_strtod_l+0xaf4>)
 800d788:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d78c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d78e:	401d      	ands	r5, r3
 800d790:	4b58      	ldr	r3, [pc, #352]	@ (800d8f4 <_strtod_l+0xb04>)
 800d792:	429d      	cmp	r5, r3
 800d794:	f040 80b2 	bne.w	800d8fc <_strtod_l+0xb0c>
 800d798:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d79a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d79e:	ec4b ab10 	vmov	d0, sl, fp
 800d7a2:	f7ff f9c9 	bl	800cb38 <__ulp>
 800d7a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7aa:	ec51 0b10 	vmov	r0, r1, d0
 800d7ae:	f7f2 ff5b 	bl	8000668 <__aeabi_dmul>
 800d7b2:	4652      	mov	r2, sl
 800d7b4:	465b      	mov	r3, fp
 800d7b6:	f7f2 fda1 	bl	80002fc <__adddf3>
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	4949      	ldr	r1, [pc, #292]	@ (800d8e4 <_strtod_l+0xaf4>)
 800d7be:	4a4e      	ldr	r2, [pc, #312]	@ (800d8f8 <_strtod_l+0xb08>)
 800d7c0:	4019      	ands	r1, r3
 800d7c2:	4291      	cmp	r1, r2
 800d7c4:	4682      	mov	sl, r0
 800d7c6:	d942      	bls.n	800d84e <_strtod_l+0xa5e>
 800d7c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d7ca:	4b47      	ldr	r3, [pc, #284]	@ (800d8e8 <_strtod_l+0xaf8>)
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d103      	bne.n	800d7d8 <_strtod_l+0x9e8>
 800d7d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	f43f ad2b 	beq.w	800d22e <_strtod_l+0x43e>
 800d7d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d8e8 <_strtod_l+0xaf8>
 800d7dc:	f04f 3aff 	mov.w	sl, #4294967295
 800d7e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7e2:	9805      	ldr	r0, [sp, #20]
 800d7e4:	f7fe fe74 	bl	800c4d0 <_Bfree>
 800d7e8:	9805      	ldr	r0, [sp, #20]
 800d7ea:	4649      	mov	r1, r9
 800d7ec:	f7fe fe70 	bl	800c4d0 <_Bfree>
 800d7f0:	9805      	ldr	r0, [sp, #20]
 800d7f2:	4641      	mov	r1, r8
 800d7f4:	f7fe fe6c 	bl	800c4d0 <_Bfree>
 800d7f8:	9805      	ldr	r0, [sp, #20]
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	f7fe fe68 	bl	800c4d0 <_Bfree>
 800d800:	e618      	b.n	800d434 <_strtod_l+0x644>
 800d802:	f1ba 0f01 	cmp.w	sl, #1
 800d806:	d103      	bne.n	800d810 <_strtod_l+0xa20>
 800d808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f43f ada5 	beq.w	800d35a <_strtod_l+0x56a>
 800d810:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d8c0 <_strtod_l+0xad0>
 800d814:	4f35      	ldr	r7, [pc, #212]	@ (800d8ec <_strtod_l+0xafc>)
 800d816:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d81a:	2600      	movs	r6, #0
 800d81c:	e7b1      	b.n	800d782 <_strtod_l+0x992>
 800d81e:	4f34      	ldr	r7, [pc, #208]	@ (800d8f0 <_strtod_l+0xb00>)
 800d820:	2600      	movs	r6, #0
 800d822:	e7aa      	b.n	800d77a <_strtod_l+0x98a>
 800d824:	4b32      	ldr	r3, [pc, #200]	@ (800d8f0 <_strtod_l+0xb00>)
 800d826:	4630      	mov	r0, r6
 800d828:	4639      	mov	r1, r7
 800d82a:	2200      	movs	r2, #0
 800d82c:	f7f2 ff1c 	bl	8000668 <__aeabi_dmul>
 800d830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d832:	4606      	mov	r6, r0
 800d834:	460f      	mov	r7, r1
 800d836:	2b00      	cmp	r3, #0
 800d838:	d09f      	beq.n	800d77a <_strtod_l+0x98a>
 800d83a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d83e:	e7a0      	b.n	800d782 <_strtod_l+0x992>
 800d840:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d8c8 <_strtod_l+0xad8>
 800d844:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d848:	ec57 6b17 	vmov	r6, r7, d7
 800d84c:	e799      	b.n	800d782 <_strtod_l+0x992>
 800d84e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d852:	9b08      	ldr	r3, [sp, #32]
 800d854:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1c1      	bne.n	800d7e0 <_strtod_l+0x9f0>
 800d85c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d860:	0d1b      	lsrs	r3, r3, #20
 800d862:	051b      	lsls	r3, r3, #20
 800d864:	429d      	cmp	r5, r3
 800d866:	d1bb      	bne.n	800d7e0 <_strtod_l+0x9f0>
 800d868:	4630      	mov	r0, r6
 800d86a:	4639      	mov	r1, r7
 800d86c:	f7f3 fa5c 	bl	8000d28 <__aeabi_d2lz>
 800d870:	f7f2 fecc 	bl	800060c <__aeabi_l2d>
 800d874:	4602      	mov	r2, r0
 800d876:	460b      	mov	r3, r1
 800d878:	4630      	mov	r0, r6
 800d87a:	4639      	mov	r1, r7
 800d87c:	f7f2 fd3c 	bl	80002f8 <__aeabi_dsub>
 800d880:	460b      	mov	r3, r1
 800d882:	4602      	mov	r2, r0
 800d884:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d888:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d88e:	ea46 060a 	orr.w	r6, r6, sl
 800d892:	431e      	orrs	r6, r3
 800d894:	d06f      	beq.n	800d976 <_strtod_l+0xb86>
 800d896:	a30e      	add	r3, pc, #56	@ (adr r3, 800d8d0 <_strtod_l+0xae0>)
 800d898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89c:	f7f3 f956 	bl	8000b4c <__aeabi_dcmplt>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	f47f accf 	bne.w	800d244 <_strtod_l+0x454>
 800d8a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d8d8 <_strtod_l+0xae8>)
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d8b0:	f7f3 f96a 	bl	8000b88 <__aeabi_dcmpgt>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d093      	beq.n	800d7e0 <_strtod_l+0x9f0>
 800d8b8:	e4c4      	b.n	800d244 <_strtod_l+0x454>
 800d8ba:	bf00      	nop
 800d8bc:	f3af 8000 	nop.w
 800d8c0:	00000000 	.word	0x00000000
 800d8c4:	bff00000 	.word	0xbff00000
 800d8c8:	00000000 	.word	0x00000000
 800d8cc:	3ff00000 	.word	0x3ff00000
 800d8d0:	94a03595 	.word	0x94a03595
 800d8d4:	3fdfffff 	.word	0x3fdfffff
 800d8d8:	35afe535 	.word	0x35afe535
 800d8dc:	3fe00000 	.word	0x3fe00000
 800d8e0:	000fffff 	.word	0x000fffff
 800d8e4:	7ff00000 	.word	0x7ff00000
 800d8e8:	7fefffff 	.word	0x7fefffff
 800d8ec:	3ff00000 	.word	0x3ff00000
 800d8f0:	3fe00000 	.word	0x3fe00000
 800d8f4:	7fe00000 	.word	0x7fe00000
 800d8f8:	7c9fffff 	.word	0x7c9fffff
 800d8fc:	9b08      	ldr	r3, [sp, #32]
 800d8fe:	b323      	cbz	r3, 800d94a <_strtod_l+0xb5a>
 800d900:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d904:	d821      	bhi.n	800d94a <_strtod_l+0xb5a>
 800d906:	a328      	add	r3, pc, #160	@ (adr r3, 800d9a8 <_strtod_l+0xbb8>)
 800d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90c:	4630      	mov	r0, r6
 800d90e:	4639      	mov	r1, r7
 800d910:	f7f3 f926 	bl	8000b60 <__aeabi_dcmple>
 800d914:	b1a0      	cbz	r0, 800d940 <_strtod_l+0xb50>
 800d916:	4639      	mov	r1, r7
 800d918:	4630      	mov	r0, r6
 800d91a:	f7f3 f97d 	bl	8000c18 <__aeabi_d2uiz>
 800d91e:	2801      	cmp	r0, #1
 800d920:	bf38      	it	cc
 800d922:	2001      	movcc	r0, #1
 800d924:	f7f2 fe26 	bl	8000574 <__aeabi_ui2d>
 800d928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d92a:	4606      	mov	r6, r0
 800d92c:	460f      	mov	r7, r1
 800d92e:	b9fb      	cbnz	r3, 800d970 <_strtod_l+0xb80>
 800d930:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d934:	9014      	str	r0, [sp, #80]	@ 0x50
 800d936:	9315      	str	r3, [sp, #84]	@ 0x54
 800d938:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d93c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d940:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d942:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d946:	1b5b      	subs	r3, r3, r5
 800d948:	9311      	str	r3, [sp, #68]	@ 0x44
 800d94a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d94e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d952:	f7ff f8f1 	bl	800cb38 <__ulp>
 800d956:	4650      	mov	r0, sl
 800d958:	ec53 2b10 	vmov	r2, r3, d0
 800d95c:	4659      	mov	r1, fp
 800d95e:	f7f2 fe83 	bl	8000668 <__aeabi_dmul>
 800d962:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d966:	f7f2 fcc9 	bl	80002fc <__adddf3>
 800d96a:	4682      	mov	sl, r0
 800d96c:	468b      	mov	fp, r1
 800d96e:	e770      	b.n	800d852 <_strtod_l+0xa62>
 800d970:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d974:	e7e0      	b.n	800d938 <_strtod_l+0xb48>
 800d976:	a30e      	add	r3, pc, #56	@ (adr r3, 800d9b0 <_strtod_l+0xbc0>)
 800d978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97c:	f7f3 f8e6 	bl	8000b4c <__aeabi_dcmplt>
 800d980:	e798      	b.n	800d8b4 <_strtod_l+0xac4>
 800d982:	2300      	movs	r3, #0
 800d984:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d986:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d988:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d98a:	6013      	str	r3, [r2, #0]
 800d98c:	f7ff ba6d 	b.w	800ce6a <_strtod_l+0x7a>
 800d990:	2a65      	cmp	r2, #101	@ 0x65
 800d992:	f43f ab66 	beq.w	800d062 <_strtod_l+0x272>
 800d996:	2a45      	cmp	r2, #69	@ 0x45
 800d998:	f43f ab63 	beq.w	800d062 <_strtod_l+0x272>
 800d99c:	2301      	movs	r3, #1
 800d99e:	f7ff bb9e 	b.w	800d0de <_strtod_l+0x2ee>
 800d9a2:	bf00      	nop
 800d9a4:	f3af 8000 	nop.w
 800d9a8:	ffc00000 	.word	0xffc00000
 800d9ac:	41dfffff 	.word	0x41dfffff
 800d9b0:	94a03595 	.word	0x94a03595
 800d9b4:	3fcfffff 	.word	0x3fcfffff

0800d9b8 <_strtod_r>:
 800d9b8:	4b01      	ldr	r3, [pc, #4]	@ (800d9c0 <_strtod_r+0x8>)
 800d9ba:	f7ff ba19 	b.w	800cdf0 <_strtod_l>
 800d9be:	bf00      	nop
 800d9c0:	200002a4 	.word	0x200002a4

0800d9c4 <__ssputs_r>:
 800d9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c8:	688e      	ldr	r6, [r1, #8]
 800d9ca:	461f      	mov	r7, r3
 800d9cc:	42be      	cmp	r6, r7
 800d9ce:	680b      	ldr	r3, [r1, #0]
 800d9d0:	4682      	mov	sl, r0
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	4690      	mov	r8, r2
 800d9d6:	d82d      	bhi.n	800da34 <__ssputs_r+0x70>
 800d9d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d9e0:	d026      	beq.n	800da30 <__ssputs_r+0x6c>
 800d9e2:	6965      	ldr	r5, [r4, #20]
 800d9e4:	6909      	ldr	r1, [r1, #16]
 800d9e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9ea:	eba3 0901 	sub.w	r9, r3, r1
 800d9ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9f2:	1c7b      	adds	r3, r7, #1
 800d9f4:	444b      	add	r3, r9
 800d9f6:	106d      	asrs	r5, r5, #1
 800d9f8:	429d      	cmp	r5, r3
 800d9fa:	bf38      	it	cc
 800d9fc:	461d      	movcc	r5, r3
 800d9fe:	0553      	lsls	r3, r2, #21
 800da00:	d527      	bpl.n	800da52 <__ssputs_r+0x8e>
 800da02:	4629      	mov	r1, r5
 800da04:	f7fe fc98 	bl	800c338 <_malloc_r>
 800da08:	4606      	mov	r6, r0
 800da0a:	b360      	cbz	r0, 800da66 <__ssputs_r+0xa2>
 800da0c:	6921      	ldr	r1, [r4, #16]
 800da0e:	464a      	mov	r2, r9
 800da10:	f000 fa2a 	bl	800de68 <memcpy>
 800da14:	89a3      	ldrh	r3, [r4, #12]
 800da16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da1e:	81a3      	strh	r3, [r4, #12]
 800da20:	6126      	str	r6, [r4, #16]
 800da22:	6165      	str	r5, [r4, #20]
 800da24:	444e      	add	r6, r9
 800da26:	eba5 0509 	sub.w	r5, r5, r9
 800da2a:	6026      	str	r6, [r4, #0]
 800da2c:	60a5      	str	r5, [r4, #8]
 800da2e:	463e      	mov	r6, r7
 800da30:	42be      	cmp	r6, r7
 800da32:	d900      	bls.n	800da36 <__ssputs_r+0x72>
 800da34:	463e      	mov	r6, r7
 800da36:	6820      	ldr	r0, [r4, #0]
 800da38:	4632      	mov	r2, r6
 800da3a:	4641      	mov	r1, r8
 800da3c:	f000 f9d8 	bl	800ddf0 <memmove>
 800da40:	68a3      	ldr	r3, [r4, #8]
 800da42:	1b9b      	subs	r3, r3, r6
 800da44:	60a3      	str	r3, [r4, #8]
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	4433      	add	r3, r6
 800da4a:	6023      	str	r3, [r4, #0]
 800da4c:	2000      	movs	r0, #0
 800da4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da52:	462a      	mov	r2, r5
 800da54:	f000 fd85 	bl	800e562 <_realloc_r>
 800da58:	4606      	mov	r6, r0
 800da5a:	2800      	cmp	r0, #0
 800da5c:	d1e0      	bne.n	800da20 <__ssputs_r+0x5c>
 800da5e:	6921      	ldr	r1, [r4, #16]
 800da60:	4650      	mov	r0, sl
 800da62:	f7fe fbf5 	bl	800c250 <_free_r>
 800da66:	230c      	movs	r3, #12
 800da68:	f8ca 3000 	str.w	r3, [sl]
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da72:	81a3      	strh	r3, [r4, #12]
 800da74:	f04f 30ff 	mov.w	r0, #4294967295
 800da78:	e7e9      	b.n	800da4e <__ssputs_r+0x8a>
	...

0800da7c <_svfiprintf_r>:
 800da7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da80:	4698      	mov	r8, r3
 800da82:	898b      	ldrh	r3, [r1, #12]
 800da84:	061b      	lsls	r3, r3, #24
 800da86:	b09d      	sub	sp, #116	@ 0x74
 800da88:	4607      	mov	r7, r0
 800da8a:	460d      	mov	r5, r1
 800da8c:	4614      	mov	r4, r2
 800da8e:	d510      	bpl.n	800dab2 <_svfiprintf_r+0x36>
 800da90:	690b      	ldr	r3, [r1, #16]
 800da92:	b973      	cbnz	r3, 800dab2 <_svfiprintf_r+0x36>
 800da94:	2140      	movs	r1, #64	@ 0x40
 800da96:	f7fe fc4f 	bl	800c338 <_malloc_r>
 800da9a:	6028      	str	r0, [r5, #0]
 800da9c:	6128      	str	r0, [r5, #16]
 800da9e:	b930      	cbnz	r0, 800daae <_svfiprintf_r+0x32>
 800daa0:	230c      	movs	r3, #12
 800daa2:	603b      	str	r3, [r7, #0]
 800daa4:	f04f 30ff 	mov.w	r0, #4294967295
 800daa8:	b01d      	add	sp, #116	@ 0x74
 800daaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daae:	2340      	movs	r3, #64	@ 0x40
 800dab0:	616b      	str	r3, [r5, #20]
 800dab2:	2300      	movs	r3, #0
 800dab4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dab6:	2320      	movs	r3, #32
 800dab8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dabc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dac0:	2330      	movs	r3, #48	@ 0x30
 800dac2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc60 <_svfiprintf_r+0x1e4>
 800dac6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800daca:	f04f 0901 	mov.w	r9, #1
 800dace:	4623      	mov	r3, r4
 800dad0:	469a      	mov	sl, r3
 800dad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dad6:	b10a      	cbz	r2, 800dadc <_svfiprintf_r+0x60>
 800dad8:	2a25      	cmp	r2, #37	@ 0x25
 800dada:	d1f9      	bne.n	800dad0 <_svfiprintf_r+0x54>
 800dadc:	ebba 0b04 	subs.w	fp, sl, r4
 800dae0:	d00b      	beq.n	800dafa <_svfiprintf_r+0x7e>
 800dae2:	465b      	mov	r3, fp
 800dae4:	4622      	mov	r2, r4
 800dae6:	4629      	mov	r1, r5
 800dae8:	4638      	mov	r0, r7
 800daea:	f7ff ff6b 	bl	800d9c4 <__ssputs_r>
 800daee:	3001      	adds	r0, #1
 800daf0:	f000 80a7 	beq.w	800dc42 <_svfiprintf_r+0x1c6>
 800daf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800daf6:	445a      	add	r2, fp
 800daf8:	9209      	str	r2, [sp, #36]	@ 0x24
 800dafa:	f89a 3000 	ldrb.w	r3, [sl]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	f000 809f 	beq.w	800dc42 <_svfiprintf_r+0x1c6>
 800db04:	2300      	movs	r3, #0
 800db06:	f04f 32ff 	mov.w	r2, #4294967295
 800db0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db0e:	f10a 0a01 	add.w	sl, sl, #1
 800db12:	9304      	str	r3, [sp, #16]
 800db14:	9307      	str	r3, [sp, #28]
 800db16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800db1c:	4654      	mov	r4, sl
 800db1e:	2205      	movs	r2, #5
 800db20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db24:	484e      	ldr	r0, [pc, #312]	@ (800dc60 <_svfiprintf_r+0x1e4>)
 800db26:	f7f2 fb8b 	bl	8000240 <memchr>
 800db2a:	9a04      	ldr	r2, [sp, #16]
 800db2c:	b9d8      	cbnz	r0, 800db66 <_svfiprintf_r+0xea>
 800db2e:	06d0      	lsls	r0, r2, #27
 800db30:	bf44      	itt	mi
 800db32:	2320      	movmi	r3, #32
 800db34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db38:	0711      	lsls	r1, r2, #28
 800db3a:	bf44      	itt	mi
 800db3c:	232b      	movmi	r3, #43	@ 0x2b
 800db3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db42:	f89a 3000 	ldrb.w	r3, [sl]
 800db46:	2b2a      	cmp	r3, #42	@ 0x2a
 800db48:	d015      	beq.n	800db76 <_svfiprintf_r+0xfa>
 800db4a:	9a07      	ldr	r2, [sp, #28]
 800db4c:	4654      	mov	r4, sl
 800db4e:	2000      	movs	r0, #0
 800db50:	f04f 0c0a 	mov.w	ip, #10
 800db54:	4621      	mov	r1, r4
 800db56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db5a:	3b30      	subs	r3, #48	@ 0x30
 800db5c:	2b09      	cmp	r3, #9
 800db5e:	d94b      	bls.n	800dbf8 <_svfiprintf_r+0x17c>
 800db60:	b1b0      	cbz	r0, 800db90 <_svfiprintf_r+0x114>
 800db62:	9207      	str	r2, [sp, #28]
 800db64:	e014      	b.n	800db90 <_svfiprintf_r+0x114>
 800db66:	eba0 0308 	sub.w	r3, r0, r8
 800db6a:	fa09 f303 	lsl.w	r3, r9, r3
 800db6e:	4313      	orrs	r3, r2
 800db70:	9304      	str	r3, [sp, #16]
 800db72:	46a2      	mov	sl, r4
 800db74:	e7d2      	b.n	800db1c <_svfiprintf_r+0xa0>
 800db76:	9b03      	ldr	r3, [sp, #12]
 800db78:	1d19      	adds	r1, r3, #4
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	9103      	str	r1, [sp, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	bfbb      	ittet	lt
 800db82:	425b      	neglt	r3, r3
 800db84:	f042 0202 	orrlt.w	r2, r2, #2
 800db88:	9307      	strge	r3, [sp, #28]
 800db8a:	9307      	strlt	r3, [sp, #28]
 800db8c:	bfb8      	it	lt
 800db8e:	9204      	strlt	r2, [sp, #16]
 800db90:	7823      	ldrb	r3, [r4, #0]
 800db92:	2b2e      	cmp	r3, #46	@ 0x2e
 800db94:	d10a      	bne.n	800dbac <_svfiprintf_r+0x130>
 800db96:	7863      	ldrb	r3, [r4, #1]
 800db98:	2b2a      	cmp	r3, #42	@ 0x2a
 800db9a:	d132      	bne.n	800dc02 <_svfiprintf_r+0x186>
 800db9c:	9b03      	ldr	r3, [sp, #12]
 800db9e:	1d1a      	adds	r2, r3, #4
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	9203      	str	r2, [sp, #12]
 800dba4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dba8:	3402      	adds	r4, #2
 800dbaa:	9305      	str	r3, [sp, #20]
 800dbac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc70 <_svfiprintf_r+0x1f4>
 800dbb0:	7821      	ldrb	r1, [r4, #0]
 800dbb2:	2203      	movs	r2, #3
 800dbb4:	4650      	mov	r0, sl
 800dbb6:	f7f2 fb43 	bl	8000240 <memchr>
 800dbba:	b138      	cbz	r0, 800dbcc <_svfiprintf_r+0x150>
 800dbbc:	9b04      	ldr	r3, [sp, #16]
 800dbbe:	eba0 000a 	sub.w	r0, r0, sl
 800dbc2:	2240      	movs	r2, #64	@ 0x40
 800dbc4:	4082      	lsls	r2, r0
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	3401      	adds	r4, #1
 800dbca:	9304      	str	r3, [sp, #16]
 800dbcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd0:	4824      	ldr	r0, [pc, #144]	@ (800dc64 <_svfiprintf_r+0x1e8>)
 800dbd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbd6:	2206      	movs	r2, #6
 800dbd8:	f7f2 fb32 	bl	8000240 <memchr>
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	d036      	beq.n	800dc4e <_svfiprintf_r+0x1d2>
 800dbe0:	4b21      	ldr	r3, [pc, #132]	@ (800dc68 <_svfiprintf_r+0x1ec>)
 800dbe2:	bb1b      	cbnz	r3, 800dc2c <_svfiprintf_r+0x1b0>
 800dbe4:	9b03      	ldr	r3, [sp, #12]
 800dbe6:	3307      	adds	r3, #7
 800dbe8:	f023 0307 	bic.w	r3, r3, #7
 800dbec:	3308      	adds	r3, #8
 800dbee:	9303      	str	r3, [sp, #12]
 800dbf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf2:	4433      	add	r3, r6
 800dbf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbf6:	e76a      	b.n	800dace <_svfiprintf_r+0x52>
 800dbf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbfc:	460c      	mov	r4, r1
 800dbfe:	2001      	movs	r0, #1
 800dc00:	e7a8      	b.n	800db54 <_svfiprintf_r+0xd8>
 800dc02:	2300      	movs	r3, #0
 800dc04:	3401      	adds	r4, #1
 800dc06:	9305      	str	r3, [sp, #20]
 800dc08:	4619      	mov	r1, r3
 800dc0a:	f04f 0c0a 	mov.w	ip, #10
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc14:	3a30      	subs	r2, #48	@ 0x30
 800dc16:	2a09      	cmp	r2, #9
 800dc18:	d903      	bls.n	800dc22 <_svfiprintf_r+0x1a6>
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d0c6      	beq.n	800dbac <_svfiprintf_r+0x130>
 800dc1e:	9105      	str	r1, [sp, #20]
 800dc20:	e7c4      	b.n	800dbac <_svfiprintf_r+0x130>
 800dc22:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc26:	4604      	mov	r4, r0
 800dc28:	2301      	movs	r3, #1
 800dc2a:	e7f0      	b.n	800dc0e <_svfiprintf_r+0x192>
 800dc2c:	ab03      	add	r3, sp, #12
 800dc2e:	9300      	str	r3, [sp, #0]
 800dc30:	462a      	mov	r2, r5
 800dc32:	4b0e      	ldr	r3, [pc, #56]	@ (800dc6c <_svfiprintf_r+0x1f0>)
 800dc34:	a904      	add	r1, sp, #16
 800dc36:	4638      	mov	r0, r7
 800dc38:	f7fc fc98 	bl	800a56c <_printf_float>
 800dc3c:	1c42      	adds	r2, r0, #1
 800dc3e:	4606      	mov	r6, r0
 800dc40:	d1d6      	bne.n	800dbf0 <_svfiprintf_r+0x174>
 800dc42:	89ab      	ldrh	r3, [r5, #12]
 800dc44:	065b      	lsls	r3, r3, #25
 800dc46:	f53f af2d 	bmi.w	800daa4 <_svfiprintf_r+0x28>
 800dc4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc4c:	e72c      	b.n	800daa8 <_svfiprintf_r+0x2c>
 800dc4e:	ab03      	add	r3, sp, #12
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	462a      	mov	r2, r5
 800dc54:	4b05      	ldr	r3, [pc, #20]	@ (800dc6c <_svfiprintf_r+0x1f0>)
 800dc56:	a904      	add	r1, sp, #16
 800dc58:	4638      	mov	r0, r7
 800dc5a:	f7fc ff1f 	bl	800aa9c <_printf_i>
 800dc5e:	e7ed      	b.n	800dc3c <_svfiprintf_r+0x1c0>
 800dc60:	0800f010 	.word	0x0800f010
 800dc64:	0800f01a 	.word	0x0800f01a
 800dc68:	0800a56d 	.word	0x0800a56d
 800dc6c:	0800d9c5 	.word	0x0800d9c5
 800dc70:	0800f016 	.word	0x0800f016

0800dc74 <__sflush_r>:
 800dc74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7c:	0716      	lsls	r6, r2, #28
 800dc7e:	4605      	mov	r5, r0
 800dc80:	460c      	mov	r4, r1
 800dc82:	d454      	bmi.n	800dd2e <__sflush_r+0xba>
 800dc84:	684b      	ldr	r3, [r1, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	dc02      	bgt.n	800dc90 <__sflush_r+0x1c>
 800dc8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	dd48      	ble.n	800dd22 <__sflush_r+0xae>
 800dc90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc92:	2e00      	cmp	r6, #0
 800dc94:	d045      	beq.n	800dd22 <__sflush_r+0xae>
 800dc96:	2300      	movs	r3, #0
 800dc98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc9c:	682f      	ldr	r7, [r5, #0]
 800dc9e:	6a21      	ldr	r1, [r4, #32]
 800dca0:	602b      	str	r3, [r5, #0]
 800dca2:	d030      	beq.n	800dd06 <__sflush_r+0x92>
 800dca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dca6:	89a3      	ldrh	r3, [r4, #12]
 800dca8:	0759      	lsls	r1, r3, #29
 800dcaa:	d505      	bpl.n	800dcb8 <__sflush_r+0x44>
 800dcac:	6863      	ldr	r3, [r4, #4]
 800dcae:	1ad2      	subs	r2, r2, r3
 800dcb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dcb2:	b10b      	cbz	r3, 800dcb8 <__sflush_r+0x44>
 800dcb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dcb6:	1ad2      	subs	r2, r2, r3
 800dcb8:	2300      	movs	r3, #0
 800dcba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dcbc:	6a21      	ldr	r1, [r4, #32]
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	47b0      	blx	r6
 800dcc2:	1c43      	adds	r3, r0, #1
 800dcc4:	89a3      	ldrh	r3, [r4, #12]
 800dcc6:	d106      	bne.n	800dcd6 <__sflush_r+0x62>
 800dcc8:	6829      	ldr	r1, [r5, #0]
 800dcca:	291d      	cmp	r1, #29
 800dccc:	d82b      	bhi.n	800dd26 <__sflush_r+0xb2>
 800dcce:	4a2a      	ldr	r2, [pc, #168]	@ (800dd78 <__sflush_r+0x104>)
 800dcd0:	410a      	asrs	r2, r1
 800dcd2:	07d6      	lsls	r6, r2, #31
 800dcd4:	d427      	bmi.n	800dd26 <__sflush_r+0xb2>
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	6062      	str	r2, [r4, #4]
 800dcda:	04d9      	lsls	r1, r3, #19
 800dcdc:	6922      	ldr	r2, [r4, #16]
 800dcde:	6022      	str	r2, [r4, #0]
 800dce0:	d504      	bpl.n	800dcec <__sflush_r+0x78>
 800dce2:	1c42      	adds	r2, r0, #1
 800dce4:	d101      	bne.n	800dcea <__sflush_r+0x76>
 800dce6:	682b      	ldr	r3, [r5, #0]
 800dce8:	b903      	cbnz	r3, 800dcec <__sflush_r+0x78>
 800dcea:	6560      	str	r0, [r4, #84]	@ 0x54
 800dcec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcee:	602f      	str	r7, [r5, #0]
 800dcf0:	b1b9      	cbz	r1, 800dd22 <__sflush_r+0xae>
 800dcf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcf6:	4299      	cmp	r1, r3
 800dcf8:	d002      	beq.n	800dd00 <__sflush_r+0x8c>
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	f7fe faa8 	bl	800c250 <_free_r>
 800dd00:	2300      	movs	r3, #0
 800dd02:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd04:	e00d      	b.n	800dd22 <__sflush_r+0xae>
 800dd06:	2301      	movs	r3, #1
 800dd08:	4628      	mov	r0, r5
 800dd0a:	47b0      	blx	r6
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	1c50      	adds	r0, r2, #1
 800dd10:	d1c9      	bne.n	800dca6 <__sflush_r+0x32>
 800dd12:	682b      	ldr	r3, [r5, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d0c6      	beq.n	800dca6 <__sflush_r+0x32>
 800dd18:	2b1d      	cmp	r3, #29
 800dd1a:	d001      	beq.n	800dd20 <__sflush_r+0xac>
 800dd1c:	2b16      	cmp	r3, #22
 800dd1e:	d11e      	bne.n	800dd5e <__sflush_r+0xea>
 800dd20:	602f      	str	r7, [r5, #0]
 800dd22:	2000      	movs	r0, #0
 800dd24:	e022      	b.n	800dd6c <__sflush_r+0xf8>
 800dd26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd2a:	b21b      	sxth	r3, r3
 800dd2c:	e01b      	b.n	800dd66 <__sflush_r+0xf2>
 800dd2e:	690f      	ldr	r7, [r1, #16]
 800dd30:	2f00      	cmp	r7, #0
 800dd32:	d0f6      	beq.n	800dd22 <__sflush_r+0xae>
 800dd34:	0793      	lsls	r3, r2, #30
 800dd36:	680e      	ldr	r6, [r1, #0]
 800dd38:	bf08      	it	eq
 800dd3a:	694b      	ldreq	r3, [r1, #20]
 800dd3c:	600f      	str	r7, [r1, #0]
 800dd3e:	bf18      	it	ne
 800dd40:	2300      	movne	r3, #0
 800dd42:	eba6 0807 	sub.w	r8, r6, r7
 800dd46:	608b      	str	r3, [r1, #8]
 800dd48:	f1b8 0f00 	cmp.w	r8, #0
 800dd4c:	dde9      	ble.n	800dd22 <__sflush_r+0xae>
 800dd4e:	6a21      	ldr	r1, [r4, #32]
 800dd50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd52:	4643      	mov	r3, r8
 800dd54:	463a      	mov	r2, r7
 800dd56:	4628      	mov	r0, r5
 800dd58:	47b0      	blx	r6
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	dc08      	bgt.n	800dd70 <__sflush_r+0xfc>
 800dd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd66:	81a3      	strh	r3, [r4, #12]
 800dd68:	f04f 30ff 	mov.w	r0, #4294967295
 800dd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd70:	4407      	add	r7, r0
 800dd72:	eba8 0800 	sub.w	r8, r8, r0
 800dd76:	e7e7      	b.n	800dd48 <__sflush_r+0xd4>
 800dd78:	dfbffffe 	.word	0xdfbffffe

0800dd7c <_fflush_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	690b      	ldr	r3, [r1, #16]
 800dd80:	4605      	mov	r5, r0
 800dd82:	460c      	mov	r4, r1
 800dd84:	b913      	cbnz	r3, 800dd8c <_fflush_r+0x10>
 800dd86:	2500      	movs	r5, #0
 800dd88:	4628      	mov	r0, r5
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	b118      	cbz	r0, 800dd96 <_fflush_r+0x1a>
 800dd8e:	6a03      	ldr	r3, [r0, #32]
 800dd90:	b90b      	cbnz	r3, 800dd96 <_fflush_r+0x1a>
 800dd92:	f7fd fa43 	bl	800b21c <__sinit>
 800dd96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0f3      	beq.n	800dd86 <_fflush_r+0xa>
 800dd9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dda0:	07d0      	lsls	r0, r2, #31
 800dda2:	d404      	bmi.n	800ddae <_fflush_r+0x32>
 800dda4:	0599      	lsls	r1, r3, #22
 800dda6:	d402      	bmi.n	800ddae <_fflush_r+0x32>
 800dda8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddaa:	f7fd fbde 	bl	800b56a <__retarget_lock_acquire_recursive>
 800ddae:	4628      	mov	r0, r5
 800ddb0:	4621      	mov	r1, r4
 800ddb2:	f7ff ff5f 	bl	800dc74 <__sflush_r>
 800ddb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddb8:	07da      	lsls	r2, r3, #31
 800ddba:	4605      	mov	r5, r0
 800ddbc:	d4e4      	bmi.n	800dd88 <_fflush_r+0xc>
 800ddbe:	89a3      	ldrh	r3, [r4, #12]
 800ddc0:	059b      	lsls	r3, r3, #22
 800ddc2:	d4e1      	bmi.n	800dd88 <_fflush_r+0xc>
 800ddc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddc6:	f7fd fbd1 	bl	800b56c <__retarget_lock_release_recursive>
 800ddca:	e7dd      	b.n	800dd88 <_fflush_r+0xc>

0800ddcc <fiprintf>:
 800ddcc:	b40e      	push	{r1, r2, r3}
 800ddce:	b503      	push	{r0, r1, lr}
 800ddd0:	4601      	mov	r1, r0
 800ddd2:	ab03      	add	r3, sp, #12
 800ddd4:	4805      	ldr	r0, [pc, #20]	@ (800ddec <fiprintf+0x20>)
 800ddd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddda:	6800      	ldr	r0, [r0, #0]
 800dddc:	9301      	str	r3, [sp, #4]
 800ddde:	f000 fc25 	bl	800e62c <_vfiprintf_r>
 800dde2:	b002      	add	sp, #8
 800dde4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dde8:	b003      	add	sp, #12
 800ddea:	4770      	bx	lr
 800ddec:	20000254 	.word	0x20000254

0800ddf0 <memmove>:
 800ddf0:	4288      	cmp	r0, r1
 800ddf2:	b510      	push	{r4, lr}
 800ddf4:	eb01 0402 	add.w	r4, r1, r2
 800ddf8:	d902      	bls.n	800de00 <memmove+0x10>
 800ddfa:	4284      	cmp	r4, r0
 800ddfc:	4623      	mov	r3, r4
 800ddfe:	d807      	bhi.n	800de10 <memmove+0x20>
 800de00:	1e43      	subs	r3, r0, #1
 800de02:	42a1      	cmp	r1, r4
 800de04:	d008      	beq.n	800de18 <memmove+0x28>
 800de06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de0e:	e7f8      	b.n	800de02 <memmove+0x12>
 800de10:	4402      	add	r2, r0
 800de12:	4601      	mov	r1, r0
 800de14:	428a      	cmp	r2, r1
 800de16:	d100      	bne.n	800de1a <memmove+0x2a>
 800de18:	bd10      	pop	{r4, pc}
 800de1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de22:	e7f7      	b.n	800de14 <memmove+0x24>

0800de24 <strncmp>:
 800de24:	b510      	push	{r4, lr}
 800de26:	b16a      	cbz	r2, 800de44 <strncmp+0x20>
 800de28:	3901      	subs	r1, #1
 800de2a:	1884      	adds	r4, r0, r2
 800de2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800de34:	429a      	cmp	r2, r3
 800de36:	d103      	bne.n	800de40 <strncmp+0x1c>
 800de38:	42a0      	cmp	r0, r4
 800de3a:	d001      	beq.n	800de40 <strncmp+0x1c>
 800de3c:	2a00      	cmp	r2, #0
 800de3e:	d1f5      	bne.n	800de2c <strncmp+0x8>
 800de40:	1ad0      	subs	r0, r2, r3
 800de42:	bd10      	pop	{r4, pc}
 800de44:	4610      	mov	r0, r2
 800de46:	e7fc      	b.n	800de42 <strncmp+0x1e>

0800de48 <_sbrk_r>:
 800de48:	b538      	push	{r3, r4, r5, lr}
 800de4a:	4d06      	ldr	r5, [pc, #24]	@ (800de64 <_sbrk_r+0x1c>)
 800de4c:	2300      	movs	r3, #0
 800de4e:	4604      	mov	r4, r0
 800de50:	4608      	mov	r0, r1
 800de52:	602b      	str	r3, [r5, #0]
 800de54:	f7f4 fc66 	bl	8002724 <_sbrk>
 800de58:	1c43      	adds	r3, r0, #1
 800de5a:	d102      	bne.n	800de62 <_sbrk_r+0x1a>
 800de5c:	682b      	ldr	r3, [r5, #0]
 800de5e:	b103      	cbz	r3, 800de62 <_sbrk_r+0x1a>
 800de60:	6023      	str	r3, [r4, #0]
 800de62:	bd38      	pop	{r3, r4, r5, pc}
 800de64:	2000090c 	.word	0x2000090c

0800de68 <memcpy>:
 800de68:	440a      	add	r2, r1
 800de6a:	4291      	cmp	r1, r2
 800de6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800de70:	d100      	bne.n	800de74 <memcpy+0xc>
 800de72:	4770      	bx	lr
 800de74:	b510      	push	{r4, lr}
 800de76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de7e:	4291      	cmp	r1, r2
 800de80:	d1f9      	bne.n	800de76 <memcpy+0xe>
 800de82:	bd10      	pop	{r4, pc}
 800de84:	0000      	movs	r0, r0
	...

0800de88 <nan>:
 800de88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de90 <nan+0x8>
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	00000000 	.word	0x00000000
 800de94:	7ff80000 	.word	0x7ff80000

0800de98 <abort>:
 800de98:	b508      	push	{r3, lr}
 800de9a:	2006      	movs	r0, #6
 800de9c:	f000 fd9a 	bl	800e9d4 <raise>
 800dea0:	2001      	movs	r0, #1
 800dea2:	f7f4 fbc7 	bl	8002634 <_exit>

0800dea6 <_calloc_r>:
 800dea6:	b570      	push	{r4, r5, r6, lr}
 800dea8:	fba1 5402 	umull	r5, r4, r1, r2
 800deac:	b93c      	cbnz	r4, 800debe <_calloc_r+0x18>
 800deae:	4629      	mov	r1, r5
 800deb0:	f7fe fa42 	bl	800c338 <_malloc_r>
 800deb4:	4606      	mov	r6, r0
 800deb6:	b928      	cbnz	r0, 800dec4 <_calloc_r+0x1e>
 800deb8:	2600      	movs	r6, #0
 800deba:	4630      	mov	r0, r6
 800debc:	bd70      	pop	{r4, r5, r6, pc}
 800debe:	220c      	movs	r2, #12
 800dec0:	6002      	str	r2, [r0, #0]
 800dec2:	e7f9      	b.n	800deb8 <_calloc_r+0x12>
 800dec4:	462a      	mov	r2, r5
 800dec6:	4621      	mov	r1, r4
 800dec8:	f7fd fa75 	bl	800b3b6 <memset>
 800decc:	e7f5      	b.n	800deba <_calloc_r+0x14>

0800dece <rshift>:
 800dece:	6903      	ldr	r3, [r0, #16]
 800ded0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ded4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ded8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dedc:	f100 0414 	add.w	r4, r0, #20
 800dee0:	dd45      	ble.n	800df6e <rshift+0xa0>
 800dee2:	f011 011f 	ands.w	r1, r1, #31
 800dee6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800deea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800deee:	d10c      	bne.n	800df0a <rshift+0x3c>
 800def0:	f100 0710 	add.w	r7, r0, #16
 800def4:	4629      	mov	r1, r5
 800def6:	42b1      	cmp	r1, r6
 800def8:	d334      	bcc.n	800df64 <rshift+0x96>
 800defa:	1a9b      	subs	r3, r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	1eea      	subs	r2, r5, #3
 800df00:	4296      	cmp	r6, r2
 800df02:	bf38      	it	cc
 800df04:	2300      	movcc	r3, #0
 800df06:	4423      	add	r3, r4
 800df08:	e015      	b.n	800df36 <rshift+0x68>
 800df0a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800df0e:	f1c1 0820 	rsb	r8, r1, #32
 800df12:	40cf      	lsrs	r7, r1
 800df14:	f105 0e04 	add.w	lr, r5, #4
 800df18:	46a1      	mov	r9, r4
 800df1a:	4576      	cmp	r6, lr
 800df1c:	46f4      	mov	ip, lr
 800df1e:	d815      	bhi.n	800df4c <rshift+0x7e>
 800df20:	1a9a      	subs	r2, r3, r2
 800df22:	0092      	lsls	r2, r2, #2
 800df24:	3a04      	subs	r2, #4
 800df26:	3501      	adds	r5, #1
 800df28:	42ae      	cmp	r6, r5
 800df2a:	bf38      	it	cc
 800df2c:	2200      	movcc	r2, #0
 800df2e:	18a3      	adds	r3, r4, r2
 800df30:	50a7      	str	r7, [r4, r2]
 800df32:	b107      	cbz	r7, 800df36 <rshift+0x68>
 800df34:	3304      	adds	r3, #4
 800df36:	1b1a      	subs	r2, r3, r4
 800df38:	42a3      	cmp	r3, r4
 800df3a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800df3e:	bf08      	it	eq
 800df40:	2300      	moveq	r3, #0
 800df42:	6102      	str	r2, [r0, #16]
 800df44:	bf08      	it	eq
 800df46:	6143      	streq	r3, [r0, #20]
 800df48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df4c:	f8dc c000 	ldr.w	ip, [ip]
 800df50:	fa0c fc08 	lsl.w	ip, ip, r8
 800df54:	ea4c 0707 	orr.w	r7, ip, r7
 800df58:	f849 7b04 	str.w	r7, [r9], #4
 800df5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800df60:	40cf      	lsrs	r7, r1
 800df62:	e7da      	b.n	800df1a <rshift+0x4c>
 800df64:	f851 cb04 	ldr.w	ip, [r1], #4
 800df68:	f847 cf04 	str.w	ip, [r7, #4]!
 800df6c:	e7c3      	b.n	800def6 <rshift+0x28>
 800df6e:	4623      	mov	r3, r4
 800df70:	e7e1      	b.n	800df36 <rshift+0x68>

0800df72 <__hexdig_fun>:
 800df72:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800df76:	2b09      	cmp	r3, #9
 800df78:	d802      	bhi.n	800df80 <__hexdig_fun+0xe>
 800df7a:	3820      	subs	r0, #32
 800df7c:	b2c0      	uxtb	r0, r0
 800df7e:	4770      	bx	lr
 800df80:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800df84:	2b05      	cmp	r3, #5
 800df86:	d801      	bhi.n	800df8c <__hexdig_fun+0x1a>
 800df88:	3847      	subs	r0, #71	@ 0x47
 800df8a:	e7f7      	b.n	800df7c <__hexdig_fun+0xa>
 800df8c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800df90:	2b05      	cmp	r3, #5
 800df92:	d801      	bhi.n	800df98 <__hexdig_fun+0x26>
 800df94:	3827      	subs	r0, #39	@ 0x27
 800df96:	e7f1      	b.n	800df7c <__hexdig_fun+0xa>
 800df98:	2000      	movs	r0, #0
 800df9a:	4770      	bx	lr

0800df9c <__gethex>:
 800df9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa0:	b085      	sub	sp, #20
 800dfa2:	468a      	mov	sl, r1
 800dfa4:	9302      	str	r3, [sp, #8]
 800dfa6:	680b      	ldr	r3, [r1, #0]
 800dfa8:	9001      	str	r0, [sp, #4]
 800dfaa:	4690      	mov	r8, r2
 800dfac:	1c9c      	adds	r4, r3, #2
 800dfae:	46a1      	mov	r9, r4
 800dfb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dfb4:	2830      	cmp	r0, #48	@ 0x30
 800dfb6:	d0fa      	beq.n	800dfae <__gethex+0x12>
 800dfb8:	eba9 0303 	sub.w	r3, r9, r3
 800dfbc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dfc0:	f7ff ffd7 	bl	800df72 <__hexdig_fun>
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d168      	bne.n	800e09c <__gethex+0x100>
 800dfca:	49a0      	ldr	r1, [pc, #640]	@ (800e24c <__gethex+0x2b0>)
 800dfcc:	2201      	movs	r2, #1
 800dfce:	4648      	mov	r0, r9
 800dfd0:	f7ff ff28 	bl	800de24 <strncmp>
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d167      	bne.n	800e0aa <__gethex+0x10e>
 800dfda:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dfde:	4626      	mov	r6, r4
 800dfe0:	f7ff ffc7 	bl	800df72 <__hexdig_fun>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d062      	beq.n	800e0ae <__gethex+0x112>
 800dfe8:	4623      	mov	r3, r4
 800dfea:	7818      	ldrb	r0, [r3, #0]
 800dfec:	2830      	cmp	r0, #48	@ 0x30
 800dfee:	4699      	mov	r9, r3
 800dff0:	f103 0301 	add.w	r3, r3, #1
 800dff4:	d0f9      	beq.n	800dfea <__gethex+0x4e>
 800dff6:	f7ff ffbc 	bl	800df72 <__hexdig_fun>
 800dffa:	fab0 f580 	clz	r5, r0
 800dffe:	096d      	lsrs	r5, r5, #5
 800e000:	f04f 0b01 	mov.w	fp, #1
 800e004:	464a      	mov	r2, r9
 800e006:	4616      	mov	r6, r2
 800e008:	3201      	adds	r2, #1
 800e00a:	7830      	ldrb	r0, [r6, #0]
 800e00c:	f7ff ffb1 	bl	800df72 <__hexdig_fun>
 800e010:	2800      	cmp	r0, #0
 800e012:	d1f8      	bne.n	800e006 <__gethex+0x6a>
 800e014:	498d      	ldr	r1, [pc, #564]	@ (800e24c <__gethex+0x2b0>)
 800e016:	2201      	movs	r2, #1
 800e018:	4630      	mov	r0, r6
 800e01a:	f7ff ff03 	bl	800de24 <strncmp>
 800e01e:	2800      	cmp	r0, #0
 800e020:	d13f      	bne.n	800e0a2 <__gethex+0x106>
 800e022:	b944      	cbnz	r4, 800e036 <__gethex+0x9a>
 800e024:	1c74      	adds	r4, r6, #1
 800e026:	4622      	mov	r2, r4
 800e028:	4616      	mov	r6, r2
 800e02a:	3201      	adds	r2, #1
 800e02c:	7830      	ldrb	r0, [r6, #0]
 800e02e:	f7ff ffa0 	bl	800df72 <__hexdig_fun>
 800e032:	2800      	cmp	r0, #0
 800e034:	d1f8      	bne.n	800e028 <__gethex+0x8c>
 800e036:	1ba4      	subs	r4, r4, r6
 800e038:	00a7      	lsls	r7, r4, #2
 800e03a:	7833      	ldrb	r3, [r6, #0]
 800e03c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e040:	2b50      	cmp	r3, #80	@ 0x50
 800e042:	d13e      	bne.n	800e0c2 <__gethex+0x126>
 800e044:	7873      	ldrb	r3, [r6, #1]
 800e046:	2b2b      	cmp	r3, #43	@ 0x2b
 800e048:	d033      	beq.n	800e0b2 <__gethex+0x116>
 800e04a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e04c:	d034      	beq.n	800e0b8 <__gethex+0x11c>
 800e04e:	1c71      	adds	r1, r6, #1
 800e050:	2400      	movs	r4, #0
 800e052:	7808      	ldrb	r0, [r1, #0]
 800e054:	f7ff ff8d 	bl	800df72 <__hexdig_fun>
 800e058:	1e43      	subs	r3, r0, #1
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	2b18      	cmp	r3, #24
 800e05e:	d830      	bhi.n	800e0c2 <__gethex+0x126>
 800e060:	f1a0 0210 	sub.w	r2, r0, #16
 800e064:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e068:	f7ff ff83 	bl	800df72 <__hexdig_fun>
 800e06c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e070:	fa5f fc8c 	uxtb.w	ip, ip
 800e074:	f1bc 0f18 	cmp.w	ip, #24
 800e078:	f04f 030a 	mov.w	r3, #10
 800e07c:	d91e      	bls.n	800e0bc <__gethex+0x120>
 800e07e:	b104      	cbz	r4, 800e082 <__gethex+0xe6>
 800e080:	4252      	negs	r2, r2
 800e082:	4417      	add	r7, r2
 800e084:	f8ca 1000 	str.w	r1, [sl]
 800e088:	b1ed      	cbz	r5, 800e0c6 <__gethex+0x12a>
 800e08a:	f1bb 0f00 	cmp.w	fp, #0
 800e08e:	bf0c      	ite	eq
 800e090:	2506      	moveq	r5, #6
 800e092:	2500      	movne	r5, #0
 800e094:	4628      	mov	r0, r5
 800e096:	b005      	add	sp, #20
 800e098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e09c:	2500      	movs	r5, #0
 800e09e:	462c      	mov	r4, r5
 800e0a0:	e7b0      	b.n	800e004 <__gethex+0x68>
 800e0a2:	2c00      	cmp	r4, #0
 800e0a4:	d1c7      	bne.n	800e036 <__gethex+0x9a>
 800e0a6:	4627      	mov	r7, r4
 800e0a8:	e7c7      	b.n	800e03a <__gethex+0x9e>
 800e0aa:	464e      	mov	r6, r9
 800e0ac:	462f      	mov	r7, r5
 800e0ae:	2501      	movs	r5, #1
 800e0b0:	e7c3      	b.n	800e03a <__gethex+0x9e>
 800e0b2:	2400      	movs	r4, #0
 800e0b4:	1cb1      	adds	r1, r6, #2
 800e0b6:	e7cc      	b.n	800e052 <__gethex+0xb6>
 800e0b8:	2401      	movs	r4, #1
 800e0ba:	e7fb      	b.n	800e0b4 <__gethex+0x118>
 800e0bc:	fb03 0002 	mla	r0, r3, r2, r0
 800e0c0:	e7ce      	b.n	800e060 <__gethex+0xc4>
 800e0c2:	4631      	mov	r1, r6
 800e0c4:	e7de      	b.n	800e084 <__gethex+0xe8>
 800e0c6:	eba6 0309 	sub.w	r3, r6, r9
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	2b07      	cmp	r3, #7
 800e0d0:	dc0a      	bgt.n	800e0e8 <__gethex+0x14c>
 800e0d2:	9801      	ldr	r0, [sp, #4]
 800e0d4:	f7fe f9bc 	bl	800c450 <_Balloc>
 800e0d8:	4604      	mov	r4, r0
 800e0da:	b940      	cbnz	r0, 800e0ee <__gethex+0x152>
 800e0dc:	4b5c      	ldr	r3, [pc, #368]	@ (800e250 <__gethex+0x2b4>)
 800e0de:	4602      	mov	r2, r0
 800e0e0:	21e4      	movs	r1, #228	@ 0xe4
 800e0e2:	485c      	ldr	r0, [pc, #368]	@ (800e254 <__gethex+0x2b8>)
 800e0e4:	f7fd fa4a 	bl	800b57c <__assert_func>
 800e0e8:	3101      	adds	r1, #1
 800e0ea:	105b      	asrs	r3, r3, #1
 800e0ec:	e7ef      	b.n	800e0ce <__gethex+0x132>
 800e0ee:	f100 0a14 	add.w	sl, r0, #20
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	4655      	mov	r5, sl
 800e0f6:	469b      	mov	fp, r3
 800e0f8:	45b1      	cmp	r9, r6
 800e0fa:	d337      	bcc.n	800e16c <__gethex+0x1d0>
 800e0fc:	f845 bb04 	str.w	fp, [r5], #4
 800e100:	eba5 050a 	sub.w	r5, r5, sl
 800e104:	10ad      	asrs	r5, r5, #2
 800e106:	6125      	str	r5, [r4, #16]
 800e108:	4658      	mov	r0, fp
 800e10a:	f7fe fa93 	bl	800c634 <__hi0bits>
 800e10e:	016d      	lsls	r5, r5, #5
 800e110:	f8d8 6000 	ldr.w	r6, [r8]
 800e114:	1a2d      	subs	r5, r5, r0
 800e116:	42b5      	cmp	r5, r6
 800e118:	dd54      	ble.n	800e1c4 <__gethex+0x228>
 800e11a:	1bad      	subs	r5, r5, r6
 800e11c:	4629      	mov	r1, r5
 800e11e:	4620      	mov	r0, r4
 800e120:	f7fe fe27 	bl	800cd72 <__any_on>
 800e124:	4681      	mov	r9, r0
 800e126:	b178      	cbz	r0, 800e148 <__gethex+0x1ac>
 800e128:	1e6b      	subs	r3, r5, #1
 800e12a:	1159      	asrs	r1, r3, #5
 800e12c:	f003 021f 	and.w	r2, r3, #31
 800e130:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e134:	f04f 0901 	mov.w	r9, #1
 800e138:	fa09 f202 	lsl.w	r2, r9, r2
 800e13c:	420a      	tst	r2, r1
 800e13e:	d003      	beq.n	800e148 <__gethex+0x1ac>
 800e140:	454b      	cmp	r3, r9
 800e142:	dc36      	bgt.n	800e1b2 <__gethex+0x216>
 800e144:	f04f 0902 	mov.w	r9, #2
 800e148:	4629      	mov	r1, r5
 800e14a:	4620      	mov	r0, r4
 800e14c:	f7ff febf 	bl	800dece <rshift>
 800e150:	442f      	add	r7, r5
 800e152:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e156:	42bb      	cmp	r3, r7
 800e158:	da42      	bge.n	800e1e0 <__gethex+0x244>
 800e15a:	9801      	ldr	r0, [sp, #4]
 800e15c:	4621      	mov	r1, r4
 800e15e:	f7fe f9b7 	bl	800c4d0 <_Bfree>
 800e162:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e164:	2300      	movs	r3, #0
 800e166:	6013      	str	r3, [r2, #0]
 800e168:	25a3      	movs	r5, #163	@ 0xa3
 800e16a:	e793      	b.n	800e094 <__gethex+0xf8>
 800e16c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e170:	2a2e      	cmp	r2, #46	@ 0x2e
 800e172:	d012      	beq.n	800e19a <__gethex+0x1fe>
 800e174:	2b20      	cmp	r3, #32
 800e176:	d104      	bne.n	800e182 <__gethex+0x1e6>
 800e178:	f845 bb04 	str.w	fp, [r5], #4
 800e17c:	f04f 0b00 	mov.w	fp, #0
 800e180:	465b      	mov	r3, fp
 800e182:	7830      	ldrb	r0, [r6, #0]
 800e184:	9303      	str	r3, [sp, #12]
 800e186:	f7ff fef4 	bl	800df72 <__hexdig_fun>
 800e18a:	9b03      	ldr	r3, [sp, #12]
 800e18c:	f000 000f 	and.w	r0, r0, #15
 800e190:	4098      	lsls	r0, r3
 800e192:	ea4b 0b00 	orr.w	fp, fp, r0
 800e196:	3304      	adds	r3, #4
 800e198:	e7ae      	b.n	800e0f8 <__gethex+0x15c>
 800e19a:	45b1      	cmp	r9, r6
 800e19c:	d8ea      	bhi.n	800e174 <__gethex+0x1d8>
 800e19e:	492b      	ldr	r1, [pc, #172]	@ (800e24c <__gethex+0x2b0>)
 800e1a0:	9303      	str	r3, [sp, #12]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	f7ff fe3d 	bl	800de24 <strncmp>
 800e1aa:	9b03      	ldr	r3, [sp, #12]
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d1e1      	bne.n	800e174 <__gethex+0x1d8>
 800e1b0:	e7a2      	b.n	800e0f8 <__gethex+0x15c>
 800e1b2:	1ea9      	subs	r1, r5, #2
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f7fe fddc 	bl	800cd72 <__any_on>
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	d0c2      	beq.n	800e144 <__gethex+0x1a8>
 800e1be:	f04f 0903 	mov.w	r9, #3
 800e1c2:	e7c1      	b.n	800e148 <__gethex+0x1ac>
 800e1c4:	da09      	bge.n	800e1da <__gethex+0x23e>
 800e1c6:	1b75      	subs	r5, r6, r5
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	9801      	ldr	r0, [sp, #4]
 800e1cc:	462a      	mov	r2, r5
 800e1ce:	f7fe fb97 	bl	800c900 <__lshift>
 800e1d2:	1b7f      	subs	r7, r7, r5
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	f100 0a14 	add.w	sl, r0, #20
 800e1da:	f04f 0900 	mov.w	r9, #0
 800e1de:	e7b8      	b.n	800e152 <__gethex+0x1b6>
 800e1e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e1e4:	42bd      	cmp	r5, r7
 800e1e6:	dd6f      	ble.n	800e2c8 <__gethex+0x32c>
 800e1e8:	1bed      	subs	r5, r5, r7
 800e1ea:	42ae      	cmp	r6, r5
 800e1ec:	dc34      	bgt.n	800e258 <__gethex+0x2bc>
 800e1ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	d022      	beq.n	800e23c <__gethex+0x2a0>
 800e1f6:	2b03      	cmp	r3, #3
 800e1f8:	d024      	beq.n	800e244 <__gethex+0x2a8>
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d115      	bne.n	800e22a <__gethex+0x28e>
 800e1fe:	42ae      	cmp	r6, r5
 800e200:	d113      	bne.n	800e22a <__gethex+0x28e>
 800e202:	2e01      	cmp	r6, #1
 800e204:	d10b      	bne.n	800e21e <__gethex+0x282>
 800e206:	9a02      	ldr	r2, [sp, #8]
 800e208:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e20c:	6013      	str	r3, [r2, #0]
 800e20e:	2301      	movs	r3, #1
 800e210:	6123      	str	r3, [r4, #16]
 800e212:	f8ca 3000 	str.w	r3, [sl]
 800e216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e218:	2562      	movs	r5, #98	@ 0x62
 800e21a:	601c      	str	r4, [r3, #0]
 800e21c:	e73a      	b.n	800e094 <__gethex+0xf8>
 800e21e:	1e71      	subs	r1, r6, #1
 800e220:	4620      	mov	r0, r4
 800e222:	f7fe fda6 	bl	800cd72 <__any_on>
 800e226:	2800      	cmp	r0, #0
 800e228:	d1ed      	bne.n	800e206 <__gethex+0x26a>
 800e22a:	9801      	ldr	r0, [sp, #4]
 800e22c:	4621      	mov	r1, r4
 800e22e:	f7fe f94f 	bl	800c4d0 <_Bfree>
 800e232:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e234:	2300      	movs	r3, #0
 800e236:	6013      	str	r3, [r2, #0]
 800e238:	2550      	movs	r5, #80	@ 0x50
 800e23a:	e72b      	b.n	800e094 <__gethex+0xf8>
 800e23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1f3      	bne.n	800e22a <__gethex+0x28e>
 800e242:	e7e0      	b.n	800e206 <__gethex+0x26a>
 800e244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1dd      	bne.n	800e206 <__gethex+0x26a>
 800e24a:	e7ee      	b.n	800e22a <__gethex+0x28e>
 800e24c:	0800efb8 	.word	0x0800efb8
 800e250:	0800ee50 	.word	0x0800ee50
 800e254:	0800f029 	.word	0x0800f029
 800e258:	1e6f      	subs	r7, r5, #1
 800e25a:	f1b9 0f00 	cmp.w	r9, #0
 800e25e:	d130      	bne.n	800e2c2 <__gethex+0x326>
 800e260:	b127      	cbz	r7, 800e26c <__gethex+0x2d0>
 800e262:	4639      	mov	r1, r7
 800e264:	4620      	mov	r0, r4
 800e266:	f7fe fd84 	bl	800cd72 <__any_on>
 800e26a:	4681      	mov	r9, r0
 800e26c:	117a      	asrs	r2, r7, #5
 800e26e:	2301      	movs	r3, #1
 800e270:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e274:	f007 071f 	and.w	r7, r7, #31
 800e278:	40bb      	lsls	r3, r7
 800e27a:	4213      	tst	r3, r2
 800e27c:	4629      	mov	r1, r5
 800e27e:	4620      	mov	r0, r4
 800e280:	bf18      	it	ne
 800e282:	f049 0902 	orrne.w	r9, r9, #2
 800e286:	f7ff fe22 	bl	800dece <rshift>
 800e28a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e28e:	1b76      	subs	r6, r6, r5
 800e290:	2502      	movs	r5, #2
 800e292:	f1b9 0f00 	cmp.w	r9, #0
 800e296:	d047      	beq.n	800e328 <__gethex+0x38c>
 800e298:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e29c:	2b02      	cmp	r3, #2
 800e29e:	d015      	beq.n	800e2cc <__gethex+0x330>
 800e2a0:	2b03      	cmp	r3, #3
 800e2a2:	d017      	beq.n	800e2d4 <__gethex+0x338>
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d109      	bne.n	800e2bc <__gethex+0x320>
 800e2a8:	f019 0f02 	tst.w	r9, #2
 800e2ac:	d006      	beq.n	800e2bc <__gethex+0x320>
 800e2ae:	f8da 3000 	ldr.w	r3, [sl]
 800e2b2:	ea49 0903 	orr.w	r9, r9, r3
 800e2b6:	f019 0f01 	tst.w	r9, #1
 800e2ba:	d10e      	bne.n	800e2da <__gethex+0x33e>
 800e2bc:	f045 0510 	orr.w	r5, r5, #16
 800e2c0:	e032      	b.n	800e328 <__gethex+0x38c>
 800e2c2:	f04f 0901 	mov.w	r9, #1
 800e2c6:	e7d1      	b.n	800e26c <__gethex+0x2d0>
 800e2c8:	2501      	movs	r5, #1
 800e2ca:	e7e2      	b.n	800e292 <__gethex+0x2f6>
 800e2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2ce:	f1c3 0301 	rsb	r3, r3, #1
 800e2d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d0f0      	beq.n	800e2bc <__gethex+0x320>
 800e2da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e2de:	f104 0314 	add.w	r3, r4, #20
 800e2e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e2e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e2ea:	f04f 0c00 	mov.w	ip, #0
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e2f8:	d01b      	beq.n	800e332 <__gethex+0x396>
 800e2fa:	3201      	adds	r2, #1
 800e2fc:	6002      	str	r2, [r0, #0]
 800e2fe:	2d02      	cmp	r5, #2
 800e300:	f104 0314 	add.w	r3, r4, #20
 800e304:	d13c      	bne.n	800e380 <__gethex+0x3e4>
 800e306:	f8d8 2000 	ldr.w	r2, [r8]
 800e30a:	3a01      	subs	r2, #1
 800e30c:	42b2      	cmp	r2, r6
 800e30e:	d109      	bne.n	800e324 <__gethex+0x388>
 800e310:	1171      	asrs	r1, r6, #5
 800e312:	2201      	movs	r2, #1
 800e314:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e318:	f006 061f 	and.w	r6, r6, #31
 800e31c:	fa02 f606 	lsl.w	r6, r2, r6
 800e320:	421e      	tst	r6, r3
 800e322:	d13a      	bne.n	800e39a <__gethex+0x3fe>
 800e324:	f045 0520 	orr.w	r5, r5, #32
 800e328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e32a:	601c      	str	r4, [r3, #0]
 800e32c:	9b02      	ldr	r3, [sp, #8]
 800e32e:	601f      	str	r7, [r3, #0]
 800e330:	e6b0      	b.n	800e094 <__gethex+0xf8>
 800e332:	4299      	cmp	r1, r3
 800e334:	f843 cc04 	str.w	ip, [r3, #-4]
 800e338:	d8d9      	bhi.n	800e2ee <__gethex+0x352>
 800e33a:	68a3      	ldr	r3, [r4, #8]
 800e33c:	459b      	cmp	fp, r3
 800e33e:	db17      	blt.n	800e370 <__gethex+0x3d4>
 800e340:	6861      	ldr	r1, [r4, #4]
 800e342:	9801      	ldr	r0, [sp, #4]
 800e344:	3101      	adds	r1, #1
 800e346:	f7fe f883 	bl	800c450 <_Balloc>
 800e34a:	4681      	mov	r9, r0
 800e34c:	b918      	cbnz	r0, 800e356 <__gethex+0x3ba>
 800e34e:	4b1a      	ldr	r3, [pc, #104]	@ (800e3b8 <__gethex+0x41c>)
 800e350:	4602      	mov	r2, r0
 800e352:	2184      	movs	r1, #132	@ 0x84
 800e354:	e6c5      	b.n	800e0e2 <__gethex+0x146>
 800e356:	6922      	ldr	r2, [r4, #16]
 800e358:	3202      	adds	r2, #2
 800e35a:	f104 010c 	add.w	r1, r4, #12
 800e35e:	0092      	lsls	r2, r2, #2
 800e360:	300c      	adds	r0, #12
 800e362:	f7ff fd81 	bl	800de68 <memcpy>
 800e366:	4621      	mov	r1, r4
 800e368:	9801      	ldr	r0, [sp, #4]
 800e36a:	f7fe f8b1 	bl	800c4d0 <_Bfree>
 800e36e:	464c      	mov	r4, r9
 800e370:	6923      	ldr	r3, [r4, #16]
 800e372:	1c5a      	adds	r2, r3, #1
 800e374:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e378:	6122      	str	r2, [r4, #16]
 800e37a:	2201      	movs	r2, #1
 800e37c:	615a      	str	r2, [r3, #20]
 800e37e:	e7be      	b.n	800e2fe <__gethex+0x362>
 800e380:	6922      	ldr	r2, [r4, #16]
 800e382:	455a      	cmp	r2, fp
 800e384:	dd0b      	ble.n	800e39e <__gethex+0x402>
 800e386:	2101      	movs	r1, #1
 800e388:	4620      	mov	r0, r4
 800e38a:	f7ff fda0 	bl	800dece <rshift>
 800e38e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e392:	3701      	adds	r7, #1
 800e394:	42bb      	cmp	r3, r7
 800e396:	f6ff aee0 	blt.w	800e15a <__gethex+0x1be>
 800e39a:	2501      	movs	r5, #1
 800e39c:	e7c2      	b.n	800e324 <__gethex+0x388>
 800e39e:	f016 061f 	ands.w	r6, r6, #31
 800e3a2:	d0fa      	beq.n	800e39a <__gethex+0x3fe>
 800e3a4:	4453      	add	r3, sl
 800e3a6:	f1c6 0620 	rsb	r6, r6, #32
 800e3aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e3ae:	f7fe f941 	bl	800c634 <__hi0bits>
 800e3b2:	42b0      	cmp	r0, r6
 800e3b4:	dbe7      	blt.n	800e386 <__gethex+0x3ea>
 800e3b6:	e7f0      	b.n	800e39a <__gethex+0x3fe>
 800e3b8:	0800ee50 	.word	0x0800ee50

0800e3bc <L_shift>:
 800e3bc:	f1c2 0208 	rsb	r2, r2, #8
 800e3c0:	0092      	lsls	r2, r2, #2
 800e3c2:	b570      	push	{r4, r5, r6, lr}
 800e3c4:	f1c2 0620 	rsb	r6, r2, #32
 800e3c8:	6843      	ldr	r3, [r0, #4]
 800e3ca:	6804      	ldr	r4, [r0, #0]
 800e3cc:	fa03 f506 	lsl.w	r5, r3, r6
 800e3d0:	432c      	orrs	r4, r5
 800e3d2:	40d3      	lsrs	r3, r2
 800e3d4:	6004      	str	r4, [r0, #0]
 800e3d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e3da:	4288      	cmp	r0, r1
 800e3dc:	d3f4      	bcc.n	800e3c8 <L_shift+0xc>
 800e3de:	bd70      	pop	{r4, r5, r6, pc}

0800e3e0 <__match>:
 800e3e0:	b530      	push	{r4, r5, lr}
 800e3e2:	6803      	ldr	r3, [r0, #0]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3ea:	b914      	cbnz	r4, 800e3f2 <__match+0x12>
 800e3ec:	6003      	str	r3, [r0, #0]
 800e3ee:	2001      	movs	r0, #1
 800e3f0:	bd30      	pop	{r4, r5, pc}
 800e3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e3fa:	2d19      	cmp	r5, #25
 800e3fc:	bf98      	it	ls
 800e3fe:	3220      	addls	r2, #32
 800e400:	42a2      	cmp	r2, r4
 800e402:	d0f0      	beq.n	800e3e6 <__match+0x6>
 800e404:	2000      	movs	r0, #0
 800e406:	e7f3      	b.n	800e3f0 <__match+0x10>

0800e408 <__hexnan>:
 800e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	680b      	ldr	r3, [r1, #0]
 800e40e:	6801      	ldr	r1, [r0, #0]
 800e410:	115e      	asrs	r6, r3, #5
 800e412:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e416:	f013 031f 	ands.w	r3, r3, #31
 800e41a:	b087      	sub	sp, #28
 800e41c:	bf18      	it	ne
 800e41e:	3604      	addne	r6, #4
 800e420:	2500      	movs	r5, #0
 800e422:	1f37      	subs	r7, r6, #4
 800e424:	4682      	mov	sl, r0
 800e426:	4690      	mov	r8, r2
 800e428:	9301      	str	r3, [sp, #4]
 800e42a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e42e:	46b9      	mov	r9, r7
 800e430:	463c      	mov	r4, r7
 800e432:	9502      	str	r5, [sp, #8]
 800e434:	46ab      	mov	fp, r5
 800e436:	784a      	ldrb	r2, [r1, #1]
 800e438:	1c4b      	adds	r3, r1, #1
 800e43a:	9303      	str	r3, [sp, #12]
 800e43c:	b342      	cbz	r2, 800e490 <__hexnan+0x88>
 800e43e:	4610      	mov	r0, r2
 800e440:	9105      	str	r1, [sp, #20]
 800e442:	9204      	str	r2, [sp, #16]
 800e444:	f7ff fd95 	bl	800df72 <__hexdig_fun>
 800e448:	2800      	cmp	r0, #0
 800e44a:	d151      	bne.n	800e4f0 <__hexnan+0xe8>
 800e44c:	9a04      	ldr	r2, [sp, #16]
 800e44e:	9905      	ldr	r1, [sp, #20]
 800e450:	2a20      	cmp	r2, #32
 800e452:	d818      	bhi.n	800e486 <__hexnan+0x7e>
 800e454:	9b02      	ldr	r3, [sp, #8]
 800e456:	459b      	cmp	fp, r3
 800e458:	dd13      	ble.n	800e482 <__hexnan+0x7a>
 800e45a:	454c      	cmp	r4, r9
 800e45c:	d206      	bcs.n	800e46c <__hexnan+0x64>
 800e45e:	2d07      	cmp	r5, #7
 800e460:	dc04      	bgt.n	800e46c <__hexnan+0x64>
 800e462:	462a      	mov	r2, r5
 800e464:	4649      	mov	r1, r9
 800e466:	4620      	mov	r0, r4
 800e468:	f7ff ffa8 	bl	800e3bc <L_shift>
 800e46c:	4544      	cmp	r4, r8
 800e46e:	d952      	bls.n	800e516 <__hexnan+0x10e>
 800e470:	2300      	movs	r3, #0
 800e472:	f1a4 0904 	sub.w	r9, r4, #4
 800e476:	f844 3c04 	str.w	r3, [r4, #-4]
 800e47a:	f8cd b008 	str.w	fp, [sp, #8]
 800e47e:	464c      	mov	r4, r9
 800e480:	461d      	mov	r5, r3
 800e482:	9903      	ldr	r1, [sp, #12]
 800e484:	e7d7      	b.n	800e436 <__hexnan+0x2e>
 800e486:	2a29      	cmp	r2, #41	@ 0x29
 800e488:	d157      	bne.n	800e53a <__hexnan+0x132>
 800e48a:	3102      	adds	r1, #2
 800e48c:	f8ca 1000 	str.w	r1, [sl]
 800e490:	f1bb 0f00 	cmp.w	fp, #0
 800e494:	d051      	beq.n	800e53a <__hexnan+0x132>
 800e496:	454c      	cmp	r4, r9
 800e498:	d206      	bcs.n	800e4a8 <__hexnan+0xa0>
 800e49a:	2d07      	cmp	r5, #7
 800e49c:	dc04      	bgt.n	800e4a8 <__hexnan+0xa0>
 800e49e:	462a      	mov	r2, r5
 800e4a0:	4649      	mov	r1, r9
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	f7ff ff8a 	bl	800e3bc <L_shift>
 800e4a8:	4544      	cmp	r4, r8
 800e4aa:	d936      	bls.n	800e51a <__hexnan+0x112>
 800e4ac:	f1a8 0204 	sub.w	r2, r8, #4
 800e4b0:	4623      	mov	r3, r4
 800e4b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e4b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e4ba:	429f      	cmp	r7, r3
 800e4bc:	d2f9      	bcs.n	800e4b2 <__hexnan+0xaa>
 800e4be:	1b3b      	subs	r3, r7, r4
 800e4c0:	f023 0303 	bic.w	r3, r3, #3
 800e4c4:	3304      	adds	r3, #4
 800e4c6:	3401      	adds	r4, #1
 800e4c8:	3e03      	subs	r6, #3
 800e4ca:	42b4      	cmp	r4, r6
 800e4cc:	bf88      	it	hi
 800e4ce:	2304      	movhi	r3, #4
 800e4d0:	4443      	add	r3, r8
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	f843 2b04 	str.w	r2, [r3], #4
 800e4d8:	429f      	cmp	r7, r3
 800e4da:	d2fb      	bcs.n	800e4d4 <__hexnan+0xcc>
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	b91b      	cbnz	r3, 800e4e8 <__hexnan+0xe0>
 800e4e0:	4547      	cmp	r7, r8
 800e4e2:	d128      	bne.n	800e536 <__hexnan+0x12e>
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	603b      	str	r3, [r7, #0]
 800e4e8:	2005      	movs	r0, #5
 800e4ea:	b007      	add	sp, #28
 800e4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f0:	3501      	adds	r5, #1
 800e4f2:	2d08      	cmp	r5, #8
 800e4f4:	f10b 0b01 	add.w	fp, fp, #1
 800e4f8:	dd06      	ble.n	800e508 <__hexnan+0x100>
 800e4fa:	4544      	cmp	r4, r8
 800e4fc:	d9c1      	bls.n	800e482 <__hexnan+0x7a>
 800e4fe:	2300      	movs	r3, #0
 800e500:	f844 3c04 	str.w	r3, [r4, #-4]
 800e504:	2501      	movs	r5, #1
 800e506:	3c04      	subs	r4, #4
 800e508:	6822      	ldr	r2, [r4, #0]
 800e50a:	f000 000f 	and.w	r0, r0, #15
 800e50e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e512:	6020      	str	r0, [r4, #0]
 800e514:	e7b5      	b.n	800e482 <__hexnan+0x7a>
 800e516:	2508      	movs	r5, #8
 800e518:	e7b3      	b.n	800e482 <__hexnan+0x7a>
 800e51a:	9b01      	ldr	r3, [sp, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d0dd      	beq.n	800e4dc <__hexnan+0xd4>
 800e520:	f1c3 0320 	rsb	r3, r3, #32
 800e524:	f04f 32ff 	mov.w	r2, #4294967295
 800e528:	40da      	lsrs	r2, r3
 800e52a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e52e:	4013      	ands	r3, r2
 800e530:	f846 3c04 	str.w	r3, [r6, #-4]
 800e534:	e7d2      	b.n	800e4dc <__hexnan+0xd4>
 800e536:	3f04      	subs	r7, #4
 800e538:	e7d0      	b.n	800e4dc <__hexnan+0xd4>
 800e53a:	2004      	movs	r0, #4
 800e53c:	e7d5      	b.n	800e4ea <__hexnan+0xe2>

0800e53e <__ascii_mbtowc>:
 800e53e:	b082      	sub	sp, #8
 800e540:	b901      	cbnz	r1, 800e544 <__ascii_mbtowc+0x6>
 800e542:	a901      	add	r1, sp, #4
 800e544:	b142      	cbz	r2, 800e558 <__ascii_mbtowc+0x1a>
 800e546:	b14b      	cbz	r3, 800e55c <__ascii_mbtowc+0x1e>
 800e548:	7813      	ldrb	r3, [r2, #0]
 800e54a:	600b      	str	r3, [r1, #0]
 800e54c:	7812      	ldrb	r2, [r2, #0]
 800e54e:	1e10      	subs	r0, r2, #0
 800e550:	bf18      	it	ne
 800e552:	2001      	movne	r0, #1
 800e554:	b002      	add	sp, #8
 800e556:	4770      	bx	lr
 800e558:	4610      	mov	r0, r2
 800e55a:	e7fb      	b.n	800e554 <__ascii_mbtowc+0x16>
 800e55c:	f06f 0001 	mvn.w	r0, #1
 800e560:	e7f8      	b.n	800e554 <__ascii_mbtowc+0x16>

0800e562 <_realloc_r>:
 800e562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e566:	4680      	mov	r8, r0
 800e568:	4615      	mov	r5, r2
 800e56a:	460c      	mov	r4, r1
 800e56c:	b921      	cbnz	r1, 800e578 <_realloc_r+0x16>
 800e56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e572:	4611      	mov	r1, r2
 800e574:	f7fd bee0 	b.w	800c338 <_malloc_r>
 800e578:	b92a      	cbnz	r2, 800e586 <_realloc_r+0x24>
 800e57a:	f7fd fe69 	bl	800c250 <_free_r>
 800e57e:	2400      	movs	r4, #0
 800e580:	4620      	mov	r0, r4
 800e582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e586:	f000 fa41 	bl	800ea0c <_malloc_usable_size_r>
 800e58a:	4285      	cmp	r5, r0
 800e58c:	4606      	mov	r6, r0
 800e58e:	d802      	bhi.n	800e596 <_realloc_r+0x34>
 800e590:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e594:	d8f4      	bhi.n	800e580 <_realloc_r+0x1e>
 800e596:	4629      	mov	r1, r5
 800e598:	4640      	mov	r0, r8
 800e59a:	f7fd fecd 	bl	800c338 <_malloc_r>
 800e59e:	4607      	mov	r7, r0
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d0ec      	beq.n	800e57e <_realloc_r+0x1c>
 800e5a4:	42b5      	cmp	r5, r6
 800e5a6:	462a      	mov	r2, r5
 800e5a8:	4621      	mov	r1, r4
 800e5aa:	bf28      	it	cs
 800e5ac:	4632      	movcs	r2, r6
 800e5ae:	f7ff fc5b 	bl	800de68 <memcpy>
 800e5b2:	4621      	mov	r1, r4
 800e5b4:	4640      	mov	r0, r8
 800e5b6:	f7fd fe4b 	bl	800c250 <_free_r>
 800e5ba:	463c      	mov	r4, r7
 800e5bc:	e7e0      	b.n	800e580 <_realloc_r+0x1e>

0800e5be <__ascii_wctomb>:
 800e5be:	4603      	mov	r3, r0
 800e5c0:	4608      	mov	r0, r1
 800e5c2:	b141      	cbz	r1, 800e5d6 <__ascii_wctomb+0x18>
 800e5c4:	2aff      	cmp	r2, #255	@ 0xff
 800e5c6:	d904      	bls.n	800e5d2 <__ascii_wctomb+0x14>
 800e5c8:	228a      	movs	r2, #138	@ 0x8a
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d0:	4770      	bx	lr
 800e5d2:	700a      	strb	r2, [r1, #0]
 800e5d4:	2001      	movs	r0, #1
 800e5d6:	4770      	bx	lr

0800e5d8 <__sfputc_r>:
 800e5d8:	6893      	ldr	r3, [r2, #8]
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	b410      	push	{r4}
 800e5e0:	6093      	str	r3, [r2, #8]
 800e5e2:	da08      	bge.n	800e5f6 <__sfputc_r+0x1e>
 800e5e4:	6994      	ldr	r4, [r2, #24]
 800e5e6:	42a3      	cmp	r3, r4
 800e5e8:	db01      	blt.n	800e5ee <__sfputc_r+0x16>
 800e5ea:	290a      	cmp	r1, #10
 800e5ec:	d103      	bne.n	800e5f6 <__sfputc_r+0x1e>
 800e5ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5f2:	f000 b933 	b.w	800e85c <__swbuf_r>
 800e5f6:	6813      	ldr	r3, [r2, #0]
 800e5f8:	1c58      	adds	r0, r3, #1
 800e5fa:	6010      	str	r0, [r2, #0]
 800e5fc:	7019      	strb	r1, [r3, #0]
 800e5fe:	4608      	mov	r0, r1
 800e600:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <__sfputs_r>:
 800e606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e608:	4606      	mov	r6, r0
 800e60a:	460f      	mov	r7, r1
 800e60c:	4614      	mov	r4, r2
 800e60e:	18d5      	adds	r5, r2, r3
 800e610:	42ac      	cmp	r4, r5
 800e612:	d101      	bne.n	800e618 <__sfputs_r+0x12>
 800e614:	2000      	movs	r0, #0
 800e616:	e007      	b.n	800e628 <__sfputs_r+0x22>
 800e618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e61c:	463a      	mov	r2, r7
 800e61e:	4630      	mov	r0, r6
 800e620:	f7ff ffda 	bl	800e5d8 <__sfputc_r>
 800e624:	1c43      	adds	r3, r0, #1
 800e626:	d1f3      	bne.n	800e610 <__sfputs_r+0xa>
 800e628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e62c <_vfiprintf_r>:
 800e62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e630:	460d      	mov	r5, r1
 800e632:	b09d      	sub	sp, #116	@ 0x74
 800e634:	4614      	mov	r4, r2
 800e636:	4698      	mov	r8, r3
 800e638:	4606      	mov	r6, r0
 800e63a:	b118      	cbz	r0, 800e644 <_vfiprintf_r+0x18>
 800e63c:	6a03      	ldr	r3, [r0, #32]
 800e63e:	b90b      	cbnz	r3, 800e644 <_vfiprintf_r+0x18>
 800e640:	f7fc fdec 	bl	800b21c <__sinit>
 800e644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e646:	07d9      	lsls	r1, r3, #31
 800e648:	d405      	bmi.n	800e656 <_vfiprintf_r+0x2a>
 800e64a:	89ab      	ldrh	r3, [r5, #12]
 800e64c:	059a      	lsls	r2, r3, #22
 800e64e:	d402      	bmi.n	800e656 <_vfiprintf_r+0x2a>
 800e650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e652:	f7fc ff8a 	bl	800b56a <__retarget_lock_acquire_recursive>
 800e656:	89ab      	ldrh	r3, [r5, #12]
 800e658:	071b      	lsls	r3, r3, #28
 800e65a:	d501      	bpl.n	800e660 <_vfiprintf_r+0x34>
 800e65c:	692b      	ldr	r3, [r5, #16]
 800e65e:	b99b      	cbnz	r3, 800e688 <_vfiprintf_r+0x5c>
 800e660:	4629      	mov	r1, r5
 800e662:	4630      	mov	r0, r6
 800e664:	f000 f938 	bl	800e8d8 <__swsetup_r>
 800e668:	b170      	cbz	r0, 800e688 <_vfiprintf_r+0x5c>
 800e66a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e66c:	07dc      	lsls	r4, r3, #31
 800e66e:	d504      	bpl.n	800e67a <_vfiprintf_r+0x4e>
 800e670:	f04f 30ff 	mov.w	r0, #4294967295
 800e674:	b01d      	add	sp, #116	@ 0x74
 800e676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e67a:	89ab      	ldrh	r3, [r5, #12]
 800e67c:	0598      	lsls	r0, r3, #22
 800e67e:	d4f7      	bmi.n	800e670 <_vfiprintf_r+0x44>
 800e680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e682:	f7fc ff73 	bl	800b56c <__retarget_lock_release_recursive>
 800e686:	e7f3      	b.n	800e670 <_vfiprintf_r+0x44>
 800e688:	2300      	movs	r3, #0
 800e68a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e68c:	2320      	movs	r3, #32
 800e68e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e692:	f8cd 800c 	str.w	r8, [sp, #12]
 800e696:	2330      	movs	r3, #48	@ 0x30
 800e698:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e848 <_vfiprintf_r+0x21c>
 800e69c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e6a0:	f04f 0901 	mov.w	r9, #1
 800e6a4:	4623      	mov	r3, r4
 800e6a6:	469a      	mov	sl, r3
 800e6a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6ac:	b10a      	cbz	r2, 800e6b2 <_vfiprintf_r+0x86>
 800e6ae:	2a25      	cmp	r2, #37	@ 0x25
 800e6b0:	d1f9      	bne.n	800e6a6 <_vfiprintf_r+0x7a>
 800e6b2:	ebba 0b04 	subs.w	fp, sl, r4
 800e6b6:	d00b      	beq.n	800e6d0 <_vfiprintf_r+0xa4>
 800e6b8:	465b      	mov	r3, fp
 800e6ba:	4622      	mov	r2, r4
 800e6bc:	4629      	mov	r1, r5
 800e6be:	4630      	mov	r0, r6
 800e6c0:	f7ff ffa1 	bl	800e606 <__sfputs_r>
 800e6c4:	3001      	adds	r0, #1
 800e6c6:	f000 80a7 	beq.w	800e818 <_vfiprintf_r+0x1ec>
 800e6ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6cc:	445a      	add	r2, fp
 800e6ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f000 809f 	beq.w	800e818 <_vfiprintf_r+0x1ec>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e6e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6e4:	f10a 0a01 	add.w	sl, sl, #1
 800e6e8:	9304      	str	r3, [sp, #16]
 800e6ea:	9307      	str	r3, [sp, #28]
 800e6ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e6f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e6f2:	4654      	mov	r4, sl
 800e6f4:	2205      	movs	r2, #5
 800e6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6fa:	4853      	ldr	r0, [pc, #332]	@ (800e848 <_vfiprintf_r+0x21c>)
 800e6fc:	f7f1 fda0 	bl	8000240 <memchr>
 800e700:	9a04      	ldr	r2, [sp, #16]
 800e702:	b9d8      	cbnz	r0, 800e73c <_vfiprintf_r+0x110>
 800e704:	06d1      	lsls	r1, r2, #27
 800e706:	bf44      	itt	mi
 800e708:	2320      	movmi	r3, #32
 800e70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e70e:	0713      	lsls	r3, r2, #28
 800e710:	bf44      	itt	mi
 800e712:	232b      	movmi	r3, #43	@ 0x2b
 800e714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e718:	f89a 3000 	ldrb.w	r3, [sl]
 800e71c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e71e:	d015      	beq.n	800e74c <_vfiprintf_r+0x120>
 800e720:	9a07      	ldr	r2, [sp, #28]
 800e722:	4654      	mov	r4, sl
 800e724:	2000      	movs	r0, #0
 800e726:	f04f 0c0a 	mov.w	ip, #10
 800e72a:	4621      	mov	r1, r4
 800e72c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e730:	3b30      	subs	r3, #48	@ 0x30
 800e732:	2b09      	cmp	r3, #9
 800e734:	d94b      	bls.n	800e7ce <_vfiprintf_r+0x1a2>
 800e736:	b1b0      	cbz	r0, 800e766 <_vfiprintf_r+0x13a>
 800e738:	9207      	str	r2, [sp, #28]
 800e73a:	e014      	b.n	800e766 <_vfiprintf_r+0x13a>
 800e73c:	eba0 0308 	sub.w	r3, r0, r8
 800e740:	fa09 f303 	lsl.w	r3, r9, r3
 800e744:	4313      	orrs	r3, r2
 800e746:	9304      	str	r3, [sp, #16]
 800e748:	46a2      	mov	sl, r4
 800e74a:	e7d2      	b.n	800e6f2 <_vfiprintf_r+0xc6>
 800e74c:	9b03      	ldr	r3, [sp, #12]
 800e74e:	1d19      	adds	r1, r3, #4
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	9103      	str	r1, [sp, #12]
 800e754:	2b00      	cmp	r3, #0
 800e756:	bfbb      	ittet	lt
 800e758:	425b      	neglt	r3, r3
 800e75a:	f042 0202 	orrlt.w	r2, r2, #2
 800e75e:	9307      	strge	r3, [sp, #28]
 800e760:	9307      	strlt	r3, [sp, #28]
 800e762:	bfb8      	it	lt
 800e764:	9204      	strlt	r2, [sp, #16]
 800e766:	7823      	ldrb	r3, [r4, #0]
 800e768:	2b2e      	cmp	r3, #46	@ 0x2e
 800e76a:	d10a      	bne.n	800e782 <_vfiprintf_r+0x156>
 800e76c:	7863      	ldrb	r3, [r4, #1]
 800e76e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e770:	d132      	bne.n	800e7d8 <_vfiprintf_r+0x1ac>
 800e772:	9b03      	ldr	r3, [sp, #12]
 800e774:	1d1a      	adds	r2, r3, #4
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	9203      	str	r2, [sp, #12]
 800e77a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e77e:	3402      	adds	r4, #2
 800e780:	9305      	str	r3, [sp, #20]
 800e782:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e858 <_vfiprintf_r+0x22c>
 800e786:	7821      	ldrb	r1, [r4, #0]
 800e788:	2203      	movs	r2, #3
 800e78a:	4650      	mov	r0, sl
 800e78c:	f7f1 fd58 	bl	8000240 <memchr>
 800e790:	b138      	cbz	r0, 800e7a2 <_vfiprintf_r+0x176>
 800e792:	9b04      	ldr	r3, [sp, #16]
 800e794:	eba0 000a 	sub.w	r0, r0, sl
 800e798:	2240      	movs	r2, #64	@ 0x40
 800e79a:	4082      	lsls	r2, r0
 800e79c:	4313      	orrs	r3, r2
 800e79e:	3401      	adds	r4, #1
 800e7a0:	9304      	str	r3, [sp, #16]
 800e7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7a6:	4829      	ldr	r0, [pc, #164]	@ (800e84c <_vfiprintf_r+0x220>)
 800e7a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e7ac:	2206      	movs	r2, #6
 800e7ae:	f7f1 fd47 	bl	8000240 <memchr>
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	d03f      	beq.n	800e836 <_vfiprintf_r+0x20a>
 800e7b6:	4b26      	ldr	r3, [pc, #152]	@ (800e850 <_vfiprintf_r+0x224>)
 800e7b8:	bb1b      	cbnz	r3, 800e802 <_vfiprintf_r+0x1d6>
 800e7ba:	9b03      	ldr	r3, [sp, #12]
 800e7bc:	3307      	adds	r3, #7
 800e7be:	f023 0307 	bic.w	r3, r3, #7
 800e7c2:	3308      	adds	r3, #8
 800e7c4:	9303      	str	r3, [sp, #12]
 800e7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7c8:	443b      	add	r3, r7
 800e7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7cc:	e76a      	b.n	800e6a4 <_vfiprintf_r+0x78>
 800e7ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	2001      	movs	r0, #1
 800e7d6:	e7a8      	b.n	800e72a <_vfiprintf_r+0xfe>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	3401      	adds	r4, #1
 800e7dc:	9305      	str	r3, [sp, #20]
 800e7de:	4619      	mov	r1, r3
 800e7e0:	f04f 0c0a 	mov.w	ip, #10
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7ea:	3a30      	subs	r2, #48	@ 0x30
 800e7ec:	2a09      	cmp	r2, #9
 800e7ee:	d903      	bls.n	800e7f8 <_vfiprintf_r+0x1cc>
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d0c6      	beq.n	800e782 <_vfiprintf_r+0x156>
 800e7f4:	9105      	str	r1, [sp, #20]
 800e7f6:	e7c4      	b.n	800e782 <_vfiprintf_r+0x156>
 800e7f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	2301      	movs	r3, #1
 800e800:	e7f0      	b.n	800e7e4 <_vfiprintf_r+0x1b8>
 800e802:	ab03      	add	r3, sp, #12
 800e804:	9300      	str	r3, [sp, #0]
 800e806:	462a      	mov	r2, r5
 800e808:	4b12      	ldr	r3, [pc, #72]	@ (800e854 <_vfiprintf_r+0x228>)
 800e80a:	a904      	add	r1, sp, #16
 800e80c:	4630      	mov	r0, r6
 800e80e:	f7fb fead 	bl	800a56c <_printf_float>
 800e812:	4607      	mov	r7, r0
 800e814:	1c78      	adds	r0, r7, #1
 800e816:	d1d6      	bne.n	800e7c6 <_vfiprintf_r+0x19a>
 800e818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e81a:	07d9      	lsls	r1, r3, #31
 800e81c:	d405      	bmi.n	800e82a <_vfiprintf_r+0x1fe>
 800e81e:	89ab      	ldrh	r3, [r5, #12]
 800e820:	059a      	lsls	r2, r3, #22
 800e822:	d402      	bmi.n	800e82a <_vfiprintf_r+0x1fe>
 800e824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e826:	f7fc fea1 	bl	800b56c <__retarget_lock_release_recursive>
 800e82a:	89ab      	ldrh	r3, [r5, #12]
 800e82c:	065b      	lsls	r3, r3, #25
 800e82e:	f53f af1f 	bmi.w	800e670 <_vfiprintf_r+0x44>
 800e832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e834:	e71e      	b.n	800e674 <_vfiprintf_r+0x48>
 800e836:	ab03      	add	r3, sp, #12
 800e838:	9300      	str	r3, [sp, #0]
 800e83a:	462a      	mov	r2, r5
 800e83c:	4b05      	ldr	r3, [pc, #20]	@ (800e854 <_vfiprintf_r+0x228>)
 800e83e:	a904      	add	r1, sp, #16
 800e840:	4630      	mov	r0, r6
 800e842:	f7fc f92b 	bl	800aa9c <_printf_i>
 800e846:	e7e4      	b.n	800e812 <_vfiprintf_r+0x1e6>
 800e848:	0800f010 	.word	0x0800f010
 800e84c:	0800f01a 	.word	0x0800f01a
 800e850:	0800a56d 	.word	0x0800a56d
 800e854:	0800e607 	.word	0x0800e607
 800e858:	0800f016 	.word	0x0800f016

0800e85c <__swbuf_r>:
 800e85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e85e:	460e      	mov	r6, r1
 800e860:	4614      	mov	r4, r2
 800e862:	4605      	mov	r5, r0
 800e864:	b118      	cbz	r0, 800e86e <__swbuf_r+0x12>
 800e866:	6a03      	ldr	r3, [r0, #32]
 800e868:	b90b      	cbnz	r3, 800e86e <__swbuf_r+0x12>
 800e86a:	f7fc fcd7 	bl	800b21c <__sinit>
 800e86e:	69a3      	ldr	r3, [r4, #24]
 800e870:	60a3      	str	r3, [r4, #8]
 800e872:	89a3      	ldrh	r3, [r4, #12]
 800e874:	071a      	lsls	r2, r3, #28
 800e876:	d501      	bpl.n	800e87c <__swbuf_r+0x20>
 800e878:	6923      	ldr	r3, [r4, #16]
 800e87a:	b943      	cbnz	r3, 800e88e <__swbuf_r+0x32>
 800e87c:	4621      	mov	r1, r4
 800e87e:	4628      	mov	r0, r5
 800e880:	f000 f82a 	bl	800e8d8 <__swsetup_r>
 800e884:	b118      	cbz	r0, 800e88e <__swbuf_r+0x32>
 800e886:	f04f 37ff 	mov.w	r7, #4294967295
 800e88a:	4638      	mov	r0, r7
 800e88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e88e:	6823      	ldr	r3, [r4, #0]
 800e890:	6922      	ldr	r2, [r4, #16]
 800e892:	1a98      	subs	r0, r3, r2
 800e894:	6963      	ldr	r3, [r4, #20]
 800e896:	b2f6      	uxtb	r6, r6
 800e898:	4283      	cmp	r3, r0
 800e89a:	4637      	mov	r7, r6
 800e89c:	dc05      	bgt.n	800e8aa <__swbuf_r+0x4e>
 800e89e:	4621      	mov	r1, r4
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	f7ff fa6b 	bl	800dd7c <_fflush_r>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d1ed      	bne.n	800e886 <__swbuf_r+0x2a>
 800e8aa:	68a3      	ldr	r3, [r4, #8]
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	60a3      	str	r3, [r4, #8]
 800e8b0:	6823      	ldr	r3, [r4, #0]
 800e8b2:	1c5a      	adds	r2, r3, #1
 800e8b4:	6022      	str	r2, [r4, #0]
 800e8b6:	701e      	strb	r6, [r3, #0]
 800e8b8:	6962      	ldr	r2, [r4, #20]
 800e8ba:	1c43      	adds	r3, r0, #1
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d004      	beq.n	800e8ca <__swbuf_r+0x6e>
 800e8c0:	89a3      	ldrh	r3, [r4, #12]
 800e8c2:	07db      	lsls	r3, r3, #31
 800e8c4:	d5e1      	bpl.n	800e88a <__swbuf_r+0x2e>
 800e8c6:	2e0a      	cmp	r6, #10
 800e8c8:	d1df      	bne.n	800e88a <__swbuf_r+0x2e>
 800e8ca:	4621      	mov	r1, r4
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	f7ff fa55 	bl	800dd7c <_fflush_r>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	d0d9      	beq.n	800e88a <__swbuf_r+0x2e>
 800e8d6:	e7d6      	b.n	800e886 <__swbuf_r+0x2a>

0800e8d8 <__swsetup_r>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4b29      	ldr	r3, [pc, #164]	@ (800e980 <__swsetup_r+0xa8>)
 800e8dc:	4605      	mov	r5, r0
 800e8de:	6818      	ldr	r0, [r3, #0]
 800e8e0:	460c      	mov	r4, r1
 800e8e2:	b118      	cbz	r0, 800e8ec <__swsetup_r+0x14>
 800e8e4:	6a03      	ldr	r3, [r0, #32]
 800e8e6:	b90b      	cbnz	r3, 800e8ec <__swsetup_r+0x14>
 800e8e8:	f7fc fc98 	bl	800b21c <__sinit>
 800e8ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8f0:	0719      	lsls	r1, r3, #28
 800e8f2:	d422      	bmi.n	800e93a <__swsetup_r+0x62>
 800e8f4:	06da      	lsls	r2, r3, #27
 800e8f6:	d407      	bmi.n	800e908 <__swsetup_r+0x30>
 800e8f8:	2209      	movs	r2, #9
 800e8fa:	602a      	str	r2, [r5, #0]
 800e8fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e900:	81a3      	strh	r3, [r4, #12]
 800e902:	f04f 30ff 	mov.w	r0, #4294967295
 800e906:	e033      	b.n	800e970 <__swsetup_r+0x98>
 800e908:	0758      	lsls	r0, r3, #29
 800e90a:	d512      	bpl.n	800e932 <__swsetup_r+0x5a>
 800e90c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e90e:	b141      	cbz	r1, 800e922 <__swsetup_r+0x4a>
 800e910:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e914:	4299      	cmp	r1, r3
 800e916:	d002      	beq.n	800e91e <__swsetup_r+0x46>
 800e918:	4628      	mov	r0, r5
 800e91a:	f7fd fc99 	bl	800c250 <_free_r>
 800e91e:	2300      	movs	r3, #0
 800e920:	6363      	str	r3, [r4, #52]	@ 0x34
 800e922:	89a3      	ldrh	r3, [r4, #12]
 800e924:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e928:	81a3      	strh	r3, [r4, #12]
 800e92a:	2300      	movs	r3, #0
 800e92c:	6063      	str	r3, [r4, #4]
 800e92e:	6923      	ldr	r3, [r4, #16]
 800e930:	6023      	str	r3, [r4, #0]
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	f043 0308 	orr.w	r3, r3, #8
 800e938:	81a3      	strh	r3, [r4, #12]
 800e93a:	6923      	ldr	r3, [r4, #16]
 800e93c:	b94b      	cbnz	r3, 800e952 <__swsetup_r+0x7a>
 800e93e:	89a3      	ldrh	r3, [r4, #12]
 800e940:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e948:	d003      	beq.n	800e952 <__swsetup_r+0x7a>
 800e94a:	4621      	mov	r1, r4
 800e94c:	4628      	mov	r0, r5
 800e94e:	f000 f88b 	bl	800ea68 <__smakebuf_r>
 800e952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e956:	f013 0201 	ands.w	r2, r3, #1
 800e95a:	d00a      	beq.n	800e972 <__swsetup_r+0x9a>
 800e95c:	2200      	movs	r2, #0
 800e95e:	60a2      	str	r2, [r4, #8]
 800e960:	6962      	ldr	r2, [r4, #20]
 800e962:	4252      	negs	r2, r2
 800e964:	61a2      	str	r2, [r4, #24]
 800e966:	6922      	ldr	r2, [r4, #16]
 800e968:	b942      	cbnz	r2, 800e97c <__swsetup_r+0xa4>
 800e96a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e96e:	d1c5      	bne.n	800e8fc <__swsetup_r+0x24>
 800e970:	bd38      	pop	{r3, r4, r5, pc}
 800e972:	0799      	lsls	r1, r3, #30
 800e974:	bf58      	it	pl
 800e976:	6962      	ldrpl	r2, [r4, #20]
 800e978:	60a2      	str	r2, [r4, #8]
 800e97a:	e7f4      	b.n	800e966 <__swsetup_r+0x8e>
 800e97c:	2000      	movs	r0, #0
 800e97e:	e7f7      	b.n	800e970 <__swsetup_r+0x98>
 800e980:	20000254 	.word	0x20000254

0800e984 <_raise_r>:
 800e984:	291f      	cmp	r1, #31
 800e986:	b538      	push	{r3, r4, r5, lr}
 800e988:	4605      	mov	r5, r0
 800e98a:	460c      	mov	r4, r1
 800e98c:	d904      	bls.n	800e998 <_raise_r+0x14>
 800e98e:	2316      	movs	r3, #22
 800e990:	6003      	str	r3, [r0, #0]
 800e992:	f04f 30ff 	mov.w	r0, #4294967295
 800e996:	bd38      	pop	{r3, r4, r5, pc}
 800e998:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e99a:	b112      	cbz	r2, 800e9a2 <_raise_r+0x1e>
 800e99c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9a0:	b94b      	cbnz	r3, 800e9b6 <_raise_r+0x32>
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	f000 f830 	bl	800ea08 <_getpid_r>
 800e9a8:	4622      	mov	r2, r4
 800e9aa:	4601      	mov	r1, r0
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9b2:	f000 b817 	b.w	800e9e4 <_kill_r>
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d00a      	beq.n	800e9d0 <_raise_r+0x4c>
 800e9ba:	1c59      	adds	r1, r3, #1
 800e9bc:	d103      	bne.n	800e9c6 <_raise_r+0x42>
 800e9be:	2316      	movs	r3, #22
 800e9c0:	6003      	str	r3, [r0, #0]
 800e9c2:	2001      	movs	r0, #1
 800e9c4:	e7e7      	b.n	800e996 <_raise_r+0x12>
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	4798      	blx	r3
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	e7e0      	b.n	800e996 <_raise_r+0x12>

0800e9d4 <raise>:
 800e9d4:	4b02      	ldr	r3, [pc, #8]	@ (800e9e0 <raise+0xc>)
 800e9d6:	4601      	mov	r1, r0
 800e9d8:	6818      	ldr	r0, [r3, #0]
 800e9da:	f7ff bfd3 	b.w	800e984 <_raise_r>
 800e9de:	bf00      	nop
 800e9e0:	20000254 	.word	0x20000254

0800e9e4 <_kill_r>:
 800e9e4:	b538      	push	{r3, r4, r5, lr}
 800e9e6:	4d07      	ldr	r5, [pc, #28]	@ (800ea04 <_kill_r+0x20>)
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	4608      	mov	r0, r1
 800e9ee:	4611      	mov	r1, r2
 800e9f0:	602b      	str	r3, [r5, #0]
 800e9f2:	f7f3 fe0f 	bl	8002614 <_kill>
 800e9f6:	1c43      	adds	r3, r0, #1
 800e9f8:	d102      	bne.n	800ea00 <_kill_r+0x1c>
 800e9fa:	682b      	ldr	r3, [r5, #0]
 800e9fc:	b103      	cbz	r3, 800ea00 <_kill_r+0x1c>
 800e9fe:	6023      	str	r3, [r4, #0]
 800ea00:	bd38      	pop	{r3, r4, r5, pc}
 800ea02:	bf00      	nop
 800ea04:	2000090c 	.word	0x2000090c

0800ea08 <_getpid_r>:
 800ea08:	f7f3 bdfc 	b.w	8002604 <_getpid>

0800ea0c <_malloc_usable_size_r>:
 800ea0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea10:	1f18      	subs	r0, r3, #4
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	bfbc      	itt	lt
 800ea16:	580b      	ldrlt	r3, [r1, r0]
 800ea18:	18c0      	addlt	r0, r0, r3
 800ea1a:	4770      	bx	lr

0800ea1c <__swhatbuf_r>:
 800ea1c:	b570      	push	{r4, r5, r6, lr}
 800ea1e:	460c      	mov	r4, r1
 800ea20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea24:	2900      	cmp	r1, #0
 800ea26:	b096      	sub	sp, #88	@ 0x58
 800ea28:	4615      	mov	r5, r2
 800ea2a:	461e      	mov	r6, r3
 800ea2c:	da0d      	bge.n	800ea4a <__swhatbuf_r+0x2e>
 800ea2e:	89a3      	ldrh	r3, [r4, #12]
 800ea30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ea34:	f04f 0100 	mov.w	r1, #0
 800ea38:	bf14      	ite	ne
 800ea3a:	2340      	movne	r3, #64	@ 0x40
 800ea3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ea40:	2000      	movs	r0, #0
 800ea42:	6031      	str	r1, [r6, #0]
 800ea44:	602b      	str	r3, [r5, #0]
 800ea46:	b016      	add	sp, #88	@ 0x58
 800ea48:	bd70      	pop	{r4, r5, r6, pc}
 800ea4a:	466a      	mov	r2, sp
 800ea4c:	f000 f848 	bl	800eae0 <_fstat_r>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	dbec      	blt.n	800ea2e <__swhatbuf_r+0x12>
 800ea54:	9901      	ldr	r1, [sp, #4]
 800ea56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ea5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ea5e:	4259      	negs	r1, r3
 800ea60:	4159      	adcs	r1, r3
 800ea62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea66:	e7eb      	b.n	800ea40 <__swhatbuf_r+0x24>

0800ea68 <__smakebuf_r>:
 800ea68:	898b      	ldrh	r3, [r1, #12]
 800ea6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea6c:	079d      	lsls	r5, r3, #30
 800ea6e:	4606      	mov	r6, r0
 800ea70:	460c      	mov	r4, r1
 800ea72:	d507      	bpl.n	800ea84 <__smakebuf_r+0x1c>
 800ea74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ea78:	6023      	str	r3, [r4, #0]
 800ea7a:	6123      	str	r3, [r4, #16]
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	6163      	str	r3, [r4, #20]
 800ea80:	b003      	add	sp, #12
 800ea82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea84:	ab01      	add	r3, sp, #4
 800ea86:	466a      	mov	r2, sp
 800ea88:	f7ff ffc8 	bl	800ea1c <__swhatbuf_r>
 800ea8c:	9f00      	ldr	r7, [sp, #0]
 800ea8e:	4605      	mov	r5, r0
 800ea90:	4639      	mov	r1, r7
 800ea92:	4630      	mov	r0, r6
 800ea94:	f7fd fc50 	bl	800c338 <_malloc_r>
 800ea98:	b948      	cbnz	r0, 800eaae <__smakebuf_r+0x46>
 800ea9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea9e:	059a      	lsls	r2, r3, #22
 800eaa0:	d4ee      	bmi.n	800ea80 <__smakebuf_r+0x18>
 800eaa2:	f023 0303 	bic.w	r3, r3, #3
 800eaa6:	f043 0302 	orr.w	r3, r3, #2
 800eaaa:	81a3      	strh	r3, [r4, #12]
 800eaac:	e7e2      	b.n	800ea74 <__smakebuf_r+0xc>
 800eaae:	89a3      	ldrh	r3, [r4, #12]
 800eab0:	6020      	str	r0, [r4, #0]
 800eab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eab6:	81a3      	strh	r3, [r4, #12]
 800eab8:	9b01      	ldr	r3, [sp, #4]
 800eaba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eabe:	b15b      	cbz	r3, 800ead8 <__smakebuf_r+0x70>
 800eac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eac4:	4630      	mov	r0, r6
 800eac6:	f000 f81d 	bl	800eb04 <_isatty_r>
 800eaca:	b128      	cbz	r0, 800ead8 <__smakebuf_r+0x70>
 800eacc:	89a3      	ldrh	r3, [r4, #12]
 800eace:	f023 0303 	bic.w	r3, r3, #3
 800ead2:	f043 0301 	orr.w	r3, r3, #1
 800ead6:	81a3      	strh	r3, [r4, #12]
 800ead8:	89a3      	ldrh	r3, [r4, #12]
 800eada:	431d      	orrs	r5, r3
 800eadc:	81a5      	strh	r5, [r4, #12]
 800eade:	e7cf      	b.n	800ea80 <__smakebuf_r+0x18>

0800eae0 <_fstat_r>:
 800eae0:	b538      	push	{r3, r4, r5, lr}
 800eae2:	4d07      	ldr	r5, [pc, #28]	@ (800eb00 <_fstat_r+0x20>)
 800eae4:	2300      	movs	r3, #0
 800eae6:	4604      	mov	r4, r0
 800eae8:	4608      	mov	r0, r1
 800eaea:	4611      	mov	r1, r2
 800eaec:	602b      	str	r3, [r5, #0]
 800eaee:	f7f3 fdf1 	bl	80026d4 <_fstat>
 800eaf2:	1c43      	adds	r3, r0, #1
 800eaf4:	d102      	bne.n	800eafc <_fstat_r+0x1c>
 800eaf6:	682b      	ldr	r3, [r5, #0]
 800eaf8:	b103      	cbz	r3, 800eafc <_fstat_r+0x1c>
 800eafa:	6023      	str	r3, [r4, #0]
 800eafc:	bd38      	pop	{r3, r4, r5, pc}
 800eafe:	bf00      	nop
 800eb00:	2000090c 	.word	0x2000090c

0800eb04 <_isatty_r>:
 800eb04:	b538      	push	{r3, r4, r5, lr}
 800eb06:	4d06      	ldr	r5, [pc, #24]	@ (800eb20 <_isatty_r+0x1c>)
 800eb08:	2300      	movs	r3, #0
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	4608      	mov	r0, r1
 800eb0e:	602b      	str	r3, [r5, #0]
 800eb10:	f7f3 fdf0 	bl	80026f4 <_isatty>
 800eb14:	1c43      	adds	r3, r0, #1
 800eb16:	d102      	bne.n	800eb1e <_isatty_r+0x1a>
 800eb18:	682b      	ldr	r3, [r5, #0]
 800eb1a:	b103      	cbz	r3, 800eb1e <_isatty_r+0x1a>
 800eb1c:	6023      	str	r3, [r4, #0]
 800eb1e:	bd38      	pop	{r3, r4, r5, pc}
 800eb20:	2000090c 	.word	0x2000090c

0800eb24 <_init>:
 800eb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb26:	bf00      	nop
 800eb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb2a:	bc08      	pop	{r3}
 800eb2c:	469e      	mov	lr, r3
 800eb2e:	4770      	bx	lr

0800eb30 <_fini>:
 800eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb32:	bf00      	nop
 800eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb36:	bc08      	pop	{r3}
 800eb38:	469e      	mov	lr, r3
 800eb3a:	4770      	bx	lr
