
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da9c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800dc80  0800dc80  0000ec80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1cc  0800e1cc  000103c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1cc  0800e1cc  0000f1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1d4  0800e1d4  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1d4  0800e1d4  0000f1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1d8  0800e1d8  0000f1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c0  20000000  0800e1dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  200003c0  0800e59c  000103c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  0800e59c  00010868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a430  00000000  00000000  000103f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312b  00000000  00000000  0002a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  0002d950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001114  00000000  00000000  0002ef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ae9  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a7e  00000000  00000000  00059b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001149a6  00000000  00000000  000735c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187f69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000740c  00000000  00000000  00187fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  0018f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003c0 	.word	0x200003c0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800dc64 	.word	0x0800dc64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003c4 	.word	0x200003c4
 800021c:	0800dc64 	.word	0x0800dc64

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09e      	sub	sp, #120	@ 0x78
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	673b      	str	r3, [r7, #112]	@ 0x70
	char*		token;
	int 		newCmdReady = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001062:	f001 fb00 	bl	8002666 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001066:	f000 f98f 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106a:	f000 fc5d 	bl	8001928 <MX_GPIO_Init>
  MX_ADC2_Init();
 800106e:	f000 fa4d 	bl	800150c <MX_ADC2_Init>
  MX_ADC1_Init();
 8001072:	f000 f9d3 	bl	800141c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001076:	f000 faaf 	bl	80015d8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800107a:	f000 fb71 	bl	8001760 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800107e:	f000 fbbb 	bl	80017f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001082:	f000 fc05 	bl	8001890 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//void Shell_Init(void){
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2224      	movs	r2, #36	@ 0x24
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f009 fa32 	bl	800a4f6 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8001092:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001096:	2240      	movs	r2, #64	@ 0x40
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f009 fa2b 	bl	800a4f6 <memset>
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 80010a0:	4ba1      	ldr	r3, [pc, #644]	@ (8001328 <main+0x2d4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80010a6:	2240      	movs	r2, #64	@ 0x40
 80010a8:	2100      	movs	r1, #0
 80010aa:	48a0      	ldr	r0, [pc, #640]	@ (800132c <main+0x2d8>)
 80010ac:	f009 fa23 	bl	800a4f6 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80010b0:	2201      	movs	r2, #1
 80010b2:	499d      	ldr	r1, [pc, #628]	@ (8001328 <main+0x2d4>)
 80010b4:	489e      	ldr	r0, [pc, #632]	@ (8001330 <main+0x2dc>)
 80010b6:	f006 f997 	bl	80073e8 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f001 fb0a 	bl	80026d4 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	2266      	movs	r2, #102	@ 0x66
 80010c6:	499b      	ldr	r1, [pc, #620]	@ (8001334 <main+0x2e0>)
 80010c8:	4899      	ldr	r0, [pc, #612]	@ (8001330 <main+0x2dc>)
 80010ca:	f006 f8ff 	bl	80072cc <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	2218      	movs	r2, #24
 80010d4:	4998      	ldr	r1, [pc, #608]	@ (8001338 <main+0x2e4>)
 80010d6:	4896      	ldr	r0, [pc, #600]	@ (8001330 <main+0x2dc>)
 80010d8:	f006 f8f8 	bl	80072cc <HAL_UART_Transmit>
  while (1)
  {
	  /**
	   * Vérifie que le caractère a été reçu : uartRxReceived mis à 1
	   */
	  	  if(uartRxReceived)
 80010dc:	4b97      	ldr	r3, [pc, #604]	@ (800133c <main+0x2e8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d056      	beq.n	8001192 <main+0x13e>
	  	  {
	  		  /**
	  		   * Echo du caractère sur la console
	  		   */
	  		  switch(uartRxBuffer[0]){
 80010e4:	4b90      	ldr	r3, [pc, #576]	@ (8001328 <main+0x2d4>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b0d      	cmp	r3, #13
 80010ea:	d002      	beq.n	80010f2 <main+0x9e>
 80010ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80010ee:	d02d      	beq.n	800114c <main+0xf8>
 80010f0:	e03c      	b.n	800116c <main+0x118>
	  		  // Nouvelle ligne, instruction à traiter
	  		  case ASCII_CR:
	  			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	2203      	movs	r2, #3
 80010f8:	4991      	ldr	r1, [pc, #580]	@ (8001340 <main+0x2ec>)
 80010fa:	488d      	ldr	r0, [pc, #564]	@ (8001330 <main+0x2dc>)
 80010fc:	f006 f8e6 	bl	80072cc <HAL_UART_Transmit>
	  			  cmdBuffer[idx_cmd] = '\0';
 8001100:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001106:	4413      	add	r3, r2
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	  			  argc = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	673b      	str	r3, [r7, #112]	@ 0x70
	  			  token = strtok(cmdBuffer, " ");
 8001110:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001114:	498b      	ldr	r1, [pc, #556]	@ (8001344 <main+0x2f0>)
 8001116:	4618      	mov	r0, r3
 8001118:	f009 f9f6 	bl	800a508 <strtok>
 800111c:	66f8      	str	r0, [r7, #108]	@ 0x6c
	  			  while(token!=NULL){
 800111e:	e00d      	b.n	800113c <main+0xe8>
	  				  argv[argc++] = token;
 8001120:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	673a      	str	r2, [r7, #112]	@ 0x70
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	3378      	adds	r3, #120	@ 0x78
 800112a:	443b      	add	r3, r7
 800112c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800112e:	f843 2c74 	str.w	r2, [r3, #-116]
	  				  token = strtok(NULL, " ");
 8001132:	4984      	ldr	r1, [pc, #528]	@ (8001344 <main+0x2f0>)
 8001134:	2000      	movs	r0, #0
 8001136:	f009 f9e7 	bl	800a508 <strtok>
 800113a:	66f8      	str	r0, [r7, #108]	@ 0x6c
	  			  while(token!=NULL){
 800113c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1ee      	bne.n	8001120 <main+0xcc>
	  			  }

	  			  idx_cmd = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	677b      	str	r3, [r7, #116]	@ 0x74
	  			  newCmdReady = 1;
 8001146:	2301      	movs	r3, #1
 8001148:	66bb      	str	r3, [r7, #104]	@ 0x68
	  			  break;
 800114a:	e01f      	b.n	800118c <main+0x138>
	  		  // Suppression du dernier caractère
	  		  case ASCII_DEL:
	  			  cmdBuffer[idx_cmd--] = '\0';
 800114c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800114e:	1e5a      	subs	r2, r3, #1
 8001150:	677a      	str	r2, [r7, #116]	@ 0x74
 8001152:	3378      	adds	r3, #120	@ 0x78
 8001154:	443b      	add	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	2201      	movs	r2, #1
 8001162:	4971      	ldr	r1, [pc, #452]	@ (8001328 <main+0x2d4>)
 8001164:	4872      	ldr	r0, [pc, #456]	@ (8001330 <main+0x2dc>)
 8001166:	f006 f8b1 	bl	80072cc <HAL_UART_Transmit>
	  			  break;
 800116a:	e00f      	b.n	800118c <main+0x138>
	  	      // Nouveau caractère
	  		  default:
	  			  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800116c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	677a      	str	r2, [r7, #116]	@ 0x74
 8001172:	4a6d      	ldr	r2, [pc, #436]	@ (8001328 <main+0x2d4>)
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	3378      	adds	r3, #120	@ 0x78
 8001178:	443b      	add	r3, r7
 800117a:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	2201      	movs	r2, #1
 8001184:	4968      	ldr	r1, [pc, #416]	@ (8001328 <main+0x2d4>)
 8001186:	486a      	ldr	r0, [pc, #424]	@ (8001330 <main+0x2dc>)
 8001188:	f006 f8a0 	bl	80072cc <HAL_UART_Transmit>
	  		  }
	  		  uartRxReceived = 0;
 800118c:	4b6b      	ldr	r3, [pc, #428]	@ (800133c <main+0x2e8>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(newCmdReady){
 8001192:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0a1      	beq.n	80010dc <main+0x88>
	  		  if(strcmp(argv[0],"set")==0){
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	496b      	ldr	r1, [pc, #428]	@ (8001348 <main+0x2f4>)
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f83f 	bl	8000220 <strcmp>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d12d      	bne.n	8001204 <main+0x1b0>
	  			  if(strcmp(argv[1],"PA5")==0){
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4968      	ldr	r1, [pc, #416]	@ (800134c <main+0x2f8>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f837 	bl	8000220 <strcmp>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d11d      	bne.n	80011f4 <main+0x1a0>
	  				  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f008 f980 	bl	80094c0 <atoi>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	2120      	movs	r1, #32
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011cc:	f003 f884 	bl	80042d8 <HAL_GPIO_WritePin>
	  				  sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f008 f974 	bl	80094c0 <atoi>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	495c      	ldr	r1, [pc, #368]	@ (8001350 <main+0x2fc>)
 80011de:	4853      	ldr	r0, [pc, #332]	@ (800132c <main+0x2d8>)
 80011e0:	f009 f926 	bl	800a430 <siprintf>
	  				  HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	2220      	movs	r2, #32
 80011ea:	4950      	ldr	r1, [pc, #320]	@ (800132c <main+0x2d8>)
 80011ec:	4850      	ldr	r0, [pc, #320]	@ (8001330 <main+0x2dc>)
 80011ee:	f006 f86d 	bl	80072cc <HAL_UART_Transmit>
 80011f2:	e08f      	b.n	8001314 <main+0x2c0>
	  			  }
	  			  else{
	  				  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	2214      	movs	r2, #20
 80011fa:	4956      	ldr	r1, [pc, #344]	@ (8001354 <main+0x300>)
 80011fc:	484c      	ldr	r0, [pc, #304]	@ (8001330 <main+0x2dc>)
 80011fe:	f006 f865 	bl	80072cc <HAL_UART_Transmit>
 8001202:	e087      	b.n	8001314 <main+0x2c0>
	  			  }
	  		  }
	  		  else if(strcmp(argv[0],"pinout")==0)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4954      	ldr	r1, [pc, #336]	@ (8001358 <main+0x304>)
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f809 	bl	8000220 <strcmp>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d107      	bne.n	8001224 <main+0x1d0>
	  		  {
	  			  HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	228b      	movs	r2, #139	@ 0x8b
 800121a:	4950      	ldr	r1, [pc, #320]	@ (800135c <main+0x308>)
 800121c:	4844      	ldr	r0, [pc, #272]	@ (8001330 <main+0x2dc>)
 800121e:	f006 f855 	bl	80072cc <HAL_UART_Transmit>
 8001222:	e077      	b.n	8001314 <main+0x2c0>
	  		  }
	  		  else if(strcmp(argv[0],"help")==0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	494e      	ldr	r1, [pc, #312]	@ (8001360 <main+0x30c>)
 8001228:	4618      	mov	r0, r3
 800122a:	f7fe fff9 	bl	8000220 <strcmp>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d107      	bne.n	8001244 <main+0x1f0>
	  		  {
	  			  HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	22ae      	movs	r2, #174	@ 0xae
 800123a:	494a      	ldr	r1, [pc, #296]	@ (8001364 <main+0x310>)
 800123c:	483c      	ldr	r0, [pc, #240]	@ (8001330 <main+0x2dc>)
 800123e:	f006 f845 	bl	80072cc <HAL_UART_Transmit>
 8001242:	e067      	b.n	8001314 <main+0x2c0>
	  		  }
	  		  else if(strcmp(argv[0],"powerOn")==0)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4948      	ldr	r1, [pc, #288]	@ (8001368 <main+0x314>)
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffe9 	bl	8000220 <strcmp>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d109      	bne.n	8001268 <main+0x214>
	  		  {
	  			  HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	220b      	movs	r2, #11
 800125a:	4944      	ldr	r1, [pc, #272]	@ (800136c <main+0x318>)
 800125c:	4834      	ldr	r0, [pc, #208]	@ (8001330 <main+0x2dc>)
 800125e:	f006 f835 	bl	80072cc <HAL_UART_Transmit>
	  			  motor_start();
 8001262:	f000 fcad 	bl	8001bc0 <motor_start>
 8001266:	e055      	b.n	8001314 <main+0x2c0>
	  		  }
	  		  else if(strcmp(argv[0],"powerOff")==0)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4941      	ldr	r1, [pc, #260]	@ (8001370 <main+0x31c>)
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ffd7 	bl	8000220 <strcmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d109      	bne.n	800128c <main+0x238>
	  		  {
	  			  HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	220c      	movs	r2, #12
 800127e:	493d      	ldr	r1, [pc, #244]	@ (8001374 <main+0x320>)
 8001280:	482b      	ldr	r0, [pc, #172]	@ (8001330 <main+0x2dc>)
 8001282:	f006 f823 	bl	80072cc <HAL_UART_Transmit>
	  			  motor_off();
 8001286:	f000 fc85 	bl	8001b94 <motor_off>
 800128a:	e043      	b.n	8001314 <main+0x2c0>
	  		  }
	  		  else if(strcmp(argv[0],"get")==0)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	493a      	ldr	r1, [pc, #232]	@ (8001378 <main+0x324>)
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ffc5 	bl	8000220 <strcmp>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d107      	bne.n	80012ac <main+0x258>
	  		  {
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	2214      	movs	r2, #20
 80012a2:	492c      	ldr	r1, [pc, #176]	@ (8001354 <main+0x300>)
 80012a4:	4822      	ldr	r0, [pc, #136]	@ (8001330 <main+0x2dc>)
 80012a6:	f006 f811 	bl	80072cc <HAL_UART_Transmit>
 80012aa:	e033      	b.n	8001314 <main+0x2c0>
	  		  /**
	  		   * Speed control
	  		   * Entrer speed XXXX dans le terminal (entre 0 et 8499)
	  		   * XXXX est converti en rapport cyclique
	  		   */
	  		  else if(strcmp(argv[0],"speed")==0){
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4933      	ldr	r1, [pc, #204]	@ (800137c <main+0x328>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ffb5 	bl	8000220 <strcmp>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d119      	bne.n	80012f0 <main+0x29c>
	  			  motor_speed(atoi(argv[1]));
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4618      	mov	r0, r3
 80012c0:	f008 f8fe 	bl	80094c0 <atoi>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fbec 	bl	8001aa4 <motor_speed>
	  			  sprintf(uartTxBuffer,"Speed : %d \r\n", atoi(argv[1]));
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f008 f8f6 	bl	80094c0 <atoi>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4929      	ldr	r1, [pc, #164]	@ (8001380 <main+0x32c>)
 80012da:	4814      	ldr	r0, [pc, #80]	@ (800132c <main+0x2d8>)
 80012dc:	f009 f8a8 	bl	800a430 <siprintf>
	  			  HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	2240      	movs	r2, #64	@ 0x40
 80012e6:	4911      	ldr	r1, [pc, #68]	@ (800132c <main+0x2d8>)
 80012e8:	4811      	ldr	r0, [pc, #68]	@ (8001330 <main+0x2dc>)
 80012ea:	f005 ffef 	bl	80072cc <HAL_UART_Transmit>
 80012ee:	e011      	b.n	8001314 <main+0x2c0>
	  		  }

	  		  else if(strcmp(argv[0],"current")==0){
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4924      	ldr	r1, [pc, #144]	@ (8001384 <main+0x330>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe ff93 	bl	8000220 <strcmp>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <main+0x2b2>
	  			  measure_current();
 8001300:	f000 fc76 	bl	8001bf0 <measure_current>
 8001304:	e006      	b.n	8001314 <main+0x2c0>
	  		  }

	  		  else{
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	2214      	movs	r2, #20
 800130c:	4911      	ldr	r1, [pc, #68]	@ (8001354 <main+0x300>)
 800130e:	4808      	ldr	r0, [pc, #32]	@ (8001330 <main+0x2dc>)
 8001310:	f005 ffdc 	bl	80072cc <HAL_UART_Transmit>
	  		  }
	  			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	2218      	movs	r2, #24
 800131a:	4907      	ldr	r1, [pc, #28]	@ (8001338 <main+0x2e4>)
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <main+0x2dc>)
 800131e:	f005 ffd5 	bl	80072cc <HAL_UART_Transmit>
	  			  newCmdReady = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	66bb      	str	r3, [r7, #104]	@ 0x68
	  	  if(uartRxReceived)
 8001326:	e6d9      	b.n	80010dc <main+0x88>
 8001328:	20000678 	.word	0x20000678
 800132c:	2000067c 	.word	0x2000067c
 8001330:	2000054c 	.word	0x2000054c
 8001334:	20000018 	.word	0x20000018
 8001338:	20000000 	.word	0x20000000
 800133c:	20000674 	.word	0x20000674
 8001340:	20000080 	.word	0x20000080
 8001344:	0800dc80 	.word	0x0800dc80
 8001348:	0800dc84 	.word	0x0800dc84
 800134c:	0800dc88 	.word	0x0800dc88
 8001350:	0800dc8c 	.word	0x0800dc8c
 8001354:	20000084 	.word	0x20000084
 8001358:	0800dca8 	.word	0x0800dca8
 800135c:	20000148 	.word	0x20000148
 8001360:	0800dcb0 	.word	0x0800dcb0
 8001364:	20000098 	.word	0x20000098
 8001368:	0800dcb8 	.word	0x0800dcb8
 800136c:	200001d4 	.word	0x200001d4
 8001370:	0800dcc0 	.word	0x0800dcc0
 8001374:	200001e0 	.word	0x200001e0
 8001378:	0800dccc 	.word	0x0800dccc
 800137c:	0800dcd0 	.word	0x0800dcd0
 8001380:	0800dcd8 	.word	0x0800dcd8
 8001384:	0800dce8 	.word	0x0800dce8

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	@ 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	2238      	movs	r2, #56	@ 0x38
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f009 f8ad 	bl	800a4f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f002 ffd0 	bl	8004350 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ba:	2302      	movs	r3, #2
 80013bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013be:	2303      	movs	r3, #3
 80013c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80013c2:	2306      	movs	r3, #6
 80013c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013c6:	2355      	movs	r3, #85	@ 0x55
 80013c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 f86c 	bl	80044b8 <HAL_RCC_OscConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80013e6:	f000 fb57 	bl	8001a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ea:	230f      	movs	r3, #15
 80013ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ee:	2303      	movs	r3, #3
 80013f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2104      	movs	r1, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fb6a 	bl	8004adc <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800140e:	f000 fb43 	bl	8001a98 <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3750      	adds	r7, #80	@ 0x50
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	@ 0x30
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2220      	movs	r2, #32
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f009 f85e 	bl	800a4f6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800143a:	4b32      	ldr	r3, [pc, #200]	@ (8001504 <MX_ADC1_Init+0xe8>)
 800143c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001440:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001442:	4b30      	ldr	r3, [pc, #192]	@ (8001504 <MX_ADC1_Init+0xe8>)
 8001444:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001448:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800144a:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <MX_ADC1_Init+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001450:	4b2c      	ldr	r3, [pc, #176]	@ (8001504 <MX_ADC1_Init+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001456:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <MX_ADC1_Init+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <MX_ADC1_Init+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001462:	4b28      	ldr	r3, [pc, #160]	@ (8001504 <MX_ADC1_Init+0xe8>)
 8001464:	2204      	movs	r2, #4
 8001466:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001468:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <MX_ADC1_Init+0xe8>)
 800146a:	2200      	movs	r2, #0
 800146c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800146e:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <MX_ADC1_Init+0xe8>)
 8001470:	2200      	movs	r2, #0
 8001472:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001474:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <MX_ADC1_Init+0xe8>)
 8001476:	2201      	movs	r2, #1
 8001478:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800147a:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <MX_ADC1_Init+0xe8>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <MX_ADC1_Init+0xe8>)
 8001484:	2200      	movs	r2, #0
 8001486:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001488:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <MX_ADC1_Init+0xe8>)
 800148a:	2200      	movs	r2, #0
 800148c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <MX_ADC1_Init+0xe8>)
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001496:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <MX_ADC1_Init+0xe8>)
 8001498:	2200      	movs	r2, #0
 800149a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <MX_ADC1_Init+0xe8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a4:	4817      	ldr	r0, [pc, #92]	@ (8001504 <MX_ADC1_Init+0xe8>)
 80014a6:	f001 fb43 	bl	8002b30 <HAL_ADC_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80014b0:	f000 faf2 	bl	8001a98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4811      	ldr	r0, [pc, #68]	@ (8001504 <MX_ADC1_Init+0xe8>)
 80014c0:	f002 fae0 	bl	8003a84 <HAL_ADCEx_MultiModeConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014ca:	f000 fae5 	bl	8001a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_ADC1_Init+0xec>)
 80014d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d2:	2306      	movs	r3, #6
 80014d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014da:	237f      	movs	r3, #127	@ 0x7f
 80014dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014de:	2304      	movs	r3, #4
 80014e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4806      	ldr	r0, [pc, #24]	@ (8001504 <MX_ADC1_Init+0xe8>)
 80014ec:	f001 fdce 	bl	800308c <HAL_ADC_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014f6:	f000 facf 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	3730      	adds	r7, #48	@ 0x30
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200003dc 	.word	0x200003dc
 8001508:	21800100 	.word	0x21800100

0800150c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001512:	463b      	mov	r3, r7
 8001514:	2220      	movs	r2, #32
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f008 ffec 	bl	800a4f6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800151e:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001520:	4a2b      	ldr	r2, [pc, #172]	@ (80015d0 <MX_ADC2_Init+0xc4>)
 8001522:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001526:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800152a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800152c:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <MX_ADC2_Init+0xc0>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <MX_ADC2_Init+0xc0>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800153e:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001544:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001546:	2204      	movs	r2, #4
 8001548:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <MX_ADC2_Init+0xc0>)
 800154c:	2200      	movs	r2, #0
 800154e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001550:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001552:	2200      	movs	r2, #0
 8001554:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001558:	2201      	movs	r2, #1
 800155a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800155c:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <MX_ADC2_Init+0xc0>)
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001566:	2200      	movs	r2, #0
 8001568:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_ADC2_Init+0xc0>)
 800156c:	2200      	movs	r2, #0
 800156e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_ADC2_Init+0xc0>)
 800157a:	2200      	movs	r2, #0
 800157c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001586:	4811      	ldr	r0, [pc, #68]	@ (80015cc <MX_ADC2_Init+0xc0>)
 8001588:	f001 fad2 	bl	8002b30 <HAL_ADC_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001592:	f000 fa81 	bl	8001a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_ADC2_Init+0xc8>)
 8001598:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800159a:	2306      	movs	r3, #6
 800159c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015a2:	237f      	movs	r3, #127	@ 0x7f
 80015a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015a6:	2304      	movs	r3, #4
 80015a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	@ (80015cc <MX_ADC2_Init+0xc0>)
 80015b4:	f001 fd6a 	bl	800308c <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80015be:	f000 fa6b 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000448 	.word	0x20000448
 80015d0:	50000100 	.word	0x50000100
 80015d4:	19200040 	.word	0x19200040

080015d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b09c      	sub	sp, #112	@ 0x70
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	615a      	str	r2, [r3, #20]
 800160a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2234      	movs	r2, #52	@ 0x34
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f008 ff6f 	bl	800a4f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001618:	4b4f      	ldr	r3, [pc, #316]	@ (8001758 <MX_TIM1_Init+0x180>)
 800161a:	4a50      	ldr	r2, [pc, #320]	@ (800175c <MX_TIM1_Init+0x184>)
 800161c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800161e:	4b4e      	ldr	r3, [pc, #312]	@ (8001758 <MX_TIM1_Init+0x180>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001624:	4b4c      	ldr	r3, [pc, #304]	@ (8001758 <MX_TIM1_Init+0x180>)
 8001626:	2220      	movs	r2, #32
 8001628:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 800162a:	4b4b      	ldr	r3, [pc, #300]	@ (8001758 <MX_TIM1_Init+0x180>)
 800162c:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001630:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b49      	ldr	r3, [pc, #292]	@ (8001758 <MX_TIM1_Init+0x180>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001638:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <MX_TIM1_Init+0x180>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	4b46      	ldr	r3, [pc, #280]	@ (8001758 <MX_TIM1_Init+0x180>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001644:	4844      	ldr	r0, [pc, #272]	@ (8001758 <MX_TIM1_Init+0x180>)
 8001646:	f003 fee5 	bl	8005414 <HAL_TIM_Base_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001650:	f000 fa22 	bl	8001a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001658:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800165a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800165e:	4619      	mov	r1, r3
 8001660:	483d      	ldr	r0, [pc, #244]	@ (8001758 <MX_TIM1_Init+0x180>)
 8001662:	f004 fc1b 	bl	8005e9c <HAL_TIM_ConfigClockSource>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800166c:	f000 fa14 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001670:	4839      	ldr	r0, [pc, #228]	@ (8001758 <MX_TIM1_Init+0x180>)
 8001672:	f003 ff9f 	bl	80055b4 <HAL_TIM_PWM_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800167c:	f000 fa0c 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800168c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001690:	4619      	mov	r1, r3
 8001692:	4831      	ldr	r0, [pc, #196]	@ (8001758 <MX_TIM1_Init+0x180>)
 8001694:	f005 fc22 	bl	8006edc <HAL_TIMEx_MasterConfigSynchronization>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800169e:	f000 f9fb 	bl	8001a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a2:	2360      	movs	r3, #96	@ 0x60
 80016a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4250;
 80016a6:	f241 039a 	movw	r3, #4250	@ 0x109a
 80016aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ac:	2300      	movs	r3, #0
 80016ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b0:	2300      	movs	r3, #0
 80016b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	4823      	ldr	r0, [pc, #140]	@ (8001758 <MX_TIM1_Init+0x180>)
 80016ca:	f004 fad3 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80016d4:	f000 f9e0 	bl	8001a98 <Error_Handler>
  }
  sConfigOC.Pulse = 4249;
 80016d8:	f241 0399 	movw	r3, #4249	@ 0x1099
 80016dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016e2:	2204      	movs	r2, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	481c      	ldr	r0, [pc, #112]	@ (8001758 <MX_TIM1_Init+0x180>)
 80016e8:	f004 fac4 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80016f2:	f000 f9d1 	bl	8001a98 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80016f6:	4818      	ldr	r0, [pc, #96]	@ (8001758 <MX_TIM1_Init+0x180>)
 80016f8:	f005 fd1a 	bl	8007130 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 160;
 8001708:	23a0      	movs	r3, #160	@ 0xa0
 800170a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001710:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001714:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4619      	mov	r1, r3
 8001738:	4807      	ldr	r0, [pc, #28]	@ (8001758 <MX_TIM1_Init+0x180>)
 800173a:	f005 fc65 	bl	8007008 <HAL_TIMEx_ConfigBreakDeadTime>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001744:	f000 f9a8 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001748:	4803      	ldr	r0, [pc, #12]	@ (8001758 <MX_TIM1_Init+0x180>)
 800174a:	f000 fca3 	bl	8002094 <HAL_TIM_MspPostInit>

}
 800174e:	bf00      	nop
 8001750:	3770      	adds	r7, #112	@ 0x70
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200004b4 	.word	0x200004b4
 800175c:	40012c00 	.word	0x40012c00

08001760 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <MX_TIM3_Init+0x90>)
 8001780:	4a1c      	ldr	r2, [pc, #112]	@ (80017f4 <MX_TIM3_Init+0x94>)
 8001782:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001784:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <MX_TIM3_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <MX_TIM3_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001790:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <MX_TIM3_Init+0x90>)
 8001792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001796:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <MX_TIM3_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <MX_TIM3_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4619      	mov	r1, r3
 80017ba:	480d      	ldr	r0, [pc, #52]	@ (80017f0 <MX_TIM3_Init+0x90>)
 80017bc:	f005 f9bf 	bl	8006b3e <HAL_TIMEx_HallSensor_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80017c6:	f000 f967 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80017ca:	2350      	movs	r3, #80	@ 0x50
 80017cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	@ (80017f0 <MX_TIM3_Init+0x90>)
 80017d8:	f005 fb80 	bl	8006edc <HAL_TIMEx_MasterConfigSynchronization>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80017e2:	f000 f959 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000500 	.word	0x20000500
 80017f4:	40000400 	.word	0x40000400

080017f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017fc:	4b22      	ldr	r3, [pc, #136]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 80017fe:	4a23      	ldr	r2, [pc, #140]	@ (800188c <MX_USART2_UART_Init+0x94>)
 8001800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001802:	4b21      	ldr	r3, [pc, #132]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b1f      	ldr	r3, [pc, #124]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001816:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182e:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001840:	4811      	ldr	r0, [pc, #68]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 8001842:	f005 fcf3 	bl	800722c <HAL_UART_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800184c:	f000 f924 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001850:	2100      	movs	r1, #0
 8001852:	480d      	ldr	r0, [pc, #52]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 8001854:	f007 fd69 	bl	800932a <HAL_UARTEx_SetTxFifoThreshold>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800185e:	f000 f91b 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001862:	2100      	movs	r1, #0
 8001864:	4808      	ldr	r0, [pc, #32]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 8001866:	f007 fd9e 	bl	80093a6 <HAL_UARTEx_SetRxFifoThreshold>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001870:	f000 f912 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001874:	4804      	ldr	r0, [pc, #16]	@ (8001888 <MX_USART2_UART_Init+0x90>)
 8001876:	f007 fd1f 	bl	80092b8 <HAL_UARTEx_DisableFifoMode>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001880:	f000 f90a 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000054c 	.word	0x2000054c
 800188c:	40004400 	.word	0x40004400

08001890 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001894:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 8001896:	4a23      	ldr	r2, [pc, #140]	@ (8001924 <MX_USART3_UART_Init+0x94>)
 8001898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800189a:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 800189c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018b6:	220c      	movs	r2, #12
 80018b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ba:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c0:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018c6:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018d8:	4811      	ldr	r0, [pc, #68]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018da:	f005 fca7 	bl	800722c <HAL_UART_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018e4:	f000 f8d8 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e8:	2100      	movs	r1, #0
 80018ea:	480d      	ldr	r0, [pc, #52]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018ec:	f007 fd1d 	bl	800932a <HAL_UARTEx_SetTxFifoThreshold>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018f6:	f000 f8cf 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018fa:	2100      	movs	r1, #0
 80018fc:	4808      	ldr	r0, [pc, #32]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 80018fe:	f007 fd52 	bl	80093a6 <HAL_UARTEx_SetRxFifoThreshold>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001908:	f000 f8c6 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	@ (8001920 <MX_USART3_UART_Init+0x90>)
 800190e:	f007 fcd3 	bl	80092b8 <HAL_UARTEx_DisableFifoMode>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001918:	f000 f8be 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200005e0 	.word	0x200005e0
 8001924:	40004800 	.word	0x40004800

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <MX_GPIO_Init+0x114>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	4a3e      	ldr	r2, [pc, #248]	@ (8001a3c <MX_GPIO_Init+0x114>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a3c <MX_GPIO_Init+0x114>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001956:	4b39      	ldr	r3, [pc, #228]	@ (8001a3c <MX_GPIO_Init+0x114>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	4a38      	ldr	r2, [pc, #224]	@ (8001a3c <MX_GPIO_Init+0x114>)
 800195c:	f043 0320 	orr.w	r3, r3, #32
 8001960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001962:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <MX_GPIO_Init+0x114>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b33      	ldr	r3, [pc, #204]	@ (8001a3c <MX_GPIO_Init+0x114>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001972:	4a32      	ldr	r2, [pc, #200]	@ (8001a3c <MX_GPIO_Init+0x114>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800197a:	4b30      	ldr	r3, [pc, #192]	@ (8001a3c <MX_GPIO_Init+0x114>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <MX_GPIO_Init+0x114>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	4a2c      	ldr	r2, [pc, #176]	@ (8001a3c <MX_GPIO_Init+0x114>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001992:	4b2a      	ldr	r3, [pc, #168]	@ (8001a3c <MX_GPIO_Init+0x114>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199e:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <MX_GPIO_Init+0x114>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <MX_GPIO_Init+0x114>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019aa:	4b24      	ldr	r3, [pc, #144]	@ (8001a3c <MX_GPIO_Init+0x114>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2120      	movs	r1, #32
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019be:	f002 fc8b 	bl	80042d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2104      	movs	r1, #4
 80019c6:	481e      	ldr	r0, [pc, #120]	@ (8001a40 <MX_GPIO_Init+0x118>)
 80019c8:	f002 fc86 	bl	80042d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80019cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4818      	ldr	r0, [pc, #96]	@ (8001a44 <MX_GPIO_Init+0x11c>)
 80019e4:	f002 faf6 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80019e8:	2320      	movs	r3, #32
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a02:	f002 fae7 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001a06:	2304      	movs	r3, #4
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <MX_GPIO_Init+0x118>)
 8001a1e:	f002 fad9 	bl	8003fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2028      	movs	r0, #40	@ 0x28
 8001a28:	f002 f9ec 	bl	8003e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a2c:	2028      	movs	r0, #40	@ 0x28
 8001a2e:	f002 fa03 	bl	8003e38 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	@ 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000c00 	.word	0x48000c00
 8001a44:	48000800 	.word	0x48000800

08001a48 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_UART_RxCpltCallback+0x20>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001a56:	2201      	movs	r2, #1
 8001a58:	4904      	ldr	r1, [pc, #16]	@ (8001a6c <HAL_UART_RxCpltCallback+0x24>)
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_UART_RxCpltCallback+0x28>)
 8001a5c:	f005 fcc4 	bl	80073e8 <HAL_UART_Receive_IT>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000674 	.word	0x20000674
 8001a6c:	20000678 	.word	0x20000678
 8001a70:	2000054c 	.word	0x2000054c

08001a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a86:	f000 fe07 	bl	8002698 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40001000 	.word	0x40001000

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <Error_Handler+0x8>

08001aa4 <motor_speed>:
extern UART_HandleTypeDef huart2;

motor_t motor;

void motor_speed(int speed)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	if (speed > 8499)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	dd02      	ble.n	8001abc <motor_speed+0x18>
	{
		speed = 8499;
 8001ab6:	f242 1333 	movw	r3, #8499	@ 0x2133
 8001aba:	607b      	str	r3, [r7, #4]
	}
	if (speed < 0)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da01      	bge.n	8001ac6 <motor_speed+0x22>
	{
		speed = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
	}

	motor.speed = speed;
 8001ac6:	4a26      	ldr	r2, [pc, #152]	@ (8001b60 <motor_speed+0xbc>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6013      	str	r3, [r2, #0]

	if(motor.last_speed < motor.speed)
 8001acc:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <motor_speed+0xbc>)
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <motor_speed+0xbc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	da1a      	bge.n	8001b0e <motor_speed+0x6a>
	{
		for(int i=motor.last_speed; i<=motor.speed; i++)
 8001ad8:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <motor_speed+0xbc>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e010      	b.n	8001b02 <motor_speed+0x5e>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8001ae0:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <motor_speed+0xc0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 8499-i);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001aee:	3333      	adds	r3, #51	@ 0x33
 8001af0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b64 <motor_speed+0xc0>)
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_Delay(2);
 8001af6:	2002      	movs	r0, #2
 8001af8:	f000 fdec 	bl	80026d4 <HAL_Delay>
		for(int i=motor.last_speed; i<=motor.speed; i++)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <motor_speed+0xbc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dde9      	ble.n	8001ae0 <motor_speed+0x3c>
 8001b0c:	e01f      	b.n	8001b4e <motor_speed+0xaa>
		}
	}
	else if(motor.last_speed > motor.speed)
 8001b0e:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <motor_speed+0xbc>)
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <motor_speed+0xbc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	dd19      	ble.n	8001b4e <motor_speed+0xaa>
	{
		for(int i=motor.last_speed; i>=motor.speed; i--)
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <motor_speed+0xbc>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	e010      	b.n	8001b44 <motor_speed+0xa0>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <motor_speed+0xc0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 8499-i);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001b30:	3333      	adds	r3, #51	@ 0x33
 8001b32:	4a0c      	ldr	r2, [pc, #48]	@ (8001b64 <motor_speed+0xc0>)
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_Delay(2);
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f000 fdcb 	bl	80026d4 <HAL_Delay>
		for(int i=motor.last_speed; i>=motor.speed; i--)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <motor_speed+0xbc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dae9      	bge.n	8001b22 <motor_speed+0x7e>
		}
	}

	motor.last_speed = motor.speed;
 8001b4e:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <motor_speed+0xbc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a03      	ldr	r2, [pc, #12]	@ (8001b60 <motor_speed+0xbc>)
 8001b54:	6053      	str	r3, [r2, #4]

}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200006bc 	.word	0x200006bc
 8001b64:	200004b4 	.word	0x200004b4

08001b68 <motor_on>:

void motor_on()
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4808      	ldr	r0, [pc, #32]	@ (8001b90 <motor_on+0x28>)
 8001b70:	f003 fd82 	bl	8005678 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b74:	2104      	movs	r1, #4
 8001b76:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <motor_on+0x28>)
 8001b78:	f003 fd7e 	bl	8005678 <HAL_TIM_PWM_Start>

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4804      	ldr	r0, [pc, #16]	@ (8001b90 <motor_on+0x28>)
 8001b80:	f005 f88c 	bl	8006c9c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001b84:	2104      	movs	r1, #4
 8001b86:	4802      	ldr	r0, [pc, #8]	@ (8001b90 <motor_on+0x28>)
 8001b88:	f005 f888 	bl	8006c9c <HAL_TIMEx_PWMN_Start>
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200004b4 	.word	0x200004b4

08001b94 <motor_off>:

void motor_off()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4808      	ldr	r0, [pc, #32]	@ (8001bbc <motor_off+0x28>)
 8001b9c:	f003 fe7e 	bl	800589c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <motor_off+0x28>)
 8001ba4:	f003 fe7a 	bl	800589c <HAL_TIM_PWM_Stop>

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <motor_off+0x28>)
 8001bac:	f005 f938 	bl	8006e20 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <motor_off+0x28>)
 8001bb4:	f005 f934 	bl	8006e20 <HAL_TIMEx_PWMN_Stop>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200004b4 	.word	0x200004b4

08001bc0 <motor_start>:

void motor_start()
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	/** Règle le rapport cyclique à 50% **/
	motor_on();
 8001bc4:	f7ff ffd0 	bl	8001b68 <motor_on>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 4250);
 8001bc8:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <motor_start+0x28>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f241 029a 	movw	r2, #4250	@ 0x109a
 8001bd0:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 4250);
 8001bd2:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <motor_start+0x28>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f241 029a 	movw	r2, #4250	@ 0x109a
 8001bda:	635a      	str	r2, [r3, #52]	@ 0x34
	motor.last_speed = 4250;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <motor_start+0x2c>)
 8001bde:	f241 029a 	movw	r2, #4250	@ 0x109a
 8001be2:	605a      	str	r2, [r3, #4]
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200004b4 	.word	0x200004b4
 8001bec:	200006bc 	.word	0x200006bc

08001bf0 <measure_current>:

void measure_current()
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
	/** Récupère la valeur du courant sur l'adc 1 **/
	HAL_ADC_Start(&hadc1);
 8001bf6:	4830      	ldr	r0, [pc, #192]	@ (8001cb8 <measure_current+0xc8>)
 8001bf8:	f001 f956 	bl	8002ea8 <HAL_ADC_Start>
	float current = HAL_ADC_GetValue(&hadc1);
 8001bfc:	482e      	ldr	r0, [pc, #184]	@ (8001cb8 <measure_current+0xc8>)
 8001bfe:	f001 fa37 	bl	8003070 <HAL_ADC_GetValue>
 8001c02:	ee07 0a90 	vmov	s15, r0
 8001c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0a:	edc7 7a01 	vstr	s15, [r7, #4]
	/**
	 * @brief Tension d'alimentation de la carte = 3.3V
	 * @brief Résolution 12 bits = 4096 valeurs
	 * @brief Offset = 1.65 V
	 */
	current = (current*3.3)/4096;
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fcd2 	bl	80005b8 <__aeabi_f2d>
 8001c14:	a322      	add	r3, pc, #136	@ (adr r3, 8001ca0 <measure_current+0xb0>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fd25 	bl	8000668 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <measure_current+0xcc>)
 8001c2c:	f7fe fe46 	bl	80008bc <__aeabi_ddiv>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7ff f80e 	bl	8000c58 <__aeabi_d2f>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	607b      	str	r3, [r7, #4]
	current = (current-1.65)/0.05;
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7fe fcb9 	bl	80005b8 <__aeabi_f2d>
 8001c46:	a318      	add	r3, pc, #96	@ (adr r3, 8001ca8 <measure_current+0xb8>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fb54 	bl	80002f8 <__aeabi_dsub>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	a315      	add	r3, pc, #84	@ (adr r3, 8001cb0 <measure_current+0xc0>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	f7fe fe2d 	bl	80008bc <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe fff5 	bl	8000c58 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	607b      	str	r3, [r7, #4]

	sprintf(uartTxBuffer, "Current : %f A\r\n", current);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe fca0 	bl	80005b8 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4910      	ldr	r1, [pc, #64]	@ (8001cc0 <measure_current+0xd0>)
 8001c7e:	4811      	ldr	r0, [pc, #68]	@ (8001cc4 <measure_current+0xd4>)
 8001c80:	f008 fbd6 	bl	800a430 <siprintf>
	HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	2240      	movs	r2, #64	@ 0x40
 8001c8a:	490e      	ldr	r1, [pc, #56]	@ (8001cc4 <measure_current+0xd4>)
 8001c8c:	480e      	ldr	r0, [pc, #56]	@ (8001cc8 <measure_current+0xd8>)
 8001c8e:	f005 fb1d 	bl	80072cc <HAL_UART_Transmit>

}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	66666666 	.word	0x66666666
 8001ca4:	400a6666 	.word	0x400a6666
 8001ca8:	66666666 	.word	0x66666666
 8001cac:	3ffa6666 	.word	0x3ffa6666
 8001cb0:	9999999a 	.word	0x9999999a
 8001cb4:	3fa99999 	.word	0x3fa99999
 8001cb8:	200003dc 	.word	0x200003dc
 8001cbc:	40b00000 	.word	0x40b00000
 8001cc0:	0800dcf0 	.word	0x0800dcf0
 8001cc4:	2000067c 	.word	0x2000067c
 8001cc8:	2000054c 	.word	0x2000054c

08001ccc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <HAL_MspInit+0x44>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d10 <HAL_MspInit+0x44>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cde:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <HAL_MspInit+0x44>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <HAL_MspInit+0x44>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cee:	4a08      	ldr	r2, [pc, #32]	@ (8001d10 <HAL_MspInit+0x44>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_MspInit+0x44>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d02:	f002 fbc9 	bl	8004498 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b0a4      	sub	sp, #144	@ 0x90
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d30:	2254      	movs	r2, #84	@ 0x54
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f008 fbde 	bl	800a4f6 <memset>
  if(hadc->Instance==ADC1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d42:	d174      	bne.n	8001e2e <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001d44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d4a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 f90f 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d60:	f7ff fe9a 	bl	8001a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d64:	4b63      	ldr	r3, [pc, #396]	@ (8001ef4 <HAL_ADC_MspInit+0x1e0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	4a62      	ldr	r2, [pc, #392]	@ (8001ef4 <HAL_ADC_MspInit+0x1e0>)
 8001d6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d6e:	4b61      	ldr	r3, [pc, #388]	@ (8001ef4 <HAL_ADC_MspInit+0x1e0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10b      	bne.n	8001d8e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d76:	4b60      	ldr	r3, [pc, #384]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001d7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	4a59      	ldr	r2, [pc, #356]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d9a:	4b57      	ldr	r3, [pc, #348]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	623b      	str	r3, [r7, #32]
 8001da4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b54      	ldr	r3, [pc, #336]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	4a53      	ldr	r2, [pc, #332]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db2:	4b51      	ldr	r3, [pc, #324]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dca:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001de6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001dea:	4619      	mov	r1, r3
 8001dec:	4843      	ldr	r0, [pc, #268]	@ (8001efc <HAL_ADC_MspInit+0x1e8>)
 8001dee:	f002 f8f1 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001df2:	2302      	movs	r3, #2
 8001df4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df6:	2303      	movs	r3, #3
 8001df8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001e06:	4619      	mov	r1, r3
 8001e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e0c:	f002 f8e2 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e10:	2303      	movs	r3, #3
 8001e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e14:	2303      	movs	r3, #3
 8001e16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001e24:	4619      	mov	r1, r3
 8001e26:	4836      	ldr	r0, [pc, #216]	@ (8001f00 <HAL_ADC_MspInit+0x1ec>)
 8001e28:	f002 f8d4 	bl	8003fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e2c:	e05e      	b.n	8001eec <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a34      	ldr	r2, [pc, #208]	@ (8001f04 <HAL_ADC_MspInit+0x1f0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d159      	bne.n	8001eec <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 f895 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8001e54:	f7ff fe20 	bl	8001a98 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e58:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <HAL_ADC_MspInit+0x1e0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <HAL_ADC_MspInit+0x1e0>)
 8001e60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e62:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <HAL_ADC_MspInit+0x1e0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d10b      	bne.n	8001e82 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001e70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e76:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	4a16      	ldr	r2, [pc, #88]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <HAL_ADC_MspInit+0x1e4>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8001eb2:	230b      	movs	r3, #11
 8001eb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <HAL_ADC_MspInit+0x1e8>)
 8001eca:	f002 f883 	bl	8003fd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee8:	f002 f874 	bl	8003fd4 <HAL_GPIO_Init>
}
 8001eec:	bf00      	nop
 8001eee:	3790      	adds	r7, #144	@ 0x90
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200006c4 	.word	0x200006c4
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48000800 	.word	0x48000800
 8001f00:	48000400 	.word	0x48000400
 8001f04:	50000100 	.word	0x50000100

08001f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a28      	ldr	r2, [pc, #160]	@ (8001fc8 <HAL_TIM_Base_MspInit+0xc0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d149      	bne.n	8001fbe <HAL_TIM_Base_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2e:	4a27      	ldr	r2, [pc, #156]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f36:	4b25      	ldr	r3, [pc, #148]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b22      	ldr	r3, [pc, #136]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	4a21      	ldr	r2, [pc, #132]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 8001f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f6c:	2306      	movs	r3, #6
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7a:	f002 f82b 	bl	8003fd4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	2018      	movs	r0, #24
 8001f84:	f001 ff3e 	bl	8003e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f88:	2018      	movs	r0, #24
 8001f8a:	f001 ff55 	bl	8003e38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	2019      	movs	r0, #25
 8001f94:	f001 ff36 	bl	8003e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f98:	2019      	movs	r0, #25
 8001f9a:	f001 ff4d 	bl	8003e38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	201a      	movs	r0, #26
 8001fa4:	f001 ff2e 	bl	8003e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001fa8:	201a      	movs	r0, #26
 8001faa:	f001 ff45 	bl	8003e38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	201b      	movs	r0, #27
 8001fb4:	f001 ff26 	bl	8003e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001fb8:	201b      	movs	r0, #27
 8001fba:	f001 ff3d 	bl	8003e38 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	@ 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	@ 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a26      	ldr	r2, [pc, #152]	@ (8002088 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d145      	bne.n	800207e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff6:	4a25      	ldr	r2, [pc, #148]	@ (800208c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ffe:	4b23      	ldr	r3, [pc, #140]	@ (800208c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200a:	4b20      	ldr	r3, [pc, #128]	@ (800208c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	4a1f      	ldr	r2, [pc, #124]	@ (800208c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	4a19      	ldr	r2, [pc, #100]	@ (800208c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202e:	4b17      	ldr	r3, [pc, #92]	@ (800208c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800203a:	2350      	movs	r3, #80	@ 0x50
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800204a:	2302      	movs	r3, #2
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002058:	f001 ffbc 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800205c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800206e:	2302      	movs	r3, #2
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	@ (8002090 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800207a:	f001 ffab 	bl	8003fd4 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800207e:	bf00      	nop
 8002080:	3728      	adds	r7, #40	@ 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40000400 	.word	0x40000400
 800208c:	40021000 	.word	0x40021000
 8002090:	48000800 	.word	0x48000800

08002094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	@ 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a29      	ldr	r2, [pc, #164]	@ (8002158 <HAL_TIM_MspPostInit+0xc4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d14b      	bne.n	800214e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	4b29      	ldr	r3, [pc, #164]	@ (800215c <HAL_TIM_MspPostInit+0xc8>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ba:	4a28      	ldr	r2, [pc, #160]	@ (800215c <HAL_TIM_MspPostInit+0xc8>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c2:	4b26      	ldr	r3, [pc, #152]	@ (800215c <HAL_TIM_MspPostInit+0xc8>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <HAL_TIM_MspPostInit+0xc8>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d2:	4a22      	ldr	r2, [pc, #136]	@ (800215c <HAL_TIM_MspPostInit+0xc8>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020da:	4b20      	ldr	r3, [pc, #128]	@ (800215c <HAL_TIM_MspPostInit+0xc8>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80020e6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80020ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020f8:	2306      	movs	r3, #6
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4817      	ldr	r0, [pc, #92]	@ (8002160 <HAL_TIM_MspPostInit+0xcc>)
 8002104:	f001 ff66 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002108:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800211a:	2304      	movs	r3, #4
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	480e      	ldr	r0, [pc, #56]	@ (8002160 <HAL_TIM_MspPostInit+0xcc>)
 8002126:	f001 ff55 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 800212a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800213c:	2306      	movs	r3, #6
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800214a:	f001 ff43 	bl	8003fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	@ 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40021000 	.word	0x40021000
 8002160:	48000400 	.word	0x48000400

08002164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0a0      	sub	sp, #128	@ 0x80
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800217c:	f107 0318 	add.w	r3, r7, #24
 8002180:	2254      	movs	r2, #84	@ 0x54
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f008 f9b6 	bl	800a4f6 <memset>
  if(huart->Instance==USART2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a41      	ldr	r2, [pc, #260]	@ (8002294 <HAL_UART_MspInit+0x130>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d13f      	bne.n	8002214 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002194:	2302      	movs	r3, #2
 8002196:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 fee9 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021ac:	f7ff fc74 	bl	8001a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <HAL_UART_MspInit+0x134>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b4:	4a38      	ldr	r2, [pc, #224]	@ (8002298 <HAL_UART_MspInit+0x134>)
 80021b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80021bc:	4b36      	ldr	r3, [pc, #216]	@ (8002298 <HAL_UART_MspInit+0x134>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b33      	ldr	r3, [pc, #204]	@ (8002298 <HAL_UART_MspInit+0x134>)
 80021ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021cc:	4a32      	ldr	r2, [pc, #200]	@ (8002298 <HAL_UART_MspInit+0x134>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <HAL_UART_MspInit+0x134>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021e0:	230c      	movs	r3, #12
 80021e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f0:	2307      	movs	r3, #7
 80021f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021f8:	4619      	mov	r1, r3
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fe:	f001 fee9 	bl	8003fd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	2026      	movs	r0, #38	@ 0x26
 8002208:	f001 fdfc 	bl	8003e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800220c:	2026      	movs	r0, #38	@ 0x26
 800220e:	f001 fe13 	bl	8003e38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002212:	e03b      	b.n	800228c <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a20      	ldr	r2, [pc, #128]	@ (800229c <HAL_UART_MspInit+0x138>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d136      	bne.n	800228c <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800221e:	2304      	movs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002226:	f107 0318 	add.w	r3, r7, #24
 800222a:	4618      	mov	r0, r3
 800222c:	f002 fea4 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002236:	f7ff fc2f 	bl	8001a98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800223a:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <HAL_UART_MspInit+0x134>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	4a16      	ldr	r2, [pc, #88]	@ (8002298 <HAL_UART_MspInit+0x134>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002244:	6593      	str	r3, [r2, #88]	@ 0x58
 8002246:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <HAL_UART_MspInit+0x134>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <HAL_UART_MspInit+0x134>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	4a10      	ldr	r2, [pc, #64]	@ (8002298 <HAL_UART_MspInit+0x134>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <HAL_UART_MspInit+0x134>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800226a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800226e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800227c:	2307      	movs	r3, #7
 800227e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002280:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002284:	4619      	mov	r1, r3
 8002286:	4806      	ldr	r0, [pc, #24]	@ (80022a0 <HAL_UART_MspInit+0x13c>)
 8002288:	f001 fea4 	bl	8003fd4 <HAL_GPIO_Init>
}
 800228c:	bf00      	nop
 800228e:	3780      	adds	r7, #128	@ 0x80
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40004400 	.word	0x40004400
 8002298:	40021000 	.word	0x40021000
 800229c:	40004800 	.word	0x40004800
 80022a0:	48000800 	.word	0x48000800

080022a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	@ 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002368 <HAL_InitTick+0xc4>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002368 <HAL_InitTick+0xc4>)
 80022ba:	f043 0310 	orr.w	r3, r3, #16
 80022be:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c0:	4b29      	ldr	r3, [pc, #164]	@ (8002368 <HAL_InitTick+0xc4>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022cc:	f107 020c 	add.w	r2, r7, #12
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 fdd6 	bl	8004e88 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022dc:	f002 fda8 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 80022e0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e4:	4a21      	ldr	r2, [pc, #132]	@ (800236c <HAL_InitTick+0xc8>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0c9b      	lsrs	r3, r3, #18
 80022ec:	3b01      	subs	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <HAL_InitTick+0xcc>)
 80022f2:	4a20      	ldr	r2, [pc, #128]	@ (8002374 <HAL_InitTick+0xd0>)
 80022f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <HAL_InitTick+0xcc>)
 80022f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022fc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002370 <HAL_InitTick+0xcc>)
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002304:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <HAL_InitTick+0xcc>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230a:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_InitTick+0xcc>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002310:	4817      	ldr	r0, [pc, #92]	@ (8002370 <HAL_InitTick+0xcc>)
 8002312:	f003 f87f 	bl	8005414 <HAL_TIM_Base_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800231c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11b      	bne.n	800235c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002324:	4812      	ldr	r0, [pc, #72]	@ (8002370 <HAL_InitTick+0xcc>)
 8002326:	f003 f8cd 	bl	80054c4 <HAL_TIM_Base_Start_IT>
 800232a:	4603      	mov	r3, r0
 800232c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002330:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002334:	2b00      	cmp	r3, #0
 8002336:	d111      	bne.n	800235c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002338:	2036      	movs	r0, #54	@ 0x36
 800233a:	f001 fd7d 	bl	8003e38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d808      	bhi.n	8002356 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	2036      	movs	r0, #54	@ 0x36
 800234a:	f001 fd5b 	bl	8003e04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800234e:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <HAL_InitTick+0xd4>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	e002      	b.n	800235c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800235c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002360:	4618      	mov	r0, r3
 8002362:	3730      	adds	r7, #48	@ 0x30
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	431bde83 	.word	0x431bde83
 8002370:	200006c8 	.word	0x200006c8
 8002374:	40001000 	.word	0x40001000
 8002378:	200001f0 	.word	0x200001f0

0800237c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <NMI_Handler+0x4>

08002384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <MemManage_Handler+0x4>

08002394 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <BusFault_Handler+0x4>

0800239c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <UsageFault_Handler+0x4>

080023a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023e0:	4802      	ldr	r0, [pc, #8]	@ (80023ec <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80023e2:	f003 faf7 	bl	80059d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200004b4 	.word	0x200004b4

080023f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f4:	4802      	ldr	r0, [pc, #8]	@ (8002400 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80023f6:	f003 faed 	bl	80059d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200004b4 	.word	0x200004b4

08002404 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002408:	4802      	ldr	r0, [pc, #8]	@ (8002414 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800240a:	f003 fae3 	bl	80059d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200004b4 	.word	0x200004b4

08002418 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800241c:	4802      	ldr	r0, [pc, #8]	@ (8002428 <TIM1_CC_IRQHandler+0x10>)
 800241e:	f003 fad9 	bl	80059d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200004b4 	.word	0x200004b4

0800242c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002430:	4802      	ldr	r0, [pc, #8]	@ (800243c <USART2_IRQHandler+0x10>)
 8002432:	f005 f825 	bl	8007480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000054c 	.word	0x2000054c

08002440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8002444:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002448:	f001 ff5e 	bl	8004308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}

08002450 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <TIM6_DAC_IRQHandler+0x10>)
 8002456:	f003 fabd 	bl	80059d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200006c8 	.word	0x200006c8

08002464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return 1;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <_kill>:

int _kill(int pid, int sig)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800247e:	f008 f8e9 	bl	800a654 <__errno>
 8002482:	4603      	mov	r3, r0
 8002484:	2216      	movs	r2, #22
 8002486:	601a      	str	r2, [r3, #0]
  return -1;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_exit>:

void _exit (int status)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ffe7 	bl	8002474 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024a6:	bf00      	nop
 80024a8:	e7fd      	b.n	80024a6 <_exit+0x12>

080024aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e00a      	b.n	80024d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024bc:	f3af 8000 	nop.w
 80024c0:	4601      	mov	r1, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	60ba      	str	r2, [r7, #8]
 80024c8:	b2ca      	uxtb	r2, r1
 80024ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	dbf0      	blt.n	80024bc <_read+0x12>
  }

  return len;
 80024da:	687b      	ldr	r3, [r7, #4]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e009      	b.n	800250a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	60ba      	str	r2, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3301      	adds	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	dbf1      	blt.n	80024f6 <_write+0x12>
  }
  return len;
 8002512:	687b      	ldr	r3, [r7, #4]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_close>:

int _close(int file)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002544:	605a      	str	r2, [r3, #4]
  return 0;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_isatty>:

int _isatty(int file)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800255c:	2301      	movs	r3, #1
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800258c:	4a14      	ldr	r2, [pc, #80]	@ (80025e0 <_sbrk+0x5c>)
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <_sbrk+0x60>)
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002598:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a0:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <_sbrk+0x64>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <_sbrk+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d207      	bcs.n	80025c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b4:	f008 f84e 	bl	800a654 <__errno>
 80025b8:	4603      	mov	r3, r0
 80025ba:	220c      	movs	r2, #12
 80025bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	e009      	b.n	80025d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c4:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ca:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a05      	ldr	r2, [pc, #20]	@ (80025e8 <_sbrk+0x64>)
 80025d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20020000 	.word	0x20020000
 80025e4:	00000400 	.word	0x00000400
 80025e8:	20000714 	.word	0x20000714
 80025ec:	20000868 	.word	0x20000868

080025f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <SystemInit+0x20>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fa:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <SystemInit+0x20>)
 80025fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002614:	480d      	ldr	r0, [pc, #52]	@ (800264c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002616:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002618:	480d      	ldr	r0, [pc, #52]	@ (8002650 <LoopForever+0x6>)
  ldr r1, =_edata
 800261a:	490e      	ldr	r1, [pc, #56]	@ (8002654 <LoopForever+0xa>)
  ldr r2, =_sidata
 800261c:	4a0e      	ldr	r2, [pc, #56]	@ (8002658 <LoopForever+0xe>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002620:	e002      	b.n	8002628 <LoopCopyDataInit>

08002622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002626:	3304      	adds	r3, #4

08002628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800262c:	d3f9      	bcc.n	8002622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262e:	4a0b      	ldr	r2, [pc, #44]	@ (800265c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002630:	4c0b      	ldr	r4, [pc, #44]	@ (8002660 <LoopForever+0x16>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002634:	e001      	b.n	800263a <LoopFillZerobss>

08002636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002638:	3204      	adds	r2, #4

0800263a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800263c:	d3fb      	bcc.n	8002636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800263e:	f7ff ffd7 	bl	80025f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002642:	f008 f80d 	bl	800a660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002646:	f7fe fd05 	bl	8001054 <main>

0800264a <LoopForever>:

LoopForever:
    b LoopForever
 800264a:	e7fe      	b.n	800264a <LoopForever>
  ldr   r0, =_estack
 800264c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002654:	200003c0 	.word	0x200003c0
  ldr r2, =_sidata
 8002658:	0800e1dc 	.word	0x0800e1dc
  ldr r2, =_sbss
 800265c:	200003c0 	.word	0x200003c0
  ldr r4, =_ebss
 8002660:	20000868 	.word	0x20000868

08002664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002664:	e7fe      	b.n	8002664 <ADC1_2_IRQHandler>

08002666 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002670:	2003      	movs	r0, #3
 8002672:	f001 fbbc 	bl	8003dee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002676:	200f      	movs	r0, #15
 8002678:	f7ff fe14 	bl	80022a4 <HAL_InitTick>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	71fb      	strb	r3, [r7, #7]
 8002686:	e001      	b.n	800268c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002688:	f7ff fb20 	bl	8001ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800268c:	79fb      	ldrb	r3, [r7, #7]

}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800269c:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_IncTick+0x1c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <HAL_IncTick+0x20>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a03      	ldr	r2, [pc, #12]	@ (80026b4 <HAL_IncTick+0x1c>)
 80026a8:	6013      	str	r3, [r2, #0]
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	20000718 	.word	0x20000718
 80026b8:	200001f4 	.word	0x200001f4

080026bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return uwTick;
 80026c0:	4b03      	ldr	r3, [pc, #12]	@ (80026d0 <HAL_GetTick+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000718 	.word	0x20000718

080026d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff ffee 	bl	80026bc <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d004      	beq.n	80026f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_Delay+0x40>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4413      	add	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026f8:	bf00      	nop
 80026fa:	f7ff ffdf 	bl	80026bc <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	429a      	cmp	r2, r3
 8002708:	d8f7      	bhi.n	80026fa <HAL_Delay+0x26>
  {
  }
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200001f4 	.word	0x200001f4

08002718 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	609a      	str	r2, [r3, #8]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3360      	adds	r3, #96	@ 0x60
 8002792:	461a      	mov	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <LL_ADC_SetOffset+0x44>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	03fff000 	.word	0x03fff000

080027c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3360      	adds	r3, #96	@ 0x60
 80027d6:	461a      	mov	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3360      	adds	r3, #96	@ 0x60
 8002804:	461a      	mov	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	431a      	orrs	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800282a:	b480      	push	{r7}
 800282c:	b087      	sub	sp, #28
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3360      	adds	r3, #96	@ 0x60
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	431a      	orrs	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3360      	adds	r3, #96	@ 0x60
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	431a      	orrs	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	615a      	str	r2, [r3, #20]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3330      	adds	r3, #48	@ 0x30
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	4413      	add	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	211f      	movs	r1, #31
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	401a      	ands	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	0e9b      	lsrs	r3, r3, #26
 80028f4:	f003 011f 	and.w	r1, r3, #31
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	431a      	orrs	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3314      	adds	r3, #20
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	0e5b      	lsrs	r3, r3, #25
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	4413      	add	r3, r2
 8002932:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	0d1b      	lsrs	r3, r3, #20
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2107      	movs	r1, #7
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	401a      	ands	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	0d1b      	lsrs	r3, r3, #20
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	431a      	orrs	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0318 	and.w	r3, r3, #24
 800298e:	4908      	ldr	r1, [pc, #32]	@ (80029b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002990:	40d9      	lsrs	r1, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	400b      	ands	r3, r1
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	431a      	orrs	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	0007ffff 	.word	0x0007ffff

080029b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 031f 	and.w	r3, r3, #31
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80029e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6093      	str	r3, [r2, #8]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a08:	d101      	bne.n	8002a0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a58:	d101      	bne.n	8002a5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <LL_ADC_IsEnabled+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_ADC_IsEnabled+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002aca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ace:	f043 0204 	orr.w	r2, r3, #4
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d101      	bne.n	8002afa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d101      	bne.n	8002b20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b089      	sub	sp, #36	@ 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1a9      	b.n	8002e9e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff f8db 	bl	8001d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff3f 	bl	80029f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff25 	bl	80029d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff ff5a 	bl	8002a44 <LL_ADC_IsInternalRegulatorEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d115      	bne.n	8002bc2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff3e 	bl	8002a1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ba0:	4b9c      	ldr	r3, [pc, #624]	@ (8002e14 <HAL_ADC_Init+0x2e4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	4a9c      	ldr	r2, [pc, #624]	@ (8002e18 <HAL_ADC_Init+0x2e8>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	3301      	adds	r3, #1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bb4:	e002      	b.n	8002bbc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f9      	bne.n	8002bb6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff3c 	bl	8002a44 <LL_ADC_IsInternalRegulatorEnabled>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd6:	f043 0210 	orr.w	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff75 	bl	8002ae2 <LL_ADC_REG_IsConversionOngoing>
 8002bf8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 8142 	bne.w	8002e8c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f040 813e 	bne.w	8002e8c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c18:	f043 0202 	orr.w	r2, r3, #2
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff35 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d141      	bne.n	8002cb4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c38:	d004      	beq.n	8002c44 <HAL_ADC_Init+0x114>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a77      	ldr	r2, [pc, #476]	@ (8002e1c <HAL_ADC_Init+0x2ec>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d10f      	bne.n	8002c64 <HAL_ADC_Init+0x134>
 8002c44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c48:	f7ff ff24 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	4873      	ldr	r0, [pc, #460]	@ (8002e1c <HAL_ADC_Init+0x2ec>)
 8002c50:	f7ff ff20 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4323      	orrs	r3, r4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	e012      	b.n	8002c8a <HAL_ADC_Init+0x15a>
 8002c64:	486e      	ldr	r0, [pc, #440]	@ (8002e20 <HAL_ADC_Init+0x2f0>)
 8002c66:	f7ff ff15 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	486d      	ldr	r0, [pc, #436]	@ (8002e24 <HAL_ADC_Init+0x2f4>)
 8002c6e:	f7ff ff11 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	431c      	orrs	r4, r3
 8002c76:	486c      	ldr	r0, [pc, #432]	@ (8002e28 <HAL_ADC_Init+0x2f8>)
 8002c78:	f7ff ff0c 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4323      	orrs	r3, r4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c96:	d004      	beq.n	8002ca2 <HAL_ADC_Init+0x172>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a5f      	ldr	r2, [pc, #380]	@ (8002e1c <HAL_ADC_Init+0x2ec>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_Init+0x176>
 8002ca2:	4a62      	ldr	r2, [pc, #392]	@ (8002e2c <HAL_ADC_Init+0x2fc>)
 8002ca4:	e000      	b.n	8002ca8 <HAL_ADC_Init+0x178>
 8002ca6:	4a62      	ldr	r2, [pc, #392]	@ (8002e30 <HAL_ADC_Init+0x300>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f7ff fd32 	bl	8002718 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7f5b      	ldrb	r3, [r3, #29]
 8002cb8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cbe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002cc4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002cca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cd2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d106      	bne.n	8002cf0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	045b      	lsls	r3, r3, #17
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	4b48      	ldr	r3, [pc, #288]	@ (8002e34 <HAL_ADC_Init+0x304>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fee4 	bl	8002b08 <LL_ADC_INJ_IsConversionOngoing>
 8002d40:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d17f      	bne.n	8002e48 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d17c      	bne.n	8002e48 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d52:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d5a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d6a:	f023 0302 	bic.w	r3, r3, #2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	69b9      	ldr	r1, [r7, #24]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d017      	beq.n	8002db0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6911      	ldr	r1, [r2, #16]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002dae:	e013      	b.n	8002dd8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002dbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dd4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d12a      	bne.n	8002e38 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002df8:	4311      	orrs	r1, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e04:	430a      	orrs	r2, r1
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	611a      	str	r2, [r3, #16]
 8002e12:	e019      	b.n	8002e48 <HAL_ADC_Init+0x318>
 8002e14:	200001ec 	.word	0x200001ec
 8002e18:	053e2d63 	.word	0x053e2d63
 8002e1c:	50000100 	.word	0x50000100
 8002e20:	50000400 	.word	0x50000400
 8002e24:	50000500 	.word	0x50000500
 8002e28:	50000600 	.word	0x50000600
 8002e2c:	50000300 	.word	0x50000300
 8002e30:	50000700 	.word	0x50000700
 8002e34:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d10c      	bne.n	8002e6a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f023 010f 	bic.w	r1, r3, #15
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	1e5a      	subs	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e68:	e007      	b.n	8002e7a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 020f 	bic.w	r2, r2, #15
 8002e78:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e8a:	e007      	b.n	8002e9c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	@ 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}
 8002ea6:	bf00      	nop

08002ea8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb8:	d004      	beq.n	8002ec4 <HAL_ADC_Start+0x1c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a67      	ldr	r2, [pc, #412]	@ (800305c <HAL_ADC_Start+0x1b4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_Start+0x20>
 8002ec4:	4b66      	ldr	r3, [pc, #408]	@ (8003060 <HAL_ADC_Start+0x1b8>)
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_Start+0x22>
 8002ec8:	4b66      	ldr	r3, [pc, #408]	@ (8003064 <HAL_ADC_Start+0x1bc>)
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fd72 	bl	80029b4 <LL_ADC_GetMultimode>
 8002ed0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe03 	bl	8002ae2 <LL_ADC_REG_IsConversionOngoing>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 80b4 	bne.w	800304c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_Start+0x4a>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e0af      	b.n	8003052 <HAL_ADC_Start+0x1aa>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fd06 	bl	800390c <ADC_Enable>
 8002f00:	4603      	mov	r3, r0
 8002f02:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 809b 	bne.w	8003042 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a4d      	ldr	r2, [pc, #308]	@ (800305c <HAL_ADC_Start+0x1b4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_ADC_Start+0x96>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a4e      	ldr	r2, [pc, #312]	@ (8003068 <HAL_ADC_Start+0x1c0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d002      	beq.n	8002f3a <HAL_ADC_Start+0x92>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	e003      	b.n	8002f42 <HAL_ADC_Start+0x9a>
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800306c <HAL_ADC_Start+0x1c4>)
 8002f3c:	e001      	b.n	8002f42 <HAL_ADC_Start+0x9a>
 8002f3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d002      	beq.n	8002f50 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f68:	d106      	bne.n	8002f78 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6e:	f023 0206 	bic.w	r2, r3, #6
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f76:	e002      	b.n	8002f7e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	221c      	movs	r2, #28
 8002f84:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a32      	ldr	r2, [pc, #200]	@ (800305c <HAL_ADC_Start+0x1b4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_ADC_Start+0x104>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a32      	ldr	r2, [pc, #200]	@ (8003068 <HAL_ADC_Start+0x1c0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d002      	beq.n	8002fa8 <HAL_ADC_Start+0x100>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	e003      	b.n	8002fb0 <HAL_ADC_Start+0x108>
 8002fa8:	4b30      	ldr	r3, [pc, #192]	@ (800306c <HAL_ADC_Start+0x1c4>)
 8002faa:	e001      	b.n	8002fb0 <HAL_ADC_Start+0x108>
 8002fac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d008      	beq.n	8002fca <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b05      	cmp	r3, #5
 8002fc2:	d002      	beq.n	8002fca <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	2b09      	cmp	r3, #9
 8002fc8:	d114      	bne.n	8002ff4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fdc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fe0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fd64 	bl	8002aba <LL_ADC_REG_StartConversion>
 8002ff2:	e02d      	b.n	8003050 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a15      	ldr	r2, [pc, #84]	@ (800305c <HAL_ADC_Start+0x1b4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_ADC_Start+0x176>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a16      	ldr	r2, [pc, #88]	@ (8003068 <HAL_ADC_Start+0x1c0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d002      	beq.n	800301a <HAL_ADC_Start+0x172>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	e003      	b.n	8003022 <HAL_ADC_Start+0x17a>
 800301a:	4b14      	ldr	r3, [pc, #80]	@ (800306c <HAL_ADC_Start+0x1c4>)
 800301c:	e001      	b.n	8003022 <HAL_ADC_Start+0x17a>
 800301e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003022:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00f      	beq.n	8003050 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003038:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003040:	e006      	b.n	8003050 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800304a:	e001      	b.n	8003050 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800304c:	2302      	movs	r3, #2
 800304e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003050:	7dfb      	ldrb	r3, [r7, #23]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	50000100 	.word	0x50000100
 8003060:	50000300 	.word	0x50000300
 8003064:	50000700 	.word	0x50000700
 8003068:	50000500 	.word	0x50000500
 800306c:	50000400 	.word	0x50000400

08003070 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b0b6      	sub	sp, #216	@ 0xd8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x24>
 80030aa:	2302      	movs	r3, #2
 80030ac:	f000 bc13 	b.w	80038d6 <HAL_ADC_ConfigChannel+0x84a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fd10 	bl	8002ae2 <LL_ADC_REG_IsConversionOngoing>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 83f3 	bne.w	80038b0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f7ff fbf0 	bl	80028bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fcfe 	bl	8002ae2 <LL_ADC_REG_IsConversionOngoing>
 80030e6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fd0a 	bl	8002b08 <LL_ADC_INJ_IsConversionOngoing>
 80030f4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f040 81d9 	bne.w	80034b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 81d4 	bne.w	80034b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003114:	d10f      	bne.n	8003136 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2200      	movs	r2, #0
 8003120:	4619      	mov	r1, r3
 8003122:	f7ff fbf7 	bl	8002914 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fbb1 	bl	8002896 <LL_ADC_SetSamplingTimeCommonConfig>
 8003134:	e00e      	b.n	8003154 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6819      	ldr	r1, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	461a      	mov	r2, r3
 8003144:	f7ff fbe6 	bl	8002914 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fba1 	bl	8002896 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	08db      	lsrs	r3, r3, #3
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b04      	cmp	r3, #4
 8003174:	d022      	beq.n	80031bc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6919      	ldr	r1, [r3, #16]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003186:	f7ff fafb 	bl	8002780 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6919      	ldr	r1, [r3, #16]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	461a      	mov	r2, r3
 8003198:	f7ff fb47 	bl	800282a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d102      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x126>
 80031ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031b0:	e000      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x128>
 80031b2:	2300      	movs	r3, #0
 80031b4:	461a      	mov	r2, r3
 80031b6:	f7ff fb53 	bl	8002860 <LL_ADC_SetOffsetSaturation>
 80031ba:	e17b      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fb00 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x15c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff faf5 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	0e9b      	lsrs	r3, r3, #26
 80031e2:	f003 021f 	and.w	r2, r3, #31
 80031e6:	e01e      	b.n	8003226 <HAL_ADC_ConfigChannel+0x19a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff faea 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003206:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800320a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800320e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003216:	2320      	movs	r3, #32
 8003218:	e004      	b.n	8003224 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800321a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_ADC_ConfigChannel+0x1b2>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0e9b      	lsrs	r3, r3, #26
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	e018      	b.n	8003270 <HAL_ADC_ConfigChannel+0x1e4>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003256:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800325a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003262:	2320      	movs	r3, #32
 8003264:	e004      	b.n	8003270 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003270:	429a      	cmp	r2, r3
 8003272:	d106      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2200      	movs	r2, #0
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fab9 	bl	80027f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fa9d 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 800328e:	4603      	mov	r3, r0
 8003290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x222>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2101      	movs	r1, #1
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fa92 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 80032a4:	4603      	mov	r3, r0
 80032a6:	0e9b      	lsrs	r3, r3, #26
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	e01e      	b.n	80032ec <HAL_ADC_ConfigChannel+0x260>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fa87 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80032cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e004      	b.n	80032ea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80032e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x278>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e9b      	lsrs	r3, r3, #26
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	e018      	b.n	8003336 <HAL_ADC_ConfigChannel+0x2aa>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003318:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800331c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003320:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003328:	2320      	movs	r3, #32
 800332a:	e004      	b.n	8003336 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800332c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003336:	429a      	cmp	r2, r3
 8003338:	d106      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fa56 	bl	80027f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2102      	movs	r1, #2
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fa3a 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 8003354:	4603      	mov	r3, r0
 8003356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x2e8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fa2f 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	f003 021f 	and.w	r2, r3, #31
 8003372:	e01e      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x326>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fa24 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003392:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800339a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80033a2:	2320      	movs	r3, #32
 80033a4:	e004      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80033a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x33e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	0e9b      	lsrs	r3, r3, #26
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	e016      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x36c>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80033ea:	2320      	movs	r3, #32
 80033ec:	e004      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80033ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d106      	bne.n	800340a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2200      	movs	r2, #0
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff f9f5 	bl	80027f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2103      	movs	r1, #3
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff f9d9 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 8003416:	4603      	mov	r3, r0
 8003418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x3aa>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2103      	movs	r1, #3
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff f9ce 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 800342c:	4603      	mov	r3, r0
 800342e:	0e9b      	lsrs	r3, r3, #26
 8003430:	f003 021f 	and.w	r2, r3, #31
 8003434:	e017      	b.n	8003466 <HAL_ADC_ConfigChannel+0x3da>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2103      	movs	r1, #3
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff f9c3 	bl	80027c8 <LL_ADC_GetOffsetChannel>
 8003442:	4603      	mov	r3, r0
 8003444:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800344e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003450:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003452:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003458:	2320      	movs	r3, #32
 800345a:	e003      	b.n	8003464 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800345c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <HAL_ADC_ConfigChannel+0x3f2>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	0e9b      	lsrs	r3, r3, #26
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	e011      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x416>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800348c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800348e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003496:	2320      	movs	r3, #32
 8003498:	e003      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800349a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d106      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2103      	movs	r1, #3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f9a0 	bl	80027f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff faeb 	bl	8002a94 <LL_ADC_IsEnabled>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f040 813d 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f7ff fa4a 	bl	800296c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4aa2      	ldr	r2, [pc, #648]	@ (8003768 <HAL_ADC_ConfigChannel+0x6dc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	f040 812e 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <HAL_ADC_ConfigChannel+0x480>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	3301      	adds	r3, #1
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2b09      	cmp	r3, #9
 8003502:	bf94      	ite	ls
 8003504:	2301      	movls	r3, #1
 8003506:	2300      	movhi	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e019      	b.n	8003540 <HAL_ADC_ConfigChannel+0x4b4>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800351a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800351c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800351e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003524:	2320      	movs	r3, #32
 8003526:	e003      	b.n	8003530 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003528:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3301      	adds	r3, #1
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2b09      	cmp	r3, #9
 8003538:	bf94      	ite	ls
 800353a:	2301      	movls	r3, #1
 800353c:	2300      	movhi	r3, #0
 800353e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003540:	2b00      	cmp	r3, #0
 8003542:	d079      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x4d4>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	3301      	adds	r3, #1
 8003558:	069b      	lsls	r3, r3, #26
 800355a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800355e:	e015      	b.n	800358c <HAL_ADC_ConfigChannel+0x500>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800356e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003570:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e003      	b.n	8003584 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800357c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3301      	adds	r3, #1
 8003586:	069b      	lsls	r3, r3, #26
 8003588:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x520>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	3301      	adds	r3, #1
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	e017      	b.n	80035dc <HAL_ADC_ConfigChannel+0x550>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80035ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80035be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e003      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80035c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	ea42 0103 	orr.w	r1, r2, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x576>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0e9b      	lsrs	r3, r3, #26
 80035f2:	3301      	adds	r3, #1
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	051b      	lsls	r3, r3, #20
 8003600:	e018      	b.n	8003634 <HAL_ADC_ConfigChannel+0x5a8>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800361a:	2320      	movs	r3, #32
 800361c:	e003      	b.n	8003626 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800361e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003620:	fab3 f383 	clz	r3, r3
 8003624:	b2db      	uxtb	r3, r3
 8003626:	3301      	adds	r3, #1
 8003628:	f003 021f 	and.w	r2, r3, #31
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003634:	430b      	orrs	r3, r1
 8003636:	e07e      	b.n	8003736 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003640:	2b00      	cmp	r3, #0
 8003642:	d107      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x5c8>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e9b      	lsrs	r3, r3, #26
 800364a:	3301      	adds	r3, #1
 800364c:	069b      	lsls	r3, r3, #26
 800364e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003652:	e015      	b.n	8003680 <HAL_ADC_ConfigChannel+0x5f4>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003664:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800366c:	2320      	movs	r3, #32
 800366e:	e003      	b.n	8003678 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	069b      	lsls	r3, r3, #26
 800367c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x614>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0e9b      	lsrs	r3, r3, #26
 8003692:	3301      	adds	r3, #1
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	e017      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x644>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	61fb      	str	r3, [r7, #28]
  return result;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	2101      	movs	r1, #1
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	ea42 0103 	orr.w	r1, r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x670>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0e9b      	lsrs	r3, r3, #26
 80036e6:	3301      	adds	r3, #1
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	3b1e      	subs	r3, #30
 80036f4:	051b      	lsls	r3, r3, #20
 80036f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036fa:	e01b      	b.n	8003734 <HAL_ADC_ConfigChannel+0x6a8>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	613b      	str	r3, [r7, #16]
  return result;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003714:	2320      	movs	r3, #32
 8003716:	e003      	b.n	8003720 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	3b1e      	subs	r3, #30
 800372e:	051b      	lsls	r3, r3, #20
 8003730:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003734:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800373a:	4619      	mov	r1, r3
 800373c:	f7ff f8ea 	bl	8002914 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b09      	ldr	r3, [pc, #36]	@ (800376c <HAL_ADC_ConfigChannel+0x6e0>)
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80be 	beq.w	80038ca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003756:	d004      	beq.n	8003762 <HAL_ADC_ConfigChannel+0x6d6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a04      	ldr	r2, [pc, #16]	@ (8003770 <HAL_ADC_ConfigChannel+0x6e4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10a      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x6ec>
 8003762:	4b04      	ldr	r3, [pc, #16]	@ (8003774 <HAL_ADC_ConfigChannel+0x6e8>)
 8003764:	e009      	b.n	800377a <HAL_ADC_ConfigChannel+0x6ee>
 8003766:	bf00      	nop
 8003768:	407f0000 	.word	0x407f0000
 800376c:	80080000 	.word	0x80080000
 8003770:	50000100 	.word	0x50000100
 8003774:	50000300 	.word	0x50000300
 8003778:	4b59      	ldr	r3, [pc, #356]	@ (80038e0 <HAL_ADC_ConfigChannel+0x854>)
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fff2 	bl	8002764 <LL_ADC_GetCommonPathInternalCh>
 8003780:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a56      	ldr	r2, [pc, #344]	@ (80038e4 <HAL_ADC_ConfigChannel+0x858>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_ADC_ConfigChannel+0x70c>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a55      	ldr	r2, [pc, #340]	@ (80038e8 <HAL_ADC_ConfigChannel+0x85c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d13a      	bne.n	800380e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800379c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d134      	bne.n	800380e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037ac:	d005      	beq.n	80037ba <HAL_ADC_ConfigChannel+0x72e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a4e      	ldr	r2, [pc, #312]	@ (80038ec <HAL_ADC_ConfigChannel+0x860>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	f040 8085 	bne.w	80038c4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c2:	d004      	beq.n	80037ce <HAL_ADC_ConfigChannel+0x742>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a49      	ldr	r2, [pc, #292]	@ (80038f0 <HAL_ADC_ConfigChannel+0x864>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x746>
 80037ce:	4a49      	ldr	r2, [pc, #292]	@ (80038f4 <HAL_ADC_ConfigChannel+0x868>)
 80037d0:	e000      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x748>
 80037d2:	4a43      	ldr	r2, [pc, #268]	@ (80038e0 <HAL_ADC_ConfigChannel+0x854>)
 80037d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f7fe ffad 	bl	800273e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037e4:	4b44      	ldr	r3, [pc, #272]	@ (80038f8 <HAL_ADC_ConfigChannel+0x86c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	4a44      	ldr	r2, [pc, #272]	@ (80038fc <HAL_ADC_ConfigChannel+0x870>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037fe:	e002      	b.n	8003806 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3b01      	subs	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f9      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800380c:	e05a      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a3b      	ldr	r2, [pc, #236]	@ (8003900 <HAL_ADC_ConfigChannel+0x874>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d125      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800381c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11f      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a31      	ldr	r2, [pc, #196]	@ (80038f0 <HAL_ADC_ConfigChannel+0x864>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d104      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x7ac>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a34      	ldr	r2, [pc, #208]	@ (8003904 <HAL_ADC_ConfigChannel+0x878>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d047      	beq.n	80038c8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003840:	d004      	beq.n	800384c <HAL_ADC_ConfigChannel+0x7c0>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2a      	ldr	r2, [pc, #168]	@ (80038f0 <HAL_ADC_ConfigChannel+0x864>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x7c4>
 800384c:	4a29      	ldr	r2, [pc, #164]	@ (80038f4 <HAL_ADC_ConfigChannel+0x868>)
 800384e:	e000      	b.n	8003852 <HAL_ADC_ConfigChannel+0x7c6>
 8003850:	4a23      	ldr	r2, [pc, #140]	@ (80038e0 <HAL_ADC_ConfigChannel+0x854>)
 8003852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7fe ff6e 	bl	800273e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003862:	e031      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a27      	ldr	r2, [pc, #156]	@ (8003908 <HAL_ADC_ConfigChannel+0x87c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d12d      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800386e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d127      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1c      	ldr	r2, [pc, #112]	@ (80038f0 <HAL_ADC_ConfigChannel+0x864>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d022      	beq.n	80038ca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800388c:	d004      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x80c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <HAL_ADC_ConfigChannel+0x864>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d101      	bne.n	800389c <HAL_ADC_ConfigChannel+0x810>
 8003898:	4a16      	ldr	r2, [pc, #88]	@ (80038f4 <HAL_ADC_ConfigChannel+0x868>)
 800389a:	e000      	b.n	800389e <HAL_ADC_ConfigChannel+0x812>
 800389c:	4a10      	ldr	r2, [pc, #64]	@ (80038e0 <HAL_ADC_ConfigChannel+0x854>)
 800389e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f7fe ff48 	bl	800273e <LL_ADC_SetCommonPathInternalCh>
 80038ae:	e00c      	b.n	80038ca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80038c2:	e002      	b.n	80038ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	37d8      	adds	r7, #216	@ 0xd8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	50000700 	.word	0x50000700
 80038e4:	c3210000 	.word	0xc3210000
 80038e8:	90c00010 	.word	0x90c00010
 80038ec:	50000600 	.word	0x50000600
 80038f0:	50000100 	.word	0x50000100
 80038f4:	50000300 	.word	0x50000300
 80038f8:	200001ec 	.word	0x200001ec
 80038fc:	053e2d63 	.word	0x053e2d63
 8003900:	c7520000 	.word	0xc7520000
 8003904:	50000500 	.word	0x50000500
 8003908:	cb840000 	.word	0xcb840000

0800390c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f8b9 	bl	8002a94 <LL_ADC_IsEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d176      	bne.n	8003a16 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a20 <ADC_Enable+0x114>)
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393a:	f043 0210 	orr.w	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e062      	b.n	8003a18 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f888 	bl	8002a6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003964:	d004      	beq.n	8003970 <ADC_Enable+0x64>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a24 <ADC_Enable+0x118>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <ADC_Enable+0x68>
 8003970:	4b2d      	ldr	r3, [pc, #180]	@ (8003a28 <ADC_Enable+0x11c>)
 8003972:	e000      	b.n	8003976 <ADC_Enable+0x6a>
 8003974:	4b2d      	ldr	r3, [pc, #180]	@ (8003a2c <ADC_Enable+0x120>)
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fef4 	bl	8002764 <LL_ADC_GetCommonPathInternalCh>
 800397c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800397e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003982:	2b00      	cmp	r3, #0
 8003984:	d013      	beq.n	80039ae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003986:	4b2a      	ldr	r3, [pc, #168]	@ (8003a30 <ADC_Enable+0x124>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	4a29      	ldr	r2, [pc, #164]	@ (8003a34 <ADC_Enable+0x128>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	099b      	lsrs	r3, r3, #6
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039a0:	e002      	b.n	80039a8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f9      	bne.n	80039a2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039ae:	f7fe fe85 	bl	80026bc <HAL_GetTick>
 80039b2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039b4:	e028      	b.n	8003a08 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff f86a 	bl	8002a94 <LL_ADC_IsEnabled>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff f84e 	bl	8002a6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039d0:	f7fe fe74 	bl	80026bc <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d914      	bls.n	8003a08 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d00d      	beq.n	8003a08 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f0:	f043 0210 	orr.w	r2, r3, #16
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fc:	f043 0201 	orr.w	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e007      	b.n	8003a18 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d1cf      	bne.n	80039b6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	8000003f 	.word	0x8000003f
 8003a24:	50000100 	.word	0x50000100
 8003a28:	50000300 	.word	0x50000300
 8003a2c:	50000700 	.word	0x50000700
 8003a30:	200001ec 	.word	0x200001ec
 8003a34:	053e2d63 	.word	0x053e2d63

08003a38 <LL_ADC_IsEnabled>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <LL_ADC_IsEnabled+0x18>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <LL_ADC_IsEnabled+0x1a>
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_ADC_REG_IsConversionOngoing>:
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d101      	bne.n	8003a76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b0a1      	sub	sp, #132	@ 0x84
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e0e7      	b.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aba:	d102      	bne.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003abc:	4b6f      	ldr	r3, [pc, #444]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	e009      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d102      	bne.n	8003ad2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003acc:	4b6d      	ldr	r3, [pc, #436]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	e001      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10b      	bne.n	8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0be      	b.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ffb1 	bl	8003a5e <LL_ADC_REG_IsConversionOngoing>
 8003afc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ffab 	bl	8003a5e <LL_ADC_REG_IsConversionOngoing>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 80a0 	bne.w	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 809c 	bne.w	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b20:	d004      	beq.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a55      	ldr	r2, [pc, #340]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003b2c:	4b56      	ldr	r3, [pc, #344]	@ (8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003b2e:	e000      	b.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003b30:	4b56      	ldr	r3, [pc, #344]	@ (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003b32:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d04b      	beq.n	8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b4e:	035b      	lsls	r3, r3, #13
 8003b50:	430b      	orrs	r3, r1
 8003b52:	431a      	orrs	r2, r3
 8003b54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b60:	d004      	beq.n	8003b6c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a45      	ldr	r2, [pc, #276]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d10f      	bne.n	8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003b6c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b70:	f7ff ff62 	bl	8003a38 <LL_ADC_IsEnabled>
 8003b74:	4604      	mov	r4, r0
 8003b76:	4841      	ldr	r0, [pc, #260]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b78:	f7ff ff5e 	bl	8003a38 <LL_ADC_IsEnabled>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4323      	orrs	r3, r4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e012      	b.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003b8c:	483c      	ldr	r0, [pc, #240]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b8e:	f7ff ff53 	bl	8003a38 <LL_ADC_IsEnabled>
 8003b92:	4604      	mov	r4, r0
 8003b94:	483b      	ldr	r0, [pc, #236]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b96:	f7ff ff4f 	bl	8003a38 <LL_ADC_IsEnabled>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	431c      	orrs	r4, r3
 8003b9e:	483c      	ldr	r0, [pc, #240]	@ (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ba0:	f7ff ff4a 	bl	8003a38 <LL_ADC_IsEnabled>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4323      	orrs	r3, r4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d056      	beq.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003bbe:	f023 030f 	bic.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	6811      	ldr	r1, [r2, #0]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	6892      	ldr	r2, [r2, #8]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bd0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bd2:	e047      	b.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003bd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bde:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003be8:	d004      	beq.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a23      	ldr	r2, [pc, #140]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10f      	bne.n	8003c14 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003bf4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bf8:	f7ff ff1e 	bl	8003a38 <LL_ADC_IsEnabled>
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	481f      	ldr	r0, [pc, #124]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c00:	f7ff ff1a 	bl	8003a38 <LL_ADC_IsEnabled>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4323      	orrs	r3, r4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e012      	b.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c14:	481a      	ldr	r0, [pc, #104]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c16:	f7ff ff0f 	bl	8003a38 <LL_ADC_IsEnabled>
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	4819      	ldr	r0, [pc, #100]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c1e:	f7ff ff0b 	bl	8003a38 <LL_ADC_IsEnabled>
 8003c22:	4603      	mov	r3, r0
 8003c24:	431c      	orrs	r4, r3
 8003c26:	481a      	ldr	r0, [pc, #104]	@ (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c28:	f7ff ff06 	bl	8003a38 <LL_ADC_IsEnabled>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4323      	orrs	r3, r4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d012      	beq.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c46:	f023 030f 	bic.w	r3, r3, #15
 8003c4a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c4c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c4e:	e009      	b.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003c62:	e000      	b.n	8003c66 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3784      	adds	r7, #132	@ 0x84
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd90      	pop	{r4, r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	50000100 	.word	0x50000100
 8003c80:	50000400 	.word	0x50000400
 8003c84:	50000500 	.word	0x50000500
 8003c88:	50000300 	.word	0x50000300
 8003c8c:	50000700 	.word	0x50000700
 8003c90:	50000600 	.word	0x50000600

08003c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4907      	ldr	r1, [pc, #28]	@ (8003d30 <__NVIC_EnableIRQ+0x38>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db0a      	blt.n	8003d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	490c      	ldr	r1, [pc, #48]	@ (8003d80 <__NVIC_SetPriority+0x4c>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	440b      	add	r3, r1
 8003d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d5c:	e00a      	b.n	8003d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4908      	ldr	r1, [pc, #32]	@ (8003d84 <__NVIC_SetPriority+0x50>)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	440b      	add	r3, r1
 8003d72:	761a      	strb	r2, [r3, #24]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000e100 	.word	0xe000e100
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	@ 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f1c3 0307 	rsb	r3, r3, #7
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf28      	it	cs
 8003da6:	2304      	movcs	r3, #4
 8003da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d902      	bls.n	8003db8 <NVIC_EncodePriority+0x30>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3b03      	subs	r3, #3
 8003db6:	e000      	b.n	8003dba <NVIC_EncodePriority+0x32>
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	401a      	ands	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43d9      	mvns	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	4313      	orrs	r3, r2
         );
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	@ 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ff4c 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e12:	f7ff ff63 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003e16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	6978      	ldr	r0, [r7, #20]
 8003e1e:	f7ff ffb3 	bl	8003d88 <NVIC_EncodePriority>
 8003e22:	4602      	mov	r2, r0
 8003e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff82 	bl	8003d34 <__NVIC_SetPriority>
}
 8003e30:	bf00      	nop
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ff56 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d005      	beq.n	8003e78 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	e037      	b.n	8003ee8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 020e 	bic.w	r2, r2, #14
 8003e86:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e96:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eac:	f003 021f 	and.w	r2, r3, #31
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eba:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ec4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003edc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ee6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d00d      	beq.n	8003f3a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2204      	movs	r2, #4
 8003f22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e047      	b.n	8003fca <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 020e 	bic.w	r2, r2, #14
 8003f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f003 021f 	and.w	r2, r3, #31
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f86:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00c      	beq.n	8003faa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fa8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
    }
  }
  return status;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fe2:	e15a      	b.n	800429a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	2101      	movs	r1, #1
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 814c 	beq.w	8004294 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d005      	beq.n	8004014 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004010:	2b02      	cmp	r3, #2
 8004012:	d130      	bne.n	8004076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	2203      	movs	r2, #3
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800404a:	2201      	movs	r2, #1
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 0201 	and.w	r2, r3, #1
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b03      	cmp	r3, #3
 8004080:	d017      	beq.n	80040b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	2203      	movs	r2, #3
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d123      	bne.n	8004106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	08da      	lsrs	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3208      	adds	r2, #8
 80040c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	220f      	movs	r2, #15
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4013      	ands	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	08da      	lsrs	r2, r3, #3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3208      	adds	r2, #8
 8004100:	6939      	ldr	r1, [r7, #16]
 8004102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	2203      	movs	r2, #3
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 0203 	and.w	r2, r3, #3
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80a6 	beq.w	8004294 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004148:	4b5b      	ldr	r3, [pc, #364]	@ (80042b8 <HAL_GPIO_Init+0x2e4>)
 800414a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414c:	4a5a      	ldr	r2, [pc, #360]	@ (80042b8 <HAL_GPIO_Init+0x2e4>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6613      	str	r3, [r2, #96]	@ 0x60
 8004154:	4b58      	ldr	r3, [pc, #352]	@ (80042b8 <HAL_GPIO_Init+0x2e4>)
 8004156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004160:	4a56      	ldr	r2, [pc, #344]	@ (80042bc <HAL_GPIO_Init+0x2e8>)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	089b      	lsrs	r3, r3, #2
 8004166:	3302      	adds	r3, #2
 8004168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	220f      	movs	r2, #15
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800418a:	d01f      	beq.n	80041cc <HAL_GPIO_Init+0x1f8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a4c      	ldr	r2, [pc, #304]	@ (80042c0 <HAL_GPIO_Init+0x2ec>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d019      	beq.n	80041c8 <HAL_GPIO_Init+0x1f4>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a4b      	ldr	r2, [pc, #300]	@ (80042c4 <HAL_GPIO_Init+0x2f0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d013      	beq.n	80041c4 <HAL_GPIO_Init+0x1f0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a4a      	ldr	r2, [pc, #296]	@ (80042c8 <HAL_GPIO_Init+0x2f4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00d      	beq.n	80041c0 <HAL_GPIO_Init+0x1ec>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a49      	ldr	r2, [pc, #292]	@ (80042cc <HAL_GPIO_Init+0x2f8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <HAL_GPIO_Init+0x1e8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a48      	ldr	r2, [pc, #288]	@ (80042d0 <HAL_GPIO_Init+0x2fc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d101      	bne.n	80041b8 <HAL_GPIO_Init+0x1e4>
 80041b4:	2305      	movs	r3, #5
 80041b6:	e00a      	b.n	80041ce <HAL_GPIO_Init+0x1fa>
 80041b8:	2306      	movs	r3, #6
 80041ba:	e008      	b.n	80041ce <HAL_GPIO_Init+0x1fa>
 80041bc:	2304      	movs	r3, #4
 80041be:	e006      	b.n	80041ce <HAL_GPIO_Init+0x1fa>
 80041c0:	2303      	movs	r3, #3
 80041c2:	e004      	b.n	80041ce <HAL_GPIO_Init+0x1fa>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e002      	b.n	80041ce <HAL_GPIO_Init+0x1fa>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_GPIO_Init+0x1fa>
 80041cc:	2300      	movs	r3, #0
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	f002 0203 	and.w	r2, r2, #3
 80041d4:	0092      	lsls	r2, r2, #2
 80041d6:	4093      	lsls	r3, r2
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041de:	4937      	ldr	r1, [pc, #220]	@ (80042bc <HAL_GPIO_Init+0x2e8>)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	089b      	lsrs	r3, r3, #2
 80041e4:	3302      	adds	r3, #2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041ec:	4b39      	ldr	r3, [pc, #228]	@ (80042d4 <HAL_GPIO_Init+0x300>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	43db      	mvns	r3, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004210:	4a30      	ldr	r2, [pc, #192]	@ (80042d4 <HAL_GPIO_Init+0x300>)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004216:	4b2f      	ldr	r3, [pc, #188]	@ (80042d4 <HAL_GPIO_Init+0x300>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	43db      	mvns	r3, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4013      	ands	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800423a:	4a26      	ldr	r2, [pc, #152]	@ (80042d4 <HAL_GPIO_Init+0x300>)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004240:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <HAL_GPIO_Init+0x300>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	43db      	mvns	r3, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004264:	4a1b      	ldr	r2, [pc, #108]	@ (80042d4 <HAL_GPIO_Init+0x300>)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800426a:	4b1a      	ldr	r3, [pc, #104]	@ (80042d4 <HAL_GPIO_Init+0x300>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	43db      	mvns	r3, r3
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800428e:	4a11      	ldr	r2, [pc, #68]	@ (80042d4 <HAL_GPIO_Init+0x300>)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3301      	adds	r3, #1
 8004298:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f47f ae9d 	bne.w	8003fe4 <HAL_GPIO_Init+0x10>
  }
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40010000 	.word	0x40010000
 80042c0:	48000400 	.word	0x48000400
 80042c4:	48000800 	.word	0x48000800
 80042c8:	48000c00 	.word	0x48000c00
 80042cc:	48001000 	.word	0x48001000
 80042d0:	48001400 	.word	0x48001400
 80042d4:	40010400 	.word	0x40010400

080042d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	807b      	strh	r3, [r7, #2]
 80042e4:	4613      	mov	r3, r2
 80042e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042e8:	787b      	ldrb	r3, [r7, #1]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042ee:	887a      	ldrh	r2, [r7, #2]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042f4:	e002      	b.n	80042fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042f6:	887a      	ldrh	r2, [r7, #2]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004312:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d006      	beq.n	800432c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800431e:	4a05      	ldr	r2, [pc, #20]	@ (8004334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f806 	bl	8004338 <HAL_GPIO_EXTI_Callback>
  }
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40010400 	.word	0x40010400

08004338 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d141      	bne.n	80043e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800435e:	4b4b      	ldr	r3, [pc, #300]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436a:	d131      	bne.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800436c:	4b47      	ldr	r3, [pc, #284]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004372:	4a46      	ldr	r2, [pc, #280]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800437c:	4b43      	ldr	r3, [pc, #268]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004384:	4a41      	ldr	r2, [pc, #260]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800438a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800438c:	4b40      	ldr	r3, [pc, #256]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2232      	movs	r2, #50	@ 0x32
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	4a3f      	ldr	r2, [pc, #252]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	0c9b      	lsrs	r3, r3, #18
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043a2:	e002      	b.n	80043aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043aa:	4b38      	ldr	r3, [pc, #224]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b6:	d102      	bne.n	80043be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f2      	bne.n	80043a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043be:	4b33      	ldr	r3, [pc, #204]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ca:	d158      	bne.n	800447e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e057      	b.n	8004480 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043d0:	4b2e      	ldr	r3, [pc, #184]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043d6:	4a2d      	ldr	r2, [pc, #180]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043e0:	e04d      	b.n	800447e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e8:	d141      	bne.n	800446e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ea:	4b28      	ldr	r3, [pc, #160]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f6:	d131      	bne.n	800445c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043f8:	4b24      	ldr	r3, [pc, #144]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043fe:	4a23      	ldr	r2, [pc, #140]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004404:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004408:	4b20      	ldr	r3, [pc, #128]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004410:	4a1e      	ldr	r2, [pc, #120]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004412:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004416:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004418:	4b1d      	ldr	r3, [pc, #116]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2232      	movs	r2, #50	@ 0x32
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	4a1c      	ldr	r2, [pc, #112]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	0c9b      	lsrs	r3, r3, #18
 800442a:	3301      	adds	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800442e:	e002      	b.n	8004436 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3b01      	subs	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004436:	4b15      	ldr	r3, [pc, #84]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004442:	d102      	bne.n	800444a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f2      	bne.n	8004430 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004456:	d112      	bne.n	800447e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e011      	b.n	8004480 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800445c:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004462:	4a0a      	ldr	r2, [pc, #40]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800446c:	e007      	b.n	800447e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800446e:	4b07      	ldr	r3, [pc, #28]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004476:	4a05      	ldr	r2, [pc, #20]	@ (800448c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004478:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800447c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	40007000 	.word	0x40007000
 8004490:	200001ec 	.word	0x200001ec
 8004494:	431bde83 	.word	0x431bde83

08004498 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a04      	ldr	r2, [pc, #16]	@ (80044b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044a6:	6093      	str	r3, [r2, #8]
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40007000 	.word	0x40007000

080044b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e2fe      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d075      	beq.n	80045c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d6:	4b97      	ldr	r3, [pc, #604]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e0:	4b94      	ldr	r3, [pc, #592]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	d102      	bne.n	80044f6 <HAL_RCC_OscConfig+0x3e>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d002      	beq.n	80044fc <HAL_RCC_OscConfig+0x44>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d10b      	bne.n	8004514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fc:	4b8d      	ldr	r3, [pc, #564]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d05b      	beq.n	80045c0 <HAL_RCC_OscConfig+0x108>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d157      	bne.n	80045c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e2d9      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800451c:	d106      	bne.n	800452c <HAL_RCC_OscConfig+0x74>
 800451e:	4b85      	ldr	r3, [pc, #532]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a84      	ldr	r2, [pc, #528]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e01d      	b.n	8004568 <HAL_RCC_OscConfig+0xb0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x98>
 8004536:	4b7f      	ldr	r3, [pc, #508]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a7e      	ldr	r2, [pc, #504]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 800453c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b7c      	ldr	r3, [pc, #496]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a7b      	ldr	r2, [pc, #492]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e00b      	b.n	8004568 <HAL_RCC_OscConfig+0xb0>
 8004550:	4b78      	ldr	r3, [pc, #480]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a77      	ldr	r2, [pc, #476]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b75      	ldr	r3, [pc, #468]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a74      	ldr	r2, [pc, #464]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d013      	beq.n	8004598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fe f8a4 	bl	80026bc <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fe f8a0 	bl	80026bc <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	@ 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e29e      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458a:	4b6a      	ldr	r3, [pc, #424]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0xc0>
 8004596:	e014      	b.n	80045c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe f890 	bl	80026bc <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7fe f88c 	bl	80026bc <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	@ 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e28a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045b2:	4b60      	ldr	r3, [pc, #384]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0xe8>
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d075      	beq.n	80046ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ce:	4b59      	ldr	r3, [pc, #356]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045d8:	4b56      	ldr	r3, [pc, #344]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	d102      	bne.n	80045ee <HAL_RCC_OscConfig+0x136>
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d002      	beq.n	80045f4 <HAL_RCC_OscConfig+0x13c>
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d11f      	bne.n	8004634 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_OscConfig+0x154>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e25d      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	4b49      	ldr	r3, [pc, #292]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	061b      	lsls	r3, r3, #24
 800461a:	4946      	ldr	r1, [pc, #280]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004620:	4b45      	ldr	r3, [pc, #276]	@ (8004738 <HAL_RCC_OscConfig+0x280>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fd fe3d 	bl	80022a4 <HAL_InitTick>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d043      	beq.n	80046b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e249      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d023      	beq.n	8004684 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463c:	4b3d      	ldr	r3, [pc, #244]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a3c      	ldr	r2, [pc, #240]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fe f838 	bl	80026bc <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fe f834 	bl	80026bc <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e232      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004662:	4b34      	ldr	r3, [pc, #208]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466e:	4b31      	ldr	r3, [pc, #196]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	061b      	lsls	r3, r3, #24
 800467c:	492d      	ldr	r1, [pc, #180]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 800467e:	4313      	orrs	r3, r2
 8004680:	604b      	str	r3, [r1, #4]
 8004682:	e01a      	b.n	80046ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004684:	4b2b      	ldr	r3, [pc, #172]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2a      	ldr	r2, [pc, #168]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 800468a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800468e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe f814 	bl	80026bc <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004698:	f7fe f810 	bl	80026bc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e20e      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046aa:	4b22      	ldr	r3, [pc, #136]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x1e0>
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d041      	beq.n	800474a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01c      	beq.n	8004708 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ce:	4b19      	ldr	r3, [pc, #100]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80046d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d4:	4a17      	ldr	r2, [pc, #92]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046de:	f7fd ffed 	bl	80026bc <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e6:	f7fd ffe9 	bl	80026bc <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e1e7      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 80046fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0ef      	beq.n	80046e6 <HAL_RCC_OscConfig+0x22e>
 8004706:	e020      	b.n	800474a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004708:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 800470a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800470e:	4a09      	ldr	r2, [pc, #36]	@ (8004734 <HAL_RCC_OscConfig+0x27c>)
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fd ffd0 	bl	80026bc <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800471e:	e00d      	b.n	800473c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004720:	f7fd ffcc 	bl	80026bc <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d906      	bls.n	800473c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e1ca      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	200001f0 	.word	0x200001f0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800473c:	4b8c      	ldr	r3, [pc, #560]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 800473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1ea      	bne.n	8004720 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a6 	beq.w	80048a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004758:	2300      	movs	r3, #0
 800475a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800475c:	4b84      	ldr	r3, [pc, #528]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 800475e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_OscConfig+0x2b4>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x2b6>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004772:	4b7f      	ldr	r3, [pc, #508]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004776:	4a7e      	ldr	r2, [pc, #504]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477c:	6593      	str	r3, [r2, #88]	@ 0x58
 800477e:	4b7c      	ldr	r3, [pc, #496]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800478a:	2301      	movs	r3, #1
 800478c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800478e:	4b79      	ldr	r3, [pc, #484]	@ (8004974 <HAL_RCC_OscConfig+0x4bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d118      	bne.n	80047cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800479a:	4b76      	ldr	r3, [pc, #472]	@ (8004974 <HAL_RCC_OscConfig+0x4bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a75      	ldr	r2, [pc, #468]	@ (8004974 <HAL_RCC_OscConfig+0x4bc>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a6:	f7fd ff89 	bl	80026bc <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7fd ff85 	bl	80026bc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e183      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c0:	4b6c      	ldr	r3, [pc, #432]	@ (8004974 <HAL_RCC_OscConfig+0x4bc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d108      	bne.n	80047e6 <HAL_RCC_OscConfig+0x32e>
 80047d4:	4b66      	ldr	r3, [pc, #408]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	4a65      	ldr	r2, [pc, #404]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047e4:	e024      	b.n	8004830 <HAL_RCC_OscConfig+0x378>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d110      	bne.n	8004810 <HAL_RCC_OscConfig+0x358>
 80047ee:	4b60      	ldr	r3, [pc, #384]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 80047f6:	f043 0304 	orr.w	r3, r3, #4
 80047fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004804:	4a5a      	ldr	r2, [pc, #360]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800480e:	e00f      	b.n	8004830 <HAL_RCC_OscConfig+0x378>
 8004810:	4b57      	ldr	r3, [pc, #348]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	4a56      	ldr	r2, [pc, #344]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004820:	4b53      	ldr	r3, [pc, #332]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004826:	4a52      	ldr	r2, [pc, #328]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004828:	f023 0304 	bic.w	r3, r3, #4
 800482c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d016      	beq.n	8004866 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fd ff40 	bl	80026bc <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483e:	e00a      	b.n	8004856 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7fd ff3c 	bl	80026bc <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e138      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004856:	4b46      	ldr	r3, [pc, #280]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0ed      	beq.n	8004840 <HAL_RCC_OscConfig+0x388>
 8004864:	e015      	b.n	8004892 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004866:	f7fd ff29 	bl	80026bc <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800486c:	e00a      	b.n	8004884 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486e:	f7fd ff25 	bl	80026bc <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e121      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004884:	4b3a      	ldr	r3, [pc, #232]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1ed      	bne.n	800486e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004892:	7ffb      	ldrb	r3, [r7, #31]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d105      	bne.n	80048a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004898:	4b35      	ldr	r3, [pc, #212]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 800489a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489c:	4a34      	ldr	r2, [pc, #208]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 800489e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d03c      	beq.n	800492a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01c      	beq.n	80048f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 80048ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048be:	4a2c      	ldr	r2, [pc, #176]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7fd fef8 	bl	80026bc <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048d0:	f7fd fef4 	bl	80026bc <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e0f2      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048e2:	4b23      	ldr	r3, [pc, #140]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 80048e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ef      	beq.n	80048d0 <HAL_RCC_OscConfig+0x418>
 80048f0:	e01b      	b.n	800492a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 80048f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004902:	f7fd fedb 	bl	80026bc <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800490a:	f7fd fed7 	bl	80026bc <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0d5      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800491c:	4b14      	ldr	r3, [pc, #80]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 800491e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1ef      	bne.n	800490a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80c9 	beq.w	8004ac6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004934:	4b0e      	ldr	r3, [pc, #56]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b0c      	cmp	r3, #12
 800493e:	f000 8083 	beq.w	8004a48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d15e      	bne.n	8004a08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a08      	ldr	r2, [pc, #32]	@ (8004970 <HAL_RCC_OscConfig+0x4b8>)
 8004950:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004956:	f7fd feb1 	bl	80026bc <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800495c:	e00c      	b.n	8004978 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495e:	f7fd fead 	bl	80026bc <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d905      	bls.n	8004978 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e0ab      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
 8004970:	40021000 	.word	0x40021000
 8004974:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004978:	4b55      	ldr	r3, [pc, #340]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ec      	bne.n	800495e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004984:	4b52      	ldr	r3, [pc, #328]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	4b52      	ldr	r3, [pc, #328]	@ (8004ad4 <HAL_RCC_OscConfig+0x61c>)
 800498a:	4013      	ands	r3, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6a11      	ldr	r1, [r2, #32]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004994:	3a01      	subs	r2, #1
 8004996:	0112      	lsls	r2, r2, #4
 8004998:	4311      	orrs	r1, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800499e:	0212      	lsls	r2, r2, #8
 80049a0:	4311      	orrs	r1, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049a6:	0852      	lsrs	r2, r2, #1
 80049a8:	3a01      	subs	r2, #1
 80049aa:	0552      	lsls	r2, r2, #21
 80049ac:	4311      	orrs	r1, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049b2:	0852      	lsrs	r2, r2, #1
 80049b4:	3a01      	subs	r2, #1
 80049b6:	0652      	lsls	r2, r2, #25
 80049b8:	4311      	orrs	r1, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049be:	06d2      	lsls	r2, r2, #27
 80049c0:	430a      	orrs	r2, r1
 80049c2:	4943      	ldr	r1, [pc, #268]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c8:	4b41      	ldr	r3, [pc, #260]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a40      	ldr	r2, [pc, #256]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 80049ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049d4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a3d      	ldr	r2, [pc, #244]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 80049da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fd fe6c 	bl	80026bc <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fd fe68 	bl	80026bc <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e066      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fa:	4b35      	ldr	r3, [pc, #212]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x530>
 8004a06:	e05e      	b.n	8004ac6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a08:	4b31      	ldr	r3, [pc, #196]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a30      	ldr	r2, [pc, #192]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 8004a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fd fe52 	bl	80026bc <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fd fe4e 	bl	80026bc <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e04c      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a2e:	4b28      	ldr	r3, [pc, #160]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a3a:	4b25      	ldr	r3, [pc, #148]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	4924      	ldr	r1, [pc, #144]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 8004a40:	4b25      	ldr	r3, [pc, #148]	@ (8004ad8 <HAL_RCC_OscConfig+0x620>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	60cb      	str	r3, [r1, #12]
 8004a46:	e03e      	b.n	8004ac6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e039      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a54:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad0 <HAL_RCC_OscConfig+0x618>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f003 0203 	and.w	r2, r3, #3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d12c      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	3b01      	subs	r3, #1
 8004a74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d123      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d11b      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d113      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d109      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	3b01      	subs	r3, #1
 8004abc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	019f800c 	.word	0x019f800c
 8004ad8:	feeefffc 	.word	0xfeeefffc

08004adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e11e      	b.n	8004d32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004af4:	4b91      	ldr	r3, [pc, #580]	@ (8004d3c <HAL_RCC_ClockConfig+0x260>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d910      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b8e      	ldr	r3, [pc, #568]	@ (8004d3c <HAL_RCC_ClockConfig+0x260>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f023 020f 	bic.w	r2, r3, #15
 8004b0a:	498c      	ldr	r1, [pc, #560]	@ (8004d3c <HAL_RCC_ClockConfig+0x260>)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b8a      	ldr	r3, [pc, #552]	@ (8004d3c <HAL_RCC_ClockConfig+0x260>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e106      	b.n	8004d32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d073      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d129      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b38:	4b81      	ldr	r3, [pc, #516]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0f4      	b.n	8004d32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b48:	f000 f9d0 	bl	8004eec <RCC_GetSysClockFreqFromPLLSource>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	4a7c      	ldr	r2, [pc, #496]	@ (8004d44 <HAL_RCC_ClockConfig+0x268>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d93f      	bls.n	8004bd6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b56:	4b7a      	ldr	r3, [pc, #488]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d033      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d12f      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b76:	4b72      	ldr	r3, [pc, #456]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b7e:	4a70      	ldr	r2, [pc, #448]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b86:	2380      	movs	r3, #128	@ 0x80
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	e024      	b.n	8004bd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d107      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b94:	4b6a      	ldr	r3, [pc, #424]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0c6      	b.n	8004d32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba4:	4b66      	ldr	r3, [pc, #408]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0be      	b.n	8004d32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004bb4:	f000 f8ce 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4a61      	ldr	r2, [pc, #388]	@ (8004d44 <HAL_RCC_ClockConfig+0x268>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d909      	bls.n	8004bd6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bc2:	4b5f      	ldr	r3, [pc, #380]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bca:	4a5d      	ldr	r2, [pc, #372]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004bd2:	2380      	movs	r3, #128	@ 0x80
 8004bd4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bd6:	4b5a      	ldr	r3, [pc, #360]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f023 0203 	bic.w	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	4957      	ldr	r1, [pc, #348]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be8:	f7fd fd68 	bl	80026bc <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	e00a      	b.n	8004c06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf0:	f7fd fd64 	bl	80026bc <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e095      	b.n	8004d32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	4b4e      	ldr	r3, [pc, #312]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 020c 	and.w	r2, r3, #12
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d1eb      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d023      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	4b43      	ldr	r3, [pc, #268]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a42      	ldr	r2, [pc, #264]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004c36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c48:	4b3d      	ldr	r3, [pc, #244]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c50:	4a3b      	ldr	r2, [pc, #236]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004c52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c58:	4b39      	ldr	r3, [pc, #228]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4936      	ldr	r1, [pc, #216]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b80      	cmp	r3, #128	@ 0x80
 8004c70:	d105      	bne.n	8004c7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c72:	4b33      	ldr	r3, [pc, #204]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	4a32      	ldr	r2, [pc, #200]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004c78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d3c <HAL_RCC_ClockConfig+0x260>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d21d      	bcs.n	8004cc8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d3c <HAL_RCC_ClockConfig+0x260>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 020f 	bic.w	r2, r3, #15
 8004c94:	4929      	ldr	r1, [pc, #164]	@ (8004d3c <HAL_RCC_ClockConfig+0x260>)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c9c:	f7fd fd0e 	bl	80026bc <HAL_GetTick>
 8004ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca4:	f7fd fd0a 	bl	80026bc <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e03b      	b.n	8004d32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b20      	ldr	r3, [pc, #128]	@ (8004d3c <HAL_RCC_ClockConfig+0x260>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1ed      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4917      	ldr	r1, [pc, #92]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf2:	4b13      	ldr	r3, [pc, #76]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	490f      	ldr	r1, [pc, #60]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d06:	f000 f825 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <HAL_RCC_ClockConfig+0x264>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	490c      	ldr	r1, [pc, #48]	@ (8004d48 <HAL_RCC_ClockConfig+0x26c>)
 8004d18:	5ccb      	ldrb	r3, [r1, r3]
 8004d1a:	f003 031f 	and.w	r3, r3, #31
 8004d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d22:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <HAL_RCC_ClockConfig+0x270>)
 8004d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d26:	4b0a      	ldr	r3, [pc, #40]	@ (8004d50 <HAL_RCC_ClockConfig+0x274>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fd faba 	bl	80022a4 <HAL_InitTick>
 8004d30:	4603      	mov	r3, r0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40022000 	.word	0x40022000
 8004d40:	40021000 	.word	0x40021000
 8004d44:	04c4b400 	.word	0x04c4b400
 8004d48:	0800dd04 	.word	0x0800dd04
 8004d4c:	200001ec 	.word	0x200001ec
 8004d50:	200001f0 	.word	0x200001f0

08004d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d102      	bne.n	8004d6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d66:	4b2a      	ldr	r3, [pc, #168]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	e047      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d6c:	4b27      	ldr	r3, [pc, #156]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d102      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d78:	4b26      	ldr	r3, [pc, #152]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	e03e      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d7e:	4b23      	ldr	r3, [pc, #140]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d136      	bne.n	8004df8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d8a:	4b20      	ldr	r3, [pc, #128]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d10c      	bne.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004da8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	4a16      	ldr	r2, [pc, #88]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db2:	68d2      	ldr	r2, [r2, #12]
 8004db4:	0a12      	lsrs	r2, r2, #8
 8004db6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	617b      	str	r3, [r7, #20]
      break;
 8004dc0:	e00c      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dc2:	4a13      	ldr	r2, [pc, #76]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dca:	4a10      	ldr	r2, [pc, #64]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dcc:	68d2      	ldr	r2, [r2, #12]
 8004dce:	0a12      	lsrs	r2, r2, #8
 8004dd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dd4:	fb02 f303 	mul.w	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]
      break;
 8004dda:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	0e5b      	lsrs	r3, r3, #25
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	3301      	adds	r3, #1
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	e001      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004dfc:	693b      	ldr	r3, [r7, #16]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	016e3600 	.word	0x016e3600

08004e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e1c:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	200001ec 	.word	0x200001ec

08004e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e34:	f7ff fff0 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	4904      	ldr	r1, [pc, #16]	@ (8004e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40021000 	.word	0x40021000
 8004e58:	0800dd14 	.word	0x0800dd14

08004e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e60:	f7ff ffda 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0adb      	lsrs	r3, r3, #11
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4904      	ldr	r1, [pc, #16]	@ (8004e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40021000 	.word	0x40021000
 8004e84:	0800dd14 	.word	0x0800dd14

08004e88 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	220f      	movs	r2, #15
 8004e96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e98:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0203 	and.w	r2, r3, #3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004ebc:	4b09      	ldr	r3, [pc, #36]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	08db      	lsrs	r3, r3, #3
 8004ec2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004eca:	4b07      	ldr	r3, [pc, #28]	@ (8004ee8 <HAL_RCC_GetClockConfig+0x60>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 020f 	and.w	r2, r3, #15
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	601a      	str	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40022000 	.word	0x40022000

08004eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8004f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004efc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	3301      	adds	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d10c      	bne.n	8004f2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f10:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	4a14      	ldr	r2, [pc, #80]	@ (8004f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f1a:	68d2      	ldr	r2, [r2, #12]
 8004f1c:	0a12      	lsrs	r2, r2, #8
 8004f1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	617b      	str	r3, [r7, #20]
    break;
 8004f28:	e00c      	b.n	8004f44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f2a:	4a12      	ldr	r2, [pc, #72]	@ (8004f74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f32:	4a0e      	ldr	r2, [pc, #56]	@ (8004f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f34:	68d2      	ldr	r2, [r2, #12]
 8004f36:	0a12      	lsrs	r2, r2, #8
 8004f38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f3c:	fb02 f303 	mul.w	r3, r2, r3
 8004f40:	617b      	str	r3, [r7, #20]
    break;
 8004f42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f44:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	0e5b      	lsrs	r3, r3, #25
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	3301      	adds	r3, #1
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f5e:	687b      	ldr	r3, [r7, #4]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	016e3600 	.word	0x016e3600
 8004f74:	00f42400 	.word	0x00f42400

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f80:	2300      	movs	r3, #0
 8004f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f84:	2300      	movs	r3, #0
 8004f86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8098 	beq.w	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f96:	2300      	movs	r3, #0
 8004f98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f9a:	4b43      	ldr	r3, [pc, #268]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10d      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa6:	4b40      	ldr	r3, [pc, #256]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004faa:	4a3f      	ldr	r2, [pc, #252]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a39      	ldr	r2, [pc, #228]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fce:	f7fd fb75 	bl	80026bc <HAL_GetTick>
 8004fd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fd4:	e009      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd6:	f7fd fb71 	bl	80026bc <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d902      	bls.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	74fb      	strb	r3, [r7, #19]
        break;
 8004fe8:	e005      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fea:	4b30      	ldr	r3, [pc, #192]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0ef      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ff6:	7cfb      	ldrb	r3, [r7, #19]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d159      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005006:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01e      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	429a      	cmp	r2, r3
 8005016:	d019      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005018:	4b23      	ldr	r3, [pc, #140]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005022:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005024:	4b20      	ldr	r3, [pc, #128]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502a:	4a1f      	ldr	r2, [pc, #124]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800502c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005034:	4b1c      	ldr	r3, [pc, #112]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503a:	4a1b      	ldr	r2, [pc, #108]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005044:	4a18      	ldr	r2, [pc, #96]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005056:	f7fd fb31 	bl	80026bc <HAL_GetTick>
 800505a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505c:	e00b      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505e:	f7fd fb2d 	bl	80026bc <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506c:	4293      	cmp	r3, r2
 800506e:	d902      	bls.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	74fb      	strb	r3, [r7, #19]
            break;
 8005074:	e006      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005076:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ec      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005084:	7cfb      	ldrb	r3, [r7, #19]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508a:	4b07      	ldr	r3, [pc, #28]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005098:	4903      	ldr	r1, [pc, #12]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050a0:	e008      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050a2:	7cfb      	ldrb	r3, [r7, #19]
 80050a4:	74bb      	strb	r3, [r7, #18]
 80050a6:	e005      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b0:	7cfb      	ldrb	r3, [r7, #19]
 80050b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050b4:	7c7b      	ldrb	r3, [r7, #17]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d105      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ba:	4ba7      	ldr	r3, [pc, #668]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050be:	4aa6      	ldr	r2, [pc, #664]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050d2:	4ba1      	ldr	r3, [pc, #644]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d8:	f023 0203 	bic.w	r2, r3, #3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	499d      	ldr	r1, [pc, #628]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050f4:	4b98      	ldr	r3, [pc, #608]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fa:	f023 020c 	bic.w	r2, r3, #12
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	4995      	ldr	r1, [pc, #596]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005116:	4b90      	ldr	r3, [pc, #576]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	498c      	ldr	r1, [pc, #560]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005138:	4b87      	ldr	r3, [pc, #540]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	4984      	ldr	r1, [pc, #528]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800515a:	4b7f      	ldr	r3, [pc, #508]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	497b      	ldr	r1, [pc, #492]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800517c:	4b76      	ldr	r3, [pc, #472]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005182:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	4973      	ldr	r1, [pc, #460]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800519e:	4b6e      	ldr	r3, [pc, #440]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	496a      	ldr	r1, [pc, #424]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051c0:	4b65      	ldr	r3, [pc, #404]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	4962      	ldr	r1, [pc, #392]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	4959      	ldr	r1, [pc, #356]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005204:	4b54      	ldr	r3, [pc, #336]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005206:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800520a:	f023 0203 	bic.w	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005212:	4951      	ldr	r1, [pc, #324]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005226:	4b4c      	ldr	r3, [pc, #304]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	4948      	ldr	r1, [pc, #288]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005248:	4b43      	ldr	r3, [pc, #268]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005256:	4940      	ldr	r1, [pc, #256]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005266:	d105      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005268:	4b3b      	ldr	r3, [pc, #236]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a3a      	ldr	r2, [pc, #232]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800526e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005272:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005280:	4b35      	ldr	r3, [pc, #212]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005286:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800528e:	4932      	ldr	r1, [pc, #200]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800529e:	d105      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d015      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052b8:	4b27      	ldr	r3, [pc, #156]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c6:	4924      	ldr	r1, [pc, #144]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052d6:	d105      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d015      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052f0:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fe:	4916      	ldr	r1, [pc, #88]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800530e:	d105      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005310:	4b11      	ldr	r3, [pc, #68]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a10      	ldr	r2, [pc, #64]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800531a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d019      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005328:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	4908      	ldr	r1, [pc, #32]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005346:	d109      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005348:	4b03      	ldr	r3, [pc, #12]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4a02      	ldr	r2, [pc, #8]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005352:	60d3      	str	r3, [r2, #12]
 8005354:	e002      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005356:	bf00      	nop
 8005358:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005368:	4b29      	ldr	r3, [pc, #164]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005376:	4926      	ldr	r1, [pc, #152]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005386:	d105      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005388:	4b21      	ldr	r3, [pc, #132]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a20      	ldr	r2, [pc, #128]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800538e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005392:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d015      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80053a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ae:	4918      	ldr	r1, [pc, #96]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053be:	d105      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053c0:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a12      	ldr	r2, [pc, #72]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d015      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e6:	490a      	ldr	r1, [pc, #40]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053f6:	d105      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f8:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a04      	ldr	r2, [pc, #16]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005402:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005404:	7cbb      	ldrb	r3, [r7, #18]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000

08005414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e049      	b.n	80054ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc fd64 	bl	8001f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 fe60 	bl	8006118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d001      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e054      	b.n	8005586 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a26      	ldr	r2, [pc, #152]	@ (8005594 <HAL_TIM_Base_Start_IT+0xd0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d022      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x80>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005506:	d01d      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x80>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a22      	ldr	r2, [pc, #136]	@ (8005598 <HAL_TIM_Base_Start_IT+0xd4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d018      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x80>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a21      	ldr	r2, [pc, #132]	@ (800559c <HAL_TIM_Base_Start_IT+0xd8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x80>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1f      	ldr	r2, [pc, #124]	@ (80055a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00e      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x80>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1e      	ldr	r2, [pc, #120]	@ (80055a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d009      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x80>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1c      	ldr	r2, [pc, #112]	@ (80055a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x80>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1b      	ldr	r2, [pc, #108]	@ (80055ac <HAL_TIM_Base_Start_IT+0xe8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d115      	bne.n	8005570 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	4b19      	ldr	r3, [pc, #100]	@ (80055b0 <HAL_TIM_Base_Start_IT+0xec>)
 800554c:	4013      	ands	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b06      	cmp	r3, #6
 8005554:	d015      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0xbe>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800555c:	d011      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556e:	e008      	b.n	8005582 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e000      	b.n	8005584 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	40013400 	.word	0x40013400
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40015000 	.word	0x40015000
 80055b0:	00010007 	.word	0x00010007

080055b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e049      	b.n	800565a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f841 	bl	8005662 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f000 fd90 	bl	8006118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <HAL_TIM_PWM_Start+0x24>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	e03c      	b.n	8005716 <HAL_TIM_PWM_Start+0x9e>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d109      	bne.n	80056b6 <HAL_TIM_PWM_Start+0x3e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	bf14      	ite	ne
 80056ae:	2301      	movne	r3, #1
 80056b0:	2300      	moveq	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	e02f      	b.n	8005716 <HAL_TIM_PWM_Start+0x9e>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d109      	bne.n	80056d0 <HAL_TIM_PWM_Start+0x58>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	bf14      	ite	ne
 80056c8:	2301      	movne	r3, #1
 80056ca:	2300      	moveq	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	e022      	b.n	8005716 <HAL_TIM_PWM_Start+0x9e>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b0c      	cmp	r3, #12
 80056d4:	d109      	bne.n	80056ea <HAL_TIM_PWM_Start+0x72>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b01      	cmp	r3, #1
 80056e0:	bf14      	ite	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	2300      	moveq	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	e015      	b.n	8005716 <HAL_TIM_PWM_Start+0x9e>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d109      	bne.n	8005704 <HAL_TIM_PWM_Start+0x8c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	e008      	b.n	8005716 <HAL_TIM_PWM_Start+0x9e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b01      	cmp	r3, #1
 800570e:	bf14      	ite	ne
 8005710:	2301      	movne	r3, #1
 8005712:	2300      	moveq	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0a6      	b.n	800586c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d104      	bne.n	800572e <HAL_TIM_PWM_Start+0xb6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800572c:	e023      	b.n	8005776 <HAL_TIM_PWM_Start+0xfe>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b04      	cmp	r3, #4
 8005732:	d104      	bne.n	800573e <HAL_TIM_PWM_Start+0xc6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800573c:	e01b      	b.n	8005776 <HAL_TIM_PWM_Start+0xfe>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b08      	cmp	r3, #8
 8005742:	d104      	bne.n	800574e <HAL_TIM_PWM_Start+0xd6>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800574c:	e013      	b.n	8005776 <HAL_TIM_PWM_Start+0xfe>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b0c      	cmp	r3, #12
 8005752:	d104      	bne.n	800575e <HAL_TIM_PWM_Start+0xe6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800575c:	e00b      	b.n	8005776 <HAL_TIM_PWM_Start+0xfe>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b10      	cmp	r3, #16
 8005762:	d104      	bne.n	800576e <HAL_TIM_PWM_Start+0xf6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800576c:	e003      	b.n	8005776 <HAL_TIM_PWM_Start+0xfe>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2201      	movs	r2, #1
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f001 f9b8 	bl	8006af4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a3a      	ldr	r2, [pc, #232]	@ (8005874 <HAL_TIM_PWM_Start+0x1fc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d018      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x148>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a39      	ldr	r2, [pc, #228]	@ (8005878 <HAL_TIM_PWM_Start+0x200>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x148>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a37      	ldr	r2, [pc, #220]	@ (800587c <HAL_TIM_PWM_Start+0x204>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00e      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x148>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a36      	ldr	r2, [pc, #216]	@ (8005880 <HAL_TIM_PWM_Start+0x208>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d009      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x148>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a34      	ldr	r2, [pc, #208]	@ (8005884 <HAL_TIM_PWM_Start+0x20c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x148>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a33      	ldr	r2, [pc, #204]	@ (8005888 <HAL_TIM_PWM_Start+0x210>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_PWM_Start+0x14c>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <HAL_TIM_PWM_Start+0x14e>
 80057c4:	2300      	movs	r3, #0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a25      	ldr	r2, [pc, #148]	@ (8005874 <HAL_TIM_PWM_Start+0x1fc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_TIM_PWM_Start+0x1b2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ec:	d01d      	beq.n	800582a <HAL_TIM_PWM_Start+0x1b2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a26      	ldr	r2, [pc, #152]	@ (800588c <HAL_TIM_PWM_Start+0x214>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_TIM_PWM_Start+0x1b2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a24      	ldr	r2, [pc, #144]	@ (8005890 <HAL_TIM_PWM_Start+0x218>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_TIM_PWM_Start+0x1b2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a23      	ldr	r2, [pc, #140]	@ (8005894 <HAL_TIM_PWM_Start+0x21c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_TIM_PWM_Start+0x1b2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a19      	ldr	r2, [pc, #100]	@ (8005878 <HAL_TIM_PWM_Start+0x200>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_TIM_PWM_Start+0x1b2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a18      	ldr	r2, [pc, #96]	@ (800587c <HAL_TIM_PWM_Start+0x204>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_TIM_PWM_Start+0x1b2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a18      	ldr	r2, [pc, #96]	@ (8005888 <HAL_TIM_PWM_Start+0x210>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d115      	bne.n	8005856 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	4b19      	ldr	r3, [pc, #100]	@ (8005898 <HAL_TIM_PWM_Start+0x220>)
 8005832:	4013      	ands	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b06      	cmp	r3, #6
 800583a:	d015      	beq.n	8005868 <HAL_TIM_PWM_Start+0x1f0>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005842:	d011      	beq.n	8005868 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	e008      	b.n	8005868 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	e000      	b.n	800586a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005868:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40013400 	.word	0x40013400
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800
 8005888:	40015000 	.word	0x40015000
 800588c:	40000400 	.word	0x40000400
 8005890:	40000800 	.word	0x40000800
 8005894:	40000c00 	.word	0x40000c00
 8005898:	00010007 	.word	0x00010007

0800589c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 f920 	bl	8006af4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a40      	ldr	r2, [pc, #256]	@ (80059bc <HAL_TIM_PWM_Stop+0x120>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d018      	beq.n	80058f0 <HAL_TIM_PWM_Stop+0x54>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a3f      	ldr	r2, [pc, #252]	@ (80059c0 <HAL_TIM_PWM_Stop+0x124>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <HAL_TIM_PWM_Stop+0x54>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a3d      	ldr	r2, [pc, #244]	@ (80059c4 <HAL_TIM_PWM_Stop+0x128>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00e      	beq.n	80058f0 <HAL_TIM_PWM_Stop+0x54>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a3c      	ldr	r2, [pc, #240]	@ (80059c8 <HAL_TIM_PWM_Stop+0x12c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_TIM_PWM_Stop+0x54>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a3a      	ldr	r2, [pc, #232]	@ (80059cc <HAL_TIM_PWM_Stop+0x130>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_TIM_PWM_Stop+0x54>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a39      	ldr	r2, [pc, #228]	@ (80059d0 <HAL_TIM_PWM_Stop+0x134>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d101      	bne.n	80058f4 <HAL_TIM_PWM_Stop+0x58>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <HAL_TIM_PWM_Stop+0x5a>
 80058f4:	2300      	movs	r3, #0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d017      	beq.n	800592a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10f      	bne.n	800592a <HAL_TIM_PWM_Stop+0x8e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005914:	4013      	ands	r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d107      	bne.n	800592a <HAL_TIM_PWM_Stop+0x8e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005928:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6a1a      	ldr	r2, [r3, #32]
 8005930:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005934:	4013      	ands	r3, r2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10f      	bne.n	800595a <HAL_TIM_PWM_Stop+0xbe>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d107      	bne.n	800595a <HAL_TIM_PWM_Stop+0xbe>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <HAL_TIM_PWM_Stop+0xce>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005968:	e023      	b.n	80059b2 <HAL_TIM_PWM_Stop+0x116>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b04      	cmp	r3, #4
 800596e:	d104      	bne.n	800597a <HAL_TIM_PWM_Stop+0xde>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005978:	e01b      	b.n	80059b2 <HAL_TIM_PWM_Stop+0x116>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b08      	cmp	r3, #8
 800597e:	d104      	bne.n	800598a <HAL_TIM_PWM_Stop+0xee>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005988:	e013      	b.n	80059b2 <HAL_TIM_PWM_Stop+0x116>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b0c      	cmp	r3, #12
 800598e:	d104      	bne.n	800599a <HAL_TIM_PWM_Stop+0xfe>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005998:	e00b      	b.n	80059b2 <HAL_TIM_PWM_Stop+0x116>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b10      	cmp	r3, #16
 800599e:	d104      	bne.n	80059aa <HAL_TIM_PWM_Stop+0x10e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059a8:	e003      	b.n	80059b2 <HAL_TIM_PWM_Stop+0x116>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40013400 	.word	0x40013400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800
 80059d0:	40015000 	.word	0x40015000

080059d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d020      	beq.n	8005a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01b      	beq.n	8005a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0202 	mvn.w	r2, #2
 8005a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fb5c 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fb4e 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fb5f 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01b      	beq.n	8005a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0204 	mvn.w	r2, #4
 8005a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fb36 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fb28 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fb39 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d020      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0208 	mvn.w	r2, #8
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fb10 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fb02 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fb13 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0310 	and.w	r3, r3, #16
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d020      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01b      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0210 	mvn.w	r2, #16
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2208      	movs	r2, #8
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 faea 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fadc 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 faed 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00c      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0201 	mvn.w	r2, #1
 8005b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fb ff9a 	bl	8001a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d104      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00c      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 fafe 	bl	800716a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 faf6 	bl	800717e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 faa7 	bl	8006104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00c      	beq.n	8005bda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f06f 0220 	mvn.w	r2, #32
 8005bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 fabe 	bl	8007156 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00c      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 faca 	bl	8007192 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00c      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 fac2 	bl	80071a6 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00c      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 faba 	bl	80071ba <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 fab2 	bl	80071ce <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e0ff      	b.n	8005e92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b14      	cmp	r3, #20
 8005c9e:	f200 80f0 	bhi.w	8005e82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cfd 	.word	0x08005cfd
 8005cac:	08005e83 	.word	0x08005e83
 8005cb0:	08005e83 	.word	0x08005e83
 8005cb4:	08005e83 	.word	0x08005e83
 8005cb8:	08005d3d 	.word	0x08005d3d
 8005cbc:	08005e83 	.word	0x08005e83
 8005cc0:	08005e83 	.word	0x08005e83
 8005cc4:	08005e83 	.word	0x08005e83
 8005cc8:	08005d7f 	.word	0x08005d7f
 8005ccc:	08005e83 	.word	0x08005e83
 8005cd0:	08005e83 	.word	0x08005e83
 8005cd4:	08005e83 	.word	0x08005e83
 8005cd8:	08005dbf 	.word	0x08005dbf
 8005cdc:	08005e83 	.word	0x08005e83
 8005ce0:	08005e83 	.word	0x08005e83
 8005ce4:	08005e83 	.word	0x08005e83
 8005ce8:	08005e01 	.word	0x08005e01
 8005cec:	08005e83 	.word	0x08005e83
 8005cf0:	08005e83 	.word	0x08005e83
 8005cf4:	08005e83 	.word	0x08005e83
 8005cf8:	08005e41 	.word	0x08005e41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fabc 	bl	8006280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0208 	orr.w	r2, r2, #8
 8005d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0204 	bic.w	r2, r2, #4
 8005d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6999      	ldr	r1, [r3, #24]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	619a      	str	r2, [r3, #24]
      break;
 8005d3a:	e0a5      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fb36 	bl	80063b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6999      	ldr	r1, [r3, #24]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	021a      	lsls	r2, r3, #8
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	619a      	str	r2, [r3, #24]
      break;
 8005d7c:	e084      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fba9 	bl	80064dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0208 	orr.w	r2, r2, #8
 8005d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0204 	bic.w	r2, r2, #4
 8005da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69d9      	ldr	r1, [r3, #28]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	61da      	str	r2, [r3, #28]
      break;
 8005dbc:	e064      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fc1b 	bl	8006600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69d9      	ldr	r1, [r3, #28]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	021a      	lsls	r2, r3, #8
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	61da      	str	r2, [r3, #28]
      break;
 8005dfe:	e043      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fc8e 	bl	8006728 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0208 	orr.w	r2, r2, #8
 8005e1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0204 	bic.w	r2, r2, #4
 8005e2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e3e:	e023      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fcd8 	bl	80067fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	021a      	lsls	r2, r3, #8
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e80:	e002      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	75fb      	strb	r3, [r7, #23]
      break;
 8005e86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop

08005e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e0f6      	b.n	80060a6 <HAL_TIM_ConfigClockSource+0x20a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005ed6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a6f      	ldr	r2, [pc, #444]	@ (80060b0 <HAL_TIM_ConfigClockSource+0x214>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	f000 80c1 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005ef8:	4a6d      	ldr	r2, [pc, #436]	@ (80060b0 <HAL_TIM_ConfigClockSource+0x214>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	f200 80c6 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f00:	4a6c      	ldr	r2, [pc, #432]	@ (80060b4 <HAL_TIM_ConfigClockSource+0x218>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	f000 80b9 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f08:	4a6a      	ldr	r2, [pc, #424]	@ (80060b4 <HAL_TIM_ConfigClockSource+0x218>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	f200 80be 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f10:	4a69      	ldr	r2, [pc, #420]	@ (80060b8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	f000 80b1 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f18:	4a67      	ldr	r2, [pc, #412]	@ (80060b8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	f200 80b6 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f20:	4a66      	ldr	r2, [pc, #408]	@ (80060bc <HAL_TIM_ConfigClockSource+0x220>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	f000 80a9 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f28:	4a64      	ldr	r2, [pc, #400]	@ (80060bc <HAL_TIM_ConfigClockSource+0x220>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	f200 80ae 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f30:	4a63      	ldr	r2, [pc, #396]	@ (80060c0 <HAL_TIM_ConfigClockSource+0x224>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f000 80a1 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f38:	4a61      	ldr	r2, [pc, #388]	@ (80060c0 <HAL_TIM_ConfigClockSource+0x224>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	f200 80a6 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f40:	4a60      	ldr	r2, [pc, #384]	@ (80060c4 <HAL_TIM_ConfigClockSource+0x228>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	f000 8099 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f48:	4a5e      	ldr	r2, [pc, #376]	@ (80060c4 <HAL_TIM_ConfigClockSource+0x228>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	f200 809e 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f54:	f000 8091 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f5c:	f200 8096 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f64:	f000 8089 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005f68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6c:	f200 808e 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f74:	d03e      	beq.n	8005ff4 <HAL_TIM_ConfigClockSource+0x158>
 8005f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7a:	f200 8087 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f82:	f000 8086 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x1f6>
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8a:	d87f      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f8c:	2b70      	cmp	r3, #112	@ 0x70
 8005f8e:	d01a      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x12a>
 8005f90:	2b70      	cmp	r3, #112	@ 0x70
 8005f92:	d87b      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f94:	2b60      	cmp	r3, #96	@ 0x60
 8005f96:	d050      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x19e>
 8005f98:	2b60      	cmp	r3, #96	@ 0x60
 8005f9a:	d877      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f9c:	2b50      	cmp	r3, #80	@ 0x50
 8005f9e:	d03c      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x17e>
 8005fa0:	2b50      	cmp	r3, #80	@ 0x50
 8005fa2:	d873      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fa4:	2b40      	cmp	r3, #64	@ 0x40
 8005fa6:	d058      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x1be>
 8005fa8:	2b40      	cmp	r3, #64	@ 0x40
 8005faa:	d86f      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fac:	2b30      	cmp	r3, #48	@ 0x30
 8005fae:	d064      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005fb0:	2b30      	cmp	r3, #48	@ 0x30
 8005fb2:	d86b      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d060      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d867      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d05c      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005fc0:	2b10      	cmp	r3, #16
 8005fc2:	d05a      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x1de>
 8005fc4:	e062      	b.n	800608c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd6:	f000 fd6d 	bl	8006ab4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	609a      	str	r2, [r3, #8]
      break;
 8005ff2:	e04f      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006004:	f000 fd56 	bl	8006ab4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006016:	609a      	str	r2, [r3, #8]
      break;
 8006018:	e03c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006026:	461a      	mov	r2, r3
 8006028:	f000 fcc8 	bl	80069bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2150      	movs	r1, #80	@ 0x50
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fd21 	bl	8006a7a <TIM_ITRx_SetConfig>
      break;
 8006038:	e02c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006046:	461a      	mov	r2, r3
 8006048:	f000 fce7 	bl	8006a1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2160      	movs	r1, #96	@ 0x60
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fd11 	bl	8006a7a <TIM_ITRx_SetConfig>
      break;
 8006058:	e01c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006066:	461a      	mov	r2, r3
 8006068:	f000 fca8 	bl	80069bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2140      	movs	r1, #64	@ 0x40
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fd01 	bl	8006a7a <TIM_ITRx_SetConfig>
      break;
 8006078:	e00c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f000 fcf8 	bl	8006a7a <TIM_ITRx_SetConfig>
      break;
 800608a:	e003      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      break;
 8006090:	e000      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	00100070 	.word	0x00100070
 80060b4:	00100060 	.word	0x00100060
 80060b8:	00100050 	.word	0x00100050
 80060bc:	00100040 	.word	0x00100040
 80060c0:	00100030 	.word	0x00100030
 80060c4:	00100020 	.word	0x00100020

080060c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a4c      	ldr	r2, [pc, #304]	@ (800625c <TIM_Base_SetConfig+0x144>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d017      	beq.n	8006160 <TIM_Base_SetConfig+0x48>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006136:	d013      	beq.n	8006160 <TIM_Base_SetConfig+0x48>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a49      	ldr	r2, [pc, #292]	@ (8006260 <TIM_Base_SetConfig+0x148>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00f      	beq.n	8006160 <TIM_Base_SetConfig+0x48>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a48      	ldr	r2, [pc, #288]	@ (8006264 <TIM_Base_SetConfig+0x14c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00b      	beq.n	8006160 <TIM_Base_SetConfig+0x48>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a47      	ldr	r2, [pc, #284]	@ (8006268 <TIM_Base_SetConfig+0x150>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d007      	beq.n	8006160 <TIM_Base_SetConfig+0x48>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a46      	ldr	r2, [pc, #280]	@ (800626c <TIM_Base_SetConfig+0x154>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_Base_SetConfig+0x48>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a45      	ldr	r2, [pc, #276]	@ (8006270 <TIM_Base_SetConfig+0x158>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d108      	bne.n	8006172 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a39      	ldr	r2, [pc, #228]	@ (800625c <TIM_Base_SetConfig+0x144>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d023      	beq.n	80061c2 <TIM_Base_SetConfig+0xaa>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006180:	d01f      	beq.n	80061c2 <TIM_Base_SetConfig+0xaa>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a36      	ldr	r2, [pc, #216]	@ (8006260 <TIM_Base_SetConfig+0x148>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01b      	beq.n	80061c2 <TIM_Base_SetConfig+0xaa>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a35      	ldr	r2, [pc, #212]	@ (8006264 <TIM_Base_SetConfig+0x14c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d017      	beq.n	80061c2 <TIM_Base_SetConfig+0xaa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a34      	ldr	r2, [pc, #208]	@ (8006268 <TIM_Base_SetConfig+0x150>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <TIM_Base_SetConfig+0xaa>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a33      	ldr	r2, [pc, #204]	@ (800626c <TIM_Base_SetConfig+0x154>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00f      	beq.n	80061c2 <TIM_Base_SetConfig+0xaa>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a33      	ldr	r2, [pc, #204]	@ (8006274 <TIM_Base_SetConfig+0x15c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00b      	beq.n	80061c2 <TIM_Base_SetConfig+0xaa>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a32      	ldr	r2, [pc, #200]	@ (8006278 <TIM_Base_SetConfig+0x160>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d007      	beq.n	80061c2 <TIM_Base_SetConfig+0xaa>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a31      	ldr	r2, [pc, #196]	@ (800627c <TIM_Base_SetConfig+0x164>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_Base_SetConfig+0xaa>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006270 <TIM_Base_SetConfig+0x158>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d108      	bne.n	80061d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a18      	ldr	r2, [pc, #96]	@ (800625c <TIM_Base_SetConfig+0x144>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <TIM_Base_SetConfig+0x110>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a1a      	ldr	r2, [pc, #104]	@ (800626c <TIM_Base_SetConfig+0x154>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00f      	beq.n	8006228 <TIM_Base_SetConfig+0x110>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a1a      	ldr	r2, [pc, #104]	@ (8006274 <TIM_Base_SetConfig+0x15c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_Base_SetConfig+0x110>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <TIM_Base_SetConfig+0x160>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_Base_SetConfig+0x110>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a18      	ldr	r2, [pc, #96]	@ (800627c <TIM_Base_SetConfig+0x164>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0x110>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a13      	ldr	r2, [pc, #76]	@ (8006270 <TIM_Base_SetConfig+0x158>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d103      	bne.n	8006230 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b01      	cmp	r3, #1
 8006240:	d105      	bne.n	800624e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f023 0201 	bic.w	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	611a      	str	r2, [r3, #16]
  }
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40012c00 	.word	0x40012c00
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800
 8006268:	40000c00 	.word	0x40000c00
 800626c:	40013400 	.word	0x40013400
 8006270:	40015000 	.word	0x40015000
 8006274:	40014000 	.word	0x40014000
 8006278:	40014400 	.word	0x40014400
 800627c:	40014800 	.word	0x40014800

08006280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	f023 0201 	bic.w	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f023 0302 	bic.w	r3, r3, #2
 80062cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a30      	ldr	r2, [pc, #192]	@ (800639c <TIM_OC1_SetConfig+0x11c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <TIM_OC1_SetConfig+0x88>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a2f      	ldr	r2, [pc, #188]	@ (80063a0 <TIM_OC1_SetConfig+0x120>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00f      	beq.n	8006308 <TIM_OC1_SetConfig+0x88>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a2e      	ldr	r2, [pc, #184]	@ (80063a4 <TIM_OC1_SetConfig+0x124>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00b      	beq.n	8006308 <TIM_OC1_SetConfig+0x88>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a2d      	ldr	r2, [pc, #180]	@ (80063a8 <TIM_OC1_SetConfig+0x128>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d007      	beq.n	8006308 <TIM_OC1_SetConfig+0x88>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a2c      	ldr	r2, [pc, #176]	@ (80063ac <TIM_OC1_SetConfig+0x12c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_OC1_SetConfig+0x88>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a2b      	ldr	r2, [pc, #172]	@ (80063b0 <TIM_OC1_SetConfig+0x130>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d10c      	bne.n	8006322 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0308 	bic.w	r3, r3, #8
 800630e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f023 0304 	bic.w	r3, r3, #4
 8006320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a1d      	ldr	r2, [pc, #116]	@ (800639c <TIM_OC1_SetConfig+0x11c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d013      	beq.n	8006352 <TIM_OC1_SetConfig+0xd2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a1c      	ldr	r2, [pc, #112]	@ (80063a0 <TIM_OC1_SetConfig+0x120>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00f      	beq.n	8006352 <TIM_OC1_SetConfig+0xd2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a1b      	ldr	r2, [pc, #108]	@ (80063a4 <TIM_OC1_SetConfig+0x124>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00b      	beq.n	8006352 <TIM_OC1_SetConfig+0xd2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a1a      	ldr	r2, [pc, #104]	@ (80063a8 <TIM_OC1_SetConfig+0x128>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d007      	beq.n	8006352 <TIM_OC1_SetConfig+0xd2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a19      	ldr	r2, [pc, #100]	@ (80063ac <TIM_OC1_SetConfig+0x12c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d003      	beq.n	8006352 <TIM_OC1_SetConfig+0xd2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a18      	ldr	r2, [pc, #96]	@ (80063b0 <TIM_OC1_SetConfig+0x130>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d111      	bne.n	8006376 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	621a      	str	r2, [r3, #32]
}
 8006390:	bf00      	nop
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	40012c00 	.word	0x40012c00
 80063a0:	40013400 	.word	0x40013400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40014400 	.word	0x40014400
 80063ac:	40014800 	.word	0x40014800
 80063b0:	40015000 	.word	0x40015000

080063b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f023 0210 	bic.w	r2, r3, #16
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f023 0320 	bic.w	r3, r3, #32
 8006402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a2c      	ldr	r2, [pc, #176]	@ (80064c4 <TIM_OC2_SetConfig+0x110>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d007      	beq.n	8006428 <TIM_OC2_SetConfig+0x74>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a2b      	ldr	r2, [pc, #172]	@ (80064c8 <TIM_OC2_SetConfig+0x114>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC2_SetConfig+0x74>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a2a      	ldr	r2, [pc, #168]	@ (80064cc <TIM_OC2_SetConfig+0x118>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d10d      	bne.n	8006444 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800642e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006442:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a1f      	ldr	r2, [pc, #124]	@ (80064c4 <TIM_OC2_SetConfig+0x110>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d013      	beq.n	8006474 <TIM_OC2_SetConfig+0xc0>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a1e      	ldr	r2, [pc, #120]	@ (80064c8 <TIM_OC2_SetConfig+0x114>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00f      	beq.n	8006474 <TIM_OC2_SetConfig+0xc0>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a1e      	ldr	r2, [pc, #120]	@ (80064d0 <TIM_OC2_SetConfig+0x11c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00b      	beq.n	8006474 <TIM_OC2_SetConfig+0xc0>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a1d      	ldr	r2, [pc, #116]	@ (80064d4 <TIM_OC2_SetConfig+0x120>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d007      	beq.n	8006474 <TIM_OC2_SetConfig+0xc0>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a1c      	ldr	r2, [pc, #112]	@ (80064d8 <TIM_OC2_SetConfig+0x124>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_OC2_SetConfig+0xc0>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a17      	ldr	r2, [pc, #92]	@ (80064cc <TIM_OC2_SetConfig+0x118>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d113      	bne.n	800649c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800647a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	621a      	str	r2, [r3, #32]
}
 80064b6:	bf00      	nop
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40013400 	.word	0x40013400
 80064cc:	40015000 	.word	0x40015000
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800

080064dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800650a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0303 	bic.w	r3, r3, #3
 8006516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2b      	ldr	r2, [pc, #172]	@ (80065e8 <TIM_OC3_SetConfig+0x10c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d007      	beq.n	800654e <TIM_OC3_SetConfig+0x72>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2a      	ldr	r2, [pc, #168]	@ (80065ec <TIM_OC3_SetConfig+0x110>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_OC3_SetConfig+0x72>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a29      	ldr	r2, [pc, #164]	@ (80065f0 <TIM_OC3_SetConfig+0x114>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d10d      	bne.n	800656a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1e      	ldr	r2, [pc, #120]	@ (80065e8 <TIM_OC3_SetConfig+0x10c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d013      	beq.n	800659a <TIM_OC3_SetConfig+0xbe>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1d      	ldr	r2, [pc, #116]	@ (80065ec <TIM_OC3_SetConfig+0x110>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00f      	beq.n	800659a <TIM_OC3_SetConfig+0xbe>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1d      	ldr	r2, [pc, #116]	@ (80065f4 <TIM_OC3_SetConfig+0x118>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00b      	beq.n	800659a <TIM_OC3_SetConfig+0xbe>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a1c      	ldr	r2, [pc, #112]	@ (80065f8 <TIM_OC3_SetConfig+0x11c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d007      	beq.n	800659a <TIM_OC3_SetConfig+0xbe>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a1b      	ldr	r2, [pc, #108]	@ (80065fc <TIM_OC3_SetConfig+0x120>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d003      	beq.n	800659a <TIM_OC3_SetConfig+0xbe>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a16      	ldr	r2, [pc, #88]	@ (80065f0 <TIM_OC3_SetConfig+0x114>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d113      	bne.n	80065c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40015000 	.word	0x40015000
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800

08006600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800663a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800664e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	031b      	lsls	r3, r3, #12
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a2c      	ldr	r2, [pc, #176]	@ (8006710 <TIM_OC4_SetConfig+0x110>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d007      	beq.n	8006674 <TIM_OC4_SetConfig+0x74>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a2b      	ldr	r2, [pc, #172]	@ (8006714 <TIM_OC4_SetConfig+0x114>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC4_SetConfig+0x74>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a2a      	ldr	r2, [pc, #168]	@ (8006718 <TIM_OC4_SetConfig+0x118>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d10d      	bne.n	8006690 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800667a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	031b      	lsls	r3, r3, #12
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800668e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1f      	ldr	r2, [pc, #124]	@ (8006710 <TIM_OC4_SetConfig+0x110>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d013      	beq.n	80066c0 <TIM_OC4_SetConfig+0xc0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a1e      	ldr	r2, [pc, #120]	@ (8006714 <TIM_OC4_SetConfig+0x114>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00f      	beq.n	80066c0 <TIM_OC4_SetConfig+0xc0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1e      	ldr	r2, [pc, #120]	@ (800671c <TIM_OC4_SetConfig+0x11c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <TIM_OC4_SetConfig+0xc0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006720 <TIM_OC4_SetConfig+0x120>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d007      	beq.n	80066c0 <TIM_OC4_SetConfig+0xc0>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006724 <TIM_OC4_SetConfig+0x124>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC4_SetConfig+0xc0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a17      	ldr	r2, [pc, #92]	@ (8006718 <TIM_OC4_SetConfig+0x118>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d113      	bne.n	80066e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	019b      	lsls	r3, r3, #6
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40013400 	.word	0x40013400
 8006718:	40015000 	.word	0x40015000
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800

08006728 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800676c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	041b      	lsls	r3, r3, #16
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a19      	ldr	r2, [pc, #100]	@ (80067e4 <TIM_OC5_SetConfig+0xbc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <TIM_OC5_SetConfig+0x82>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a18      	ldr	r2, [pc, #96]	@ (80067e8 <TIM_OC5_SetConfig+0xc0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00f      	beq.n	80067aa <TIM_OC5_SetConfig+0x82>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a17      	ldr	r2, [pc, #92]	@ (80067ec <TIM_OC5_SetConfig+0xc4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00b      	beq.n	80067aa <TIM_OC5_SetConfig+0x82>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a16      	ldr	r2, [pc, #88]	@ (80067f0 <TIM_OC5_SetConfig+0xc8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d007      	beq.n	80067aa <TIM_OC5_SetConfig+0x82>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a15      	ldr	r2, [pc, #84]	@ (80067f4 <TIM_OC5_SetConfig+0xcc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_OC5_SetConfig+0x82>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a14      	ldr	r2, [pc, #80]	@ (80067f8 <TIM_OC5_SetConfig+0xd0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d109      	bne.n	80067be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	621a      	str	r2, [r3, #32]
}
 80067d8:	bf00      	nop
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	40012c00 	.word	0x40012c00
 80067e8:	40013400 	.word	0x40013400
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40014400 	.word	0x40014400
 80067f4:	40014800 	.word	0x40014800
 80067f8:	40015000 	.word	0x40015000

080067fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800682a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800682e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	051b      	lsls	r3, r3, #20
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a1a      	ldr	r2, [pc, #104]	@ (80068bc <TIM_OC6_SetConfig+0xc0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d013      	beq.n	8006880 <TIM_OC6_SetConfig+0x84>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a19      	ldr	r2, [pc, #100]	@ (80068c0 <TIM_OC6_SetConfig+0xc4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00f      	beq.n	8006880 <TIM_OC6_SetConfig+0x84>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a18      	ldr	r2, [pc, #96]	@ (80068c4 <TIM_OC6_SetConfig+0xc8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00b      	beq.n	8006880 <TIM_OC6_SetConfig+0x84>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a17      	ldr	r2, [pc, #92]	@ (80068c8 <TIM_OC6_SetConfig+0xcc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d007      	beq.n	8006880 <TIM_OC6_SetConfig+0x84>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a16      	ldr	r2, [pc, #88]	@ (80068cc <TIM_OC6_SetConfig+0xd0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d003      	beq.n	8006880 <TIM_OC6_SetConfig+0x84>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a15      	ldr	r2, [pc, #84]	@ (80068d0 <TIM_OC6_SetConfig+0xd4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d109      	bne.n	8006894 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006886:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	029b      	lsls	r3, r3, #10
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40013400 	.word	0x40013400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400
 80068cc:	40014800 	.word	0x40014800
 80068d0:	40015000 	.word	0x40015000

080068d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f023 0201 	bic.w	r2, r3, #1
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a28      	ldr	r2, [pc, #160]	@ (80069a0 <TIM_TI1_SetConfig+0xcc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d01b      	beq.n	800693a <TIM_TI1_SetConfig+0x66>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006908:	d017      	beq.n	800693a <TIM_TI1_SetConfig+0x66>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4a25      	ldr	r2, [pc, #148]	@ (80069a4 <TIM_TI1_SetConfig+0xd0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d013      	beq.n	800693a <TIM_TI1_SetConfig+0x66>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a24      	ldr	r2, [pc, #144]	@ (80069a8 <TIM_TI1_SetConfig+0xd4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00f      	beq.n	800693a <TIM_TI1_SetConfig+0x66>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a23      	ldr	r2, [pc, #140]	@ (80069ac <TIM_TI1_SetConfig+0xd8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00b      	beq.n	800693a <TIM_TI1_SetConfig+0x66>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a22      	ldr	r2, [pc, #136]	@ (80069b0 <TIM_TI1_SetConfig+0xdc>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d007      	beq.n	800693a <TIM_TI1_SetConfig+0x66>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a21      	ldr	r2, [pc, #132]	@ (80069b4 <TIM_TI1_SetConfig+0xe0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d003      	beq.n	800693a <TIM_TI1_SetConfig+0x66>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4a20      	ldr	r2, [pc, #128]	@ (80069b8 <TIM_TI1_SetConfig+0xe4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d101      	bne.n	800693e <TIM_TI1_SetConfig+0x6a>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <TIM_TI1_SetConfig+0x6c>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f023 0303 	bic.w	r3, r3, #3
 800694a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e003      	b.n	800695e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	b2db      	uxtb	r3, r3
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f023 030a 	bic.w	r3, r3, #10
 8006978:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f003 030a 	and.w	r3, r3, #10
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	621a      	str	r2, [r3, #32]
}
 8006992:	bf00      	nop
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40012c00 	.word	0x40012c00
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40013400 	.word	0x40013400
 80069b4:	40014000 	.word	0x40014000
 80069b8:	40015000 	.word	0x40015000

080069bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f023 0201 	bic.w	r2, r3, #1
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f023 030a 	bic.w	r3, r3, #10
 80069f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b087      	sub	sp, #28
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	f023 0210 	bic.w	r2, r3, #16
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	031b      	lsls	r3, r3, #12
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	621a      	str	r2, [r3, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f043 0307 	orr.w	r3, r3, #7
 8006aa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	609a      	str	r2, [r3, #8]
}
 8006aa8:	bf00      	nop
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	021a      	lsls	r2, r3, #8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	609a      	str	r2, [r3, #8]
}
 8006ae8:	bf00      	nop
 8006aea:	371c      	adds	r7, #28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	2201      	movs	r2, #1
 8006b08:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a1a      	ldr	r2, [r3, #32]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	43db      	mvns	r3, r3
 8006b16:	401a      	ands	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a1a      	ldr	r2, [r3, #32]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	621a      	str	r2, [r3, #32]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b08a      	sub	sp, #40	@ 0x28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e0a0      	b.n	8006c94 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fb fa32 	bl	8001fd0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f7ff faca 	bl	8006118 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	6819      	ldr	r1, [r3, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2203      	movs	r2, #3
 8006b92:	f7ff fe9f 	bl	80068d4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 020c 	bic.w	r2, r2, #12
 8006ba4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6999      	ldr	r1, [r3, #24]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bc6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bda:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bea:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bfa:	f023 0307 	bic.w	r3, r3, #7
 8006bfe:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0204 	orr.w	r2, r2, #4
 8006c0e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006c14:	2300      	movs	r3, #0
 8006c16:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006c18:	2370      	movs	r3, #112	@ 0x70
 8006c1a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f107 020c 	add.w	r2, r7, #12
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fbbb 	bl	80063b4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c50:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006c60:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3728      	adds	r7, #40	@ 0x28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d109      	bne.n	8006cc0 <HAL_TIMEx_PWMN_Start+0x24>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	bf14      	ite	ne
 8006cb8:	2301      	movne	r3, #1
 8006cba:	2300      	moveq	r3, #0
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	e022      	b.n	8006d06 <HAL_TIMEx_PWMN_Start+0x6a>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d109      	bne.n	8006cda <HAL_TIMEx_PWMN_Start+0x3e>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	bf14      	ite	ne
 8006cd2:	2301      	movne	r3, #1
 8006cd4:	2300      	moveq	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	e015      	b.n	8006d06 <HAL_TIMEx_PWMN_Start+0x6a>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d109      	bne.n	8006cf4 <HAL_TIMEx_PWMN_Start+0x58>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	bf14      	ite	ne
 8006cec:	2301      	movne	r3, #1
 8006cee:	2300      	moveq	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e008      	b.n	8006d06 <HAL_TIMEx_PWMN_Start+0x6a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	bf14      	ite	ne
 8006d00:	2301      	movne	r3, #1
 8006d02:	2300      	moveq	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e073      	b.n	8006df6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <HAL_TIMEx_PWMN_Start+0x82>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d1c:	e013      	b.n	8006d46 <HAL_TIMEx_PWMN_Start+0xaa>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d104      	bne.n	8006d2e <HAL_TIMEx_PWMN_Start+0x92>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d2c:	e00b      	b.n	8006d46 <HAL_TIMEx_PWMN_Start+0xaa>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d104      	bne.n	8006d3e <HAL_TIMEx_PWMN_Start+0xa2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d3c:	e003      	b.n	8006d46 <HAL_TIMEx_PWMN_Start+0xaa>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fa47 	bl	80071e2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d62:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a25      	ldr	r2, [pc, #148]	@ (8006e00 <HAL_TIMEx_PWMN_Start+0x164>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d022      	beq.n	8006db4 <HAL_TIMEx_PWMN_Start+0x118>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d76:	d01d      	beq.n	8006db4 <HAL_TIMEx_PWMN_Start+0x118>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a21      	ldr	r2, [pc, #132]	@ (8006e04 <HAL_TIMEx_PWMN_Start+0x168>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d018      	beq.n	8006db4 <HAL_TIMEx_PWMN_Start+0x118>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a20      	ldr	r2, [pc, #128]	@ (8006e08 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d013      	beq.n	8006db4 <HAL_TIMEx_PWMN_Start+0x118>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1e      	ldr	r2, [pc, #120]	@ (8006e0c <HAL_TIMEx_PWMN_Start+0x170>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00e      	beq.n	8006db4 <HAL_TIMEx_PWMN_Start+0x118>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <HAL_TIMEx_PWMN_Start+0x174>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d009      	beq.n	8006db4 <HAL_TIMEx_PWMN_Start+0x118>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a1b      	ldr	r2, [pc, #108]	@ (8006e14 <HAL_TIMEx_PWMN_Start+0x178>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d004      	beq.n	8006db4 <HAL_TIMEx_PWMN_Start+0x118>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1a      	ldr	r2, [pc, #104]	@ (8006e18 <HAL_TIMEx_PWMN_Start+0x17c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d115      	bne.n	8006de0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	4b18      	ldr	r3, [pc, #96]	@ (8006e1c <HAL_TIMEx_PWMN_Start+0x180>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b06      	cmp	r3, #6
 8006dc4:	d015      	beq.n	8006df2 <HAL_TIMEx_PWMN_Start+0x156>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dcc:	d011      	beq.n	8006df2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0201 	orr.w	r2, r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dde:	e008      	b.n	8006df2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0201 	orr.w	r2, r2, #1
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	e000      	b.n	8006df4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800
 8006e0c:	40000c00 	.word	0x40000c00
 8006e10:	40013400 	.word	0x40013400
 8006e14:	40014000 	.word	0x40014000
 8006e18:	40015000 	.word	0x40015000
 8006e1c:	00010007 	.word	0x00010007

08006e20 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f9d5 	bl	80071e2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6a1a      	ldr	r2, [r3, #32]
 8006e3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006e42:	4013      	ands	r3, r2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10f      	bne.n	8006e68 <HAL_TIMEx_PWMN_Stop+0x48>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a1a      	ldr	r2, [r3, #32]
 8006e4e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006e52:	4013      	ands	r3, r2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d107      	bne.n	8006e68 <HAL_TIMEx_PWMN_Stop+0x48>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6a1a      	ldr	r2, [r3, #32]
 8006e6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10f      	bne.n	8006e98 <HAL_TIMEx_PWMN_Stop+0x78>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6a1a      	ldr	r2, [r3, #32]
 8006e7e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006e82:	4013      	ands	r3, r2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d107      	bne.n	8006e98 <HAL_TIMEx_PWMN_Stop+0x78>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d104      	bne.n	8006ea8 <HAL_TIMEx_PWMN_Stop+0x88>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ea6:	e013      	b.n	8006ed0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d104      	bne.n	8006eb8 <HAL_TIMEx_PWMN_Stop+0x98>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006eb6:	e00b      	b.n	8006ed0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d104      	bne.n	8006ec8 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ec6:	e003      	b.n	8006ed0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e074      	b.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a34      	ldr	r2, [pc, #208]	@ (8006fec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d009      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a33      	ldr	r2, [pc, #204]	@ (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a31      	ldr	r2, [pc, #196]	@ (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d108      	bne.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a21      	ldr	r2, [pc, #132]	@ (8006fec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d022      	beq.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f74:	d01d      	beq.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d018      	beq.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1d      	ldr	r2, [pc, #116]	@ (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d013      	beq.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00e      	beq.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a15      	ldr	r2, [pc, #84]	@ (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d009      	beq.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a18      	ldr	r2, [pc, #96]	@ (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d004      	beq.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a11      	ldr	r2, [pc, #68]	@ (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d10c      	bne.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40012c00 	.word	0x40012c00
 8006ff0:	40013400 	.word	0x40013400
 8006ff4:	40015000 	.word	0x40015000
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40000c00 	.word	0x40000c00
 8007004:	40014000 	.word	0x40014000

08007008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800701c:	2b01      	cmp	r3, #1
 800701e:	d101      	bne.n	8007024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007020:	2302      	movs	r3, #2
 8007022:	e078      	b.n	8007116 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	4313      	orrs	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	041b      	lsls	r3, r3, #16
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007124 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d009      	beq.n	80070ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007128 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d004      	beq.n	80070ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a19      	ldr	r2, [pc, #100]	@ (800712c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d11c      	bne.n	8007104 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	051b      	lsls	r3, r3, #20
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40012c00 	.word	0x40012c00
 8007128:	40013400 	.word	0x40013400
 800712c:	40015000 	.word	0x40015000

08007130 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007146:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b087      	sub	sp, #28
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	2204      	movs	r2, #4
 80071f6:	fa02 f303 	lsl.w	r3, r2, r3
 80071fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1a      	ldr	r2, [r3, #32]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	43db      	mvns	r3, r3
 8007204:	401a      	ands	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1a      	ldr	r2, [r3, #32]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f003 030f 	and.w	r3, r3, #15
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	fa01 f303 	lsl.w	r3, r1, r3
 800721a:	431a      	orrs	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	621a      	str	r2, [r3, #32]
}
 8007220:	bf00      	nop
 8007222:	371c      	adds	r7, #28
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e042      	b.n	80072c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007244:	2b00      	cmp	r3, #0
 8007246:	d106      	bne.n	8007256 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7fa ff87 	bl	8002164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2224      	movs	r2, #36	@ 0x24
 800725a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0201 	bic.w	r2, r2, #1
 800726c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 ff60 	bl	800813c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fc61 	bl	8007b44 <UART_SetConfig>
 8007282:	4603      	mov	r3, r0
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e01b      	b.n	80072c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800729a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 ffdf 	bl	8008280 <UART_CheckIdleState>
 80072c2:	4603      	mov	r3, r0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08a      	sub	sp, #40	@ 0x28
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	4613      	mov	r3, r2
 80072da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d17b      	bne.n	80073de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <HAL_UART_Transmit+0x26>
 80072ec:	88fb      	ldrh	r3, [r7, #6]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e074      	b.n	80073e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2221      	movs	r2, #33	@ 0x21
 8007302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007306:	f7fb f9d9 	bl	80026bc <HAL_GetTick>
 800730a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	88fa      	ldrh	r2, [r7, #6]
 8007310:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	88fa      	ldrh	r2, [r7, #6]
 8007318:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007324:	d108      	bne.n	8007338 <HAL_UART_Transmit+0x6c>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	e003      	b.n	8007340 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800733c:	2300      	movs	r3, #0
 800733e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007340:	e030      	b.n	80073a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2200      	movs	r2, #0
 800734a:	2180      	movs	r1, #128	@ 0x80
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f001 f841 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2220      	movs	r2, #32
 800735c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e03d      	b.n	80073e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10b      	bne.n	8007382 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007378:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	3302      	adds	r3, #2
 800737e:	61bb      	str	r3, [r7, #24]
 8007380:	e007      	b.n	8007392 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	781a      	ldrb	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	3301      	adds	r3, #1
 8007390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1c8      	bne.n	8007342 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2200      	movs	r2, #0
 80073b8:	2140      	movs	r1, #64	@ 0x40
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f001 f80a 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e006      	b.n	80073e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	e000      	b.n	80073e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80073de:	2302      	movs	r3, #2
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	@ 0x28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	4613      	mov	r3, r2
 80073f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d137      	bne.n	8007470 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_UART_Receive_IT+0x24>
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e030      	b.n	8007472 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a18      	ldr	r2, [pc, #96]	@ (800747c <HAL_UART_Receive_IT+0x94>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d01f      	beq.n	8007460 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d018      	beq.n	8007460 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	613b      	str	r3, [r7, #16]
   return(result);
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007442:	627b      	str	r3, [r7, #36]	@ 0x24
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	623b      	str	r3, [r7, #32]
 800744e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	69f9      	ldr	r1, [r7, #28]
 8007452:	6a3a      	ldr	r2, [r7, #32]
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	61bb      	str	r3, [r7, #24]
   return(result);
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e6      	bne.n	800742e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	461a      	mov	r2, r3
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f001 f822 	bl	80084b0 <UART_Start_Receive_IT>
 800746c:	4603      	mov	r3, r0
 800746e:	e000      	b.n	8007472 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007470:	2302      	movs	r3, #2
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	3728      	adds	r7, #40	@ 0x28
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40008000 	.word	0x40008000

08007480 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b0ba      	sub	sp, #232	@ 0xe8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80074aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80074ae:	4013      	ands	r3, r2
 80074b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80074b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d11b      	bne.n	80074f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d015      	beq.n	80074f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d105      	bne.n	80074e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d009      	beq.n	80074f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8300 	beq.w	8007aea <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
      }
      return;
 80074f2:	e2fa      	b.n	8007aea <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8123 	beq.w	8007744 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007502:	4b8d      	ldr	r3, [pc, #564]	@ (8007738 <HAL_UART_IRQHandler+0x2b8>)
 8007504:	4013      	ands	r3, r2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800750a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800750e:	4b8b      	ldr	r3, [pc, #556]	@ (800773c <HAL_UART_IRQHandler+0x2bc>)
 8007510:	4013      	ands	r3, r2
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 8116 	beq.w	8007744 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d011      	beq.n	8007548 <HAL_UART_IRQHandler+0xc8>
 8007524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2201      	movs	r2, #1
 8007536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753e:	f043 0201 	orr.w	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d011      	beq.n	8007578 <HAL_UART_IRQHandler+0xf8>
 8007554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2202      	movs	r2, #2
 8007566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800756e:	f043 0204 	orr.w	r2, r3, #4
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d011      	beq.n	80075a8 <HAL_UART_IRQHandler+0x128>
 8007584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2204      	movs	r2, #4
 8007596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800759e:	f043 0202 	orr.w	r2, r3, #2
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d017      	beq.n	80075e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d105      	bne.n	80075cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80075c4:	4b5c      	ldr	r3, [pc, #368]	@ (8007738 <HAL_UART_IRQHandler+0x2b8>)
 80075c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2208      	movs	r2, #8
 80075d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075da:	f043 0208 	orr.w	r2, r3, #8
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d012      	beq.n	8007616 <HAL_UART_IRQHandler+0x196>
 80075f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00c      	beq.n	8007616 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8266 	beq.w	8007aee <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b00      	cmp	r3, #0
 800762c:	d013      	beq.n	8007656 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800762e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800763a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800763e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800765c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800766a:	2b40      	cmp	r3, #64	@ 0x40
 800766c:	d005      	beq.n	800767a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800766e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007672:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007676:	2b00      	cmp	r3, #0
 8007678:	d054      	beq.n	8007724 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 f83a 	bl	80086f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768a:	2b40      	cmp	r3, #64	@ 0x40
 800768c:	d146      	bne.n	800771c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80076a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80076ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80076be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80076c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80076d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1d9      	bne.n	800768e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d017      	beq.n	8007714 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ea:	4a15      	ldr	r2, [pc, #84]	@ (8007740 <HAL_UART_IRQHandler+0x2c0>)
 80076ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fc fc06 	bl	8003f06 <HAL_DMA_Abort_IT>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d019      	beq.n	8007734 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800770e:	4610      	mov	r0, r2
 8007710:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007712:	e00f      	b.n	8007734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f9ff 	bl	8007b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771a:	e00b      	b.n	8007734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f9fb 	bl	8007b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007722:	e007      	b.n	8007734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f9f7 	bl	8007b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007732:	e1dc      	b.n	8007aee <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007734:	bf00      	nop
    return;
 8007736:	e1da      	b.n	8007aee <HAL_UART_IRQHandler+0x66e>
 8007738:	10000001 	.word	0x10000001
 800773c:	04000120 	.word	0x04000120
 8007740:	080087c1 	.word	0x080087c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007748:	2b01      	cmp	r3, #1
 800774a:	f040 8170 	bne.w	8007a2e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800774e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 8169 	beq.w	8007a2e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800775c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8162 	beq.w	8007a2e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2210      	movs	r2, #16
 8007770:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800777c:	2b40      	cmp	r3, #64	@ 0x40
 800777e:	f040 80d8 	bne.w	8007932 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 80af 	beq.w	80078f8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077a4:	429a      	cmp	r2, r3
 80077a6:	f080 80a7 	bcs.w	80078f8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f040 8087 	bne.w	80078d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800780a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1da      	bne.n	80077c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007824:	f023 0301 	bic.w	r3, r3, #1
 8007828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3308      	adds	r3, #8
 8007832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007836:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800783a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800783e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e1      	bne.n	8007812 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3308      	adds	r3, #8
 8007854:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800785e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e3      	bne.n	800784e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2220      	movs	r2, #32
 800788a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078a4:	f023 0310 	bic.w	r3, r3, #16
 80078a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e4      	bne.n	8007894 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fc fabf 	bl	8003e54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2202      	movs	r2, #2
 80078da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f91b 	bl	8007b2c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80078f6:	e0fc      	b.n	8007af2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007902:	429a      	cmp	r2, r3
 8007904:	f040 80f5 	bne.w	8007af2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b20      	cmp	r3, #32
 8007918:	f040 80eb 	bne.w	8007af2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f8fe 	bl	8007b2c <HAL_UARTEx_RxEventCallback>
      return;
 8007930:	e0df      	b.n	8007af2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800793e:	b29b      	uxth	r3, r3
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 80d1 	beq.w	8007af6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007954:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 80cc 	beq.w	8007af6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800796c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007980:	647b      	str	r3, [r7, #68]	@ 0x44
 8007982:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800798e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e4      	bne.n	800795e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3308      	adds	r3, #8
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	623b      	str	r3, [r7, #32]
   return(result);
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3308      	adds	r3, #8
 80079b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80079be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e1      	bne.n	8007994 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f023 0310 	bic.w	r3, r3, #16
 80079f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	69b9      	ldr	r1, [r7, #24]
 8007a0c:	69fa      	ldr	r2, [r7, #28]
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	617b      	str	r3, [r7, #20]
   return(result);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e4      	bne.n	80079e4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f880 	bl	8007b2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a2c:	e063      	b.n	8007af6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00e      	beq.n	8007a58 <HAL_UART_IRQHandler+0x5d8>
 8007a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d008      	beq.n	8007a58 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 fc13 	bl	800927c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a56:	e051      	b.n	8007afc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d014      	beq.n	8007a8e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d105      	bne.n	8007a7c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d008      	beq.n	8007a8e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d03a      	beq.n	8007afa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3
    }
    return;
 8007a8c:	e035      	b.n	8007afa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <HAL_UART_IRQHandler+0x62e>
 8007a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fe9c 	bl	80087e4 <UART_EndTransmit_IT>
    return;
 8007aac:	e026      	b.n	8007afc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <HAL_UART_IRQHandler+0x64e>
 8007aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007abe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 fbec 	bl	80092a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007acc:	e016      	b.n	8007afc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d010      	beq.n	8007afc <HAL_UART_IRQHandler+0x67c>
 8007ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	da0c      	bge.n	8007afc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 fbd4 	bl	8009290 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ae8:	e008      	b.n	8007afc <HAL_UART_IRQHandler+0x67c>
      return;
 8007aea:	bf00      	nop
 8007aec:	e006      	b.n	8007afc <HAL_UART_IRQHandler+0x67c>
    return;
 8007aee:	bf00      	nop
 8007af0:	e004      	b.n	8007afc <HAL_UART_IRQHandler+0x67c>
      return;
 8007af2:	bf00      	nop
 8007af4:	e002      	b.n	8007afc <HAL_UART_IRQHandler+0x67c>
      return;
 8007af6:	bf00      	nop
 8007af8:	e000      	b.n	8007afc <HAL_UART_IRQHandler+0x67c>
    return;
 8007afa:	bf00      	nop
  }
}
 8007afc:	37e8      	adds	r7, #232	@ 0xe8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop

08007b04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b48:	b08c      	sub	sp, #48	@ 0x30
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4baa      	ldr	r3, [pc, #680]	@ (8007e1c <UART_SetConfig+0x2d8>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b7c:	430b      	orrs	r3, r1
 8007b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a9f      	ldr	r2, [pc, #636]	@ (8007e20 <UART_SetConfig+0x2dc>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d004      	beq.n	8007bb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bac:	4313      	orrs	r3, r2
 8007bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007bba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	6812      	ldr	r2, [r2, #0]
 8007bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bce:	f023 010f 	bic.w	r1, r3, #15
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a90      	ldr	r2, [pc, #576]	@ (8007e24 <UART_SetConfig+0x2e0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d125      	bne.n	8007c34 <UART_SetConfig+0xf0>
 8007be8:	4b8f      	ldr	r3, [pc, #572]	@ (8007e28 <UART_SetConfig+0x2e4>)
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d81a      	bhi.n	8007c2c <UART_SetConfig+0xe8>
 8007bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <UART_SetConfig+0xb8>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007c0d 	.word	0x08007c0d
 8007c00:	08007c1d 	.word	0x08007c1d
 8007c04:	08007c15 	.word	0x08007c15
 8007c08:	08007c25 	.word	0x08007c25
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c12:	e116      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007c14:	2302      	movs	r3, #2
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c1a:	e112      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c22:	e10e      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007c24:	2308      	movs	r3, #8
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c2a:	e10a      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c32:	e106      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a7c      	ldr	r2, [pc, #496]	@ (8007e2c <UART_SetConfig+0x2e8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d138      	bne.n	8007cb0 <UART_SetConfig+0x16c>
 8007c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8007e28 <UART_SetConfig+0x2e4>)
 8007c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c44:	f003 030c 	and.w	r3, r3, #12
 8007c48:	2b0c      	cmp	r3, #12
 8007c4a:	d82d      	bhi.n	8007ca8 <UART_SetConfig+0x164>
 8007c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <UART_SetConfig+0x110>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c89 	.word	0x08007c89
 8007c58:	08007ca9 	.word	0x08007ca9
 8007c5c:	08007ca9 	.word	0x08007ca9
 8007c60:	08007ca9 	.word	0x08007ca9
 8007c64:	08007c99 	.word	0x08007c99
 8007c68:	08007ca9 	.word	0x08007ca9
 8007c6c:	08007ca9 	.word	0x08007ca9
 8007c70:	08007ca9 	.word	0x08007ca9
 8007c74:	08007c91 	.word	0x08007c91
 8007c78:	08007ca9 	.word	0x08007ca9
 8007c7c:	08007ca9 	.word	0x08007ca9
 8007c80:	08007ca9 	.word	0x08007ca9
 8007c84:	08007ca1 	.word	0x08007ca1
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c8e:	e0d8      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007c90:	2302      	movs	r3, #2
 8007c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c96:	e0d4      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007c98:	2304      	movs	r3, #4
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c9e:	e0d0      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007ca0:	2308      	movs	r3, #8
 8007ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ca6:	e0cc      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007ca8:	2310      	movs	r3, #16
 8007caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cae:	e0c8      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a5e      	ldr	r2, [pc, #376]	@ (8007e30 <UART_SetConfig+0x2ec>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d125      	bne.n	8007d06 <UART_SetConfig+0x1c2>
 8007cba:	4b5b      	ldr	r3, [pc, #364]	@ (8007e28 <UART_SetConfig+0x2e4>)
 8007cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007cc4:	2b30      	cmp	r3, #48	@ 0x30
 8007cc6:	d016      	beq.n	8007cf6 <UART_SetConfig+0x1b2>
 8007cc8:	2b30      	cmp	r3, #48	@ 0x30
 8007cca:	d818      	bhi.n	8007cfe <UART_SetConfig+0x1ba>
 8007ccc:	2b20      	cmp	r3, #32
 8007cce:	d00a      	beq.n	8007ce6 <UART_SetConfig+0x1a2>
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	d814      	bhi.n	8007cfe <UART_SetConfig+0x1ba>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <UART_SetConfig+0x19a>
 8007cd8:	2b10      	cmp	r3, #16
 8007cda:	d008      	beq.n	8007cee <UART_SetConfig+0x1aa>
 8007cdc:	e00f      	b.n	8007cfe <UART_SetConfig+0x1ba>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce4:	e0ad      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cec:	e0a9      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007cee:	2304      	movs	r3, #4
 8007cf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cf4:	e0a5      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007cf6:	2308      	movs	r3, #8
 8007cf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cfc:	e0a1      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007cfe:	2310      	movs	r3, #16
 8007d00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d04:	e09d      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8007e34 <UART_SetConfig+0x2f0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d125      	bne.n	8007d5c <UART_SetConfig+0x218>
 8007d10:	4b45      	ldr	r3, [pc, #276]	@ (8007e28 <UART_SetConfig+0x2e4>)
 8007d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d1c:	d016      	beq.n	8007d4c <UART_SetConfig+0x208>
 8007d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d20:	d818      	bhi.n	8007d54 <UART_SetConfig+0x210>
 8007d22:	2b80      	cmp	r3, #128	@ 0x80
 8007d24:	d00a      	beq.n	8007d3c <UART_SetConfig+0x1f8>
 8007d26:	2b80      	cmp	r3, #128	@ 0x80
 8007d28:	d814      	bhi.n	8007d54 <UART_SetConfig+0x210>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <UART_SetConfig+0x1f0>
 8007d2e:	2b40      	cmp	r3, #64	@ 0x40
 8007d30:	d008      	beq.n	8007d44 <UART_SetConfig+0x200>
 8007d32:	e00f      	b.n	8007d54 <UART_SetConfig+0x210>
 8007d34:	2300      	movs	r3, #0
 8007d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d3a:	e082      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d42:	e07e      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007d44:	2304      	movs	r3, #4
 8007d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d4a:	e07a      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007d4c:	2308      	movs	r3, #8
 8007d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d52:	e076      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007d54:	2310      	movs	r3, #16
 8007d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d5a:	e072      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a35      	ldr	r2, [pc, #212]	@ (8007e38 <UART_SetConfig+0x2f4>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d12a      	bne.n	8007dbc <UART_SetConfig+0x278>
 8007d66:	4b30      	ldr	r3, [pc, #192]	@ (8007e28 <UART_SetConfig+0x2e4>)
 8007d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d74:	d01a      	beq.n	8007dac <UART_SetConfig+0x268>
 8007d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d7a:	d81b      	bhi.n	8007db4 <UART_SetConfig+0x270>
 8007d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d80:	d00c      	beq.n	8007d9c <UART_SetConfig+0x258>
 8007d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d86:	d815      	bhi.n	8007db4 <UART_SetConfig+0x270>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <UART_SetConfig+0x250>
 8007d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d90:	d008      	beq.n	8007da4 <UART_SetConfig+0x260>
 8007d92:	e00f      	b.n	8007db4 <UART_SetConfig+0x270>
 8007d94:	2300      	movs	r3, #0
 8007d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d9a:	e052      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007da2:	e04e      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007da4:	2304      	movs	r3, #4
 8007da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007daa:	e04a      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007dac:	2308      	movs	r3, #8
 8007dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007db2:	e046      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007db4:	2310      	movs	r3, #16
 8007db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dba:	e042      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a17      	ldr	r2, [pc, #92]	@ (8007e20 <UART_SetConfig+0x2dc>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d13a      	bne.n	8007e3c <UART_SetConfig+0x2f8>
 8007dc6:	4b18      	ldr	r3, [pc, #96]	@ (8007e28 <UART_SetConfig+0x2e4>)
 8007dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007dd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dd4:	d01a      	beq.n	8007e0c <UART_SetConfig+0x2c8>
 8007dd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dda:	d81b      	bhi.n	8007e14 <UART_SetConfig+0x2d0>
 8007ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007de0:	d00c      	beq.n	8007dfc <UART_SetConfig+0x2b8>
 8007de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007de6:	d815      	bhi.n	8007e14 <UART_SetConfig+0x2d0>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <UART_SetConfig+0x2b0>
 8007dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007df0:	d008      	beq.n	8007e04 <UART_SetConfig+0x2c0>
 8007df2:	e00f      	b.n	8007e14 <UART_SetConfig+0x2d0>
 8007df4:	2300      	movs	r3, #0
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dfa:	e022      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e02:	e01e      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007e04:	2304      	movs	r3, #4
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0a:	e01a      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007e0c:	2308      	movs	r3, #8
 8007e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e12:	e016      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007e14:	2310      	movs	r3, #16
 8007e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e1a:	e012      	b.n	8007e42 <UART_SetConfig+0x2fe>
 8007e1c:	cfff69f3 	.word	0xcfff69f3
 8007e20:	40008000 	.word	0x40008000
 8007e24:	40013800 	.word	0x40013800
 8007e28:	40021000 	.word	0x40021000
 8007e2c:	40004400 	.word	0x40004400
 8007e30:	40004800 	.word	0x40004800
 8007e34:	40004c00 	.word	0x40004c00
 8007e38:	40005000 	.word	0x40005000
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4aae      	ldr	r2, [pc, #696]	@ (8008100 <UART_SetConfig+0x5bc>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	f040 8097 	bne.w	8007f7c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e52:	2b08      	cmp	r3, #8
 8007e54:	d823      	bhi.n	8007e9e <UART_SetConfig+0x35a>
 8007e56:	a201      	add	r2, pc, #4	@ (adr r2, 8007e5c <UART_SetConfig+0x318>)
 8007e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5c:	08007e81 	.word	0x08007e81
 8007e60:	08007e9f 	.word	0x08007e9f
 8007e64:	08007e89 	.word	0x08007e89
 8007e68:	08007e9f 	.word	0x08007e9f
 8007e6c:	08007e8f 	.word	0x08007e8f
 8007e70:	08007e9f 	.word	0x08007e9f
 8007e74:	08007e9f 	.word	0x08007e9f
 8007e78:	08007e9f 	.word	0x08007e9f
 8007e7c:	08007e97 	.word	0x08007e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e80:	f7fc ffd6 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8007e84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e86:	e010      	b.n	8007eaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e88:	4b9e      	ldr	r3, [pc, #632]	@ (8008104 <UART_SetConfig+0x5c0>)
 8007e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e8c:	e00d      	b.n	8007eaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e8e:	f7fc ff61 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8007e92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e94:	e009      	b.n	8007eaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e9c:	e005      	b.n	8007eaa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ea8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 8130 	beq.w	8008112 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb6:	4a94      	ldr	r2, [pc, #592]	@ (8008108 <UART_SetConfig+0x5c4>)
 8007eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	4413      	add	r3, r2
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d305      	bcc.n	8007ee2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d903      	bls.n	8007eea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ee8:	e113      	b.n	8008112 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	2200      	movs	r2, #0
 8007eee:	60bb      	str	r3, [r7, #8]
 8007ef0:	60fa      	str	r2, [r7, #12]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef6:	4a84      	ldr	r2, [pc, #528]	@ (8008108 <UART_SetConfig+0x5c4>)
 8007ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2200      	movs	r2, #0
 8007f00:	603b      	str	r3, [r7, #0]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f0c:	f7f8 fef4 	bl	8000cf8 <__aeabi_uldivmod>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4610      	mov	r0, r2
 8007f16:	4619      	mov	r1, r3
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	020b      	lsls	r3, r1, #8
 8007f22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f26:	0202      	lsls	r2, r0, #8
 8007f28:	6979      	ldr	r1, [r7, #20]
 8007f2a:	6849      	ldr	r1, [r1, #4]
 8007f2c:	0849      	lsrs	r1, r1, #1
 8007f2e:	2000      	movs	r0, #0
 8007f30:	460c      	mov	r4, r1
 8007f32:	4605      	mov	r5, r0
 8007f34:	eb12 0804 	adds.w	r8, r2, r4
 8007f38:	eb43 0905 	adc.w	r9, r3, r5
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	469a      	mov	sl, r3
 8007f44:	4693      	mov	fp, r2
 8007f46:	4652      	mov	r2, sl
 8007f48:	465b      	mov	r3, fp
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f7f8 fed3 	bl	8000cf8 <__aeabi_uldivmod>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	4613      	mov	r3, r2
 8007f58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f60:	d308      	bcc.n	8007f74 <UART_SetConfig+0x430>
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f68:	d204      	bcs.n	8007f74 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6a3a      	ldr	r2, [r7, #32]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	e0ce      	b.n	8008112 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f7a:	e0ca      	b.n	8008112 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f84:	d166      	bne.n	8008054 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007f86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f8a:	2b08      	cmp	r3, #8
 8007f8c:	d827      	bhi.n	8007fde <UART_SetConfig+0x49a>
 8007f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f94 <UART_SetConfig+0x450>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08007fb9 	.word	0x08007fb9
 8007f98:	08007fc1 	.word	0x08007fc1
 8007f9c:	08007fc9 	.word	0x08007fc9
 8007fa0:	08007fdf 	.word	0x08007fdf
 8007fa4:	08007fcf 	.word	0x08007fcf
 8007fa8:	08007fdf 	.word	0x08007fdf
 8007fac:	08007fdf 	.word	0x08007fdf
 8007fb0:	08007fdf 	.word	0x08007fdf
 8007fb4:	08007fd7 	.word	0x08007fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fb8:	f7fc ff3a 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8007fbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fbe:	e014      	b.n	8007fea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fc0:	f7fc ff4c 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8007fc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fc6:	e010      	b.n	8007fea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fc8:	4b4e      	ldr	r3, [pc, #312]	@ (8008104 <UART_SetConfig+0x5c0>)
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fcc:	e00d      	b.n	8007fea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fce:	f7fc fec1 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8007fd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fd4:	e009      	b.n	8007fea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fdc:	e005      	b.n	8007fea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8090 	beq.w	8008112 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff6:	4a44      	ldr	r2, [pc, #272]	@ (8008108 <UART_SetConfig+0x5c4>)
 8007ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	fbb3 f3f2 	udiv	r3, r3, r2
 8008004:	005a      	lsls	r2, r3, #1
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	085b      	lsrs	r3, r3, #1
 800800c:	441a      	add	r2, r3
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	fbb2 f3f3 	udiv	r3, r2, r3
 8008016:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	2b0f      	cmp	r3, #15
 800801c:	d916      	bls.n	800804c <UART_SetConfig+0x508>
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008024:	d212      	bcs.n	800804c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	b29b      	uxth	r3, r3
 800802a:	f023 030f 	bic.w	r3, r3, #15
 800802e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	b29b      	uxth	r3, r3
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	b29a      	uxth	r2, r3
 800803c:	8bfb      	ldrh	r3, [r7, #30]
 800803e:	4313      	orrs	r3, r2
 8008040:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	8bfa      	ldrh	r2, [r7, #30]
 8008048:	60da      	str	r2, [r3, #12]
 800804a:	e062      	b.n	8008112 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008052:	e05e      	b.n	8008112 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008054:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008058:	2b08      	cmp	r3, #8
 800805a:	d828      	bhi.n	80080ae <UART_SetConfig+0x56a>
 800805c:	a201      	add	r2, pc, #4	@ (adr r2, 8008064 <UART_SetConfig+0x520>)
 800805e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008062:	bf00      	nop
 8008064:	08008089 	.word	0x08008089
 8008068:	08008091 	.word	0x08008091
 800806c:	08008099 	.word	0x08008099
 8008070:	080080af 	.word	0x080080af
 8008074:	0800809f 	.word	0x0800809f
 8008078:	080080af 	.word	0x080080af
 800807c:	080080af 	.word	0x080080af
 8008080:	080080af 	.word	0x080080af
 8008084:	080080a7 	.word	0x080080a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008088:	f7fc fed2 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 800808c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800808e:	e014      	b.n	80080ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008090:	f7fc fee4 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8008094:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008096:	e010      	b.n	80080ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008098:	4b1a      	ldr	r3, [pc, #104]	@ (8008104 <UART_SetConfig+0x5c0>)
 800809a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800809c:	e00d      	b.n	80080ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800809e:	f7fc fe59 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 80080a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080a4:	e009      	b.n	80080ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080ac:	e005      	b.n	80080ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080b8:	bf00      	nop
    }

    if (pclk != 0U)
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d028      	beq.n	8008112 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c4:	4a10      	ldr	r2, [pc, #64]	@ (8008108 <UART_SetConfig+0x5c4>)
 80080c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ca:	461a      	mov	r2, r3
 80080cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	085b      	lsrs	r3, r3, #1
 80080d8:	441a      	add	r2, r3
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	2b0f      	cmp	r3, #15
 80080e8:	d910      	bls.n	800810c <UART_SetConfig+0x5c8>
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080f0:	d20c      	bcs.n	800810c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60da      	str	r2, [r3, #12]
 80080fc:	e009      	b.n	8008112 <UART_SetConfig+0x5ce>
 80080fe:	bf00      	nop
 8008100:	40008000 	.word	0x40008000
 8008104:	00f42400 	.word	0x00f42400
 8008108:	0800dd1c 	.word	0x0800dd1c
      }
      else
      {
        ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2201      	movs	r2, #1
 8008116:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2201      	movs	r2, #1
 800811e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2200      	movs	r2, #0
 8008126:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2200      	movs	r2, #0
 800812c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800812e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008132:	4618      	mov	r0, r3
 8008134:	3730      	adds	r7, #48	@ 0x30
 8008136:	46bd      	mov	sp, r7
 8008138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800813c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d0:	f003 0310 	and.w	r3, r3, #16
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01a      	beq.n	8008252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800823a:	d10a      	bne.n	8008252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	605a      	str	r2, [r3, #4]
  }
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b098      	sub	sp, #96	@ 0x60
 8008284:	af02      	add	r7, sp, #8
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008290:	f7fa fa14 	bl	80026bc <HAL_GetTick>
 8008294:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	d12f      	bne.n	8008304 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082ac:	2200      	movs	r2, #0
 80082ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f88e 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d022      	beq.n	8008304 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e6      	bne.n	80082be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e063      	b.n	80083cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b04      	cmp	r3, #4
 8008310:	d149      	bne.n	80083a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008312:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800831a:	2200      	movs	r2, #0
 800831c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f857 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d03c      	beq.n	80083a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	623b      	str	r3, [r7, #32]
   return(result);
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008340:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800834a:	633b      	str	r3, [r7, #48]	@ 0x30
 800834c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e6      	bne.n	800832c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	60fb      	str	r3, [r7, #12]
   return(result);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f023 0301 	bic.w	r3, r3, #1
 8008374:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3308      	adds	r3, #8
 800837c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800837e:	61fa      	str	r2, [r7, #28]
 8008380:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008382:	69b9      	ldr	r1, [r7, #24]
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	e841 2300 	strex	r3, r2, [r1]
 800838a:	617b      	str	r3, [r7, #20]
   return(result);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1e5      	bne.n	800835e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e012      	b.n	80083cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3758      	adds	r7, #88	@ 0x58
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	4613      	mov	r3, r2
 80083e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083e4:	e04f      	b.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d04b      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ee:	f7fa f965 	bl	80026bc <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d302      	bcc.n	8008404 <UART_WaitOnFlagUntilTimeout+0x30>
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e04e      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d037      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b80      	cmp	r3, #128	@ 0x80
 800841a:	d034      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b40      	cmp	r3, #64	@ 0x40
 8008420:	d031      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b08      	cmp	r3, #8
 800842e:	d110      	bne.n	8008452 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2208      	movs	r2, #8
 8008436:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 f95b 	bl	80086f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2208      	movs	r2, #8
 8008442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e029      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800845c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008460:	d111      	bne.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800846a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f941 	bl	80086f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2220      	movs	r2, #32
 8008476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e00f      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4013      	ands	r3, r2
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	429a      	cmp	r2, r3
 8008494:	bf0c      	ite	eq
 8008496:	2301      	moveq	r3, #1
 8008498:	2300      	movne	r3, #0
 800849a:	b2db      	uxtb	r3, r3
 800849c:	461a      	mov	r2, r3
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d0a0      	beq.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b0a3      	sub	sp, #140	@ 0x8c
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	4613      	mov	r3, r2
 80084bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	88fa      	ldrh	r2, [r7, #6]
 80084c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	88fa      	ldrh	r2, [r7, #6]
 80084d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084e2:	d10e      	bne.n	8008502 <UART_Start_Receive_IT+0x52>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d105      	bne.n	80084f8 <UART_Start_Receive_IT+0x48>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80084f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084f6:	e02d      	b.n	8008554 <UART_Start_Receive_IT+0xa4>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	22ff      	movs	r2, #255	@ 0xff
 80084fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008500:	e028      	b.n	8008554 <UART_Start_Receive_IT+0xa4>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10d      	bne.n	8008526 <UART_Start_Receive_IT+0x76>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <UART_Start_Receive_IT+0x6c>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	22ff      	movs	r2, #255	@ 0xff
 8008516:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800851a:	e01b      	b.n	8008554 <UART_Start_Receive_IT+0xa4>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	227f      	movs	r2, #127	@ 0x7f
 8008520:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008524:	e016      	b.n	8008554 <UART_Start_Receive_IT+0xa4>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800852e:	d10d      	bne.n	800854c <UART_Start_Receive_IT+0x9c>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d104      	bne.n	8008542 <UART_Start_Receive_IT+0x92>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	227f      	movs	r2, #127	@ 0x7f
 800853c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008540:	e008      	b.n	8008554 <UART_Start_Receive_IT+0xa4>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	223f      	movs	r2, #63	@ 0x3f
 8008546:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800854a:	e003      	b.n	8008554 <UART_Start_Receive_IT+0xa4>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2222      	movs	r2, #34	@ 0x22
 8008560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3308      	adds	r3, #8
 800856a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008574:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008576:	f043 0301 	orr.w	r3, r3, #1
 800857a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3308      	adds	r3, #8
 8008584:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008588:	673a      	str	r2, [r7, #112]	@ 0x70
 800858a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800858e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008596:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e3      	bne.n	8008564 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a4:	d14f      	bne.n	8008646 <UART_Start_Receive_IT+0x196>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80085ac:	88fa      	ldrh	r2, [r7, #6]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d349      	bcc.n	8008646 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ba:	d107      	bne.n	80085cc <UART_Start_Receive_IT+0x11c>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4a47      	ldr	r2, [pc, #284]	@ (80086e4 <UART_Start_Receive_IT+0x234>)
 80085c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80085ca:	e002      	b.n	80085d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4a46      	ldr	r2, [pc, #280]	@ (80086e8 <UART_Start_Receive_IT+0x238>)
 80085d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d01a      	beq.n	8008610 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085e2:	e853 3f00 	ldrex	r3, [r3]
 80085e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008602:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800860a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e4      	bne.n	80085da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3308      	adds	r3, #8
 8008616:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008626:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3308      	adds	r3, #8
 800862e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008630:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008632:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008636:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800863e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e5      	bne.n	8008610 <UART_Start_Receive_IT+0x160>
 8008644:	e046      	b.n	80086d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864e:	d107      	bne.n	8008660 <UART_Start_Receive_IT+0x1b0>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d103      	bne.n	8008660 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	4a24      	ldr	r2, [pc, #144]	@ (80086ec <UART_Start_Receive_IT+0x23c>)
 800865c:	675a      	str	r2, [r3, #116]	@ 0x74
 800865e:	e002      	b.n	8008666 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a23      	ldr	r2, [pc, #140]	@ (80086f0 <UART_Start_Receive_IT+0x240>)
 8008664:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d019      	beq.n	80086a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800867c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008682:	677b      	str	r3, [r7, #116]	@ 0x74
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800868c:	637b      	str	r3, [r7, #52]	@ 0x34
 800868e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008692:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800869a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e6      	bne.n	800866e <UART_Start_Receive_IT+0x1be>
 80086a0:	e018      	b.n	80086d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	613b      	str	r3, [r7, #16]
   return(result);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f043 0320 	orr.w	r3, r3, #32
 80086b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	461a      	mov	r2, r3
 80086be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086c0:	623b      	str	r3, [r7, #32]
 80086c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	69f9      	ldr	r1, [r7, #28]
 80086c6:	6a3a      	ldr	r2, [r7, #32]
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e6      	bne.n	80086a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	378c      	adds	r7, #140	@ 0x8c
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	08008f11 	.word	0x08008f11
 80086e8:	08008bad 	.word	0x08008bad
 80086ec:	080089f5 	.word	0x080089f5
 80086f0:	0800883d 	.word	0x0800883d

080086f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b095      	sub	sp, #84	@ 0x54
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800871a:	643b      	str	r3, [r7, #64]	@ 0x40
 800871c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e6      	bne.n	80086fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3308      	adds	r3, #8
 8008734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	61fb      	str	r3, [r7, #28]
   return(result);
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008744:	f023 0301 	bic.w	r3, r3, #1
 8008748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3308      	adds	r3, #8
 8008750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008752:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008754:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e3      	bne.n	800872e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800876a:	2b01      	cmp	r3, #1
 800876c:	d118      	bne.n	80087a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	60bb      	str	r3, [r7, #8]
   return(result);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f023 0310 	bic.w	r3, r3, #16
 8008782:	647b      	str	r3, [r7, #68]	@ 0x44
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800878c:	61bb      	str	r3, [r7, #24]
 800878e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	6979      	ldr	r1, [r7, #20]
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	613b      	str	r3, [r7, #16]
   return(result);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e6      	bne.n	800876e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80087b4:	bf00      	nop
 80087b6:	3754      	adds	r7, #84	@ 0x54
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7ff f99e 	bl	8007b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087dc:	bf00      	nop
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	61bb      	str	r3, [r7, #24]
 800880c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	6979      	ldr	r1, [r7, #20]
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	613b      	str	r3, [r7, #16]
   return(result);
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e6      	bne.n	80087ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2220      	movs	r2, #32
 8008822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff f969 	bl	8007b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008832:	bf00      	nop
 8008834:	3720      	adds	r7, #32
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b09c      	sub	sp, #112	@ 0x70
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800884a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008854:	2b22      	cmp	r3, #34	@ 0x22
 8008856:	f040 80be 	bne.w	80089d6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008860:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008864:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008868:	b2d9      	uxtb	r1, r3
 800886a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800886e:	b2da      	uxtb	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008874:	400a      	ands	r2, r1
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800888a:	b29b      	uxth	r3, r3
 800888c:	3b01      	subs	r3, #1
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f040 80a1 	bne.w	80089e6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ac:	e853 3f00 	ldrex	r3, [r3]
 80088b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088ca:	e841 2300 	strex	r3, r2, [r1]
 80088ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e6      	bne.n	80088a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3308      	adds	r3, #8
 80088dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e8:	f023 0301 	bic.w	r3, r3, #1
 80088ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3308      	adds	r3, #8
 80088f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80088f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80088f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e5      	bne.n	80088d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a33      	ldr	r2, [pc, #204]	@ (80089f0 <UART_RxISR_8BIT+0x1b4>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d01f      	beq.n	8008968 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d018      	beq.n	8008968 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	623b      	str	r3, [r7, #32]
   return(result);
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800894a:	663b      	str	r3, [r7, #96]	@ 0x60
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	461a      	mov	r2, r3
 8008952:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008954:	633b      	str	r3, [r7, #48]	@ 0x30
 8008956:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800895a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e6      	bne.n	8008936 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800896c:	2b01      	cmp	r3, #1
 800896e:	d12e      	bne.n	80089ce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	e853 3f00 	ldrex	r3, [r3]
 8008982:	60fb      	str	r3, [r7, #12]
   return(result);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0310 	bic.w	r3, r3, #16
 800898a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	461a      	mov	r2, r3
 8008992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008994:	61fb      	str	r3, [r7, #28]
 8008996:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008998:	69b9      	ldr	r1, [r7, #24]
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	e841 2300 	strex	r3, r2, [r1]
 80089a0:	617b      	str	r3, [r7, #20]
   return(result);
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1e6      	bne.n	8008976 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	f003 0310 	and.w	r3, r3, #16
 80089b2:	2b10      	cmp	r3, #16
 80089b4:	d103      	bne.n	80089be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2210      	movs	r2, #16
 80089bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff f8b0 	bl	8007b2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089cc:	e00b      	b.n	80089e6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7f9 f83a 	bl	8001a48 <HAL_UART_RxCpltCallback>
}
 80089d4:	e007      	b.n	80089e6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	699a      	ldr	r2, [r3, #24]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0208 	orr.w	r2, r2, #8
 80089e4:	619a      	str	r2, [r3, #24]
}
 80089e6:	bf00      	nop
 80089e8:	3770      	adds	r7, #112	@ 0x70
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	40008000 	.word	0x40008000

080089f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b09c      	sub	sp, #112	@ 0x70
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a0c:	2b22      	cmp	r3, #34	@ 0x22
 8008a0e:	f040 80be 	bne.w	8008b8e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a18:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a20:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a22:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a36:	1c9a      	adds	r2, r3, #2
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	3b01      	subs	r3, #1
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f040 80a1 	bne.w	8008b9e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a70:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a7c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e6      	bne.n	8008a5c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3308      	adds	r3, #8
 8008a94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	f023 0301 	bic.w	r3, r3, #1
 8008aa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008aae:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ab4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e5      	bne.n	8008a8e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a33      	ldr	r2, [pc, #204]	@ (8008ba8 <UART_RxISR_16BIT+0x1b4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d01f      	beq.n	8008b20 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d018      	beq.n	8008b20 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b0e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e6      	bne.n	8008aee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d12e      	bne.n	8008b86 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f023 0310 	bic.w	r3, r3, #16
 8008b42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6979      	ldr	r1, [r7, #20]
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	613b      	str	r3, [r7, #16]
   return(result);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e6      	bne.n	8008b2e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	f003 0310 	and.w	r3, r3, #16
 8008b6a:	2b10      	cmp	r3, #16
 8008b6c:	d103      	bne.n	8008b76 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2210      	movs	r2, #16
 8008b74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7fe ffd4 	bl	8007b2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b84:	e00b      	b.n	8008b9e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7f8 ff5e 	bl	8001a48 <HAL_UART_RxCpltCallback>
}
 8008b8c:	e007      	b.n	8008b9e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f042 0208 	orr.w	r2, r2, #8
 8008b9c:	619a      	str	r2, [r3, #24]
}
 8008b9e:	bf00      	nop
 8008ba0:	3770      	adds	r7, #112	@ 0x70
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40008000 	.word	0x40008000

08008bac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b0ac      	sub	sp, #176	@ 0xb0
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bba:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008be2:	2b22      	cmp	r3, #34	@ 0x22
 8008be4:	f040 8183 	bne.w	8008eee <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bee:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bf2:	e126      	b.n	8008e42 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bfe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008c02:	b2d9      	uxtb	r1, r3
 8008c04:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0e:	400a      	ands	r2, r1
 8008c10:	b2d2      	uxtb	r2, r2
 8008c12:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d053      	beq.n	8008cee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d011      	beq.n	8008c76 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2201      	movs	r2, #1
 8008c64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c6c:	f043 0201 	orr.w	r2, r3, #1
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d011      	beq.n	8008ca6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00b      	beq.n	8008ca6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2202      	movs	r2, #2
 8008c94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9c:	f043 0204 	orr.w	r2, r3, #4
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008caa:	f003 0304 	and.w	r3, r3, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d011      	beq.n	8008cd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00b      	beq.n	8008cd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ccc:	f043 0202 	orr.w	r2, r3, #2
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d006      	beq.n	8008cee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7fe ff19 	bl	8007b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f040 80a3 	bne.w	8008e42 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d20:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008d24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008d2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e4      	bne.n	8008cfc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008d42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d48:	f023 0301 	bic.w	r3, r3, #1
 8008d4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3308      	adds	r3, #8
 8008d56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d5a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008d5c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e1      	bne.n	8008d32 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a60      	ldr	r2, [pc, #384]	@ (8008f08 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d021      	beq.n	8008dd0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01a      	beq.n	8008dd0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008daa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008dae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008dbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dbe:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008dc4:	e841 2300 	strex	r3, r2, [r1]
 8008dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1e4      	bne.n	8008d9a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d130      	bne.n	8008e3a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de6:	e853 3f00 	ldrex	r3, [r3]
 8008dea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dee:	f023 0310 	bic.w	r3, r3, #16
 8008df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e08:	e841 2300 	strex	r3, r2, [r1]
 8008e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e4      	bne.n	8008dde <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69db      	ldr	r3, [r3, #28]
 8008e1a:	f003 0310 	and.w	r3, r3, #16
 8008e1e:	2b10      	cmp	r3, #16
 8008e20:	d103      	bne.n	8008e2a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2210      	movs	r2, #16
 8008e28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7fe fe7a 	bl	8007b2c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008e38:	e00e      	b.n	8008e58 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7f8 fe04 	bl	8001a48 <HAL_UART_RxCpltCallback>
        break;
 8008e40:	e00a      	b.n	8008e58 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e42:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8008e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f47f aece 	bne.w	8008bf4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e5e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d049      	beq.n	8008efe <UART_RxISR_8BIT_FIFOEN+0x352>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e70:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d242      	bcs.n	8008efe <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3308      	adds	r3, #8
 8008e7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	e853 3f00 	ldrex	r3, [r3]
 8008e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3308      	adds	r3, #8
 8008e98:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e3      	bne.n	8008e78 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a16      	ldr	r2, [pc, #88]	@ (8008f0c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008eb4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f043 0320 	orr.w	r3, r3, #32
 8008eca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ed8:	61bb      	str	r3, [r7, #24]
 8008eda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	6979      	ldr	r1, [r7, #20]
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e4      	bne.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008eec:	e007      	b.n	8008efe <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	699a      	ldr	r2, [r3, #24]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f042 0208 	orr.w	r2, r2, #8
 8008efc:	619a      	str	r2, [r3, #24]
}
 8008efe:	bf00      	nop
 8008f00:	37b0      	adds	r7, #176	@ 0xb0
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	40008000 	.word	0x40008000
 8008f0c:	0800883d 	.word	0x0800883d

08008f10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b0ae      	sub	sp, #184	@ 0xb8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f1e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f46:	2b22      	cmp	r3, #34	@ 0x22
 8008f48:	f040 8187 	bne.w	800925a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f52:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f56:	e12a      	b.n	80091ae <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f6a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008f6e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008f72:	4013      	ands	r3, r2
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f80:	1c9a      	adds	r2, r3, #2
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d053      	beq.n	8009056 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d011      	beq.n	8008fde <UART_RxISR_16BIT_FIFOEN+0xce>
 8008fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fd4:	f043 0201 	orr.w	r2, r3, #1
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00b      	beq.n	800900e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009004:	f043 0204 	orr.w	r2, r3, #4
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800900e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009012:	f003 0304 	and.w	r3, r3, #4
 8009016:	2b00      	cmp	r3, #0
 8009018:	d011      	beq.n	800903e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800901a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2204      	movs	r2, #4
 800902c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009034:	f043 0202 	orr.w	r2, r3, #2
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009044:	2b00      	cmp	r3, #0
 8009046:	d006      	beq.n	8009056 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7fe fd65 	bl	8007b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800905c:	b29b      	uxth	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	f040 80a5 	bne.w	80091ae <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800908a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800908e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009098:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e2      	bne.n	8009064 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3308      	adds	r3, #8
 80090a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090b4:	f023 0301 	bic.w	r3, r3, #1
 80090b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3308      	adds	r3, #8
 80090c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80090c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e1      	bne.n	800909e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a60      	ldr	r2, [pc, #384]	@ (8009274 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d021      	beq.n	800913c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d01a      	beq.n	800913c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009114:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009116:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800911a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009128:	65bb      	str	r3, [r7, #88]	@ 0x58
 800912a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800912e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e4      	bne.n	8009106 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009140:	2b01      	cmp	r3, #1
 8009142:	d130      	bne.n	80091a6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009152:	e853 3f00 	ldrex	r3, [r3]
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915a:	f023 0310 	bic.w	r3, r3, #16
 800915e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800916c:	647b      	str	r3, [r7, #68]	@ 0x44
 800916e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800917a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e4      	bne.n	800914a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	f003 0310 	and.w	r3, r3, #16
 800918a:	2b10      	cmp	r3, #16
 800918c:	d103      	bne.n	8009196 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2210      	movs	r2, #16
 8009194:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7fe fcc4 	bl	8007b2c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80091a4:	e00e      	b.n	80091c4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7f8 fc4e 	bl	8001a48 <HAL_UART_RxCpltCallback>
        break;
 80091ac:	e00a      	b.n	80091c4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091ae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d006      	beq.n	80091c4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80091b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f47f aeca 	bne.w	8008f58 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091ca:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d049      	beq.n	800926a <UART_RxISR_16BIT_FIFOEN+0x35a>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091dc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d242      	bcs.n	800926a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3308      	adds	r3, #8
 80091ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	623b      	str	r3, [r7, #32]
   return(result);
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3308      	adds	r3, #8
 8009204:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009208:	633a      	str	r2, [r7, #48]	@ 0x30
 800920a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800920e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e3      	bne.n	80091e4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a16      	ldr	r2, [pc, #88]	@ (8009278 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009220:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f043 0320 	orr.w	r3, r3, #32
 8009236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009244:	61fb      	str	r3, [r7, #28]
 8009246:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	69b9      	ldr	r1, [r7, #24]
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	617b      	str	r3, [r7, #20]
   return(result);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e4      	bne.n	8009222 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009258:	e007      	b.n	800926a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	699a      	ldr	r2, [r3, #24]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f042 0208 	orr.w	r2, r2, #8
 8009268:	619a      	str	r2, [r3, #24]
}
 800926a:	bf00      	nop
 800926c:	37b8      	adds	r7, #184	@ 0xb8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40008000 	.word	0x40008000
 8009278:	080089f5 	.word	0x080089f5

0800927c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d101      	bne.n	80092ce <HAL_UARTEx_DisableFifoMode+0x16>
 80092ca:	2302      	movs	r3, #2
 80092cc:	e027      	b.n	800931e <HAL_UARTEx_DisableFifoMode+0x66>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2224      	movs	r2, #36	@ 0x24
 80092da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f022 0201 	bic.w	r2, r2, #1
 80092f4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2220      	movs	r2, #32
 8009310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800933a:	2b01      	cmp	r3, #1
 800933c:	d101      	bne.n	8009342 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800933e:	2302      	movs	r3, #2
 8009340:	e02d      	b.n	800939e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2224      	movs	r2, #36	@ 0x24
 800934e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0201 	bic.w	r2, r2, #1
 8009368:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f850 	bl	8009424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d101      	bne.n	80093be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093ba:	2302      	movs	r3, #2
 80093bc:	e02d      	b.n	800941a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2224      	movs	r2, #36	@ 0x24
 80093ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0201 	bic.w	r2, r2, #1
 80093e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	683a      	ldr	r2, [r7, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f812 	bl	8009424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2220      	movs	r2, #32
 800940c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009430:	2b00      	cmp	r3, #0
 8009432:	d108      	bne.n	8009446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009444:	e031      	b.n	80094aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009446:	2308      	movs	r3, #8
 8009448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800944a:	2308      	movs	r3, #8
 800944c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	0e5b      	lsrs	r3, r3, #25
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	0f5b      	lsrs	r3, r3, #29
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 0307 	and.w	r3, r3, #7
 800946c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	7b3a      	ldrb	r2, [r7, #12]
 8009472:	4911      	ldr	r1, [pc, #68]	@ (80094b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009474:	5c8a      	ldrb	r2, [r1, r2]
 8009476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800947a:	7b3a      	ldrb	r2, [r7, #12]
 800947c:	490f      	ldr	r1, [pc, #60]	@ (80094bc <UARTEx_SetNbDataToProcess+0x98>)
 800947e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009480:	fb93 f3f2 	sdiv	r3, r3, r2
 8009484:	b29a      	uxth	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800948c:	7bfb      	ldrb	r3, [r7, #15]
 800948e:	7b7a      	ldrb	r2, [r7, #13]
 8009490:	4909      	ldr	r1, [pc, #36]	@ (80094b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009492:	5c8a      	ldrb	r2, [r1, r2]
 8009494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009498:	7b7a      	ldrb	r2, [r7, #13]
 800949a:	4908      	ldr	r1, [pc, #32]	@ (80094bc <UARTEx_SetNbDataToProcess+0x98>)
 800949c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800949e:	fb93 f3f2 	sdiv	r3, r3, r2
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094aa:	bf00      	nop
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	0800dd34 	.word	0x0800dd34
 80094bc:	0800dd3c 	.word	0x0800dd3c

080094c0 <atoi>:
 80094c0:	220a      	movs	r2, #10
 80094c2:	2100      	movs	r1, #0
 80094c4:	f000 b87c 	b.w	80095c0 <strtol>

080094c8 <_strtol_l.constprop.0>:
 80094c8:	2b24      	cmp	r3, #36	@ 0x24
 80094ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ce:	4686      	mov	lr, r0
 80094d0:	4690      	mov	r8, r2
 80094d2:	d801      	bhi.n	80094d8 <_strtol_l.constprop.0+0x10>
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d106      	bne.n	80094e6 <_strtol_l.constprop.0+0x1e>
 80094d8:	f001 f8bc 	bl	800a654 <__errno>
 80094dc:	2316      	movs	r3, #22
 80094de:	6003      	str	r3, [r0, #0]
 80094e0:	2000      	movs	r0, #0
 80094e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e6:	4834      	ldr	r0, [pc, #208]	@ (80095b8 <_strtol_l.constprop.0+0xf0>)
 80094e8:	460d      	mov	r5, r1
 80094ea:	462a      	mov	r2, r5
 80094ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094f0:	5d06      	ldrb	r6, [r0, r4]
 80094f2:	f016 0608 	ands.w	r6, r6, #8
 80094f6:	d1f8      	bne.n	80094ea <_strtol_l.constprop.0+0x22>
 80094f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80094fa:	d12d      	bne.n	8009558 <_strtol_l.constprop.0+0x90>
 80094fc:	782c      	ldrb	r4, [r5, #0]
 80094fe:	2601      	movs	r6, #1
 8009500:	1c95      	adds	r5, r2, #2
 8009502:	f033 0210 	bics.w	r2, r3, #16
 8009506:	d109      	bne.n	800951c <_strtol_l.constprop.0+0x54>
 8009508:	2c30      	cmp	r4, #48	@ 0x30
 800950a:	d12a      	bne.n	8009562 <_strtol_l.constprop.0+0x9a>
 800950c:	782a      	ldrb	r2, [r5, #0]
 800950e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009512:	2a58      	cmp	r2, #88	@ 0x58
 8009514:	d125      	bne.n	8009562 <_strtol_l.constprop.0+0x9a>
 8009516:	786c      	ldrb	r4, [r5, #1]
 8009518:	2310      	movs	r3, #16
 800951a:	3502      	adds	r5, #2
 800951c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009520:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009524:	2200      	movs	r2, #0
 8009526:	fbbc f9f3 	udiv	r9, ip, r3
 800952a:	4610      	mov	r0, r2
 800952c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009530:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009534:	2f09      	cmp	r7, #9
 8009536:	d81b      	bhi.n	8009570 <_strtol_l.constprop.0+0xa8>
 8009538:	463c      	mov	r4, r7
 800953a:	42a3      	cmp	r3, r4
 800953c:	dd27      	ble.n	800958e <_strtol_l.constprop.0+0xc6>
 800953e:	1c57      	adds	r7, r2, #1
 8009540:	d007      	beq.n	8009552 <_strtol_l.constprop.0+0x8a>
 8009542:	4581      	cmp	r9, r0
 8009544:	d320      	bcc.n	8009588 <_strtol_l.constprop.0+0xc0>
 8009546:	d101      	bne.n	800954c <_strtol_l.constprop.0+0x84>
 8009548:	45a2      	cmp	sl, r4
 800954a:	db1d      	blt.n	8009588 <_strtol_l.constprop.0+0xc0>
 800954c:	fb00 4003 	mla	r0, r0, r3, r4
 8009550:	2201      	movs	r2, #1
 8009552:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009556:	e7eb      	b.n	8009530 <_strtol_l.constprop.0+0x68>
 8009558:	2c2b      	cmp	r4, #43	@ 0x2b
 800955a:	bf04      	itt	eq
 800955c:	782c      	ldrbeq	r4, [r5, #0]
 800955e:	1c95      	addeq	r5, r2, #2
 8009560:	e7cf      	b.n	8009502 <_strtol_l.constprop.0+0x3a>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1da      	bne.n	800951c <_strtol_l.constprop.0+0x54>
 8009566:	2c30      	cmp	r4, #48	@ 0x30
 8009568:	bf0c      	ite	eq
 800956a:	2308      	moveq	r3, #8
 800956c:	230a      	movne	r3, #10
 800956e:	e7d5      	b.n	800951c <_strtol_l.constprop.0+0x54>
 8009570:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009574:	2f19      	cmp	r7, #25
 8009576:	d801      	bhi.n	800957c <_strtol_l.constprop.0+0xb4>
 8009578:	3c37      	subs	r4, #55	@ 0x37
 800957a:	e7de      	b.n	800953a <_strtol_l.constprop.0+0x72>
 800957c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009580:	2f19      	cmp	r7, #25
 8009582:	d804      	bhi.n	800958e <_strtol_l.constprop.0+0xc6>
 8009584:	3c57      	subs	r4, #87	@ 0x57
 8009586:	e7d8      	b.n	800953a <_strtol_l.constprop.0+0x72>
 8009588:	f04f 32ff 	mov.w	r2, #4294967295
 800958c:	e7e1      	b.n	8009552 <_strtol_l.constprop.0+0x8a>
 800958e:	1c53      	adds	r3, r2, #1
 8009590:	d108      	bne.n	80095a4 <_strtol_l.constprop.0+0xdc>
 8009592:	2322      	movs	r3, #34	@ 0x22
 8009594:	f8ce 3000 	str.w	r3, [lr]
 8009598:	4660      	mov	r0, ip
 800959a:	f1b8 0f00 	cmp.w	r8, #0
 800959e:	d0a0      	beq.n	80094e2 <_strtol_l.constprop.0+0x1a>
 80095a0:	1e69      	subs	r1, r5, #1
 80095a2:	e006      	b.n	80095b2 <_strtol_l.constprop.0+0xea>
 80095a4:	b106      	cbz	r6, 80095a8 <_strtol_l.constprop.0+0xe0>
 80095a6:	4240      	negs	r0, r0
 80095a8:	f1b8 0f00 	cmp.w	r8, #0
 80095ac:	d099      	beq.n	80094e2 <_strtol_l.constprop.0+0x1a>
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	d1f6      	bne.n	80095a0 <_strtol_l.constprop.0+0xd8>
 80095b2:	f8c8 1000 	str.w	r1, [r8]
 80095b6:	e794      	b.n	80094e2 <_strtol_l.constprop.0+0x1a>
 80095b8:	0800dd45 	.word	0x0800dd45

080095bc <_strtol_r>:
 80095bc:	f7ff bf84 	b.w	80094c8 <_strtol_l.constprop.0>

080095c0 <strtol>:
 80095c0:	4613      	mov	r3, r2
 80095c2:	460a      	mov	r2, r1
 80095c4:	4601      	mov	r1, r0
 80095c6:	4802      	ldr	r0, [pc, #8]	@ (80095d0 <strtol+0x10>)
 80095c8:	6800      	ldr	r0, [r0, #0]
 80095ca:	f7ff bf7d 	b.w	80094c8 <_strtol_l.constprop.0>
 80095ce:	bf00      	nop
 80095d0:	20000204 	.word	0x20000204

080095d4 <__cvt>:
 80095d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	ec57 6b10 	vmov	r6, r7, d0
 80095dc:	2f00      	cmp	r7, #0
 80095de:	460c      	mov	r4, r1
 80095e0:	4619      	mov	r1, r3
 80095e2:	463b      	mov	r3, r7
 80095e4:	bfbb      	ittet	lt
 80095e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80095ea:	461f      	movlt	r7, r3
 80095ec:	2300      	movge	r3, #0
 80095ee:	232d      	movlt	r3, #45	@ 0x2d
 80095f0:	700b      	strb	r3, [r1, #0]
 80095f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80095f8:	4691      	mov	r9, r2
 80095fa:	f023 0820 	bic.w	r8, r3, #32
 80095fe:	bfbc      	itt	lt
 8009600:	4632      	movlt	r2, r6
 8009602:	4616      	movlt	r6, r2
 8009604:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009608:	d005      	beq.n	8009616 <__cvt+0x42>
 800960a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800960e:	d100      	bne.n	8009612 <__cvt+0x3e>
 8009610:	3401      	adds	r4, #1
 8009612:	2102      	movs	r1, #2
 8009614:	e000      	b.n	8009618 <__cvt+0x44>
 8009616:	2103      	movs	r1, #3
 8009618:	ab03      	add	r3, sp, #12
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	ab02      	add	r3, sp, #8
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	ec47 6b10 	vmov	d0, r6, r7
 8009624:	4653      	mov	r3, sl
 8009626:	4622      	mov	r2, r4
 8009628:	f001 f8ee 	bl	800a808 <_dtoa_r>
 800962c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009630:	4605      	mov	r5, r0
 8009632:	d119      	bne.n	8009668 <__cvt+0x94>
 8009634:	f019 0f01 	tst.w	r9, #1
 8009638:	d00e      	beq.n	8009658 <__cvt+0x84>
 800963a:	eb00 0904 	add.w	r9, r0, r4
 800963e:	2200      	movs	r2, #0
 8009640:	2300      	movs	r3, #0
 8009642:	4630      	mov	r0, r6
 8009644:	4639      	mov	r1, r7
 8009646:	f7f7 fa77 	bl	8000b38 <__aeabi_dcmpeq>
 800964a:	b108      	cbz	r0, 8009650 <__cvt+0x7c>
 800964c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009650:	2230      	movs	r2, #48	@ 0x30
 8009652:	9b03      	ldr	r3, [sp, #12]
 8009654:	454b      	cmp	r3, r9
 8009656:	d31e      	bcc.n	8009696 <__cvt+0xc2>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800965c:	1b5b      	subs	r3, r3, r5
 800965e:	4628      	mov	r0, r5
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	b004      	add	sp, #16
 8009664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009668:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800966c:	eb00 0904 	add.w	r9, r0, r4
 8009670:	d1e5      	bne.n	800963e <__cvt+0x6a>
 8009672:	7803      	ldrb	r3, [r0, #0]
 8009674:	2b30      	cmp	r3, #48	@ 0x30
 8009676:	d10a      	bne.n	800968e <__cvt+0xba>
 8009678:	2200      	movs	r2, #0
 800967a:	2300      	movs	r3, #0
 800967c:	4630      	mov	r0, r6
 800967e:	4639      	mov	r1, r7
 8009680:	f7f7 fa5a 	bl	8000b38 <__aeabi_dcmpeq>
 8009684:	b918      	cbnz	r0, 800968e <__cvt+0xba>
 8009686:	f1c4 0401 	rsb	r4, r4, #1
 800968a:	f8ca 4000 	str.w	r4, [sl]
 800968e:	f8da 3000 	ldr.w	r3, [sl]
 8009692:	4499      	add	r9, r3
 8009694:	e7d3      	b.n	800963e <__cvt+0x6a>
 8009696:	1c59      	adds	r1, r3, #1
 8009698:	9103      	str	r1, [sp, #12]
 800969a:	701a      	strb	r2, [r3, #0]
 800969c:	e7d9      	b.n	8009652 <__cvt+0x7e>

0800969e <__exponent>:
 800969e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a0:	2900      	cmp	r1, #0
 80096a2:	bfba      	itte	lt
 80096a4:	4249      	neglt	r1, r1
 80096a6:	232d      	movlt	r3, #45	@ 0x2d
 80096a8:	232b      	movge	r3, #43	@ 0x2b
 80096aa:	2909      	cmp	r1, #9
 80096ac:	7002      	strb	r2, [r0, #0]
 80096ae:	7043      	strb	r3, [r0, #1]
 80096b0:	dd29      	ble.n	8009706 <__exponent+0x68>
 80096b2:	f10d 0307 	add.w	r3, sp, #7
 80096b6:	461d      	mov	r5, r3
 80096b8:	270a      	movs	r7, #10
 80096ba:	461a      	mov	r2, r3
 80096bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80096c0:	fb07 1416 	mls	r4, r7, r6, r1
 80096c4:	3430      	adds	r4, #48	@ 0x30
 80096c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80096ca:	460c      	mov	r4, r1
 80096cc:	2c63      	cmp	r4, #99	@ 0x63
 80096ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80096d2:	4631      	mov	r1, r6
 80096d4:	dcf1      	bgt.n	80096ba <__exponent+0x1c>
 80096d6:	3130      	adds	r1, #48	@ 0x30
 80096d8:	1e94      	subs	r4, r2, #2
 80096da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096de:	1c41      	adds	r1, r0, #1
 80096e0:	4623      	mov	r3, r4
 80096e2:	42ab      	cmp	r3, r5
 80096e4:	d30a      	bcc.n	80096fc <__exponent+0x5e>
 80096e6:	f10d 0309 	add.w	r3, sp, #9
 80096ea:	1a9b      	subs	r3, r3, r2
 80096ec:	42ac      	cmp	r4, r5
 80096ee:	bf88      	it	hi
 80096f0:	2300      	movhi	r3, #0
 80096f2:	3302      	adds	r3, #2
 80096f4:	4403      	add	r3, r0
 80096f6:	1a18      	subs	r0, r3, r0
 80096f8:	b003      	add	sp, #12
 80096fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009700:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009704:	e7ed      	b.n	80096e2 <__exponent+0x44>
 8009706:	2330      	movs	r3, #48	@ 0x30
 8009708:	3130      	adds	r1, #48	@ 0x30
 800970a:	7083      	strb	r3, [r0, #2]
 800970c:	70c1      	strb	r1, [r0, #3]
 800970e:	1d03      	adds	r3, r0, #4
 8009710:	e7f1      	b.n	80096f6 <__exponent+0x58>
	...

08009714 <_printf_float>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	b08d      	sub	sp, #52	@ 0x34
 800971a:	460c      	mov	r4, r1
 800971c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009720:	4616      	mov	r6, r2
 8009722:	461f      	mov	r7, r3
 8009724:	4605      	mov	r5, r0
 8009726:	f000 ff4b 	bl	800a5c0 <_localeconv_r>
 800972a:	6803      	ldr	r3, [r0, #0]
 800972c:	9304      	str	r3, [sp, #16]
 800972e:	4618      	mov	r0, r3
 8009730:	f7f6 fdd6 	bl	80002e0 <strlen>
 8009734:	2300      	movs	r3, #0
 8009736:	930a      	str	r3, [sp, #40]	@ 0x28
 8009738:	f8d8 3000 	ldr.w	r3, [r8]
 800973c:	9005      	str	r0, [sp, #20]
 800973e:	3307      	adds	r3, #7
 8009740:	f023 0307 	bic.w	r3, r3, #7
 8009744:	f103 0208 	add.w	r2, r3, #8
 8009748:	f894 a018 	ldrb.w	sl, [r4, #24]
 800974c:	f8d4 b000 	ldr.w	fp, [r4]
 8009750:	f8c8 2000 	str.w	r2, [r8]
 8009754:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009758:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800975c:	9307      	str	r3, [sp, #28]
 800975e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009762:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800976a:	4b9c      	ldr	r3, [pc, #624]	@ (80099dc <_printf_float+0x2c8>)
 800976c:	f04f 32ff 	mov.w	r2, #4294967295
 8009770:	f7f7 fa14 	bl	8000b9c <__aeabi_dcmpun>
 8009774:	bb70      	cbnz	r0, 80097d4 <_printf_float+0xc0>
 8009776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800977a:	4b98      	ldr	r3, [pc, #608]	@ (80099dc <_printf_float+0x2c8>)
 800977c:	f04f 32ff 	mov.w	r2, #4294967295
 8009780:	f7f7 f9ee 	bl	8000b60 <__aeabi_dcmple>
 8009784:	bb30      	cbnz	r0, 80097d4 <_printf_float+0xc0>
 8009786:	2200      	movs	r2, #0
 8009788:	2300      	movs	r3, #0
 800978a:	4640      	mov	r0, r8
 800978c:	4649      	mov	r1, r9
 800978e:	f7f7 f9dd 	bl	8000b4c <__aeabi_dcmplt>
 8009792:	b110      	cbz	r0, 800979a <_printf_float+0x86>
 8009794:	232d      	movs	r3, #45	@ 0x2d
 8009796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800979a:	4a91      	ldr	r2, [pc, #580]	@ (80099e0 <_printf_float+0x2cc>)
 800979c:	4b91      	ldr	r3, [pc, #580]	@ (80099e4 <_printf_float+0x2d0>)
 800979e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80097a2:	bf94      	ite	ls
 80097a4:	4690      	movls	r8, r2
 80097a6:	4698      	movhi	r8, r3
 80097a8:	2303      	movs	r3, #3
 80097aa:	6123      	str	r3, [r4, #16]
 80097ac:	f02b 0304 	bic.w	r3, fp, #4
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	f04f 0900 	mov.w	r9, #0
 80097b6:	9700      	str	r7, [sp, #0]
 80097b8:	4633      	mov	r3, r6
 80097ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80097bc:	4621      	mov	r1, r4
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 f9d2 	bl	8009b68 <_printf_common>
 80097c4:	3001      	adds	r0, #1
 80097c6:	f040 808d 	bne.w	80098e4 <_printf_float+0x1d0>
 80097ca:	f04f 30ff 	mov.w	r0, #4294967295
 80097ce:	b00d      	add	sp, #52	@ 0x34
 80097d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d4:	4642      	mov	r2, r8
 80097d6:	464b      	mov	r3, r9
 80097d8:	4640      	mov	r0, r8
 80097da:	4649      	mov	r1, r9
 80097dc:	f7f7 f9de 	bl	8000b9c <__aeabi_dcmpun>
 80097e0:	b140      	cbz	r0, 80097f4 <_printf_float+0xe0>
 80097e2:	464b      	mov	r3, r9
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	bfbc      	itt	lt
 80097e8:	232d      	movlt	r3, #45	@ 0x2d
 80097ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80097ee:	4a7e      	ldr	r2, [pc, #504]	@ (80099e8 <_printf_float+0x2d4>)
 80097f0:	4b7e      	ldr	r3, [pc, #504]	@ (80099ec <_printf_float+0x2d8>)
 80097f2:	e7d4      	b.n	800979e <_printf_float+0x8a>
 80097f4:	6863      	ldr	r3, [r4, #4]
 80097f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80097fa:	9206      	str	r2, [sp, #24]
 80097fc:	1c5a      	adds	r2, r3, #1
 80097fe:	d13b      	bne.n	8009878 <_printf_float+0x164>
 8009800:	2306      	movs	r3, #6
 8009802:	6063      	str	r3, [r4, #4]
 8009804:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009808:	2300      	movs	r3, #0
 800980a:	6022      	str	r2, [r4, #0]
 800980c:	9303      	str	r3, [sp, #12]
 800980e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009810:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009814:	ab09      	add	r3, sp, #36	@ 0x24
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	6861      	ldr	r1, [r4, #4]
 800981a:	ec49 8b10 	vmov	d0, r8, r9
 800981e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009822:	4628      	mov	r0, r5
 8009824:	f7ff fed6 	bl	80095d4 <__cvt>
 8009828:	9b06      	ldr	r3, [sp, #24]
 800982a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800982c:	2b47      	cmp	r3, #71	@ 0x47
 800982e:	4680      	mov	r8, r0
 8009830:	d129      	bne.n	8009886 <_printf_float+0x172>
 8009832:	1cc8      	adds	r0, r1, #3
 8009834:	db02      	blt.n	800983c <_printf_float+0x128>
 8009836:	6863      	ldr	r3, [r4, #4]
 8009838:	4299      	cmp	r1, r3
 800983a:	dd41      	ble.n	80098c0 <_printf_float+0x1ac>
 800983c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009840:	fa5f fa8a 	uxtb.w	sl, sl
 8009844:	3901      	subs	r1, #1
 8009846:	4652      	mov	r2, sl
 8009848:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800984c:	9109      	str	r1, [sp, #36]	@ 0x24
 800984e:	f7ff ff26 	bl	800969e <__exponent>
 8009852:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009854:	1813      	adds	r3, r2, r0
 8009856:	2a01      	cmp	r2, #1
 8009858:	4681      	mov	r9, r0
 800985a:	6123      	str	r3, [r4, #16]
 800985c:	dc02      	bgt.n	8009864 <_printf_float+0x150>
 800985e:	6822      	ldr	r2, [r4, #0]
 8009860:	07d2      	lsls	r2, r2, #31
 8009862:	d501      	bpl.n	8009868 <_printf_float+0x154>
 8009864:	3301      	adds	r3, #1
 8009866:	6123      	str	r3, [r4, #16]
 8009868:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0a2      	beq.n	80097b6 <_printf_float+0xa2>
 8009870:	232d      	movs	r3, #45	@ 0x2d
 8009872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009876:	e79e      	b.n	80097b6 <_printf_float+0xa2>
 8009878:	9a06      	ldr	r2, [sp, #24]
 800987a:	2a47      	cmp	r2, #71	@ 0x47
 800987c:	d1c2      	bne.n	8009804 <_printf_float+0xf0>
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1c0      	bne.n	8009804 <_printf_float+0xf0>
 8009882:	2301      	movs	r3, #1
 8009884:	e7bd      	b.n	8009802 <_printf_float+0xee>
 8009886:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800988a:	d9db      	bls.n	8009844 <_printf_float+0x130>
 800988c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009890:	d118      	bne.n	80098c4 <_printf_float+0x1b0>
 8009892:	2900      	cmp	r1, #0
 8009894:	6863      	ldr	r3, [r4, #4]
 8009896:	dd0b      	ble.n	80098b0 <_printf_float+0x19c>
 8009898:	6121      	str	r1, [r4, #16]
 800989a:	b913      	cbnz	r3, 80098a2 <_printf_float+0x18e>
 800989c:	6822      	ldr	r2, [r4, #0]
 800989e:	07d0      	lsls	r0, r2, #31
 80098a0:	d502      	bpl.n	80098a8 <_printf_float+0x194>
 80098a2:	3301      	adds	r3, #1
 80098a4:	440b      	add	r3, r1
 80098a6:	6123      	str	r3, [r4, #16]
 80098a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80098aa:	f04f 0900 	mov.w	r9, #0
 80098ae:	e7db      	b.n	8009868 <_printf_float+0x154>
 80098b0:	b913      	cbnz	r3, 80098b8 <_printf_float+0x1a4>
 80098b2:	6822      	ldr	r2, [r4, #0]
 80098b4:	07d2      	lsls	r2, r2, #31
 80098b6:	d501      	bpl.n	80098bc <_printf_float+0x1a8>
 80098b8:	3302      	adds	r3, #2
 80098ba:	e7f4      	b.n	80098a6 <_printf_float+0x192>
 80098bc:	2301      	movs	r3, #1
 80098be:	e7f2      	b.n	80098a6 <_printf_float+0x192>
 80098c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80098c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098c6:	4299      	cmp	r1, r3
 80098c8:	db05      	blt.n	80098d6 <_printf_float+0x1c2>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	6121      	str	r1, [r4, #16]
 80098ce:	07d8      	lsls	r0, r3, #31
 80098d0:	d5ea      	bpl.n	80098a8 <_printf_float+0x194>
 80098d2:	1c4b      	adds	r3, r1, #1
 80098d4:	e7e7      	b.n	80098a6 <_printf_float+0x192>
 80098d6:	2900      	cmp	r1, #0
 80098d8:	bfd4      	ite	le
 80098da:	f1c1 0202 	rsble	r2, r1, #2
 80098de:	2201      	movgt	r2, #1
 80098e0:	4413      	add	r3, r2
 80098e2:	e7e0      	b.n	80098a6 <_printf_float+0x192>
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	055a      	lsls	r2, r3, #21
 80098e8:	d407      	bmi.n	80098fa <_printf_float+0x1e6>
 80098ea:	6923      	ldr	r3, [r4, #16]
 80098ec:	4642      	mov	r2, r8
 80098ee:	4631      	mov	r1, r6
 80098f0:	4628      	mov	r0, r5
 80098f2:	47b8      	blx	r7
 80098f4:	3001      	adds	r0, #1
 80098f6:	d12b      	bne.n	8009950 <_printf_float+0x23c>
 80098f8:	e767      	b.n	80097ca <_printf_float+0xb6>
 80098fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098fe:	f240 80dd 	bls.w	8009abc <_printf_float+0x3a8>
 8009902:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009906:	2200      	movs	r2, #0
 8009908:	2300      	movs	r3, #0
 800990a:	f7f7 f915 	bl	8000b38 <__aeabi_dcmpeq>
 800990e:	2800      	cmp	r0, #0
 8009910:	d033      	beq.n	800997a <_printf_float+0x266>
 8009912:	4a37      	ldr	r2, [pc, #220]	@ (80099f0 <_printf_float+0x2dc>)
 8009914:	2301      	movs	r3, #1
 8009916:	4631      	mov	r1, r6
 8009918:	4628      	mov	r0, r5
 800991a:	47b8      	blx	r7
 800991c:	3001      	adds	r0, #1
 800991e:	f43f af54 	beq.w	80097ca <_printf_float+0xb6>
 8009922:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009926:	4543      	cmp	r3, r8
 8009928:	db02      	blt.n	8009930 <_printf_float+0x21c>
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	07d8      	lsls	r0, r3, #31
 800992e:	d50f      	bpl.n	8009950 <_printf_float+0x23c>
 8009930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009934:	4631      	mov	r1, r6
 8009936:	4628      	mov	r0, r5
 8009938:	47b8      	blx	r7
 800993a:	3001      	adds	r0, #1
 800993c:	f43f af45 	beq.w	80097ca <_printf_float+0xb6>
 8009940:	f04f 0900 	mov.w	r9, #0
 8009944:	f108 38ff 	add.w	r8, r8, #4294967295
 8009948:	f104 0a1a 	add.w	sl, r4, #26
 800994c:	45c8      	cmp	r8, r9
 800994e:	dc09      	bgt.n	8009964 <_printf_float+0x250>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	079b      	lsls	r3, r3, #30
 8009954:	f100 8103 	bmi.w	8009b5e <_printf_float+0x44a>
 8009958:	68e0      	ldr	r0, [r4, #12]
 800995a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800995c:	4298      	cmp	r0, r3
 800995e:	bfb8      	it	lt
 8009960:	4618      	movlt	r0, r3
 8009962:	e734      	b.n	80097ce <_printf_float+0xba>
 8009964:	2301      	movs	r3, #1
 8009966:	4652      	mov	r2, sl
 8009968:	4631      	mov	r1, r6
 800996a:	4628      	mov	r0, r5
 800996c:	47b8      	blx	r7
 800996e:	3001      	adds	r0, #1
 8009970:	f43f af2b 	beq.w	80097ca <_printf_float+0xb6>
 8009974:	f109 0901 	add.w	r9, r9, #1
 8009978:	e7e8      	b.n	800994c <_printf_float+0x238>
 800997a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800997c:	2b00      	cmp	r3, #0
 800997e:	dc39      	bgt.n	80099f4 <_printf_float+0x2e0>
 8009980:	4a1b      	ldr	r2, [pc, #108]	@ (80099f0 <_printf_float+0x2dc>)
 8009982:	2301      	movs	r3, #1
 8009984:	4631      	mov	r1, r6
 8009986:	4628      	mov	r0, r5
 8009988:	47b8      	blx	r7
 800998a:	3001      	adds	r0, #1
 800998c:	f43f af1d 	beq.w	80097ca <_printf_float+0xb6>
 8009990:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009994:	ea59 0303 	orrs.w	r3, r9, r3
 8009998:	d102      	bne.n	80099a0 <_printf_float+0x28c>
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	07d9      	lsls	r1, r3, #31
 800999e:	d5d7      	bpl.n	8009950 <_printf_float+0x23c>
 80099a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099a4:	4631      	mov	r1, r6
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	f43f af0d 	beq.w	80097ca <_printf_float+0xb6>
 80099b0:	f04f 0a00 	mov.w	sl, #0
 80099b4:	f104 0b1a 	add.w	fp, r4, #26
 80099b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ba:	425b      	negs	r3, r3
 80099bc:	4553      	cmp	r3, sl
 80099be:	dc01      	bgt.n	80099c4 <_printf_float+0x2b0>
 80099c0:	464b      	mov	r3, r9
 80099c2:	e793      	b.n	80098ec <_printf_float+0x1d8>
 80099c4:	2301      	movs	r3, #1
 80099c6:	465a      	mov	r2, fp
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f aefb 	beq.w	80097ca <_printf_float+0xb6>
 80099d4:	f10a 0a01 	add.w	sl, sl, #1
 80099d8:	e7ee      	b.n	80099b8 <_printf_float+0x2a4>
 80099da:	bf00      	nop
 80099dc:	7fefffff 	.word	0x7fefffff
 80099e0:	0800de45 	.word	0x0800de45
 80099e4:	0800de49 	.word	0x0800de49
 80099e8:	0800de4d 	.word	0x0800de4d
 80099ec:	0800de51 	.word	0x0800de51
 80099f0:	0800de55 	.word	0x0800de55
 80099f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099fa:	4553      	cmp	r3, sl
 80099fc:	bfa8      	it	ge
 80099fe:	4653      	movge	r3, sl
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	4699      	mov	r9, r3
 8009a04:	dc36      	bgt.n	8009a74 <_printf_float+0x360>
 8009a06:	f04f 0b00 	mov.w	fp, #0
 8009a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a0e:	f104 021a 	add.w	r2, r4, #26
 8009a12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a14:	9306      	str	r3, [sp, #24]
 8009a16:	eba3 0309 	sub.w	r3, r3, r9
 8009a1a:	455b      	cmp	r3, fp
 8009a1c:	dc31      	bgt.n	8009a82 <_printf_float+0x36e>
 8009a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a20:	459a      	cmp	sl, r3
 8009a22:	dc3a      	bgt.n	8009a9a <_printf_float+0x386>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	07da      	lsls	r2, r3, #31
 8009a28:	d437      	bmi.n	8009a9a <_printf_float+0x386>
 8009a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a2c:	ebaa 0903 	sub.w	r9, sl, r3
 8009a30:	9b06      	ldr	r3, [sp, #24]
 8009a32:	ebaa 0303 	sub.w	r3, sl, r3
 8009a36:	4599      	cmp	r9, r3
 8009a38:	bfa8      	it	ge
 8009a3a:	4699      	movge	r9, r3
 8009a3c:	f1b9 0f00 	cmp.w	r9, #0
 8009a40:	dc33      	bgt.n	8009aaa <_printf_float+0x396>
 8009a42:	f04f 0800 	mov.w	r8, #0
 8009a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a4a:	f104 0b1a 	add.w	fp, r4, #26
 8009a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a50:	ebaa 0303 	sub.w	r3, sl, r3
 8009a54:	eba3 0309 	sub.w	r3, r3, r9
 8009a58:	4543      	cmp	r3, r8
 8009a5a:	f77f af79 	ble.w	8009950 <_printf_float+0x23c>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	465a      	mov	r2, fp
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f43f aeae 	beq.w	80097ca <_printf_float+0xb6>
 8009a6e:	f108 0801 	add.w	r8, r8, #1
 8009a72:	e7ec      	b.n	8009a4e <_printf_float+0x33a>
 8009a74:	4642      	mov	r2, r8
 8009a76:	4631      	mov	r1, r6
 8009a78:	4628      	mov	r0, r5
 8009a7a:	47b8      	blx	r7
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d1c2      	bne.n	8009a06 <_printf_float+0x2f2>
 8009a80:	e6a3      	b.n	80097ca <_printf_float+0xb6>
 8009a82:	2301      	movs	r3, #1
 8009a84:	4631      	mov	r1, r6
 8009a86:	4628      	mov	r0, r5
 8009a88:	9206      	str	r2, [sp, #24]
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	f43f ae9c 	beq.w	80097ca <_printf_float+0xb6>
 8009a92:	9a06      	ldr	r2, [sp, #24]
 8009a94:	f10b 0b01 	add.w	fp, fp, #1
 8009a98:	e7bb      	b.n	8009a12 <_printf_float+0x2fe>
 8009a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a9e:	4631      	mov	r1, r6
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	47b8      	blx	r7
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	d1c0      	bne.n	8009a2a <_printf_float+0x316>
 8009aa8:	e68f      	b.n	80097ca <_printf_float+0xb6>
 8009aaa:	9a06      	ldr	r2, [sp, #24]
 8009aac:	464b      	mov	r3, r9
 8009aae:	4442      	add	r2, r8
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d1c3      	bne.n	8009a42 <_printf_float+0x32e>
 8009aba:	e686      	b.n	80097ca <_printf_float+0xb6>
 8009abc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ac0:	f1ba 0f01 	cmp.w	sl, #1
 8009ac4:	dc01      	bgt.n	8009aca <_printf_float+0x3b6>
 8009ac6:	07db      	lsls	r3, r3, #31
 8009ac8:	d536      	bpl.n	8009b38 <_printf_float+0x424>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4642      	mov	r2, r8
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	47b8      	blx	r7
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	f43f ae78 	beq.w	80097ca <_printf_float+0xb6>
 8009ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ade:	4631      	mov	r1, r6
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	47b8      	blx	r7
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	f43f ae70 	beq.w	80097ca <_printf_float+0xb6>
 8009aea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009aee:	2200      	movs	r2, #0
 8009af0:	2300      	movs	r3, #0
 8009af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009af6:	f7f7 f81f 	bl	8000b38 <__aeabi_dcmpeq>
 8009afa:	b9c0      	cbnz	r0, 8009b2e <_printf_float+0x41a>
 8009afc:	4653      	mov	r3, sl
 8009afe:	f108 0201 	add.w	r2, r8, #1
 8009b02:	4631      	mov	r1, r6
 8009b04:	4628      	mov	r0, r5
 8009b06:	47b8      	blx	r7
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d10c      	bne.n	8009b26 <_printf_float+0x412>
 8009b0c:	e65d      	b.n	80097ca <_printf_float+0xb6>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	465a      	mov	r2, fp
 8009b12:	4631      	mov	r1, r6
 8009b14:	4628      	mov	r0, r5
 8009b16:	47b8      	blx	r7
 8009b18:	3001      	adds	r0, #1
 8009b1a:	f43f ae56 	beq.w	80097ca <_printf_float+0xb6>
 8009b1e:	f108 0801 	add.w	r8, r8, #1
 8009b22:	45d0      	cmp	r8, sl
 8009b24:	dbf3      	blt.n	8009b0e <_printf_float+0x3fa>
 8009b26:	464b      	mov	r3, r9
 8009b28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b2c:	e6df      	b.n	80098ee <_printf_float+0x1da>
 8009b2e:	f04f 0800 	mov.w	r8, #0
 8009b32:	f104 0b1a 	add.w	fp, r4, #26
 8009b36:	e7f4      	b.n	8009b22 <_printf_float+0x40e>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	4642      	mov	r2, r8
 8009b3c:	e7e1      	b.n	8009b02 <_printf_float+0x3ee>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	464a      	mov	r2, r9
 8009b42:	4631      	mov	r1, r6
 8009b44:	4628      	mov	r0, r5
 8009b46:	47b8      	blx	r7
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f ae3e 	beq.w	80097ca <_printf_float+0xb6>
 8009b4e:	f108 0801 	add.w	r8, r8, #1
 8009b52:	68e3      	ldr	r3, [r4, #12]
 8009b54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b56:	1a5b      	subs	r3, r3, r1
 8009b58:	4543      	cmp	r3, r8
 8009b5a:	dcf0      	bgt.n	8009b3e <_printf_float+0x42a>
 8009b5c:	e6fc      	b.n	8009958 <_printf_float+0x244>
 8009b5e:	f04f 0800 	mov.w	r8, #0
 8009b62:	f104 0919 	add.w	r9, r4, #25
 8009b66:	e7f4      	b.n	8009b52 <_printf_float+0x43e>

08009b68 <_printf_common>:
 8009b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b6c:	4616      	mov	r6, r2
 8009b6e:	4698      	mov	r8, r3
 8009b70:	688a      	ldr	r2, [r1, #8]
 8009b72:	690b      	ldr	r3, [r1, #16]
 8009b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	bfb8      	it	lt
 8009b7c:	4613      	movlt	r3, r2
 8009b7e:	6033      	str	r3, [r6, #0]
 8009b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b84:	4607      	mov	r7, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	b10a      	cbz	r2, 8009b8e <_printf_common+0x26>
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	6033      	str	r3, [r6, #0]
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	0699      	lsls	r1, r3, #26
 8009b92:	bf42      	ittt	mi
 8009b94:	6833      	ldrmi	r3, [r6, #0]
 8009b96:	3302      	addmi	r3, #2
 8009b98:	6033      	strmi	r3, [r6, #0]
 8009b9a:	6825      	ldr	r5, [r4, #0]
 8009b9c:	f015 0506 	ands.w	r5, r5, #6
 8009ba0:	d106      	bne.n	8009bb0 <_printf_common+0x48>
 8009ba2:	f104 0a19 	add.w	sl, r4, #25
 8009ba6:	68e3      	ldr	r3, [r4, #12]
 8009ba8:	6832      	ldr	r2, [r6, #0]
 8009baa:	1a9b      	subs	r3, r3, r2
 8009bac:	42ab      	cmp	r3, r5
 8009bae:	dc26      	bgt.n	8009bfe <_printf_common+0x96>
 8009bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009bb4:	6822      	ldr	r2, [r4, #0]
 8009bb6:	3b00      	subs	r3, #0
 8009bb8:	bf18      	it	ne
 8009bba:	2301      	movne	r3, #1
 8009bbc:	0692      	lsls	r2, r2, #26
 8009bbe:	d42b      	bmi.n	8009c18 <_printf_common+0xb0>
 8009bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009bc4:	4641      	mov	r1, r8
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	47c8      	blx	r9
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d01e      	beq.n	8009c0c <_printf_common+0xa4>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	6922      	ldr	r2, [r4, #16]
 8009bd2:	f003 0306 	and.w	r3, r3, #6
 8009bd6:	2b04      	cmp	r3, #4
 8009bd8:	bf02      	ittt	eq
 8009bda:	68e5      	ldreq	r5, [r4, #12]
 8009bdc:	6833      	ldreq	r3, [r6, #0]
 8009bde:	1aed      	subeq	r5, r5, r3
 8009be0:	68a3      	ldr	r3, [r4, #8]
 8009be2:	bf0c      	ite	eq
 8009be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009be8:	2500      	movne	r5, #0
 8009bea:	4293      	cmp	r3, r2
 8009bec:	bfc4      	itt	gt
 8009bee:	1a9b      	subgt	r3, r3, r2
 8009bf0:	18ed      	addgt	r5, r5, r3
 8009bf2:	2600      	movs	r6, #0
 8009bf4:	341a      	adds	r4, #26
 8009bf6:	42b5      	cmp	r5, r6
 8009bf8:	d11a      	bne.n	8009c30 <_printf_common+0xc8>
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	e008      	b.n	8009c10 <_printf_common+0xa8>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4652      	mov	r2, sl
 8009c02:	4641      	mov	r1, r8
 8009c04:	4638      	mov	r0, r7
 8009c06:	47c8      	blx	r9
 8009c08:	3001      	adds	r0, #1
 8009c0a:	d103      	bne.n	8009c14 <_printf_common+0xac>
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c14:	3501      	adds	r5, #1
 8009c16:	e7c6      	b.n	8009ba6 <_printf_common+0x3e>
 8009c18:	18e1      	adds	r1, r4, r3
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	2030      	movs	r0, #48	@ 0x30
 8009c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c22:	4422      	add	r2, r4
 8009c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c2c:	3302      	adds	r3, #2
 8009c2e:	e7c7      	b.n	8009bc0 <_printf_common+0x58>
 8009c30:	2301      	movs	r3, #1
 8009c32:	4622      	mov	r2, r4
 8009c34:	4641      	mov	r1, r8
 8009c36:	4638      	mov	r0, r7
 8009c38:	47c8      	blx	r9
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d0e6      	beq.n	8009c0c <_printf_common+0xa4>
 8009c3e:	3601      	adds	r6, #1
 8009c40:	e7d9      	b.n	8009bf6 <_printf_common+0x8e>
	...

08009c44 <_printf_i>:
 8009c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c48:	7e0f      	ldrb	r7, [r1, #24]
 8009c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c4c:	2f78      	cmp	r7, #120	@ 0x78
 8009c4e:	4691      	mov	r9, r2
 8009c50:	4680      	mov	r8, r0
 8009c52:	460c      	mov	r4, r1
 8009c54:	469a      	mov	sl, r3
 8009c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c5a:	d807      	bhi.n	8009c6c <_printf_i+0x28>
 8009c5c:	2f62      	cmp	r7, #98	@ 0x62
 8009c5e:	d80a      	bhi.n	8009c76 <_printf_i+0x32>
 8009c60:	2f00      	cmp	r7, #0
 8009c62:	f000 80d2 	beq.w	8009e0a <_printf_i+0x1c6>
 8009c66:	2f58      	cmp	r7, #88	@ 0x58
 8009c68:	f000 80b9 	beq.w	8009dde <_printf_i+0x19a>
 8009c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c74:	e03a      	b.n	8009cec <_printf_i+0xa8>
 8009c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c7a:	2b15      	cmp	r3, #21
 8009c7c:	d8f6      	bhi.n	8009c6c <_printf_i+0x28>
 8009c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8009c84 <_printf_i+0x40>)
 8009c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c84:	08009cdd 	.word	0x08009cdd
 8009c88:	08009cf1 	.word	0x08009cf1
 8009c8c:	08009c6d 	.word	0x08009c6d
 8009c90:	08009c6d 	.word	0x08009c6d
 8009c94:	08009c6d 	.word	0x08009c6d
 8009c98:	08009c6d 	.word	0x08009c6d
 8009c9c:	08009cf1 	.word	0x08009cf1
 8009ca0:	08009c6d 	.word	0x08009c6d
 8009ca4:	08009c6d 	.word	0x08009c6d
 8009ca8:	08009c6d 	.word	0x08009c6d
 8009cac:	08009c6d 	.word	0x08009c6d
 8009cb0:	08009df1 	.word	0x08009df1
 8009cb4:	08009d1b 	.word	0x08009d1b
 8009cb8:	08009dab 	.word	0x08009dab
 8009cbc:	08009c6d 	.word	0x08009c6d
 8009cc0:	08009c6d 	.word	0x08009c6d
 8009cc4:	08009e13 	.word	0x08009e13
 8009cc8:	08009c6d 	.word	0x08009c6d
 8009ccc:	08009d1b 	.word	0x08009d1b
 8009cd0:	08009c6d 	.word	0x08009c6d
 8009cd4:	08009c6d 	.word	0x08009c6d
 8009cd8:	08009db3 	.word	0x08009db3
 8009cdc:	6833      	ldr	r3, [r6, #0]
 8009cde:	1d1a      	adds	r2, r3, #4
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6032      	str	r2, [r6, #0]
 8009ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cec:	2301      	movs	r3, #1
 8009cee:	e09d      	b.n	8009e2c <_printf_i+0x1e8>
 8009cf0:	6833      	ldr	r3, [r6, #0]
 8009cf2:	6820      	ldr	r0, [r4, #0]
 8009cf4:	1d19      	adds	r1, r3, #4
 8009cf6:	6031      	str	r1, [r6, #0]
 8009cf8:	0606      	lsls	r6, r0, #24
 8009cfa:	d501      	bpl.n	8009d00 <_printf_i+0xbc>
 8009cfc:	681d      	ldr	r5, [r3, #0]
 8009cfe:	e003      	b.n	8009d08 <_printf_i+0xc4>
 8009d00:	0645      	lsls	r5, r0, #25
 8009d02:	d5fb      	bpl.n	8009cfc <_printf_i+0xb8>
 8009d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d08:	2d00      	cmp	r5, #0
 8009d0a:	da03      	bge.n	8009d14 <_printf_i+0xd0>
 8009d0c:	232d      	movs	r3, #45	@ 0x2d
 8009d0e:	426d      	negs	r5, r5
 8009d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d14:	4859      	ldr	r0, [pc, #356]	@ (8009e7c <_printf_i+0x238>)
 8009d16:	230a      	movs	r3, #10
 8009d18:	e011      	b.n	8009d3e <_printf_i+0xfa>
 8009d1a:	6821      	ldr	r1, [r4, #0]
 8009d1c:	6833      	ldr	r3, [r6, #0]
 8009d1e:	0608      	lsls	r0, r1, #24
 8009d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d24:	d402      	bmi.n	8009d2c <_printf_i+0xe8>
 8009d26:	0649      	lsls	r1, r1, #25
 8009d28:	bf48      	it	mi
 8009d2a:	b2ad      	uxthmi	r5, r5
 8009d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d2e:	4853      	ldr	r0, [pc, #332]	@ (8009e7c <_printf_i+0x238>)
 8009d30:	6033      	str	r3, [r6, #0]
 8009d32:	bf14      	ite	ne
 8009d34:	230a      	movne	r3, #10
 8009d36:	2308      	moveq	r3, #8
 8009d38:	2100      	movs	r1, #0
 8009d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d3e:	6866      	ldr	r6, [r4, #4]
 8009d40:	60a6      	str	r6, [r4, #8]
 8009d42:	2e00      	cmp	r6, #0
 8009d44:	bfa2      	ittt	ge
 8009d46:	6821      	ldrge	r1, [r4, #0]
 8009d48:	f021 0104 	bicge.w	r1, r1, #4
 8009d4c:	6021      	strge	r1, [r4, #0]
 8009d4e:	b90d      	cbnz	r5, 8009d54 <_printf_i+0x110>
 8009d50:	2e00      	cmp	r6, #0
 8009d52:	d04b      	beq.n	8009dec <_printf_i+0x1a8>
 8009d54:	4616      	mov	r6, r2
 8009d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8009d5e:	5dc7      	ldrb	r7, [r0, r7]
 8009d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d64:	462f      	mov	r7, r5
 8009d66:	42bb      	cmp	r3, r7
 8009d68:	460d      	mov	r5, r1
 8009d6a:	d9f4      	bls.n	8009d56 <_printf_i+0x112>
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	d10b      	bne.n	8009d88 <_printf_i+0x144>
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	07df      	lsls	r7, r3, #31
 8009d74:	d508      	bpl.n	8009d88 <_printf_i+0x144>
 8009d76:	6923      	ldr	r3, [r4, #16]
 8009d78:	6861      	ldr	r1, [r4, #4]
 8009d7a:	4299      	cmp	r1, r3
 8009d7c:	bfde      	ittt	le
 8009d7e:	2330      	movle	r3, #48	@ 0x30
 8009d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d88:	1b92      	subs	r2, r2, r6
 8009d8a:	6122      	str	r2, [r4, #16]
 8009d8c:	f8cd a000 	str.w	sl, [sp]
 8009d90:	464b      	mov	r3, r9
 8009d92:	aa03      	add	r2, sp, #12
 8009d94:	4621      	mov	r1, r4
 8009d96:	4640      	mov	r0, r8
 8009d98:	f7ff fee6 	bl	8009b68 <_printf_common>
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d14a      	bne.n	8009e36 <_printf_i+0x1f2>
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	b004      	add	sp, #16
 8009da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	f043 0320 	orr.w	r3, r3, #32
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	4833      	ldr	r0, [pc, #204]	@ (8009e80 <_printf_i+0x23c>)
 8009db4:	2778      	movs	r7, #120	@ 0x78
 8009db6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	6831      	ldr	r1, [r6, #0]
 8009dbe:	061f      	lsls	r7, r3, #24
 8009dc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8009dc4:	d402      	bmi.n	8009dcc <_printf_i+0x188>
 8009dc6:	065f      	lsls	r7, r3, #25
 8009dc8:	bf48      	it	mi
 8009dca:	b2ad      	uxthmi	r5, r5
 8009dcc:	6031      	str	r1, [r6, #0]
 8009dce:	07d9      	lsls	r1, r3, #31
 8009dd0:	bf44      	itt	mi
 8009dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8009dd6:	6023      	strmi	r3, [r4, #0]
 8009dd8:	b11d      	cbz	r5, 8009de2 <_printf_i+0x19e>
 8009dda:	2310      	movs	r3, #16
 8009ddc:	e7ac      	b.n	8009d38 <_printf_i+0xf4>
 8009dde:	4827      	ldr	r0, [pc, #156]	@ (8009e7c <_printf_i+0x238>)
 8009de0:	e7e9      	b.n	8009db6 <_printf_i+0x172>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	f023 0320 	bic.w	r3, r3, #32
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	e7f6      	b.n	8009dda <_printf_i+0x196>
 8009dec:	4616      	mov	r6, r2
 8009dee:	e7bd      	b.n	8009d6c <_printf_i+0x128>
 8009df0:	6833      	ldr	r3, [r6, #0]
 8009df2:	6825      	ldr	r5, [r4, #0]
 8009df4:	6961      	ldr	r1, [r4, #20]
 8009df6:	1d18      	adds	r0, r3, #4
 8009df8:	6030      	str	r0, [r6, #0]
 8009dfa:	062e      	lsls	r6, r5, #24
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	d501      	bpl.n	8009e04 <_printf_i+0x1c0>
 8009e00:	6019      	str	r1, [r3, #0]
 8009e02:	e002      	b.n	8009e0a <_printf_i+0x1c6>
 8009e04:	0668      	lsls	r0, r5, #25
 8009e06:	d5fb      	bpl.n	8009e00 <_printf_i+0x1bc>
 8009e08:	8019      	strh	r1, [r3, #0]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	4616      	mov	r6, r2
 8009e10:	e7bc      	b.n	8009d8c <_printf_i+0x148>
 8009e12:	6833      	ldr	r3, [r6, #0]
 8009e14:	1d1a      	adds	r2, r3, #4
 8009e16:	6032      	str	r2, [r6, #0]
 8009e18:	681e      	ldr	r6, [r3, #0]
 8009e1a:	6862      	ldr	r2, [r4, #4]
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4630      	mov	r0, r6
 8009e20:	f7f6 fa0e 	bl	8000240 <memchr>
 8009e24:	b108      	cbz	r0, 8009e2a <_printf_i+0x1e6>
 8009e26:	1b80      	subs	r0, r0, r6
 8009e28:	6060      	str	r0, [r4, #4]
 8009e2a:	6863      	ldr	r3, [r4, #4]
 8009e2c:	6123      	str	r3, [r4, #16]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e34:	e7aa      	b.n	8009d8c <_printf_i+0x148>
 8009e36:	6923      	ldr	r3, [r4, #16]
 8009e38:	4632      	mov	r2, r6
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	47d0      	blx	sl
 8009e40:	3001      	adds	r0, #1
 8009e42:	d0ad      	beq.n	8009da0 <_printf_i+0x15c>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	079b      	lsls	r3, r3, #30
 8009e48:	d413      	bmi.n	8009e72 <_printf_i+0x22e>
 8009e4a:	68e0      	ldr	r0, [r4, #12]
 8009e4c:	9b03      	ldr	r3, [sp, #12]
 8009e4e:	4298      	cmp	r0, r3
 8009e50:	bfb8      	it	lt
 8009e52:	4618      	movlt	r0, r3
 8009e54:	e7a6      	b.n	8009da4 <_printf_i+0x160>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4632      	mov	r2, r6
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	47d0      	blx	sl
 8009e60:	3001      	adds	r0, #1
 8009e62:	d09d      	beq.n	8009da0 <_printf_i+0x15c>
 8009e64:	3501      	adds	r5, #1
 8009e66:	68e3      	ldr	r3, [r4, #12]
 8009e68:	9903      	ldr	r1, [sp, #12]
 8009e6a:	1a5b      	subs	r3, r3, r1
 8009e6c:	42ab      	cmp	r3, r5
 8009e6e:	dcf2      	bgt.n	8009e56 <_printf_i+0x212>
 8009e70:	e7eb      	b.n	8009e4a <_printf_i+0x206>
 8009e72:	2500      	movs	r5, #0
 8009e74:	f104 0619 	add.w	r6, r4, #25
 8009e78:	e7f5      	b.n	8009e66 <_printf_i+0x222>
 8009e7a:	bf00      	nop
 8009e7c:	0800de57 	.word	0x0800de57
 8009e80:	0800de68 	.word	0x0800de68

08009e84 <_scanf_float>:
 8009e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e88:	b087      	sub	sp, #28
 8009e8a:	4617      	mov	r7, r2
 8009e8c:	9303      	str	r3, [sp, #12]
 8009e8e:	688b      	ldr	r3, [r1, #8]
 8009e90:	1e5a      	subs	r2, r3, #1
 8009e92:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e96:	bf81      	itttt	hi
 8009e98:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e9c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009ea0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009ea4:	608b      	strhi	r3, [r1, #8]
 8009ea6:	680b      	ldr	r3, [r1, #0]
 8009ea8:	460a      	mov	r2, r1
 8009eaa:	f04f 0500 	mov.w	r5, #0
 8009eae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009eb2:	f842 3b1c 	str.w	r3, [r2], #28
 8009eb6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009eba:	4680      	mov	r8, r0
 8009ebc:	460c      	mov	r4, r1
 8009ebe:	bf98      	it	ls
 8009ec0:	f04f 0b00 	movls.w	fp, #0
 8009ec4:	9201      	str	r2, [sp, #4]
 8009ec6:	4616      	mov	r6, r2
 8009ec8:	46aa      	mov	sl, r5
 8009eca:	46a9      	mov	r9, r5
 8009ecc:	9502      	str	r5, [sp, #8]
 8009ece:	68a2      	ldr	r2, [r4, #8]
 8009ed0:	b152      	cbz	r2, 8009ee8 <_scanf_float+0x64>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	2b4e      	cmp	r3, #78	@ 0x4e
 8009ed8:	d864      	bhi.n	8009fa4 <_scanf_float+0x120>
 8009eda:	2b40      	cmp	r3, #64	@ 0x40
 8009edc:	d83c      	bhi.n	8009f58 <_scanf_float+0xd4>
 8009ede:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009ee2:	b2c8      	uxtb	r0, r1
 8009ee4:	280e      	cmp	r0, #14
 8009ee6:	d93a      	bls.n	8009f5e <_scanf_float+0xda>
 8009ee8:	f1b9 0f00 	cmp.w	r9, #0
 8009eec:	d003      	beq.n	8009ef6 <_scanf_float+0x72>
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009efa:	f1ba 0f01 	cmp.w	sl, #1
 8009efe:	f200 8117 	bhi.w	800a130 <_scanf_float+0x2ac>
 8009f02:	9b01      	ldr	r3, [sp, #4]
 8009f04:	429e      	cmp	r6, r3
 8009f06:	f200 8108 	bhi.w	800a11a <_scanf_float+0x296>
 8009f0a:	2001      	movs	r0, #1
 8009f0c:	b007      	add	sp, #28
 8009f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f12:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009f16:	2a0d      	cmp	r2, #13
 8009f18:	d8e6      	bhi.n	8009ee8 <_scanf_float+0x64>
 8009f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8009f20 <_scanf_float+0x9c>)
 8009f1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f20:	0800a067 	.word	0x0800a067
 8009f24:	08009ee9 	.word	0x08009ee9
 8009f28:	08009ee9 	.word	0x08009ee9
 8009f2c:	08009ee9 	.word	0x08009ee9
 8009f30:	0800a0c7 	.word	0x0800a0c7
 8009f34:	0800a09f 	.word	0x0800a09f
 8009f38:	08009ee9 	.word	0x08009ee9
 8009f3c:	08009ee9 	.word	0x08009ee9
 8009f40:	0800a075 	.word	0x0800a075
 8009f44:	08009ee9 	.word	0x08009ee9
 8009f48:	08009ee9 	.word	0x08009ee9
 8009f4c:	08009ee9 	.word	0x08009ee9
 8009f50:	08009ee9 	.word	0x08009ee9
 8009f54:	0800a02d 	.word	0x0800a02d
 8009f58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009f5c:	e7db      	b.n	8009f16 <_scanf_float+0x92>
 8009f5e:	290e      	cmp	r1, #14
 8009f60:	d8c2      	bhi.n	8009ee8 <_scanf_float+0x64>
 8009f62:	a001      	add	r0, pc, #4	@ (adr r0, 8009f68 <_scanf_float+0xe4>)
 8009f64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f68:	0800a01d 	.word	0x0800a01d
 8009f6c:	08009ee9 	.word	0x08009ee9
 8009f70:	0800a01d 	.word	0x0800a01d
 8009f74:	0800a0b3 	.word	0x0800a0b3
 8009f78:	08009ee9 	.word	0x08009ee9
 8009f7c:	08009fc5 	.word	0x08009fc5
 8009f80:	0800a003 	.word	0x0800a003
 8009f84:	0800a003 	.word	0x0800a003
 8009f88:	0800a003 	.word	0x0800a003
 8009f8c:	0800a003 	.word	0x0800a003
 8009f90:	0800a003 	.word	0x0800a003
 8009f94:	0800a003 	.word	0x0800a003
 8009f98:	0800a003 	.word	0x0800a003
 8009f9c:	0800a003 	.word	0x0800a003
 8009fa0:	0800a003 	.word	0x0800a003
 8009fa4:	2b6e      	cmp	r3, #110	@ 0x6e
 8009fa6:	d809      	bhi.n	8009fbc <_scanf_float+0x138>
 8009fa8:	2b60      	cmp	r3, #96	@ 0x60
 8009faa:	d8b2      	bhi.n	8009f12 <_scanf_float+0x8e>
 8009fac:	2b54      	cmp	r3, #84	@ 0x54
 8009fae:	d07b      	beq.n	800a0a8 <_scanf_float+0x224>
 8009fb0:	2b59      	cmp	r3, #89	@ 0x59
 8009fb2:	d199      	bne.n	8009ee8 <_scanf_float+0x64>
 8009fb4:	2d07      	cmp	r5, #7
 8009fb6:	d197      	bne.n	8009ee8 <_scanf_float+0x64>
 8009fb8:	2508      	movs	r5, #8
 8009fba:	e02c      	b.n	800a016 <_scanf_float+0x192>
 8009fbc:	2b74      	cmp	r3, #116	@ 0x74
 8009fbe:	d073      	beq.n	800a0a8 <_scanf_float+0x224>
 8009fc0:	2b79      	cmp	r3, #121	@ 0x79
 8009fc2:	e7f6      	b.n	8009fb2 <_scanf_float+0x12e>
 8009fc4:	6821      	ldr	r1, [r4, #0]
 8009fc6:	05c8      	lsls	r0, r1, #23
 8009fc8:	d51b      	bpl.n	800a002 <_scanf_float+0x17e>
 8009fca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009fce:	6021      	str	r1, [r4, #0]
 8009fd0:	f109 0901 	add.w	r9, r9, #1
 8009fd4:	f1bb 0f00 	cmp.w	fp, #0
 8009fd8:	d003      	beq.n	8009fe2 <_scanf_float+0x15e>
 8009fda:	3201      	adds	r2, #1
 8009fdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fe0:	60a2      	str	r2, [r4, #8]
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	60a3      	str	r3, [r4, #8]
 8009fe8:	6923      	ldr	r3, [r4, #16]
 8009fea:	3301      	adds	r3, #1
 8009fec:	6123      	str	r3, [r4, #16]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	607b      	str	r3, [r7, #4]
 8009ff6:	f340 8087 	ble.w	800a108 <_scanf_float+0x284>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	e765      	b.n	8009ece <_scanf_float+0x4a>
 800a002:	eb1a 0105 	adds.w	r1, sl, r5
 800a006:	f47f af6f 	bne.w	8009ee8 <_scanf_float+0x64>
 800a00a:	6822      	ldr	r2, [r4, #0]
 800a00c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a010:	6022      	str	r2, [r4, #0]
 800a012:	460d      	mov	r5, r1
 800a014:	468a      	mov	sl, r1
 800a016:	f806 3b01 	strb.w	r3, [r6], #1
 800a01a:	e7e2      	b.n	8009fe2 <_scanf_float+0x15e>
 800a01c:	6822      	ldr	r2, [r4, #0]
 800a01e:	0610      	lsls	r0, r2, #24
 800a020:	f57f af62 	bpl.w	8009ee8 <_scanf_float+0x64>
 800a024:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a028:	6022      	str	r2, [r4, #0]
 800a02a:	e7f4      	b.n	800a016 <_scanf_float+0x192>
 800a02c:	f1ba 0f00 	cmp.w	sl, #0
 800a030:	d10e      	bne.n	800a050 <_scanf_float+0x1cc>
 800a032:	f1b9 0f00 	cmp.w	r9, #0
 800a036:	d10e      	bne.n	800a056 <_scanf_float+0x1d2>
 800a038:	6822      	ldr	r2, [r4, #0]
 800a03a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a03e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a042:	d108      	bne.n	800a056 <_scanf_float+0x1d2>
 800a044:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a048:	6022      	str	r2, [r4, #0]
 800a04a:	f04f 0a01 	mov.w	sl, #1
 800a04e:	e7e2      	b.n	800a016 <_scanf_float+0x192>
 800a050:	f1ba 0f02 	cmp.w	sl, #2
 800a054:	d055      	beq.n	800a102 <_scanf_float+0x27e>
 800a056:	2d01      	cmp	r5, #1
 800a058:	d002      	beq.n	800a060 <_scanf_float+0x1dc>
 800a05a:	2d04      	cmp	r5, #4
 800a05c:	f47f af44 	bne.w	8009ee8 <_scanf_float+0x64>
 800a060:	3501      	adds	r5, #1
 800a062:	b2ed      	uxtb	r5, r5
 800a064:	e7d7      	b.n	800a016 <_scanf_float+0x192>
 800a066:	f1ba 0f01 	cmp.w	sl, #1
 800a06a:	f47f af3d 	bne.w	8009ee8 <_scanf_float+0x64>
 800a06e:	f04f 0a02 	mov.w	sl, #2
 800a072:	e7d0      	b.n	800a016 <_scanf_float+0x192>
 800a074:	b97d      	cbnz	r5, 800a096 <_scanf_float+0x212>
 800a076:	f1b9 0f00 	cmp.w	r9, #0
 800a07a:	f47f af38 	bne.w	8009eee <_scanf_float+0x6a>
 800a07e:	6822      	ldr	r2, [r4, #0]
 800a080:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a084:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a088:	f040 8108 	bne.w	800a29c <_scanf_float+0x418>
 800a08c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a090:	6022      	str	r2, [r4, #0]
 800a092:	2501      	movs	r5, #1
 800a094:	e7bf      	b.n	800a016 <_scanf_float+0x192>
 800a096:	2d03      	cmp	r5, #3
 800a098:	d0e2      	beq.n	800a060 <_scanf_float+0x1dc>
 800a09a:	2d05      	cmp	r5, #5
 800a09c:	e7de      	b.n	800a05c <_scanf_float+0x1d8>
 800a09e:	2d02      	cmp	r5, #2
 800a0a0:	f47f af22 	bne.w	8009ee8 <_scanf_float+0x64>
 800a0a4:	2503      	movs	r5, #3
 800a0a6:	e7b6      	b.n	800a016 <_scanf_float+0x192>
 800a0a8:	2d06      	cmp	r5, #6
 800a0aa:	f47f af1d 	bne.w	8009ee8 <_scanf_float+0x64>
 800a0ae:	2507      	movs	r5, #7
 800a0b0:	e7b1      	b.n	800a016 <_scanf_float+0x192>
 800a0b2:	6822      	ldr	r2, [r4, #0]
 800a0b4:	0591      	lsls	r1, r2, #22
 800a0b6:	f57f af17 	bpl.w	8009ee8 <_scanf_float+0x64>
 800a0ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a0be:	6022      	str	r2, [r4, #0]
 800a0c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0c4:	e7a7      	b.n	800a016 <_scanf_float+0x192>
 800a0c6:	6822      	ldr	r2, [r4, #0]
 800a0c8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a0cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a0d0:	d006      	beq.n	800a0e0 <_scanf_float+0x25c>
 800a0d2:	0550      	lsls	r0, r2, #21
 800a0d4:	f57f af08 	bpl.w	8009ee8 <_scanf_float+0x64>
 800a0d8:	f1b9 0f00 	cmp.w	r9, #0
 800a0dc:	f000 80de 	beq.w	800a29c <_scanf_float+0x418>
 800a0e0:	0591      	lsls	r1, r2, #22
 800a0e2:	bf58      	it	pl
 800a0e4:	9902      	ldrpl	r1, [sp, #8]
 800a0e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a0ea:	bf58      	it	pl
 800a0ec:	eba9 0101 	subpl.w	r1, r9, r1
 800a0f0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a0f4:	bf58      	it	pl
 800a0f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a0fa:	6022      	str	r2, [r4, #0]
 800a0fc:	f04f 0900 	mov.w	r9, #0
 800a100:	e789      	b.n	800a016 <_scanf_float+0x192>
 800a102:	f04f 0a03 	mov.w	sl, #3
 800a106:	e786      	b.n	800a016 <_scanf_float+0x192>
 800a108:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a10c:	4639      	mov	r1, r7
 800a10e:	4640      	mov	r0, r8
 800a110:	4798      	blx	r3
 800a112:	2800      	cmp	r0, #0
 800a114:	f43f aedb 	beq.w	8009ece <_scanf_float+0x4a>
 800a118:	e6e6      	b.n	8009ee8 <_scanf_float+0x64>
 800a11a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a11e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a122:	463a      	mov	r2, r7
 800a124:	4640      	mov	r0, r8
 800a126:	4798      	blx	r3
 800a128:	6923      	ldr	r3, [r4, #16]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	6123      	str	r3, [r4, #16]
 800a12e:	e6e8      	b.n	8009f02 <_scanf_float+0x7e>
 800a130:	1e6b      	subs	r3, r5, #1
 800a132:	2b06      	cmp	r3, #6
 800a134:	d824      	bhi.n	800a180 <_scanf_float+0x2fc>
 800a136:	2d02      	cmp	r5, #2
 800a138:	d836      	bhi.n	800a1a8 <_scanf_float+0x324>
 800a13a:	9b01      	ldr	r3, [sp, #4]
 800a13c:	429e      	cmp	r6, r3
 800a13e:	f67f aee4 	bls.w	8009f0a <_scanf_float+0x86>
 800a142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a146:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a14a:	463a      	mov	r2, r7
 800a14c:	4640      	mov	r0, r8
 800a14e:	4798      	blx	r3
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	3b01      	subs	r3, #1
 800a154:	6123      	str	r3, [r4, #16]
 800a156:	e7f0      	b.n	800a13a <_scanf_float+0x2b6>
 800a158:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a15c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a160:	463a      	mov	r2, r7
 800a162:	4640      	mov	r0, r8
 800a164:	4798      	blx	r3
 800a166:	6923      	ldr	r3, [r4, #16]
 800a168:	3b01      	subs	r3, #1
 800a16a:	6123      	str	r3, [r4, #16]
 800a16c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a170:	fa5f fa8a 	uxtb.w	sl, sl
 800a174:	f1ba 0f02 	cmp.w	sl, #2
 800a178:	d1ee      	bne.n	800a158 <_scanf_float+0x2d4>
 800a17a:	3d03      	subs	r5, #3
 800a17c:	b2ed      	uxtb	r5, r5
 800a17e:	1b76      	subs	r6, r6, r5
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	05da      	lsls	r2, r3, #23
 800a184:	d530      	bpl.n	800a1e8 <_scanf_float+0x364>
 800a186:	055b      	lsls	r3, r3, #21
 800a188:	d511      	bpl.n	800a1ae <_scanf_float+0x32a>
 800a18a:	9b01      	ldr	r3, [sp, #4]
 800a18c:	429e      	cmp	r6, r3
 800a18e:	f67f aebc 	bls.w	8009f0a <_scanf_float+0x86>
 800a192:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a196:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a19a:	463a      	mov	r2, r7
 800a19c:	4640      	mov	r0, r8
 800a19e:	4798      	blx	r3
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	6123      	str	r3, [r4, #16]
 800a1a6:	e7f0      	b.n	800a18a <_scanf_float+0x306>
 800a1a8:	46aa      	mov	sl, r5
 800a1aa:	46b3      	mov	fp, r6
 800a1ac:	e7de      	b.n	800a16c <_scanf_float+0x2e8>
 800a1ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	2965      	cmp	r1, #101	@ 0x65
 800a1b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1ba:	f106 35ff 	add.w	r5, r6, #4294967295
 800a1be:	6123      	str	r3, [r4, #16]
 800a1c0:	d00c      	beq.n	800a1dc <_scanf_float+0x358>
 800a1c2:	2945      	cmp	r1, #69	@ 0x45
 800a1c4:	d00a      	beq.n	800a1dc <_scanf_float+0x358>
 800a1c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1ca:	463a      	mov	r2, r7
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	4798      	blx	r3
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	1eb5      	subs	r5, r6, #2
 800a1da:	6123      	str	r3, [r4, #16]
 800a1dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1e0:	463a      	mov	r2, r7
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	4798      	blx	r3
 800a1e6:	462e      	mov	r6, r5
 800a1e8:	6822      	ldr	r2, [r4, #0]
 800a1ea:	f012 0210 	ands.w	r2, r2, #16
 800a1ee:	d001      	beq.n	800a1f4 <_scanf_float+0x370>
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	e68b      	b.n	8009f0c <_scanf_float+0x88>
 800a1f4:	7032      	strb	r2, [r6, #0]
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a1fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a200:	d11c      	bne.n	800a23c <_scanf_float+0x3b8>
 800a202:	9b02      	ldr	r3, [sp, #8]
 800a204:	454b      	cmp	r3, r9
 800a206:	eba3 0209 	sub.w	r2, r3, r9
 800a20a:	d123      	bne.n	800a254 <_scanf_float+0x3d0>
 800a20c:	9901      	ldr	r1, [sp, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	4640      	mov	r0, r8
 800a212:	f002 fc71 	bl	800caf8 <_strtod_r>
 800a216:	9b03      	ldr	r3, [sp, #12]
 800a218:	6821      	ldr	r1, [r4, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f011 0f02 	tst.w	r1, #2
 800a220:	ec57 6b10 	vmov	r6, r7, d0
 800a224:	f103 0204 	add.w	r2, r3, #4
 800a228:	d01f      	beq.n	800a26a <_scanf_float+0x3e6>
 800a22a:	9903      	ldr	r1, [sp, #12]
 800a22c:	600a      	str	r2, [r1, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	e9c3 6700 	strd	r6, r7, [r3]
 800a234:	68e3      	ldr	r3, [r4, #12]
 800a236:	3301      	adds	r3, #1
 800a238:	60e3      	str	r3, [r4, #12]
 800a23a:	e7d9      	b.n	800a1f0 <_scanf_float+0x36c>
 800a23c:	9b04      	ldr	r3, [sp, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0e4      	beq.n	800a20c <_scanf_float+0x388>
 800a242:	9905      	ldr	r1, [sp, #20]
 800a244:	230a      	movs	r3, #10
 800a246:	3101      	adds	r1, #1
 800a248:	4640      	mov	r0, r8
 800a24a:	f7ff f9b7 	bl	80095bc <_strtol_r>
 800a24e:	9b04      	ldr	r3, [sp, #16]
 800a250:	9e05      	ldr	r6, [sp, #20]
 800a252:	1ac2      	subs	r2, r0, r3
 800a254:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a258:	429e      	cmp	r6, r3
 800a25a:	bf28      	it	cs
 800a25c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a260:	4910      	ldr	r1, [pc, #64]	@ (800a2a4 <_scanf_float+0x420>)
 800a262:	4630      	mov	r0, r6
 800a264:	f000 f8e4 	bl	800a430 <siprintf>
 800a268:	e7d0      	b.n	800a20c <_scanf_float+0x388>
 800a26a:	f011 0f04 	tst.w	r1, #4
 800a26e:	9903      	ldr	r1, [sp, #12]
 800a270:	600a      	str	r2, [r1, #0]
 800a272:	d1dc      	bne.n	800a22e <_scanf_float+0x3aa>
 800a274:	681d      	ldr	r5, [r3, #0]
 800a276:	4632      	mov	r2, r6
 800a278:	463b      	mov	r3, r7
 800a27a:	4630      	mov	r0, r6
 800a27c:	4639      	mov	r1, r7
 800a27e:	f7f6 fc8d 	bl	8000b9c <__aeabi_dcmpun>
 800a282:	b128      	cbz	r0, 800a290 <_scanf_float+0x40c>
 800a284:	4808      	ldr	r0, [pc, #32]	@ (800a2a8 <_scanf_float+0x424>)
 800a286:	f000 fa13 	bl	800a6b0 <nanf>
 800a28a:	ed85 0a00 	vstr	s0, [r5]
 800a28e:	e7d1      	b.n	800a234 <_scanf_float+0x3b0>
 800a290:	4630      	mov	r0, r6
 800a292:	4639      	mov	r1, r7
 800a294:	f7f6 fce0 	bl	8000c58 <__aeabi_d2f>
 800a298:	6028      	str	r0, [r5, #0]
 800a29a:	e7cb      	b.n	800a234 <_scanf_float+0x3b0>
 800a29c:	f04f 0900 	mov.w	r9, #0
 800a2a0:	e629      	b.n	8009ef6 <_scanf_float+0x72>
 800a2a2:	bf00      	nop
 800a2a4:	0800de79 	.word	0x0800de79
 800a2a8:	0800df2a 	.word	0x0800df2a

0800a2ac <std>:
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	b510      	push	{r4, lr}
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a2b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2ba:	6083      	str	r3, [r0, #8]
 800a2bc:	8181      	strh	r1, [r0, #12]
 800a2be:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2c0:	81c2      	strh	r2, [r0, #14]
 800a2c2:	6183      	str	r3, [r0, #24]
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	2208      	movs	r2, #8
 800a2c8:	305c      	adds	r0, #92	@ 0x5c
 800a2ca:	f000 f914 	bl	800a4f6 <memset>
 800a2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a304 <std+0x58>)
 800a2d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a308 <std+0x5c>)
 800a2d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a30c <std+0x60>)
 800a2d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2da:	4b0d      	ldr	r3, [pc, #52]	@ (800a310 <std+0x64>)
 800a2dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2de:	4b0d      	ldr	r3, [pc, #52]	@ (800a314 <std+0x68>)
 800a2e0:	6224      	str	r4, [r4, #32]
 800a2e2:	429c      	cmp	r4, r3
 800a2e4:	d006      	beq.n	800a2f4 <std+0x48>
 800a2e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2ea:	4294      	cmp	r4, r2
 800a2ec:	d002      	beq.n	800a2f4 <std+0x48>
 800a2ee:	33d0      	adds	r3, #208	@ 0xd0
 800a2f0:	429c      	cmp	r4, r3
 800a2f2:	d105      	bne.n	800a300 <std+0x54>
 800a2f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2fc:	f000 b9d4 	b.w	800a6a8 <__retarget_lock_init_recursive>
 800a300:	bd10      	pop	{r4, pc}
 800a302:	bf00      	nop
 800a304:	0800a471 	.word	0x0800a471
 800a308:	0800a493 	.word	0x0800a493
 800a30c:	0800a4cb 	.word	0x0800a4cb
 800a310:	0800a4ef 	.word	0x0800a4ef
 800a314:	2000071c 	.word	0x2000071c

0800a318 <stdio_exit_handler>:
 800a318:	4a02      	ldr	r2, [pc, #8]	@ (800a324 <stdio_exit_handler+0xc>)
 800a31a:	4903      	ldr	r1, [pc, #12]	@ (800a328 <stdio_exit_handler+0x10>)
 800a31c:	4803      	ldr	r0, [pc, #12]	@ (800a32c <stdio_exit_handler+0x14>)
 800a31e:	f000 b869 	b.w	800a3f4 <_fwalk_sglue>
 800a322:	bf00      	nop
 800a324:	200001f8 	.word	0x200001f8
 800a328:	0800cebd 	.word	0x0800cebd
 800a32c:	20000208 	.word	0x20000208

0800a330 <cleanup_stdio>:
 800a330:	6841      	ldr	r1, [r0, #4]
 800a332:	4b0c      	ldr	r3, [pc, #48]	@ (800a364 <cleanup_stdio+0x34>)
 800a334:	4299      	cmp	r1, r3
 800a336:	b510      	push	{r4, lr}
 800a338:	4604      	mov	r4, r0
 800a33a:	d001      	beq.n	800a340 <cleanup_stdio+0x10>
 800a33c:	f002 fdbe 	bl	800cebc <_fflush_r>
 800a340:	68a1      	ldr	r1, [r4, #8]
 800a342:	4b09      	ldr	r3, [pc, #36]	@ (800a368 <cleanup_stdio+0x38>)
 800a344:	4299      	cmp	r1, r3
 800a346:	d002      	beq.n	800a34e <cleanup_stdio+0x1e>
 800a348:	4620      	mov	r0, r4
 800a34a:	f002 fdb7 	bl	800cebc <_fflush_r>
 800a34e:	68e1      	ldr	r1, [r4, #12]
 800a350:	4b06      	ldr	r3, [pc, #24]	@ (800a36c <cleanup_stdio+0x3c>)
 800a352:	4299      	cmp	r1, r3
 800a354:	d004      	beq.n	800a360 <cleanup_stdio+0x30>
 800a356:	4620      	mov	r0, r4
 800a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35c:	f002 bdae 	b.w	800cebc <_fflush_r>
 800a360:	bd10      	pop	{r4, pc}
 800a362:	bf00      	nop
 800a364:	2000071c 	.word	0x2000071c
 800a368:	20000784 	.word	0x20000784
 800a36c:	200007ec 	.word	0x200007ec

0800a370 <global_stdio_init.part.0>:
 800a370:	b510      	push	{r4, lr}
 800a372:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a0 <global_stdio_init.part.0+0x30>)
 800a374:	4c0b      	ldr	r4, [pc, #44]	@ (800a3a4 <global_stdio_init.part.0+0x34>)
 800a376:	4a0c      	ldr	r2, [pc, #48]	@ (800a3a8 <global_stdio_init.part.0+0x38>)
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	4620      	mov	r0, r4
 800a37c:	2200      	movs	r2, #0
 800a37e:	2104      	movs	r1, #4
 800a380:	f7ff ff94 	bl	800a2ac <std>
 800a384:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a388:	2201      	movs	r2, #1
 800a38a:	2109      	movs	r1, #9
 800a38c:	f7ff ff8e 	bl	800a2ac <std>
 800a390:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a394:	2202      	movs	r2, #2
 800a396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a39a:	2112      	movs	r1, #18
 800a39c:	f7ff bf86 	b.w	800a2ac <std>
 800a3a0:	20000854 	.word	0x20000854
 800a3a4:	2000071c 	.word	0x2000071c
 800a3a8:	0800a319 	.word	0x0800a319

0800a3ac <__sfp_lock_acquire>:
 800a3ac:	4801      	ldr	r0, [pc, #4]	@ (800a3b4 <__sfp_lock_acquire+0x8>)
 800a3ae:	f000 b97c 	b.w	800a6aa <__retarget_lock_acquire_recursive>
 800a3b2:	bf00      	nop
 800a3b4:	2000085d 	.word	0x2000085d

0800a3b8 <__sfp_lock_release>:
 800a3b8:	4801      	ldr	r0, [pc, #4]	@ (800a3c0 <__sfp_lock_release+0x8>)
 800a3ba:	f000 b977 	b.w	800a6ac <__retarget_lock_release_recursive>
 800a3be:	bf00      	nop
 800a3c0:	2000085d 	.word	0x2000085d

0800a3c4 <__sinit>:
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	f7ff fff0 	bl	800a3ac <__sfp_lock_acquire>
 800a3cc:	6a23      	ldr	r3, [r4, #32]
 800a3ce:	b11b      	cbz	r3, 800a3d8 <__sinit+0x14>
 800a3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d4:	f7ff bff0 	b.w	800a3b8 <__sfp_lock_release>
 800a3d8:	4b04      	ldr	r3, [pc, #16]	@ (800a3ec <__sinit+0x28>)
 800a3da:	6223      	str	r3, [r4, #32]
 800a3dc:	4b04      	ldr	r3, [pc, #16]	@ (800a3f0 <__sinit+0x2c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1f5      	bne.n	800a3d0 <__sinit+0xc>
 800a3e4:	f7ff ffc4 	bl	800a370 <global_stdio_init.part.0>
 800a3e8:	e7f2      	b.n	800a3d0 <__sinit+0xc>
 800a3ea:	bf00      	nop
 800a3ec:	0800a331 	.word	0x0800a331
 800a3f0:	20000854 	.word	0x20000854

0800a3f4 <_fwalk_sglue>:
 800a3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f8:	4607      	mov	r7, r0
 800a3fa:	4688      	mov	r8, r1
 800a3fc:	4614      	mov	r4, r2
 800a3fe:	2600      	movs	r6, #0
 800a400:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a404:	f1b9 0901 	subs.w	r9, r9, #1
 800a408:	d505      	bpl.n	800a416 <_fwalk_sglue+0x22>
 800a40a:	6824      	ldr	r4, [r4, #0]
 800a40c:	2c00      	cmp	r4, #0
 800a40e:	d1f7      	bne.n	800a400 <_fwalk_sglue+0xc>
 800a410:	4630      	mov	r0, r6
 800a412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a416:	89ab      	ldrh	r3, [r5, #12]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d907      	bls.n	800a42c <_fwalk_sglue+0x38>
 800a41c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a420:	3301      	adds	r3, #1
 800a422:	d003      	beq.n	800a42c <_fwalk_sglue+0x38>
 800a424:	4629      	mov	r1, r5
 800a426:	4638      	mov	r0, r7
 800a428:	47c0      	blx	r8
 800a42a:	4306      	orrs	r6, r0
 800a42c:	3568      	adds	r5, #104	@ 0x68
 800a42e:	e7e9      	b.n	800a404 <_fwalk_sglue+0x10>

0800a430 <siprintf>:
 800a430:	b40e      	push	{r1, r2, r3}
 800a432:	b500      	push	{lr}
 800a434:	b09c      	sub	sp, #112	@ 0x70
 800a436:	ab1d      	add	r3, sp, #116	@ 0x74
 800a438:	9002      	str	r0, [sp, #8]
 800a43a:	9006      	str	r0, [sp, #24]
 800a43c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a440:	4809      	ldr	r0, [pc, #36]	@ (800a468 <siprintf+0x38>)
 800a442:	9107      	str	r1, [sp, #28]
 800a444:	9104      	str	r1, [sp, #16]
 800a446:	4909      	ldr	r1, [pc, #36]	@ (800a46c <siprintf+0x3c>)
 800a448:	f853 2b04 	ldr.w	r2, [r3], #4
 800a44c:	9105      	str	r1, [sp, #20]
 800a44e:	6800      	ldr	r0, [r0, #0]
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	a902      	add	r1, sp, #8
 800a454:	f002 fbb2 	bl	800cbbc <_svfiprintf_r>
 800a458:	9b02      	ldr	r3, [sp, #8]
 800a45a:	2200      	movs	r2, #0
 800a45c:	701a      	strb	r2, [r3, #0]
 800a45e:	b01c      	add	sp, #112	@ 0x70
 800a460:	f85d eb04 	ldr.w	lr, [sp], #4
 800a464:	b003      	add	sp, #12
 800a466:	4770      	bx	lr
 800a468:	20000204 	.word	0x20000204
 800a46c:	ffff0208 	.word	0xffff0208

0800a470 <__sread>:
 800a470:	b510      	push	{r4, lr}
 800a472:	460c      	mov	r4, r1
 800a474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a478:	f000 f8c8 	bl	800a60c <_read_r>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	bfab      	itete	ge
 800a480:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a482:	89a3      	ldrhlt	r3, [r4, #12]
 800a484:	181b      	addge	r3, r3, r0
 800a486:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a48a:	bfac      	ite	ge
 800a48c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a48e:	81a3      	strhlt	r3, [r4, #12]
 800a490:	bd10      	pop	{r4, pc}

0800a492 <__swrite>:
 800a492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a496:	461f      	mov	r7, r3
 800a498:	898b      	ldrh	r3, [r1, #12]
 800a49a:	05db      	lsls	r3, r3, #23
 800a49c:	4605      	mov	r5, r0
 800a49e:	460c      	mov	r4, r1
 800a4a0:	4616      	mov	r6, r2
 800a4a2:	d505      	bpl.n	800a4b0 <__swrite+0x1e>
 800a4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f000 f89c 	bl	800a5e8 <_lseek_r>
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4ba:	81a3      	strh	r3, [r4, #12]
 800a4bc:	4632      	mov	r2, r6
 800a4be:	463b      	mov	r3, r7
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c6:	f000 b8b3 	b.w	800a630 <_write_r>

0800a4ca <__sseek>:
 800a4ca:	b510      	push	{r4, lr}
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d2:	f000 f889 	bl	800a5e8 <_lseek_r>
 800a4d6:	1c43      	adds	r3, r0, #1
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	bf15      	itete	ne
 800a4dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4e6:	81a3      	strheq	r3, [r4, #12]
 800a4e8:	bf18      	it	ne
 800a4ea:	81a3      	strhne	r3, [r4, #12]
 800a4ec:	bd10      	pop	{r4, pc}

0800a4ee <__sclose>:
 800a4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f2:	f000 b869 	b.w	800a5c8 <_close_r>

0800a4f6 <memset>:
 800a4f6:	4402      	add	r2, r0
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d100      	bne.n	800a500 <memset+0xa>
 800a4fe:	4770      	bx	lr
 800a500:	f803 1b01 	strb.w	r1, [r3], #1
 800a504:	e7f9      	b.n	800a4fa <memset+0x4>
	...

0800a508 <strtok>:
 800a508:	4b16      	ldr	r3, [pc, #88]	@ (800a564 <strtok+0x5c>)
 800a50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50e:	681f      	ldr	r7, [r3, #0]
 800a510:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a512:	4605      	mov	r5, r0
 800a514:	460e      	mov	r6, r1
 800a516:	b9ec      	cbnz	r4, 800a554 <strtok+0x4c>
 800a518:	2050      	movs	r0, #80	@ 0x50
 800a51a:	f000 ff83 	bl	800b424 <malloc>
 800a51e:	4602      	mov	r2, r0
 800a520:	6478      	str	r0, [r7, #68]	@ 0x44
 800a522:	b920      	cbnz	r0, 800a52e <strtok+0x26>
 800a524:	4b10      	ldr	r3, [pc, #64]	@ (800a568 <strtok+0x60>)
 800a526:	4811      	ldr	r0, [pc, #68]	@ (800a56c <strtok+0x64>)
 800a528:	215b      	movs	r1, #91	@ 0x5b
 800a52a:	f000 f8c7 	bl	800a6bc <__assert_func>
 800a52e:	e9c0 4400 	strd	r4, r4, [r0]
 800a532:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a536:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a53a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a53e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a542:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a546:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a54a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a54e:	6184      	str	r4, [r0, #24]
 800a550:	7704      	strb	r4, [r0, #28]
 800a552:	6244      	str	r4, [r0, #36]	@ 0x24
 800a554:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a556:	4631      	mov	r1, r6
 800a558:	4628      	mov	r0, r5
 800a55a:	2301      	movs	r3, #1
 800a55c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	f000 b806 	b.w	800a570 <__strtok_r>
 800a564:	20000204 	.word	0x20000204
 800a568:	0800de7e 	.word	0x0800de7e
 800a56c:	0800de95 	.word	0x0800de95

0800a570 <__strtok_r>:
 800a570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a572:	4604      	mov	r4, r0
 800a574:	b908      	cbnz	r0, 800a57a <__strtok_r+0xa>
 800a576:	6814      	ldr	r4, [r2, #0]
 800a578:	b144      	cbz	r4, 800a58c <__strtok_r+0x1c>
 800a57a:	4620      	mov	r0, r4
 800a57c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a580:	460f      	mov	r7, r1
 800a582:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a586:	b91e      	cbnz	r6, 800a590 <__strtok_r+0x20>
 800a588:	b965      	cbnz	r5, 800a5a4 <__strtok_r+0x34>
 800a58a:	6015      	str	r5, [r2, #0]
 800a58c:	2000      	movs	r0, #0
 800a58e:	e005      	b.n	800a59c <__strtok_r+0x2c>
 800a590:	42b5      	cmp	r5, r6
 800a592:	d1f6      	bne.n	800a582 <__strtok_r+0x12>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1f0      	bne.n	800a57a <__strtok_r+0xa>
 800a598:	6014      	str	r4, [r2, #0]
 800a59a:	7003      	strb	r3, [r0, #0]
 800a59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a59e:	461c      	mov	r4, r3
 800a5a0:	e00c      	b.n	800a5bc <__strtok_r+0x4c>
 800a5a2:	b915      	cbnz	r5, 800a5aa <__strtok_r+0x3a>
 800a5a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5a8:	460e      	mov	r6, r1
 800a5aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a5ae:	42ab      	cmp	r3, r5
 800a5b0:	d1f7      	bne.n	800a5a2 <__strtok_r+0x32>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d0f3      	beq.n	800a59e <__strtok_r+0x2e>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a5bc:	6014      	str	r4, [r2, #0]
 800a5be:	e7ed      	b.n	800a59c <__strtok_r+0x2c>

0800a5c0 <_localeconv_r>:
 800a5c0:	4800      	ldr	r0, [pc, #0]	@ (800a5c4 <_localeconv_r+0x4>)
 800a5c2:	4770      	bx	lr
 800a5c4:	20000344 	.word	0x20000344

0800a5c8 <_close_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d06      	ldr	r5, [pc, #24]	@ (800a5e4 <_close_r+0x1c>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	602b      	str	r3, [r5, #0]
 800a5d4:	f7f7 ffa2 	bl	800251c <_close>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_close_r+0x1a>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_close_r+0x1a>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	20000858 	.word	0x20000858

0800a5e8 <_lseek_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d07      	ldr	r5, [pc, #28]	@ (800a608 <_lseek_r+0x20>)
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	4608      	mov	r0, r1
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	602a      	str	r2, [r5, #0]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f7f7 ffb7 	bl	800256a <_lseek>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	d102      	bne.n	800a606 <_lseek_r+0x1e>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	b103      	cbz	r3, 800a606 <_lseek_r+0x1e>
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	20000858 	.word	0x20000858

0800a60c <_read_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d07      	ldr	r5, [pc, #28]	@ (800a62c <_read_r+0x20>)
 800a610:	4604      	mov	r4, r0
 800a612:	4608      	mov	r0, r1
 800a614:	4611      	mov	r1, r2
 800a616:	2200      	movs	r2, #0
 800a618:	602a      	str	r2, [r5, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	f7f7 ff45 	bl	80024aa <_read>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_read_r+0x1e>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	b103      	cbz	r3, 800a62a <_read_r+0x1e>
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	20000858 	.word	0x20000858

0800a630 <_write_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d07      	ldr	r5, [pc, #28]	@ (800a650 <_write_r+0x20>)
 800a634:	4604      	mov	r4, r0
 800a636:	4608      	mov	r0, r1
 800a638:	4611      	mov	r1, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f7f7 ff50 	bl	80024e4 <_write>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_write_r+0x1e>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_write_r+0x1e>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20000858 	.word	0x20000858

0800a654 <__errno>:
 800a654:	4b01      	ldr	r3, [pc, #4]	@ (800a65c <__errno+0x8>)
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20000204 	.word	0x20000204

0800a660 <__libc_init_array>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	4d0d      	ldr	r5, [pc, #52]	@ (800a698 <__libc_init_array+0x38>)
 800a664:	4c0d      	ldr	r4, [pc, #52]	@ (800a69c <__libc_init_array+0x3c>)
 800a666:	1b64      	subs	r4, r4, r5
 800a668:	10a4      	asrs	r4, r4, #2
 800a66a:	2600      	movs	r6, #0
 800a66c:	42a6      	cmp	r6, r4
 800a66e:	d109      	bne.n	800a684 <__libc_init_array+0x24>
 800a670:	4d0b      	ldr	r5, [pc, #44]	@ (800a6a0 <__libc_init_array+0x40>)
 800a672:	4c0c      	ldr	r4, [pc, #48]	@ (800a6a4 <__libc_init_array+0x44>)
 800a674:	f003 faf6 	bl	800dc64 <_init>
 800a678:	1b64      	subs	r4, r4, r5
 800a67a:	10a4      	asrs	r4, r4, #2
 800a67c:	2600      	movs	r6, #0
 800a67e:	42a6      	cmp	r6, r4
 800a680:	d105      	bne.n	800a68e <__libc_init_array+0x2e>
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	f855 3b04 	ldr.w	r3, [r5], #4
 800a688:	4798      	blx	r3
 800a68a:	3601      	adds	r6, #1
 800a68c:	e7ee      	b.n	800a66c <__libc_init_array+0xc>
 800a68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a692:	4798      	blx	r3
 800a694:	3601      	adds	r6, #1
 800a696:	e7f2      	b.n	800a67e <__libc_init_array+0x1e>
 800a698:	0800e1d4 	.word	0x0800e1d4
 800a69c:	0800e1d4 	.word	0x0800e1d4
 800a6a0:	0800e1d4 	.word	0x0800e1d4
 800a6a4:	0800e1d8 	.word	0x0800e1d8

0800a6a8 <__retarget_lock_init_recursive>:
 800a6a8:	4770      	bx	lr

0800a6aa <__retarget_lock_acquire_recursive>:
 800a6aa:	4770      	bx	lr

0800a6ac <__retarget_lock_release_recursive>:
 800a6ac:	4770      	bx	lr
	...

0800a6b0 <nanf>:
 800a6b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a6b8 <nanf+0x8>
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	7fc00000 	.word	0x7fc00000

0800a6bc <__assert_func>:
 800a6bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6be:	4614      	mov	r4, r2
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	4b09      	ldr	r3, [pc, #36]	@ (800a6e8 <__assert_func+0x2c>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	68d8      	ldr	r0, [r3, #12]
 800a6ca:	b954      	cbnz	r4, 800a6e2 <__assert_func+0x26>
 800a6cc:	4b07      	ldr	r3, [pc, #28]	@ (800a6ec <__assert_func+0x30>)
 800a6ce:	461c      	mov	r4, r3
 800a6d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6d4:	9100      	str	r1, [sp, #0]
 800a6d6:	462b      	mov	r3, r5
 800a6d8:	4905      	ldr	r1, [pc, #20]	@ (800a6f0 <__assert_func+0x34>)
 800a6da:	f002 fc17 	bl	800cf0c <fiprintf>
 800a6de:	f002 fc7b 	bl	800cfd8 <abort>
 800a6e2:	4b04      	ldr	r3, [pc, #16]	@ (800a6f4 <__assert_func+0x38>)
 800a6e4:	e7f4      	b.n	800a6d0 <__assert_func+0x14>
 800a6e6:	bf00      	nop
 800a6e8:	20000204 	.word	0x20000204
 800a6ec:	0800df2a 	.word	0x0800df2a
 800a6f0:	0800defc 	.word	0x0800defc
 800a6f4:	0800deef 	.word	0x0800deef

0800a6f8 <quorem>:
 800a6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	6903      	ldr	r3, [r0, #16]
 800a6fe:	690c      	ldr	r4, [r1, #16]
 800a700:	42a3      	cmp	r3, r4
 800a702:	4607      	mov	r7, r0
 800a704:	db7e      	blt.n	800a804 <quorem+0x10c>
 800a706:	3c01      	subs	r4, #1
 800a708:	f101 0814 	add.w	r8, r1, #20
 800a70c:	00a3      	lsls	r3, r4, #2
 800a70e:	f100 0514 	add.w	r5, r0, #20
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a71e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a722:	3301      	adds	r3, #1
 800a724:	429a      	cmp	r2, r3
 800a726:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a72a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a72e:	d32e      	bcc.n	800a78e <quorem+0x96>
 800a730:	f04f 0a00 	mov.w	sl, #0
 800a734:	46c4      	mov	ip, r8
 800a736:	46ae      	mov	lr, r5
 800a738:	46d3      	mov	fp, sl
 800a73a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a73e:	b298      	uxth	r0, r3
 800a740:	fb06 a000 	mla	r0, r6, r0, sl
 800a744:	0c02      	lsrs	r2, r0, #16
 800a746:	0c1b      	lsrs	r3, r3, #16
 800a748:	fb06 2303 	mla	r3, r6, r3, r2
 800a74c:	f8de 2000 	ldr.w	r2, [lr]
 800a750:	b280      	uxth	r0, r0
 800a752:	b292      	uxth	r2, r2
 800a754:	1a12      	subs	r2, r2, r0
 800a756:	445a      	add	r2, fp
 800a758:	f8de 0000 	ldr.w	r0, [lr]
 800a75c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a760:	b29b      	uxth	r3, r3
 800a762:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a766:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a76a:	b292      	uxth	r2, r2
 800a76c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a770:	45e1      	cmp	r9, ip
 800a772:	f84e 2b04 	str.w	r2, [lr], #4
 800a776:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a77a:	d2de      	bcs.n	800a73a <quorem+0x42>
 800a77c:	9b00      	ldr	r3, [sp, #0]
 800a77e:	58eb      	ldr	r3, [r5, r3]
 800a780:	b92b      	cbnz	r3, 800a78e <quorem+0x96>
 800a782:	9b01      	ldr	r3, [sp, #4]
 800a784:	3b04      	subs	r3, #4
 800a786:	429d      	cmp	r5, r3
 800a788:	461a      	mov	r2, r3
 800a78a:	d32f      	bcc.n	800a7ec <quorem+0xf4>
 800a78c:	613c      	str	r4, [r7, #16]
 800a78e:	4638      	mov	r0, r7
 800a790:	f001 f9c2 	bl	800bb18 <__mcmp>
 800a794:	2800      	cmp	r0, #0
 800a796:	db25      	blt.n	800a7e4 <quorem+0xec>
 800a798:	4629      	mov	r1, r5
 800a79a:	2000      	movs	r0, #0
 800a79c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7a0:	f8d1 c000 	ldr.w	ip, [r1]
 800a7a4:	fa1f fe82 	uxth.w	lr, r2
 800a7a8:	fa1f f38c 	uxth.w	r3, ip
 800a7ac:	eba3 030e 	sub.w	r3, r3, lr
 800a7b0:	4403      	add	r3, r0
 800a7b2:	0c12      	lsrs	r2, r2, #16
 800a7b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7c2:	45c1      	cmp	r9, r8
 800a7c4:	f841 3b04 	str.w	r3, [r1], #4
 800a7c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7cc:	d2e6      	bcs.n	800a79c <quorem+0xa4>
 800a7ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7d6:	b922      	cbnz	r2, 800a7e2 <quorem+0xea>
 800a7d8:	3b04      	subs	r3, #4
 800a7da:	429d      	cmp	r5, r3
 800a7dc:	461a      	mov	r2, r3
 800a7de:	d30b      	bcc.n	800a7f8 <quorem+0x100>
 800a7e0:	613c      	str	r4, [r7, #16]
 800a7e2:	3601      	adds	r6, #1
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	b003      	add	sp, #12
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	6812      	ldr	r2, [r2, #0]
 800a7ee:	3b04      	subs	r3, #4
 800a7f0:	2a00      	cmp	r2, #0
 800a7f2:	d1cb      	bne.n	800a78c <quorem+0x94>
 800a7f4:	3c01      	subs	r4, #1
 800a7f6:	e7c6      	b.n	800a786 <quorem+0x8e>
 800a7f8:	6812      	ldr	r2, [r2, #0]
 800a7fa:	3b04      	subs	r3, #4
 800a7fc:	2a00      	cmp	r2, #0
 800a7fe:	d1ef      	bne.n	800a7e0 <quorem+0xe8>
 800a800:	3c01      	subs	r4, #1
 800a802:	e7ea      	b.n	800a7da <quorem+0xe2>
 800a804:	2000      	movs	r0, #0
 800a806:	e7ee      	b.n	800a7e6 <quorem+0xee>

0800a808 <_dtoa_r>:
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	69c7      	ldr	r7, [r0, #28]
 800a80e:	b099      	sub	sp, #100	@ 0x64
 800a810:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a814:	ec55 4b10 	vmov	r4, r5, d0
 800a818:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a81a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a81c:	4683      	mov	fp, r0
 800a81e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a820:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a822:	b97f      	cbnz	r7, 800a844 <_dtoa_r+0x3c>
 800a824:	2010      	movs	r0, #16
 800a826:	f000 fdfd 	bl	800b424 <malloc>
 800a82a:	4602      	mov	r2, r0
 800a82c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a830:	b920      	cbnz	r0, 800a83c <_dtoa_r+0x34>
 800a832:	4ba7      	ldr	r3, [pc, #668]	@ (800aad0 <_dtoa_r+0x2c8>)
 800a834:	21ef      	movs	r1, #239	@ 0xef
 800a836:	48a7      	ldr	r0, [pc, #668]	@ (800aad4 <_dtoa_r+0x2cc>)
 800a838:	f7ff ff40 	bl	800a6bc <__assert_func>
 800a83c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a840:	6007      	str	r7, [r0, #0]
 800a842:	60c7      	str	r7, [r0, #12]
 800a844:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a848:	6819      	ldr	r1, [r3, #0]
 800a84a:	b159      	cbz	r1, 800a864 <_dtoa_r+0x5c>
 800a84c:	685a      	ldr	r2, [r3, #4]
 800a84e:	604a      	str	r2, [r1, #4]
 800a850:	2301      	movs	r3, #1
 800a852:	4093      	lsls	r3, r2
 800a854:	608b      	str	r3, [r1, #8]
 800a856:	4658      	mov	r0, fp
 800a858:	f000 feda 	bl	800b610 <_Bfree>
 800a85c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a860:	2200      	movs	r2, #0
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	1e2b      	subs	r3, r5, #0
 800a866:	bfb9      	ittee	lt
 800a868:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a86c:	9303      	strlt	r3, [sp, #12]
 800a86e:	2300      	movge	r3, #0
 800a870:	6033      	strge	r3, [r6, #0]
 800a872:	9f03      	ldr	r7, [sp, #12]
 800a874:	4b98      	ldr	r3, [pc, #608]	@ (800aad8 <_dtoa_r+0x2d0>)
 800a876:	bfbc      	itt	lt
 800a878:	2201      	movlt	r2, #1
 800a87a:	6032      	strlt	r2, [r6, #0]
 800a87c:	43bb      	bics	r3, r7
 800a87e:	d112      	bne.n	800a8a6 <_dtoa_r+0x9e>
 800a880:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a882:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a88c:	4323      	orrs	r3, r4
 800a88e:	f000 854d 	beq.w	800b32c <_dtoa_r+0xb24>
 800a892:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a894:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aaec <_dtoa_r+0x2e4>
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 854f 	beq.w	800b33c <_dtoa_r+0xb34>
 800a89e:	f10a 0303 	add.w	r3, sl, #3
 800a8a2:	f000 bd49 	b.w	800b338 <_dtoa_r+0xb30>
 800a8a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	ec51 0b17 	vmov	r0, r1, d7
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a8b6:	f7f6 f93f 	bl	8000b38 <__aeabi_dcmpeq>
 800a8ba:	4680      	mov	r8, r0
 800a8bc:	b158      	cbz	r0, 800a8d6 <_dtoa_r+0xce>
 800a8be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	6013      	str	r3, [r2, #0]
 800a8c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8c6:	b113      	cbz	r3, 800a8ce <_dtoa_r+0xc6>
 800a8c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a8ca:	4b84      	ldr	r3, [pc, #528]	@ (800aadc <_dtoa_r+0x2d4>)
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aaf0 <_dtoa_r+0x2e8>
 800a8d2:	f000 bd33 	b.w	800b33c <_dtoa_r+0xb34>
 800a8d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a8da:	aa16      	add	r2, sp, #88	@ 0x58
 800a8dc:	a917      	add	r1, sp, #92	@ 0x5c
 800a8de:	4658      	mov	r0, fp
 800a8e0:	f001 fa3a 	bl	800bd58 <__d2b>
 800a8e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a8e8:	4681      	mov	r9, r0
 800a8ea:	2e00      	cmp	r6, #0
 800a8ec:	d077      	beq.n	800a9de <_dtoa_r+0x1d6>
 800a8ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a8f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a900:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a904:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a908:	4619      	mov	r1, r3
 800a90a:	2200      	movs	r2, #0
 800a90c:	4b74      	ldr	r3, [pc, #464]	@ (800aae0 <_dtoa_r+0x2d8>)
 800a90e:	f7f5 fcf3 	bl	80002f8 <__aeabi_dsub>
 800a912:	a369      	add	r3, pc, #420	@ (adr r3, 800aab8 <_dtoa_r+0x2b0>)
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	f7f5 fea6 	bl	8000668 <__aeabi_dmul>
 800a91c:	a368      	add	r3, pc, #416	@ (adr r3, 800aac0 <_dtoa_r+0x2b8>)
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f7f5 fceb 	bl	80002fc <__adddf3>
 800a926:	4604      	mov	r4, r0
 800a928:	4630      	mov	r0, r6
 800a92a:	460d      	mov	r5, r1
 800a92c:	f7f5 fe32 	bl	8000594 <__aeabi_i2d>
 800a930:	a365      	add	r3, pc, #404	@ (adr r3, 800aac8 <_dtoa_r+0x2c0>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f5 fe97 	bl	8000668 <__aeabi_dmul>
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	4620      	mov	r0, r4
 800a940:	4629      	mov	r1, r5
 800a942:	f7f5 fcdb 	bl	80002fc <__adddf3>
 800a946:	4604      	mov	r4, r0
 800a948:	460d      	mov	r5, r1
 800a94a:	f7f6 f93d 	bl	8000bc8 <__aeabi_d2iz>
 800a94e:	2200      	movs	r2, #0
 800a950:	4607      	mov	r7, r0
 800a952:	2300      	movs	r3, #0
 800a954:	4620      	mov	r0, r4
 800a956:	4629      	mov	r1, r5
 800a958:	f7f6 f8f8 	bl	8000b4c <__aeabi_dcmplt>
 800a95c:	b140      	cbz	r0, 800a970 <_dtoa_r+0x168>
 800a95e:	4638      	mov	r0, r7
 800a960:	f7f5 fe18 	bl	8000594 <__aeabi_i2d>
 800a964:	4622      	mov	r2, r4
 800a966:	462b      	mov	r3, r5
 800a968:	f7f6 f8e6 	bl	8000b38 <__aeabi_dcmpeq>
 800a96c:	b900      	cbnz	r0, 800a970 <_dtoa_r+0x168>
 800a96e:	3f01      	subs	r7, #1
 800a970:	2f16      	cmp	r7, #22
 800a972:	d851      	bhi.n	800aa18 <_dtoa_r+0x210>
 800a974:	4b5b      	ldr	r3, [pc, #364]	@ (800aae4 <_dtoa_r+0x2dc>)
 800a976:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a982:	f7f6 f8e3 	bl	8000b4c <__aeabi_dcmplt>
 800a986:	2800      	cmp	r0, #0
 800a988:	d048      	beq.n	800aa1c <_dtoa_r+0x214>
 800a98a:	3f01      	subs	r7, #1
 800a98c:	2300      	movs	r3, #0
 800a98e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a990:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a992:	1b9b      	subs	r3, r3, r6
 800a994:	1e5a      	subs	r2, r3, #1
 800a996:	bf44      	itt	mi
 800a998:	f1c3 0801 	rsbmi	r8, r3, #1
 800a99c:	2300      	movmi	r3, #0
 800a99e:	9208      	str	r2, [sp, #32]
 800a9a0:	bf54      	ite	pl
 800a9a2:	f04f 0800 	movpl.w	r8, #0
 800a9a6:	9308      	strmi	r3, [sp, #32]
 800a9a8:	2f00      	cmp	r7, #0
 800a9aa:	db39      	blt.n	800aa20 <_dtoa_r+0x218>
 800a9ac:	9b08      	ldr	r3, [sp, #32]
 800a9ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a9b0:	443b      	add	r3, r7
 800a9b2:	9308      	str	r3, [sp, #32]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ba:	2b09      	cmp	r3, #9
 800a9bc:	d864      	bhi.n	800aa88 <_dtoa_r+0x280>
 800a9be:	2b05      	cmp	r3, #5
 800a9c0:	bfc4      	itt	gt
 800a9c2:	3b04      	subgt	r3, #4
 800a9c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c8:	f1a3 0302 	sub.w	r3, r3, #2
 800a9cc:	bfcc      	ite	gt
 800a9ce:	2400      	movgt	r4, #0
 800a9d0:	2401      	movle	r4, #1
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d863      	bhi.n	800aa9e <_dtoa_r+0x296>
 800a9d6:	e8df f003 	tbb	[pc, r3]
 800a9da:	372a      	.short	0x372a
 800a9dc:	5535      	.short	0x5535
 800a9de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a9e2:	441e      	add	r6, r3
 800a9e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a9e8:	2b20      	cmp	r3, #32
 800a9ea:	bfc1      	itttt	gt
 800a9ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a9f0:	409f      	lslgt	r7, r3
 800a9f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a9f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a9fa:	bfd6      	itet	le
 800a9fc:	f1c3 0320 	rsble	r3, r3, #32
 800aa00:	ea47 0003 	orrgt.w	r0, r7, r3
 800aa04:	fa04 f003 	lslle.w	r0, r4, r3
 800aa08:	f7f5 fdb4 	bl	8000574 <__aeabi_ui2d>
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa12:	3e01      	subs	r6, #1
 800aa14:	9214      	str	r2, [sp, #80]	@ 0x50
 800aa16:	e777      	b.n	800a908 <_dtoa_r+0x100>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e7b8      	b.n	800a98e <_dtoa_r+0x186>
 800aa1c:	9012      	str	r0, [sp, #72]	@ 0x48
 800aa1e:	e7b7      	b.n	800a990 <_dtoa_r+0x188>
 800aa20:	427b      	negs	r3, r7
 800aa22:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa24:	2300      	movs	r3, #0
 800aa26:	eba8 0807 	sub.w	r8, r8, r7
 800aa2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa2c:	e7c4      	b.n	800a9b8 <_dtoa_r+0x1b0>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dc35      	bgt.n	800aaa4 <_dtoa_r+0x29c>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	9307      	str	r3, [sp, #28]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa42:	e00b      	b.n	800aa5c <_dtoa_r+0x254>
 800aa44:	2301      	movs	r3, #1
 800aa46:	e7f3      	b.n	800aa30 <_dtoa_r+0x228>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa4e:	18fb      	adds	r3, r7, r3
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	3301      	adds	r3, #1
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	9307      	str	r3, [sp, #28]
 800aa58:	bfb8      	it	lt
 800aa5a:	2301      	movlt	r3, #1
 800aa5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aa60:	2100      	movs	r1, #0
 800aa62:	2204      	movs	r2, #4
 800aa64:	f102 0514 	add.w	r5, r2, #20
 800aa68:	429d      	cmp	r5, r3
 800aa6a:	d91f      	bls.n	800aaac <_dtoa_r+0x2a4>
 800aa6c:	6041      	str	r1, [r0, #4]
 800aa6e:	4658      	mov	r0, fp
 800aa70:	f000 fd8e 	bl	800b590 <_Balloc>
 800aa74:	4682      	mov	sl, r0
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d13c      	bne.n	800aaf4 <_dtoa_r+0x2ec>
 800aa7a:	4b1b      	ldr	r3, [pc, #108]	@ (800aae8 <_dtoa_r+0x2e0>)
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa82:	e6d8      	b.n	800a836 <_dtoa_r+0x2e>
 800aa84:	2301      	movs	r3, #1
 800aa86:	e7e0      	b.n	800aa4a <_dtoa_r+0x242>
 800aa88:	2401      	movs	r4, #1
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa90:	f04f 33ff 	mov.w	r3, #4294967295
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	9307      	str	r3, [sp, #28]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2312      	movs	r3, #18
 800aa9c:	e7d0      	b.n	800aa40 <_dtoa_r+0x238>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaa2:	e7f5      	b.n	800aa90 <_dtoa_r+0x288>
 800aaa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	9307      	str	r3, [sp, #28]
 800aaaa:	e7d7      	b.n	800aa5c <_dtoa_r+0x254>
 800aaac:	3101      	adds	r1, #1
 800aaae:	0052      	lsls	r2, r2, #1
 800aab0:	e7d8      	b.n	800aa64 <_dtoa_r+0x25c>
 800aab2:	bf00      	nop
 800aab4:	f3af 8000 	nop.w
 800aab8:	636f4361 	.word	0x636f4361
 800aabc:	3fd287a7 	.word	0x3fd287a7
 800aac0:	8b60c8b3 	.word	0x8b60c8b3
 800aac4:	3fc68a28 	.word	0x3fc68a28
 800aac8:	509f79fb 	.word	0x509f79fb
 800aacc:	3fd34413 	.word	0x3fd34413
 800aad0:	0800de7e 	.word	0x0800de7e
 800aad4:	0800df38 	.word	0x0800df38
 800aad8:	7ff00000 	.word	0x7ff00000
 800aadc:	0800de56 	.word	0x0800de56
 800aae0:	3ff80000 	.word	0x3ff80000
 800aae4:	0800e030 	.word	0x0800e030
 800aae8:	0800df90 	.word	0x0800df90
 800aaec:	0800df34 	.word	0x0800df34
 800aaf0:	0800de55 	.word	0x0800de55
 800aaf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aaf8:	6018      	str	r0, [r3, #0]
 800aafa:	9b07      	ldr	r3, [sp, #28]
 800aafc:	2b0e      	cmp	r3, #14
 800aafe:	f200 80a4 	bhi.w	800ac4a <_dtoa_r+0x442>
 800ab02:	2c00      	cmp	r4, #0
 800ab04:	f000 80a1 	beq.w	800ac4a <_dtoa_r+0x442>
 800ab08:	2f00      	cmp	r7, #0
 800ab0a:	dd33      	ble.n	800ab74 <_dtoa_r+0x36c>
 800ab0c:	4bad      	ldr	r3, [pc, #692]	@ (800adc4 <_dtoa_r+0x5bc>)
 800ab0e:	f007 020f 	and.w	r2, r7, #15
 800ab12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab16:	ed93 7b00 	vldr	d7, [r3]
 800ab1a:	05f8      	lsls	r0, r7, #23
 800ab1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ab20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab24:	d516      	bpl.n	800ab54 <_dtoa_r+0x34c>
 800ab26:	4ba8      	ldr	r3, [pc, #672]	@ (800adc8 <_dtoa_r+0x5c0>)
 800ab28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab30:	f7f5 fec4 	bl	80008bc <__aeabi_ddiv>
 800ab34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab38:	f004 040f 	and.w	r4, r4, #15
 800ab3c:	2603      	movs	r6, #3
 800ab3e:	4da2      	ldr	r5, [pc, #648]	@ (800adc8 <_dtoa_r+0x5c0>)
 800ab40:	b954      	cbnz	r4, 800ab58 <_dtoa_r+0x350>
 800ab42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab4a:	f7f5 feb7 	bl	80008bc <__aeabi_ddiv>
 800ab4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab52:	e028      	b.n	800aba6 <_dtoa_r+0x39e>
 800ab54:	2602      	movs	r6, #2
 800ab56:	e7f2      	b.n	800ab3e <_dtoa_r+0x336>
 800ab58:	07e1      	lsls	r1, r4, #31
 800ab5a:	d508      	bpl.n	800ab6e <_dtoa_r+0x366>
 800ab5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab64:	f7f5 fd80 	bl	8000668 <__aeabi_dmul>
 800ab68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab6c:	3601      	adds	r6, #1
 800ab6e:	1064      	asrs	r4, r4, #1
 800ab70:	3508      	adds	r5, #8
 800ab72:	e7e5      	b.n	800ab40 <_dtoa_r+0x338>
 800ab74:	f000 80d2 	beq.w	800ad1c <_dtoa_r+0x514>
 800ab78:	427c      	negs	r4, r7
 800ab7a:	4b92      	ldr	r3, [pc, #584]	@ (800adc4 <_dtoa_r+0x5bc>)
 800ab7c:	4d92      	ldr	r5, [pc, #584]	@ (800adc8 <_dtoa_r+0x5c0>)
 800ab7e:	f004 020f 	and.w	r2, r4, #15
 800ab82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab8e:	f7f5 fd6b 	bl	8000668 <__aeabi_dmul>
 800ab92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab96:	1124      	asrs	r4, r4, #4
 800ab98:	2300      	movs	r3, #0
 800ab9a:	2602      	movs	r6, #2
 800ab9c:	2c00      	cmp	r4, #0
 800ab9e:	f040 80b2 	bne.w	800ad06 <_dtoa_r+0x4fe>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1d3      	bne.n	800ab4e <_dtoa_r+0x346>
 800aba6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aba8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 80b7 	beq.w	800ad20 <_dtoa_r+0x518>
 800abb2:	4b86      	ldr	r3, [pc, #536]	@ (800adcc <_dtoa_r+0x5c4>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	4620      	mov	r0, r4
 800abb8:	4629      	mov	r1, r5
 800abba:	f7f5 ffc7 	bl	8000b4c <__aeabi_dcmplt>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f000 80ae 	beq.w	800ad20 <_dtoa_r+0x518>
 800abc4:	9b07      	ldr	r3, [sp, #28]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 80aa 	beq.w	800ad20 <_dtoa_r+0x518>
 800abcc:	9b00      	ldr	r3, [sp, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	dd37      	ble.n	800ac42 <_dtoa_r+0x43a>
 800abd2:	1e7b      	subs	r3, r7, #1
 800abd4:	9304      	str	r3, [sp, #16]
 800abd6:	4620      	mov	r0, r4
 800abd8:	4b7d      	ldr	r3, [pc, #500]	@ (800add0 <_dtoa_r+0x5c8>)
 800abda:	2200      	movs	r2, #0
 800abdc:	4629      	mov	r1, r5
 800abde:	f7f5 fd43 	bl	8000668 <__aeabi_dmul>
 800abe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abe6:	9c00      	ldr	r4, [sp, #0]
 800abe8:	3601      	adds	r6, #1
 800abea:	4630      	mov	r0, r6
 800abec:	f7f5 fcd2 	bl	8000594 <__aeabi_i2d>
 800abf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abf4:	f7f5 fd38 	bl	8000668 <__aeabi_dmul>
 800abf8:	4b76      	ldr	r3, [pc, #472]	@ (800add4 <_dtoa_r+0x5cc>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	f7f5 fb7e 	bl	80002fc <__adddf3>
 800ac00:	4605      	mov	r5, r0
 800ac02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac06:	2c00      	cmp	r4, #0
 800ac08:	f040 808d 	bne.w	800ad26 <_dtoa_r+0x51e>
 800ac0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac10:	4b71      	ldr	r3, [pc, #452]	@ (800add8 <_dtoa_r+0x5d0>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	f7f5 fb70 	bl	80002f8 <__aeabi_dsub>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac20:	462a      	mov	r2, r5
 800ac22:	4633      	mov	r3, r6
 800ac24:	f7f5 ffb0 	bl	8000b88 <__aeabi_dcmpgt>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	f040 828b 	bne.w	800b144 <_dtoa_r+0x93c>
 800ac2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac32:	462a      	mov	r2, r5
 800ac34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac38:	f7f5 ff88 	bl	8000b4c <__aeabi_dcmplt>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	f040 8128 	bne.w	800ae92 <_dtoa_r+0x68a>
 800ac42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ac46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ac4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f2c0 815a 	blt.w	800af06 <_dtoa_r+0x6fe>
 800ac52:	2f0e      	cmp	r7, #14
 800ac54:	f300 8157 	bgt.w	800af06 <_dtoa_r+0x6fe>
 800ac58:	4b5a      	ldr	r3, [pc, #360]	@ (800adc4 <_dtoa_r+0x5bc>)
 800ac5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac5e:	ed93 7b00 	vldr	d7, [r3]
 800ac62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	ed8d 7b00 	vstr	d7, [sp]
 800ac6a:	da03      	bge.n	800ac74 <_dtoa_r+0x46c>
 800ac6c:	9b07      	ldr	r3, [sp, #28]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f340 8101 	ble.w	800ae76 <_dtoa_r+0x66e>
 800ac74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac78:	4656      	mov	r6, sl
 800ac7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac7e:	4620      	mov	r0, r4
 800ac80:	4629      	mov	r1, r5
 800ac82:	f7f5 fe1b 	bl	80008bc <__aeabi_ddiv>
 800ac86:	f7f5 ff9f 	bl	8000bc8 <__aeabi_d2iz>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	f7f5 fc82 	bl	8000594 <__aeabi_i2d>
 800ac90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac94:	f7f5 fce8 	bl	8000668 <__aeabi_dmul>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	4629      	mov	r1, r5
 800aca0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aca4:	f7f5 fb28 	bl	80002f8 <__aeabi_dsub>
 800aca8:	f806 4b01 	strb.w	r4, [r6], #1
 800acac:	9d07      	ldr	r5, [sp, #28]
 800acae:	eba6 040a 	sub.w	r4, r6, sl
 800acb2:	42a5      	cmp	r5, r4
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	f040 8117 	bne.w	800aeea <_dtoa_r+0x6e2>
 800acbc:	f7f5 fb1e 	bl	80002fc <__adddf3>
 800acc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acc4:	4604      	mov	r4, r0
 800acc6:	460d      	mov	r5, r1
 800acc8:	f7f5 ff5e 	bl	8000b88 <__aeabi_dcmpgt>
 800accc:	2800      	cmp	r0, #0
 800acce:	f040 80f9 	bne.w	800aec4 <_dtoa_r+0x6bc>
 800acd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acd6:	4620      	mov	r0, r4
 800acd8:	4629      	mov	r1, r5
 800acda:	f7f5 ff2d 	bl	8000b38 <__aeabi_dcmpeq>
 800acde:	b118      	cbz	r0, 800ace8 <_dtoa_r+0x4e0>
 800ace0:	f018 0f01 	tst.w	r8, #1
 800ace4:	f040 80ee 	bne.w	800aec4 <_dtoa_r+0x6bc>
 800ace8:	4649      	mov	r1, r9
 800acea:	4658      	mov	r0, fp
 800acec:	f000 fc90 	bl	800b610 <_Bfree>
 800acf0:	2300      	movs	r3, #0
 800acf2:	7033      	strb	r3, [r6, #0]
 800acf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800acf6:	3701      	adds	r7, #1
 800acf8:	601f      	str	r7, [r3, #0]
 800acfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 831d 	beq.w	800b33c <_dtoa_r+0xb34>
 800ad02:	601e      	str	r6, [r3, #0]
 800ad04:	e31a      	b.n	800b33c <_dtoa_r+0xb34>
 800ad06:	07e2      	lsls	r2, r4, #31
 800ad08:	d505      	bpl.n	800ad16 <_dtoa_r+0x50e>
 800ad0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad0e:	f7f5 fcab 	bl	8000668 <__aeabi_dmul>
 800ad12:	3601      	adds	r6, #1
 800ad14:	2301      	movs	r3, #1
 800ad16:	1064      	asrs	r4, r4, #1
 800ad18:	3508      	adds	r5, #8
 800ad1a:	e73f      	b.n	800ab9c <_dtoa_r+0x394>
 800ad1c:	2602      	movs	r6, #2
 800ad1e:	e742      	b.n	800aba6 <_dtoa_r+0x39e>
 800ad20:	9c07      	ldr	r4, [sp, #28]
 800ad22:	9704      	str	r7, [sp, #16]
 800ad24:	e761      	b.n	800abea <_dtoa_r+0x3e2>
 800ad26:	4b27      	ldr	r3, [pc, #156]	@ (800adc4 <_dtoa_r+0x5bc>)
 800ad28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad32:	4454      	add	r4, sl
 800ad34:	2900      	cmp	r1, #0
 800ad36:	d053      	beq.n	800ade0 <_dtoa_r+0x5d8>
 800ad38:	4928      	ldr	r1, [pc, #160]	@ (800addc <_dtoa_r+0x5d4>)
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	f7f5 fdbe 	bl	80008bc <__aeabi_ddiv>
 800ad40:	4633      	mov	r3, r6
 800ad42:	462a      	mov	r2, r5
 800ad44:	f7f5 fad8 	bl	80002f8 <__aeabi_dsub>
 800ad48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad4c:	4656      	mov	r6, sl
 800ad4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad52:	f7f5 ff39 	bl	8000bc8 <__aeabi_d2iz>
 800ad56:	4605      	mov	r5, r0
 800ad58:	f7f5 fc1c 	bl	8000594 <__aeabi_i2d>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad64:	f7f5 fac8 	bl	80002f8 <__aeabi_dsub>
 800ad68:	3530      	adds	r5, #48	@ 0x30
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad72:	f806 5b01 	strb.w	r5, [r6], #1
 800ad76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad7a:	f7f5 fee7 	bl	8000b4c <__aeabi_dcmplt>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d171      	bne.n	800ae66 <_dtoa_r+0x65e>
 800ad82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad86:	4911      	ldr	r1, [pc, #68]	@ (800adcc <_dtoa_r+0x5c4>)
 800ad88:	2000      	movs	r0, #0
 800ad8a:	f7f5 fab5 	bl	80002f8 <__aeabi_dsub>
 800ad8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad92:	f7f5 fedb 	bl	8000b4c <__aeabi_dcmplt>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f040 8095 	bne.w	800aec6 <_dtoa_r+0x6be>
 800ad9c:	42a6      	cmp	r6, r4
 800ad9e:	f43f af50 	beq.w	800ac42 <_dtoa_r+0x43a>
 800ada2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ada6:	4b0a      	ldr	r3, [pc, #40]	@ (800add0 <_dtoa_r+0x5c8>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	f7f5 fc5d 	bl	8000668 <__aeabi_dmul>
 800adae:	4b08      	ldr	r3, [pc, #32]	@ (800add0 <_dtoa_r+0x5c8>)
 800adb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800adb4:	2200      	movs	r2, #0
 800adb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adba:	f7f5 fc55 	bl	8000668 <__aeabi_dmul>
 800adbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adc2:	e7c4      	b.n	800ad4e <_dtoa_r+0x546>
 800adc4:	0800e030 	.word	0x0800e030
 800adc8:	0800e008 	.word	0x0800e008
 800adcc:	3ff00000 	.word	0x3ff00000
 800add0:	40240000 	.word	0x40240000
 800add4:	401c0000 	.word	0x401c0000
 800add8:	40140000 	.word	0x40140000
 800addc:	3fe00000 	.word	0x3fe00000
 800ade0:	4631      	mov	r1, r6
 800ade2:	4628      	mov	r0, r5
 800ade4:	f7f5 fc40 	bl	8000668 <__aeabi_dmul>
 800ade8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800adec:	9415      	str	r4, [sp, #84]	@ 0x54
 800adee:	4656      	mov	r6, sl
 800adf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adf4:	f7f5 fee8 	bl	8000bc8 <__aeabi_d2iz>
 800adf8:	4605      	mov	r5, r0
 800adfa:	f7f5 fbcb 	bl	8000594 <__aeabi_i2d>
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae06:	f7f5 fa77 	bl	80002f8 <__aeabi_dsub>
 800ae0a:	3530      	adds	r5, #48	@ 0x30
 800ae0c:	f806 5b01 	strb.w	r5, [r6], #1
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	42a6      	cmp	r6, r4
 800ae16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae1a:	f04f 0200 	mov.w	r2, #0
 800ae1e:	d124      	bne.n	800ae6a <_dtoa_r+0x662>
 800ae20:	4bac      	ldr	r3, [pc, #688]	@ (800b0d4 <_dtoa_r+0x8cc>)
 800ae22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae26:	f7f5 fa69 	bl	80002fc <__adddf3>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae32:	f7f5 fea9 	bl	8000b88 <__aeabi_dcmpgt>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d145      	bne.n	800aec6 <_dtoa_r+0x6be>
 800ae3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae3e:	49a5      	ldr	r1, [pc, #660]	@ (800b0d4 <_dtoa_r+0x8cc>)
 800ae40:	2000      	movs	r0, #0
 800ae42:	f7f5 fa59 	bl	80002f8 <__aeabi_dsub>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae4e:	f7f5 fe7d 	bl	8000b4c <__aeabi_dcmplt>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	f43f aef5 	beq.w	800ac42 <_dtoa_r+0x43a>
 800ae58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ae5a:	1e73      	subs	r3, r6, #1
 800ae5c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae62:	2b30      	cmp	r3, #48	@ 0x30
 800ae64:	d0f8      	beq.n	800ae58 <_dtoa_r+0x650>
 800ae66:	9f04      	ldr	r7, [sp, #16]
 800ae68:	e73e      	b.n	800ace8 <_dtoa_r+0x4e0>
 800ae6a:	4b9b      	ldr	r3, [pc, #620]	@ (800b0d8 <_dtoa_r+0x8d0>)
 800ae6c:	f7f5 fbfc 	bl	8000668 <__aeabi_dmul>
 800ae70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae74:	e7bc      	b.n	800adf0 <_dtoa_r+0x5e8>
 800ae76:	d10c      	bne.n	800ae92 <_dtoa_r+0x68a>
 800ae78:	4b98      	ldr	r3, [pc, #608]	@ (800b0dc <_dtoa_r+0x8d4>)
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae80:	f7f5 fbf2 	bl	8000668 <__aeabi_dmul>
 800ae84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae88:	f7f5 fe74 	bl	8000b74 <__aeabi_dcmpge>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	f000 8157 	beq.w	800b140 <_dtoa_r+0x938>
 800ae92:	2400      	movs	r4, #0
 800ae94:	4625      	mov	r5, r4
 800ae96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae98:	43db      	mvns	r3, r3
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	4656      	mov	r6, sl
 800ae9e:	2700      	movs	r7, #0
 800aea0:	4621      	mov	r1, r4
 800aea2:	4658      	mov	r0, fp
 800aea4:	f000 fbb4 	bl	800b610 <_Bfree>
 800aea8:	2d00      	cmp	r5, #0
 800aeaa:	d0dc      	beq.n	800ae66 <_dtoa_r+0x65e>
 800aeac:	b12f      	cbz	r7, 800aeba <_dtoa_r+0x6b2>
 800aeae:	42af      	cmp	r7, r5
 800aeb0:	d003      	beq.n	800aeba <_dtoa_r+0x6b2>
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	4658      	mov	r0, fp
 800aeb6:	f000 fbab 	bl	800b610 <_Bfree>
 800aeba:	4629      	mov	r1, r5
 800aebc:	4658      	mov	r0, fp
 800aebe:	f000 fba7 	bl	800b610 <_Bfree>
 800aec2:	e7d0      	b.n	800ae66 <_dtoa_r+0x65e>
 800aec4:	9704      	str	r7, [sp, #16]
 800aec6:	4633      	mov	r3, r6
 800aec8:	461e      	mov	r6, r3
 800aeca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aece:	2a39      	cmp	r2, #57	@ 0x39
 800aed0:	d107      	bne.n	800aee2 <_dtoa_r+0x6da>
 800aed2:	459a      	cmp	sl, r3
 800aed4:	d1f8      	bne.n	800aec8 <_dtoa_r+0x6c0>
 800aed6:	9a04      	ldr	r2, [sp, #16]
 800aed8:	3201      	adds	r2, #1
 800aeda:	9204      	str	r2, [sp, #16]
 800aedc:	2230      	movs	r2, #48	@ 0x30
 800aede:	f88a 2000 	strb.w	r2, [sl]
 800aee2:	781a      	ldrb	r2, [r3, #0]
 800aee4:	3201      	adds	r2, #1
 800aee6:	701a      	strb	r2, [r3, #0]
 800aee8:	e7bd      	b.n	800ae66 <_dtoa_r+0x65e>
 800aeea:	4b7b      	ldr	r3, [pc, #492]	@ (800b0d8 <_dtoa_r+0x8d0>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	f7f5 fbbb 	bl	8000668 <__aeabi_dmul>
 800aef2:	2200      	movs	r2, #0
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	460d      	mov	r5, r1
 800aefa:	f7f5 fe1d 	bl	8000b38 <__aeabi_dcmpeq>
 800aefe:	2800      	cmp	r0, #0
 800af00:	f43f aebb 	beq.w	800ac7a <_dtoa_r+0x472>
 800af04:	e6f0      	b.n	800ace8 <_dtoa_r+0x4e0>
 800af06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af08:	2a00      	cmp	r2, #0
 800af0a:	f000 80db 	beq.w	800b0c4 <_dtoa_r+0x8bc>
 800af0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af10:	2a01      	cmp	r2, #1
 800af12:	f300 80bf 	bgt.w	800b094 <_dtoa_r+0x88c>
 800af16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800af18:	2a00      	cmp	r2, #0
 800af1a:	f000 80b7 	beq.w	800b08c <_dtoa_r+0x884>
 800af1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af24:	4646      	mov	r6, r8
 800af26:	9a08      	ldr	r2, [sp, #32]
 800af28:	2101      	movs	r1, #1
 800af2a:	441a      	add	r2, r3
 800af2c:	4658      	mov	r0, fp
 800af2e:	4498      	add	r8, r3
 800af30:	9208      	str	r2, [sp, #32]
 800af32:	f000 fc6b 	bl	800b80c <__i2b>
 800af36:	4605      	mov	r5, r0
 800af38:	b15e      	cbz	r6, 800af52 <_dtoa_r+0x74a>
 800af3a:	9b08      	ldr	r3, [sp, #32]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	dd08      	ble.n	800af52 <_dtoa_r+0x74a>
 800af40:	42b3      	cmp	r3, r6
 800af42:	9a08      	ldr	r2, [sp, #32]
 800af44:	bfa8      	it	ge
 800af46:	4633      	movge	r3, r6
 800af48:	eba8 0803 	sub.w	r8, r8, r3
 800af4c:	1af6      	subs	r6, r6, r3
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	9308      	str	r3, [sp, #32]
 800af52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af54:	b1f3      	cbz	r3, 800af94 <_dtoa_r+0x78c>
 800af56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 80b7 	beq.w	800b0cc <_dtoa_r+0x8c4>
 800af5e:	b18c      	cbz	r4, 800af84 <_dtoa_r+0x77c>
 800af60:	4629      	mov	r1, r5
 800af62:	4622      	mov	r2, r4
 800af64:	4658      	mov	r0, fp
 800af66:	f000 fd11 	bl	800b98c <__pow5mult>
 800af6a:	464a      	mov	r2, r9
 800af6c:	4601      	mov	r1, r0
 800af6e:	4605      	mov	r5, r0
 800af70:	4658      	mov	r0, fp
 800af72:	f000 fc61 	bl	800b838 <__multiply>
 800af76:	4649      	mov	r1, r9
 800af78:	9004      	str	r0, [sp, #16]
 800af7a:	4658      	mov	r0, fp
 800af7c:	f000 fb48 	bl	800b610 <_Bfree>
 800af80:	9b04      	ldr	r3, [sp, #16]
 800af82:	4699      	mov	r9, r3
 800af84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af86:	1b1a      	subs	r2, r3, r4
 800af88:	d004      	beq.n	800af94 <_dtoa_r+0x78c>
 800af8a:	4649      	mov	r1, r9
 800af8c:	4658      	mov	r0, fp
 800af8e:	f000 fcfd 	bl	800b98c <__pow5mult>
 800af92:	4681      	mov	r9, r0
 800af94:	2101      	movs	r1, #1
 800af96:	4658      	mov	r0, fp
 800af98:	f000 fc38 	bl	800b80c <__i2b>
 800af9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af9e:	4604      	mov	r4, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f000 81cf 	beq.w	800b344 <_dtoa_r+0xb3c>
 800afa6:	461a      	mov	r2, r3
 800afa8:	4601      	mov	r1, r0
 800afaa:	4658      	mov	r0, fp
 800afac:	f000 fcee 	bl	800b98c <__pow5mult>
 800afb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	4604      	mov	r4, r0
 800afb6:	f300 8095 	bgt.w	800b0e4 <_dtoa_r+0x8dc>
 800afba:	9b02      	ldr	r3, [sp, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f040 8087 	bne.w	800b0d0 <_dtoa_r+0x8c8>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f040 8089 	bne.w	800b0e0 <_dtoa_r+0x8d8>
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afd4:	0d1b      	lsrs	r3, r3, #20
 800afd6:	051b      	lsls	r3, r3, #20
 800afd8:	b12b      	cbz	r3, 800afe6 <_dtoa_r+0x7de>
 800afda:	9b08      	ldr	r3, [sp, #32]
 800afdc:	3301      	adds	r3, #1
 800afde:	9308      	str	r3, [sp, #32]
 800afe0:	f108 0801 	add.w	r8, r8, #1
 800afe4:	2301      	movs	r3, #1
 800afe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afea:	2b00      	cmp	r3, #0
 800afec:	f000 81b0 	beq.w	800b350 <_dtoa_r+0xb48>
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aff6:	6918      	ldr	r0, [r3, #16]
 800aff8:	f000 fbbc 	bl	800b774 <__hi0bits>
 800affc:	f1c0 0020 	rsb	r0, r0, #32
 800b000:	9b08      	ldr	r3, [sp, #32]
 800b002:	4418      	add	r0, r3
 800b004:	f010 001f 	ands.w	r0, r0, #31
 800b008:	d077      	beq.n	800b0fa <_dtoa_r+0x8f2>
 800b00a:	f1c0 0320 	rsb	r3, r0, #32
 800b00e:	2b04      	cmp	r3, #4
 800b010:	dd6b      	ble.n	800b0ea <_dtoa_r+0x8e2>
 800b012:	9b08      	ldr	r3, [sp, #32]
 800b014:	f1c0 001c 	rsb	r0, r0, #28
 800b018:	4403      	add	r3, r0
 800b01a:	4480      	add	r8, r0
 800b01c:	4406      	add	r6, r0
 800b01e:	9308      	str	r3, [sp, #32]
 800b020:	f1b8 0f00 	cmp.w	r8, #0
 800b024:	dd05      	ble.n	800b032 <_dtoa_r+0x82a>
 800b026:	4649      	mov	r1, r9
 800b028:	4642      	mov	r2, r8
 800b02a:	4658      	mov	r0, fp
 800b02c:	f000 fd08 	bl	800ba40 <__lshift>
 800b030:	4681      	mov	r9, r0
 800b032:	9b08      	ldr	r3, [sp, #32]
 800b034:	2b00      	cmp	r3, #0
 800b036:	dd05      	ble.n	800b044 <_dtoa_r+0x83c>
 800b038:	4621      	mov	r1, r4
 800b03a:	461a      	mov	r2, r3
 800b03c:	4658      	mov	r0, fp
 800b03e:	f000 fcff 	bl	800ba40 <__lshift>
 800b042:	4604      	mov	r4, r0
 800b044:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b046:	2b00      	cmp	r3, #0
 800b048:	d059      	beq.n	800b0fe <_dtoa_r+0x8f6>
 800b04a:	4621      	mov	r1, r4
 800b04c:	4648      	mov	r0, r9
 800b04e:	f000 fd63 	bl	800bb18 <__mcmp>
 800b052:	2800      	cmp	r0, #0
 800b054:	da53      	bge.n	800b0fe <_dtoa_r+0x8f6>
 800b056:	1e7b      	subs	r3, r7, #1
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	4649      	mov	r1, r9
 800b05c:	2300      	movs	r3, #0
 800b05e:	220a      	movs	r2, #10
 800b060:	4658      	mov	r0, fp
 800b062:	f000 faf7 	bl	800b654 <__multadd>
 800b066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b068:	4681      	mov	r9, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 8172 	beq.w	800b354 <_dtoa_r+0xb4c>
 800b070:	2300      	movs	r3, #0
 800b072:	4629      	mov	r1, r5
 800b074:	220a      	movs	r2, #10
 800b076:	4658      	mov	r0, fp
 800b078:	f000 faec 	bl	800b654 <__multadd>
 800b07c:	9b00      	ldr	r3, [sp, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	4605      	mov	r5, r0
 800b082:	dc67      	bgt.n	800b154 <_dtoa_r+0x94c>
 800b084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b086:	2b02      	cmp	r3, #2
 800b088:	dc41      	bgt.n	800b10e <_dtoa_r+0x906>
 800b08a:	e063      	b.n	800b154 <_dtoa_r+0x94c>
 800b08c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b08e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b092:	e746      	b.n	800af22 <_dtoa_r+0x71a>
 800b094:	9b07      	ldr	r3, [sp, #28]
 800b096:	1e5c      	subs	r4, r3, #1
 800b098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b09a:	42a3      	cmp	r3, r4
 800b09c:	bfbf      	itttt	lt
 800b09e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b0a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b0a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b0a4:	1ae3      	sublt	r3, r4, r3
 800b0a6:	bfb4      	ite	lt
 800b0a8:	18d2      	addlt	r2, r2, r3
 800b0aa:	1b1c      	subge	r4, r3, r4
 800b0ac:	9b07      	ldr	r3, [sp, #28]
 800b0ae:	bfbc      	itt	lt
 800b0b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b0b2:	2400      	movlt	r4, #0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bfb5      	itete	lt
 800b0b8:	eba8 0603 	sublt.w	r6, r8, r3
 800b0bc:	9b07      	ldrge	r3, [sp, #28]
 800b0be:	2300      	movlt	r3, #0
 800b0c0:	4646      	movge	r6, r8
 800b0c2:	e730      	b.n	800af26 <_dtoa_r+0x71e>
 800b0c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b0c8:	4646      	mov	r6, r8
 800b0ca:	e735      	b.n	800af38 <_dtoa_r+0x730>
 800b0cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0ce:	e75c      	b.n	800af8a <_dtoa_r+0x782>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	e788      	b.n	800afe6 <_dtoa_r+0x7de>
 800b0d4:	3fe00000 	.word	0x3fe00000
 800b0d8:	40240000 	.word	0x40240000
 800b0dc:	40140000 	.word	0x40140000
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	e780      	b.n	800afe6 <_dtoa_r+0x7de>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0e8:	e782      	b.n	800aff0 <_dtoa_r+0x7e8>
 800b0ea:	d099      	beq.n	800b020 <_dtoa_r+0x818>
 800b0ec:	9a08      	ldr	r2, [sp, #32]
 800b0ee:	331c      	adds	r3, #28
 800b0f0:	441a      	add	r2, r3
 800b0f2:	4498      	add	r8, r3
 800b0f4:	441e      	add	r6, r3
 800b0f6:	9208      	str	r2, [sp, #32]
 800b0f8:	e792      	b.n	800b020 <_dtoa_r+0x818>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	e7f6      	b.n	800b0ec <_dtoa_r+0x8e4>
 800b0fe:	9b07      	ldr	r3, [sp, #28]
 800b100:	9704      	str	r7, [sp, #16]
 800b102:	2b00      	cmp	r3, #0
 800b104:	dc20      	bgt.n	800b148 <_dtoa_r+0x940>
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	dd1e      	ble.n	800b14c <_dtoa_r+0x944>
 800b10e:	9b00      	ldr	r3, [sp, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f47f aec0 	bne.w	800ae96 <_dtoa_r+0x68e>
 800b116:	4621      	mov	r1, r4
 800b118:	2205      	movs	r2, #5
 800b11a:	4658      	mov	r0, fp
 800b11c:	f000 fa9a 	bl	800b654 <__multadd>
 800b120:	4601      	mov	r1, r0
 800b122:	4604      	mov	r4, r0
 800b124:	4648      	mov	r0, r9
 800b126:	f000 fcf7 	bl	800bb18 <__mcmp>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	f77f aeb3 	ble.w	800ae96 <_dtoa_r+0x68e>
 800b130:	4656      	mov	r6, sl
 800b132:	2331      	movs	r3, #49	@ 0x31
 800b134:	f806 3b01 	strb.w	r3, [r6], #1
 800b138:	9b04      	ldr	r3, [sp, #16]
 800b13a:	3301      	adds	r3, #1
 800b13c:	9304      	str	r3, [sp, #16]
 800b13e:	e6ae      	b.n	800ae9e <_dtoa_r+0x696>
 800b140:	9c07      	ldr	r4, [sp, #28]
 800b142:	9704      	str	r7, [sp, #16]
 800b144:	4625      	mov	r5, r4
 800b146:	e7f3      	b.n	800b130 <_dtoa_r+0x928>
 800b148:	9b07      	ldr	r3, [sp, #28]
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 8104 	beq.w	800b35c <_dtoa_r+0xb54>
 800b154:	2e00      	cmp	r6, #0
 800b156:	dd05      	ble.n	800b164 <_dtoa_r+0x95c>
 800b158:	4629      	mov	r1, r5
 800b15a:	4632      	mov	r2, r6
 800b15c:	4658      	mov	r0, fp
 800b15e:	f000 fc6f 	bl	800ba40 <__lshift>
 800b162:	4605      	mov	r5, r0
 800b164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b166:	2b00      	cmp	r3, #0
 800b168:	d05a      	beq.n	800b220 <_dtoa_r+0xa18>
 800b16a:	6869      	ldr	r1, [r5, #4]
 800b16c:	4658      	mov	r0, fp
 800b16e:	f000 fa0f 	bl	800b590 <_Balloc>
 800b172:	4606      	mov	r6, r0
 800b174:	b928      	cbnz	r0, 800b182 <_dtoa_r+0x97a>
 800b176:	4b84      	ldr	r3, [pc, #528]	@ (800b388 <_dtoa_r+0xb80>)
 800b178:	4602      	mov	r2, r0
 800b17a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b17e:	f7ff bb5a 	b.w	800a836 <_dtoa_r+0x2e>
 800b182:	692a      	ldr	r2, [r5, #16]
 800b184:	3202      	adds	r2, #2
 800b186:	0092      	lsls	r2, r2, #2
 800b188:	f105 010c 	add.w	r1, r5, #12
 800b18c:	300c      	adds	r0, #12
 800b18e:	f001 ff0b 	bl	800cfa8 <memcpy>
 800b192:	2201      	movs	r2, #1
 800b194:	4631      	mov	r1, r6
 800b196:	4658      	mov	r0, fp
 800b198:	f000 fc52 	bl	800ba40 <__lshift>
 800b19c:	f10a 0301 	add.w	r3, sl, #1
 800b1a0:	9307      	str	r3, [sp, #28]
 800b1a2:	9b00      	ldr	r3, [sp, #0]
 800b1a4:	4453      	add	r3, sl
 800b1a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1a8:	9b02      	ldr	r3, [sp, #8]
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	462f      	mov	r7, r5
 800b1b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	9b07      	ldr	r3, [sp, #28]
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	4648      	mov	r0, r9
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	f7ff fa9b 	bl	800a6f8 <quorem>
 800b1c2:	4639      	mov	r1, r7
 800b1c4:	9002      	str	r0, [sp, #8]
 800b1c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b1ca:	4648      	mov	r0, r9
 800b1cc:	f000 fca4 	bl	800bb18 <__mcmp>
 800b1d0:	462a      	mov	r2, r5
 800b1d2:	9008      	str	r0, [sp, #32]
 800b1d4:	4621      	mov	r1, r4
 800b1d6:	4658      	mov	r0, fp
 800b1d8:	f000 fcba 	bl	800bb50 <__mdiff>
 800b1dc:	68c2      	ldr	r2, [r0, #12]
 800b1de:	4606      	mov	r6, r0
 800b1e0:	bb02      	cbnz	r2, 800b224 <_dtoa_r+0xa1c>
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	4648      	mov	r0, r9
 800b1e6:	f000 fc97 	bl	800bb18 <__mcmp>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4658      	mov	r0, fp
 800b1f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1f2:	f000 fa0d 	bl	800b610 <_Bfree>
 800b1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1fa:	9e07      	ldr	r6, [sp, #28]
 800b1fc:	ea43 0102 	orr.w	r1, r3, r2
 800b200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b202:	4319      	orrs	r1, r3
 800b204:	d110      	bne.n	800b228 <_dtoa_r+0xa20>
 800b206:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b20a:	d029      	beq.n	800b260 <_dtoa_r+0xa58>
 800b20c:	9b08      	ldr	r3, [sp, #32]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	dd02      	ble.n	800b218 <_dtoa_r+0xa10>
 800b212:	9b02      	ldr	r3, [sp, #8]
 800b214:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b218:	9b00      	ldr	r3, [sp, #0]
 800b21a:	f883 8000 	strb.w	r8, [r3]
 800b21e:	e63f      	b.n	800aea0 <_dtoa_r+0x698>
 800b220:	4628      	mov	r0, r5
 800b222:	e7bb      	b.n	800b19c <_dtoa_r+0x994>
 800b224:	2201      	movs	r2, #1
 800b226:	e7e1      	b.n	800b1ec <_dtoa_r+0x9e4>
 800b228:	9b08      	ldr	r3, [sp, #32]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	db04      	blt.n	800b238 <_dtoa_r+0xa30>
 800b22e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b230:	430b      	orrs	r3, r1
 800b232:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b234:	430b      	orrs	r3, r1
 800b236:	d120      	bne.n	800b27a <_dtoa_r+0xa72>
 800b238:	2a00      	cmp	r2, #0
 800b23a:	dded      	ble.n	800b218 <_dtoa_r+0xa10>
 800b23c:	4649      	mov	r1, r9
 800b23e:	2201      	movs	r2, #1
 800b240:	4658      	mov	r0, fp
 800b242:	f000 fbfd 	bl	800ba40 <__lshift>
 800b246:	4621      	mov	r1, r4
 800b248:	4681      	mov	r9, r0
 800b24a:	f000 fc65 	bl	800bb18 <__mcmp>
 800b24e:	2800      	cmp	r0, #0
 800b250:	dc03      	bgt.n	800b25a <_dtoa_r+0xa52>
 800b252:	d1e1      	bne.n	800b218 <_dtoa_r+0xa10>
 800b254:	f018 0f01 	tst.w	r8, #1
 800b258:	d0de      	beq.n	800b218 <_dtoa_r+0xa10>
 800b25a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b25e:	d1d8      	bne.n	800b212 <_dtoa_r+0xa0a>
 800b260:	9a00      	ldr	r2, [sp, #0]
 800b262:	2339      	movs	r3, #57	@ 0x39
 800b264:	7013      	strb	r3, [r2, #0]
 800b266:	4633      	mov	r3, r6
 800b268:	461e      	mov	r6, r3
 800b26a:	3b01      	subs	r3, #1
 800b26c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b270:	2a39      	cmp	r2, #57	@ 0x39
 800b272:	d052      	beq.n	800b31a <_dtoa_r+0xb12>
 800b274:	3201      	adds	r2, #1
 800b276:	701a      	strb	r2, [r3, #0]
 800b278:	e612      	b.n	800aea0 <_dtoa_r+0x698>
 800b27a:	2a00      	cmp	r2, #0
 800b27c:	dd07      	ble.n	800b28e <_dtoa_r+0xa86>
 800b27e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b282:	d0ed      	beq.n	800b260 <_dtoa_r+0xa58>
 800b284:	9a00      	ldr	r2, [sp, #0]
 800b286:	f108 0301 	add.w	r3, r8, #1
 800b28a:	7013      	strb	r3, [r2, #0]
 800b28c:	e608      	b.n	800aea0 <_dtoa_r+0x698>
 800b28e:	9b07      	ldr	r3, [sp, #28]
 800b290:	9a07      	ldr	r2, [sp, #28]
 800b292:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b298:	4293      	cmp	r3, r2
 800b29a:	d028      	beq.n	800b2ee <_dtoa_r+0xae6>
 800b29c:	4649      	mov	r1, r9
 800b29e:	2300      	movs	r3, #0
 800b2a0:	220a      	movs	r2, #10
 800b2a2:	4658      	mov	r0, fp
 800b2a4:	f000 f9d6 	bl	800b654 <__multadd>
 800b2a8:	42af      	cmp	r7, r5
 800b2aa:	4681      	mov	r9, r0
 800b2ac:	f04f 0300 	mov.w	r3, #0
 800b2b0:	f04f 020a 	mov.w	r2, #10
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	4658      	mov	r0, fp
 800b2b8:	d107      	bne.n	800b2ca <_dtoa_r+0xac2>
 800b2ba:	f000 f9cb 	bl	800b654 <__multadd>
 800b2be:	4607      	mov	r7, r0
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	9b07      	ldr	r3, [sp, #28]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	9307      	str	r3, [sp, #28]
 800b2c8:	e774      	b.n	800b1b4 <_dtoa_r+0x9ac>
 800b2ca:	f000 f9c3 	bl	800b654 <__multadd>
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4607      	mov	r7, r0
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	220a      	movs	r2, #10
 800b2d6:	4658      	mov	r0, fp
 800b2d8:	f000 f9bc 	bl	800b654 <__multadd>
 800b2dc:	4605      	mov	r5, r0
 800b2de:	e7f0      	b.n	800b2c2 <_dtoa_r+0xaba>
 800b2e0:	9b00      	ldr	r3, [sp, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bfcc      	ite	gt
 800b2e6:	461e      	movgt	r6, r3
 800b2e8:	2601      	movle	r6, #1
 800b2ea:	4456      	add	r6, sl
 800b2ec:	2700      	movs	r7, #0
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	4658      	mov	r0, fp
 800b2f4:	f000 fba4 	bl	800ba40 <__lshift>
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	4681      	mov	r9, r0
 800b2fc:	f000 fc0c 	bl	800bb18 <__mcmp>
 800b300:	2800      	cmp	r0, #0
 800b302:	dcb0      	bgt.n	800b266 <_dtoa_r+0xa5e>
 800b304:	d102      	bne.n	800b30c <_dtoa_r+0xb04>
 800b306:	f018 0f01 	tst.w	r8, #1
 800b30a:	d1ac      	bne.n	800b266 <_dtoa_r+0xa5e>
 800b30c:	4633      	mov	r3, r6
 800b30e:	461e      	mov	r6, r3
 800b310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b314:	2a30      	cmp	r2, #48	@ 0x30
 800b316:	d0fa      	beq.n	800b30e <_dtoa_r+0xb06>
 800b318:	e5c2      	b.n	800aea0 <_dtoa_r+0x698>
 800b31a:	459a      	cmp	sl, r3
 800b31c:	d1a4      	bne.n	800b268 <_dtoa_r+0xa60>
 800b31e:	9b04      	ldr	r3, [sp, #16]
 800b320:	3301      	adds	r3, #1
 800b322:	9304      	str	r3, [sp, #16]
 800b324:	2331      	movs	r3, #49	@ 0x31
 800b326:	f88a 3000 	strb.w	r3, [sl]
 800b32a:	e5b9      	b.n	800aea0 <_dtoa_r+0x698>
 800b32c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b32e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b38c <_dtoa_r+0xb84>
 800b332:	b11b      	cbz	r3, 800b33c <_dtoa_r+0xb34>
 800b334:	f10a 0308 	add.w	r3, sl, #8
 800b338:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	4650      	mov	r0, sl
 800b33e:	b019      	add	sp, #100	@ 0x64
 800b340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b346:	2b01      	cmp	r3, #1
 800b348:	f77f ae37 	ble.w	800afba <_dtoa_r+0x7b2>
 800b34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b34e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b350:	2001      	movs	r0, #1
 800b352:	e655      	b.n	800b000 <_dtoa_r+0x7f8>
 800b354:	9b00      	ldr	r3, [sp, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	f77f aed6 	ble.w	800b108 <_dtoa_r+0x900>
 800b35c:	4656      	mov	r6, sl
 800b35e:	4621      	mov	r1, r4
 800b360:	4648      	mov	r0, r9
 800b362:	f7ff f9c9 	bl	800a6f8 <quorem>
 800b366:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b36a:	f806 8b01 	strb.w	r8, [r6], #1
 800b36e:	9b00      	ldr	r3, [sp, #0]
 800b370:	eba6 020a 	sub.w	r2, r6, sl
 800b374:	4293      	cmp	r3, r2
 800b376:	ddb3      	ble.n	800b2e0 <_dtoa_r+0xad8>
 800b378:	4649      	mov	r1, r9
 800b37a:	2300      	movs	r3, #0
 800b37c:	220a      	movs	r2, #10
 800b37e:	4658      	mov	r0, fp
 800b380:	f000 f968 	bl	800b654 <__multadd>
 800b384:	4681      	mov	r9, r0
 800b386:	e7ea      	b.n	800b35e <_dtoa_r+0xb56>
 800b388:	0800df90 	.word	0x0800df90
 800b38c:	0800df2b 	.word	0x0800df2b

0800b390 <_free_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4605      	mov	r5, r0
 800b394:	2900      	cmp	r1, #0
 800b396:	d041      	beq.n	800b41c <_free_r+0x8c>
 800b398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b39c:	1f0c      	subs	r4, r1, #4
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	bfb8      	it	lt
 800b3a2:	18e4      	addlt	r4, r4, r3
 800b3a4:	f000 f8e8 	bl	800b578 <__malloc_lock>
 800b3a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b420 <_free_r+0x90>)
 800b3aa:	6813      	ldr	r3, [r2, #0]
 800b3ac:	b933      	cbnz	r3, 800b3bc <_free_r+0x2c>
 800b3ae:	6063      	str	r3, [r4, #4]
 800b3b0:	6014      	str	r4, [r2, #0]
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3b8:	f000 b8e4 	b.w	800b584 <__malloc_unlock>
 800b3bc:	42a3      	cmp	r3, r4
 800b3be:	d908      	bls.n	800b3d2 <_free_r+0x42>
 800b3c0:	6820      	ldr	r0, [r4, #0]
 800b3c2:	1821      	adds	r1, r4, r0
 800b3c4:	428b      	cmp	r3, r1
 800b3c6:	bf01      	itttt	eq
 800b3c8:	6819      	ldreq	r1, [r3, #0]
 800b3ca:	685b      	ldreq	r3, [r3, #4]
 800b3cc:	1809      	addeq	r1, r1, r0
 800b3ce:	6021      	streq	r1, [r4, #0]
 800b3d0:	e7ed      	b.n	800b3ae <_free_r+0x1e>
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	b10b      	cbz	r3, 800b3dc <_free_r+0x4c>
 800b3d8:	42a3      	cmp	r3, r4
 800b3da:	d9fa      	bls.n	800b3d2 <_free_r+0x42>
 800b3dc:	6811      	ldr	r1, [r2, #0]
 800b3de:	1850      	adds	r0, r2, r1
 800b3e0:	42a0      	cmp	r0, r4
 800b3e2:	d10b      	bne.n	800b3fc <_free_r+0x6c>
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	4401      	add	r1, r0
 800b3e8:	1850      	adds	r0, r2, r1
 800b3ea:	4283      	cmp	r3, r0
 800b3ec:	6011      	str	r1, [r2, #0]
 800b3ee:	d1e0      	bne.n	800b3b2 <_free_r+0x22>
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	6053      	str	r3, [r2, #4]
 800b3f6:	4408      	add	r0, r1
 800b3f8:	6010      	str	r0, [r2, #0]
 800b3fa:	e7da      	b.n	800b3b2 <_free_r+0x22>
 800b3fc:	d902      	bls.n	800b404 <_free_r+0x74>
 800b3fe:	230c      	movs	r3, #12
 800b400:	602b      	str	r3, [r5, #0]
 800b402:	e7d6      	b.n	800b3b2 <_free_r+0x22>
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	1821      	adds	r1, r4, r0
 800b408:	428b      	cmp	r3, r1
 800b40a:	bf04      	itt	eq
 800b40c:	6819      	ldreq	r1, [r3, #0]
 800b40e:	685b      	ldreq	r3, [r3, #4]
 800b410:	6063      	str	r3, [r4, #4]
 800b412:	bf04      	itt	eq
 800b414:	1809      	addeq	r1, r1, r0
 800b416:	6021      	streq	r1, [r4, #0]
 800b418:	6054      	str	r4, [r2, #4]
 800b41a:	e7ca      	b.n	800b3b2 <_free_r+0x22>
 800b41c:	bd38      	pop	{r3, r4, r5, pc}
 800b41e:	bf00      	nop
 800b420:	20000864 	.word	0x20000864

0800b424 <malloc>:
 800b424:	4b02      	ldr	r3, [pc, #8]	@ (800b430 <malloc+0xc>)
 800b426:	4601      	mov	r1, r0
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	f000 b825 	b.w	800b478 <_malloc_r>
 800b42e:	bf00      	nop
 800b430:	20000204 	.word	0x20000204

0800b434 <sbrk_aligned>:
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	4e0f      	ldr	r6, [pc, #60]	@ (800b474 <sbrk_aligned+0x40>)
 800b438:	460c      	mov	r4, r1
 800b43a:	6831      	ldr	r1, [r6, #0]
 800b43c:	4605      	mov	r5, r0
 800b43e:	b911      	cbnz	r1, 800b446 <sbrk_aligned+0x12>
 800b440:	f001 fda2 	bl	800cf88 <_sbrk_r>
 800b444:	6030      	str	r0, [r6, #0]
 800b446:	4621      	mov	r1, r4
 800b448:	4628      	mov	r0, r5
 800b44a:	f001 fd9d 	bl	800cf88 <_sbrk_r>
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	d103      	bne.n	800b45a <sbrk_aligned+0x26>
 800b452:	f04f 34ff 	mov.w	r4, #4294967295
 800b456:	4620      	mov	r0, r4
 800b458:	bd70      	pop	{r4, r5, r6, pc}
 800b45a:	1cc4      	adds	r4, r0, #3
 800b45c:	f024 0403 	bic.w	r4, r4, #3
 800b460:	42a0      	cmp	r0, r4
 800b462:	d0f8      	beq.n	800b456 <sbrk_aligned+0x22>
 800b464:	1a21      	subs	r1, r4, r0
 800b466:	4628      	mov	r0, r5
 800b468:	f001 fd8e 	bl	800cf88 <_sbrk_r>
 800b46c:	3001      	adds	r0, #1
 800b46e:	d1f2      	bne.n	800b456 <sbrk_aligned+0x22>
 800b470:	e7ef      	b.n	800b452 <sbrk_aligned+0x1e>
 800b472:	bf00      	nop
 800b474:	20000860 	.word	0x20000860

0800b478 <_malloc_r>:
 800b478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b47c:	1ccd      	adds	r5, r1, #3
 800b47e:	f025 0503 	bic.w	r5, r5, #3
 800b482:	3508      	adds	r5, #8
 800b484:	2d0c      	cmp	r5, #12
 800b486:	bf38      	it	cc
 800b488:	250c      	movcc	r5, #12
 800b48a:	2d00      	cmp	r5, #0
 800b48c:	4606      	mov	r6, r0
 800b48e:	db01      	blt.n	800b494 <_malloc_r+0x1c>
 800b490:	42a9      	cmp	r1, r5
 800b492:	d904      	bls.n	800b49e <_malloc_r+0x26>
 800b494:	230c      	movs	r3, #12
 800b496:	6033      	str	r3, [r6, #0]
 800b498:	2000      	movs	r0, #0
 800b49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b49e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b574 <_malloc_r+0xfc>
 800b4a2:	f000 f869 	bl	800b578 <__malloc_lock>
 800b4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b4aa:	461c      	mov	r4, r3
 800b4ac:	bb44      	cbnz	r4, 800b500 <_malloc_r+0x88>
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f7ff ffbf 	bl	800b434 <sbrk_aligned>
 800b4b6:	1c43      	adds	r3, r0, #1
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	d158      	bne.n	800b56e <_malloc_r+0xf6>
 800b4bc:	f8d8 4000 	ldr.w	r4, [r8]
 800b4c0:	4627      	mov	r7, r4
 800b4c2:	2f00      	cmp	r7, #0
 800b4c4:	d143      	bne.n	800b54e <_malloc_r+0xd6>
 800b4c6:	2c00      	cmp	r4, #0
 800b4c8:	d04b      	beq.n	800b562 <_malloc_r+0xea>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	eb04 0903 	add.w	r9, r4, r3
 800b4d4:	f001 fd58 	bl	800cf88 <_sbrk_r>
 800b4d8:	4581      	cmp	r9, r0
 800b4da:	d142      	bne.n	800b562 <_malloc_r+0xea>
 800b4dc:	6821      	ldr	r1, [r4, #0]
 800b4de:	1a6d      	subs	r5, r5, r1
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7ff ffa6 	bl	800b434 <sbrk_aligned>
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	d03a      	beq.n	800b562 <_malloc_r+0xea>
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	442b      	add	r3, r5
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4f6:	685a      	ldr	r2, [r3, #4]
 800b4f8:	bb62      	cbnz	r2, 800b554 <_malloc_r+0xdc>
 800b4fa:	f8c8 7000 	str.w	r7, [r8]
 800b4fe:	e00f      	b.n	800b520 <_malloc_r+0xa8>
 800b500:	6822      	ldr	r2, [r4, #0]
 800b502:	1b52      	subs	r2, r2, r5
 800b504:	d420      	bmi.n	800b548 <_malloc_r+0xd0>
 800b506:	2a0b      	cmp	r2, #11
 800b508:	d917      	bls.n	800b53a <_malloc_r+0xc2>
 800b50a:	1961      	adds	r1, r4, r5
 800b50c:	42a3      	cmp	r3, r4
 800b50e:	6025      	str	r5, [r4, #0]
 800b510:	bf18      	it	ne
 800b512:	6059      	strne	r1, [r3, #4]
 800b514:	6863      	ldr	r3, [r4, #4]
 800b516:	bf08      	it	eq
 800b518:	f8c8 1000 	streq.w	r1, [r8]
 800b51c:	5162      	str	r2, [r4, r5]
 800b51e:	604b      	str	r3, [r1, #4]
 800b520:	4630      	mov	r0, r6
 800b522:	f000 f82f 	bl	800b584 <__malloc_unlock>
 800b526:	f104 000b 	add.w	r0, r4, #11
 800b52a:	1d23      	adds	r3, r4, #4
 800b52c:	f020 0007 	bic.w	r0, r0, #7
 800b530:	1ac2      	subs	r2, r0, r3
 800b532:	bf1c      	itt	ne
 800b534:	1a1b      	subne	r3, r3, r0
 800b536:	50a3      	strne	r3, [r4, r2]
 800b538:	e7af      	b.n	800b49a <_malloc_r+0x22>
 800b53a:	6862      	ldr	r2, [r4, #4]
 800b53c:	42a3      	cmp	r3, r4
 800b53e:	bf0c      	ite	eq
 800b540:	f8c8 2000 	streq.w	r2, [r8]
 800b544:	605a      	strne	r2, [r3, #4]
 800b546:	e7eb      	b.n	800b520 <_malloc_r+0xa8>
 800b548:	4623      	mov	r3, r4
 800b54a:	6864      	ldr	r4, [r4, #4]
 800b54c:	e7ae      	b.n	800b4ac <_malloc_r+0x34>
 800b54e:	463c      	mov	r4, r7
 800b550:	687f      	ldr	r7, [r7, #4]
 800b552:	e7b6      	b.n	800b4c2 <_malloc_r+0x4a>
 800b554:	461a      	mov	r2, r3
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	42a3      	cmp	r3, r4
 800b55a:	d1fb      	bne.n	800b554 <_malloc_r+0xdc>
 800b55c:	2300      	movs	r3, #0
 800b55e:	6053      	str	r3, [r2, #4]
 800b560:	e7de      	b.n	800b520 <_malloc_r+0xa8>
 800b562:	230c      	movs	r3, #12
 800b564:	6033      	str	r3, [r6, #0]
 800b566:	4630      	mov	r0, r6
 800b568:	f000 f80c 	bl	800b584 <__malloc_unlock>
 800b56c:	e794      	b.n	800b498 <_malloc_r+0x20>
 800b56e:	6005      	str	r5, [r0, #0]
 800b570:	e7d6      	b.n	800b520 <_malloc_r+0xa8>
 800b572:	bf00      	nop
 800b574:	20000864 	.word	0x20000864

0800b578 <__malloc_lock>:
 800b578:	4801      	ldr	r0, [pc, #4]	@ (800b580 <__malloc_lock+0x8>)
 800b57a:	f7ff b896 	b.w	800a6aa <__retarget_lock_acquire_recursive>
 800b57e:	bf00      	nop
 800b580:	2000085c 	.word	0x2000085c

0800b584 <__malloc_unlock>:
 800b584:	4801      	ldr	r0, [pc, #4]	@ (800b58c <__malloc_unlock+0x8>)
 800b586:	f7ff b891 	b.w	800a6ac <__retarget_lock_release_recursive>
 800b58a:	bf00      	nop
 800b58c:	2000085c 	.word	0x2000085c

0800b590 <_Balloc>:
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	69c6      	ldr	r6, [r0, #28]
 800b594:	4604      	mov	r4, r0
 800b596:	460d      	mov	r5, r1
 800b598:	b976      	cbnz	r6, 800b5b8 <_Balloc+0x28>
 800b59a:	2010      	movs	r0, #16
 800b59c:	f7ff ff42 	bl	800b424 <malloc>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	61e0      	str	r0, [r4, #28]
 800b5a4:	b920      	cbnz	r0, 800b5b0 <_Balloc+0x20>
 800b5a6:	4b18      	ldr	r3, [pc, #96]	@ (800b608 <_Balloc+0x78>)
 800b5a8:	4818      	ldr	r0, [pc, #96]	@ (800b60c <_Balloc+0x7c>)
 800b5aa:	216b      	movs	r1, #107	@ 0x6b
 800b5ac:	f7ff f886 	bl	800a6bc <__assert_func>
 800b5b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5b4:	6006      	str	r6, [r0, #0]
 800b5b6:	60c6      	str	r6, [r0, #12]
 800b5b8:	69e6      	ldr	r6, [r4, #28]
 800b5ba:	68f3      	ldr	r3, [r6, #12]
 800b5bc:	b183      	cbz	r3, 800b5e0 <_Balloc+0x50>
 800b5be:	69e3      	ldr	r3, [r4, #28]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5c6:	b9b8      	cbnz	r0, 800b5f8 <_Balloc+0x68>
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b5ce:	1d72      	adds	r2, r6, #5
 800b5d0:	0092      	lsls	r2, r2, #2
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f001 fd07 	bl	800cfe6 <_calloc_r>
 800b5d8:	b160      	cbz	r0, 800b5f4 <_Balloc+0x64>
 800b5da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5de:	e00e      	b.n	800b5fe <_Balloc+0x6e>
 800b5e0:	2221      	movs	r2, #33	@ 0x21
 800b5e2:	2104      	movs	r1, #4
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f001 fcfe 	bl	800cfe6 <_calloc_r>
 800b5ea:	69e3      	ldr	r3, [r4, #28]
 800b5ec:	60f0      	str	r0, [r6, #12]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1e4      	bne.n	800b5be <_Balloc+0x2e>
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	6802      	ldr	r2, [r0, #0]
 800b5fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5fe:	2300      	movs	r3, #0
 800b600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b604:	e7f7      	b.n	800b5f6 <_Balloc+0x66>
 800b606:	bf00      	nop
 800b608:	0800de7e 	.word	0x0800de7e
 800b60c:	0800dfa1 	.word	0x0800dfa1

0800b610 <_Bfree>:
 800b610:	b570      	push	{r4, r5, r6, lr}
 800b612:	69c6      	ldr	r6, [r0, #28]
 800b614:	4605      	mov	r5, r0
 800b616:	460c      	mov	r4, r1
 800b618:	b976      	cbnz	r6, 800b638 <_Bfree+0x28>
 800b61a:	2010      	movs	r0, #16
 800b61c:	f7ff ff02 	bl	800b424 <malloc>
 800b620:	4602      	mov	r2, r0
 800b622:	61e8      	str	r0, [r5, #28]
 800b624:	b920      	cbnz	r0, 800b630 <_Bfree+0x20>
 800b626:	4b09      	ldr	r3, [pc, #36]	@ (800b64c <_Bfree+0x3c>)
 800b628:	4809      	ldr	r0, [pc, #36]	@ (800b650 <_Bfree+0x40>)
 800b62a:	218f      	movs	r1, #143	@ 0x8f
 800b62c:	f7ff f846 	bl	800a6bc <__assert_func>
 800b630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b634:	6006      	str	r6, [r0, #0]
 800b636:	60c6      	str	r6, [r0, #12]
 800b638:	b13c      	cbz	r4, 800b64a <_Bfree+0x3a>
 800b63a:	69eb      	ldr	r3, [r5, #28]
 800b63c:	6862      	ldr	r2, [r4, #4]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b644:	6021      	str	r1, [r4, #0]
 800b646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	0800de7e 	.word	0x0800de7e
 800b650:	0800dfa1 	.word	0x0800dfa1

0800b654 <__multadd>:
 800b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b658:	690d      	ldr	r5, [r1, #16]
 800b65a:	4607      	mov	r7, r0
 800b65c:	460c      	mov	r4, r1
 800b65e:	461e      	mov	r6, r3
 800b660:	f101 0c14 	add.w	ip, r1, #20
 800b664:	2000      	movs	r0, #0
 800b666:	f8dc 3000 	ldr.w	r3, [ip]
 800b66a:	b299      	uxth	r1, r3
 800b66c:	fb02 6101 	mla	r1, r2, r1, r6
 800b670:	0c1e      	lsrs	r6, r3, #16
 800b672:	0c0b      	lsrs	r3, r1, #16
 800b674:	fb02 3306 	mla	r3, r2, r6, r3
 800b678:	b289      	uxth	r1, r1
 800b67a:	3001      	adds	r0, #1
 800b67c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b680:	4285      	cmp	r5, r0
 800b682:	f84c 1b04 	str.w	r1, [ip], #4
 800b686:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b68a:	dcec      	bgt.n	800b666 <__multadd+0x12>
 800b68c:	b30e      	cbz	r6, 800b6d2 <__multadd+0x7e>
 800b68e:	68a3      	ldr	r3, [r4, #8]
 800b690:	42ab      	cmp	r3, r5
 800b692:	dc19      	bgt.n	800b6c8 <__multadd+0x74>
 800b694:	6861      	ldr	r1, [r4, #4]
 800b696:	4638      	mov	r0, r7
 800b698:	3101      	adds	r1, #1
 800b69a:	f7ff ff79 	bl	800b590 <_Balloc>
 800b69e:	4680      	mov	r8, r0
 800b6a0:	b928      	cbnz	r0, 800b6ae <__multadd+0x5a>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d8 <__multadd+0x84>)
 800b6a6:	480d      	ldr	r0, [pc, #52]	@ (800b6dc <__multadd+0x88>)
 800b6a8:	21ba      	movs	r1, #186	@ 0xba
 800b6aa:	f7ff f807 	bl	800a6bc <__assert_func>
 800b6ae:	6922      	ldr	r2, [r4, #16]
 800b6b0:	3202      	adds	r2, #2
 800b6b2:	f104 010c 	add.w	r1, r4, #12
 800b6b6:	0092      	lsls	r2, r2, #2
 800b6b8:	300c      	adds	r0, #12
 800b6ba:	f001 fc75 	bl	800cfa8 <memcpy>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f7ff ffa5 	bl	800b610 <_Bfree>
 800b6c6:	4644      	mov	r4, r8
 800b6c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	615e      	str	r6, [r3, #20]
 800b6d0:	6125      	str	r5, [r4, #16]
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d8:	0800df90 	.word	0x0800df90
 800b6dc:	0800dfa1 	.word	0x0800dfa1

0800b6e0 <__s2b>:
 800b6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	4615      	mov	r5, r2
 800b6e8:	461f      	mov	r7, r3
 800b6ea:	2209      	movs	r2, #9
 800b6ec:	3308      	adds	r3, #8
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	db09      	blt.n	800b710 <__s2b+0x30>
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7ff ff47 	bl	800b590 <_Balloc>
 800b702:	b940      	cbnz	r0, 800b716 <__s2b+0x36>
 800b704:	4602      	mov	r2, r0
 800b706:	4b19      	ldr	r3, [pc, #100]	@ (800b76c <__s2b+0x8c>)
 800b708:	4819      	ldr	r0, [pc, #100]	@ (800b770 <__s2b+0x90>)
 800b70a:	21d3      	movs	r1, #211	@ 0xd3
 800b70c:	f7fe ffd6 	bl	800a6bc <__assert_func>
 800b710:	0052      	lsls	r2, r2, #1
 800b712:	3101      	adds	r1, #1
 800b714:	e7f0      	b.n	800b6f8 <__s2b+0x18>
 800b716:	9b08      	ldr	r3, [sp, #32]
 800b718:	6143      	str	r3, [r0, #20]
 800b71a:	2d09      	cmp	r5, #9
 800b71c:	f04f 0301 	mov.w	r3, #1
 800b720:	6103      	str	r3, [r0, #16]
 800b722:	dd16      	ble.n	800b752 <__s2b+0x72>
 800b724:	f104 0909 	add.w	r9, r4, #9
 800b728:	46c8      	mov	r8, r9
 800b72a:	442c      	add	r4, r5
 800b72c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b730:	4601      	mov	r1, r0
 800b732:	3b30      	subs	r3, #48	@ 0x30
 800b734:	220a      	movs	r2, #10
 800b736:	4630      	mov	r0, r6
 800b738:	f7ff ff8c 	bl	800b654 <__multadd>
 800b73c:	45a0      	cmp	r8, r4
 800b73e:	d1f5      	bne.n	800b72c <__s2b+0x4c>
 800b740:	f1a5 0408 	sub.w	r4, r5, #8
 800b744:	444c      	add	r4, r9
 800b746:	1b2d      	subs	r5, r5, r4
 800b748:	1963      	adds	r3, r4, r5
 800b74a:	42bb      	cmp	r3, r7
 800b74c:	db04      	blt.n	800b758 <__s2b+0x78>
 800b74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b752:	340a      	adds	r4, #10
 800b754:	2509      	movs	r5, #9
 800b756:	e7f6      	b.n	800b746 <__s2b+0x66>
 800b758:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b75c:	4601      	mov	r1, r0
 800b75e:	3b30      	subs	r3, #48	@ 0x30
 800b760:	220a      	movs	r2, #10
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff ff76 	bl	800b654 <__multadd>
 800b768:	e7ee      	b.n	800b748 <__s2b+0x68>
 800b76a:	bf00      	nop
 800b76c:	0800df90 	.word	0x0800df90
 800b770:	0800dfa1 	.word	0x0800dfa1

0800b774 <__hi0bits>:
 800b774:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b778:	4603      	mov	r3, r0
 800b77a:	bf36      	itet	cc
 800b77c:	0403      	lslcc	r3, r0, #16
 800b77e:	2000      	movcs	r0, #0
 800b780:	2010      	movcc	r0, #16
 800b782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b786:	bf3c      	itt	cc
 800b788:	021b      	lslcc	r3, r3, #8
 800b78a:	3008      	addcc	r0, #8
 800b78c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b790:	bf3c      	itt	cc
 800b792:	011b      	lslcc	r3, r3, #4
 800b794:	3004      	addcc	r0, #4
 800b796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b79a:	bf3c      	itt	cc
 800b79c:	009b      	lslcc	r3, r3, #2
 800b79e:	3002      	addcc	r0, #2
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	db05      	blt.n	800b7b0 <__hi0bits+0x3c>
 800b7a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b7a8:	f100 0001 	add.w	r0, r0, #1
 800b7ac:	bf08      	it	eq
 800b7ae:	2020      	moveq	r0, #32
 800b7b0:	4770      	bx	lr

0800b7b2 <__lo0bits>:
 800b7b2:	6803      	ldr	r3, [r0, #0]
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	f013 0007 	ands.w	r0, r3, #7
 800b7ba:	d00b      	beq.n	800b7d4 <__lo0bits+0x22>
 800b7bc:	07d9      	lsls	r1, r3, #31
 800b7be:	d421      	bmi.n	800b804 <__lo0bits+0x52>
 800b7c0:	0798      	lsls	r0, r3, #30
 800b7c2:	bf49      	itett	mi
 800b7c4:	085b      	lsrmi	r3, r3, #1
 800b7c6:	089b      	lsrpl	r3, r3, #2
 800b7c8:	2001      	movmi	r0, #1
 800b7ca:	6013      	strmi	r3, [r2, #0]
 800b7cc:	bf5c      	itt	pl
 800b7ce:	6013      	strpl	r3, [r2, #0]
 800b7d0:	2002      	movpl	r0, #2
 800b7d2:	4770      	bx	lr
 800b7d4:	b299      	uxth	r1, r3
 800b7d6:	b909      	cbnz	r1, 800b7dc <__lo0bits+0x2a>
 800b7d8:	0c1b      	lsrs	r3, r3, #16
 800b7da:	2010      	movs	r0, #16
 800b7dc:	b2d9      	uxtb	r1, r3
 800b7de:	b909      	cbnz	r1, 800b7e4 <__lo0bits+0x32>
 800b7e0:	3008      	adds	r0, #8
 800b7e2:	0a1b      	lsrs	r3, r3, #8
 800b7e4:	0719      	lsls	r1, r3, #28
 800b7e6:	bf04      	itt	eq
 800b7e8:	091b      	lsreq	r3, r3, #4
 800b7ea:	3004      	addeq	r0, #4
 800b7ec:	0799      	lsls	r1, r3, #30
 800b7ee:	bf04      	itt	eq
 800b7f0:	089b      	lsreq	r3, r3, #2
 800b7f2:	3002      	addeq	r0, #2
 800b7f4:	07d9      	lsls	r1, r3, #31
 800b7f6:	d403      	bmi.n	800b800 <__lo0bits+0x4e>
 800b7f8:	085b      	lsrs	r3, r3, #1
 800b7fa:	f100 0001 	add.w	r0, r0, #1
 800b7fe:	d003      	beq.n	800b808 <__lo0bits+0x56>
 800b800:	6013      	str	r3, [r2, #0]
 800b802:	4770      	bx	lr
 800b804:	2000      	movs	r0, #0
 800b806:	4770      	bx	lr
 800b808:	2020      	movs	r0, #32
 800b80a:	4770      	bx	lr

0800b80c <__i2b>:
 800b80c:	b510      	push	{r4, lr}
 800b80e:	460c      	mov	r4, r1
 800b810:	2101      	movs	r1, #1
 800b812:	f7ff febd 	bl	800b590 <_Balloc>
 800b816:	4602      	mov	r2, r0
 800b818:	b928      	cbnz	r0, 800b826 <__i2b+0x1a>
 800b81a:	4b05      	ldr	r3, [pc, #20]	@ (800b830 <__i2b+0x24>)
 800b81c:	4805      	ldr	r0, [pc, #20]	@ (800b834 <__i2b+0x28>)
 800b81e:	f240 1145 	movw	r1, #325	@ 0x145
 800b822:	f7fe ff4b 	bl	800a6bc <__assert_func>
 800b826:	2301      	movs	r3, #1
 800b828:	6144      	str	r4, [r0, #20]
 800b82a:	6103      	str	r3, [r0, #16]
 800b82c:	bd10      	pop	{r4, pc}
 800b82e:	bf00      	nop
 800b830:	0800df90 	.word	0x0800df90
 800b834:	0800dfa1 	.word	0x0800dfa1

0800b838 <__multiply>:
 800b838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83c:	4614      	mov	r4, r2
 800b83e:	690a      	ldr	r2, [r1, #16]
 800b840:	6923      	ldr	r3, [r4, #16]
 800b842:	429a      	cmp	r2, r3
 800b844:	bfa8      	it	ge
 800b846:	4623      	movge	r3, r4
 800b848:	460f      	mov	r7, r1
 800b84a:	bfa4      	itt	ge
 800b84c:	460c      	movge	r4, r1
 800b84e:	461f      	movge	r7, r3
 800b850:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b854:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	6861      	ldr	r1, [r4, #4]
 800b85c:	eb0a 0609 	add.w	r6, sl, r9
 800b860:	42b3      	cmp	r3, r6
 800b862:	b085      	sub	sp, #20
 800b864:	bfb8      	it	lt
 800b866:	3101      	addlt	r1, #1
 800b868:	f7ff fe92 	bl	800b590 <_Balloc>
 800b86c:	b930      	cbnz	r0, 800b87c <__multiply+0x44>
 800b86e:	4602      	mov	r2, r0
 800b870:	4b44      	ldr	r3, [pc, #272]	@ (800b984 <__multiply+0x14c>)
 800b872:	4845      	ldr	r0, [pc, #276]	@ (800b988 <__multiply+0x150>)
 800b874:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b878:	f7fe ff20 	bl	800a6bc <__assert_func>
 800b87c:	f100 0514 	add.w	r5, r0, #20
 800b880:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b884:	462b      	mov	r3, r5
 800b886:	2200      	movs	r2, #0
 800b888:	4543      	cmp	r3, r8
 800b88a:	d321      	bcc.n	800b8d0 <__multiply+0x98>
 800b88c:	f107 0114 	add.w	r1, r7, #20
 800b890:	f104 0214 	add.w	r2, r4, #20
 800b894:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b898:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b89c:	9302      	str	r3, [sp, #8]
 800b89e:	1b13      	subs	r3, r2, r4
 800b8a0:	3b15      	subs	r3, #21
 800b8a2:	f023 0303 	bic.w	r3, r3, #3
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	f104 0715 	add.w	r7, r4, #21
 800b8ac:	42ba      	cmp	r2, r7
 800b8ae:	bf38      	it	cc
 800b8b0:	2304      	movcc	r3, #4
 800b8b2:	9301      	str	r3, [sp, #4]
 800b8b4:	9b02      	ldr	r3, [sp, #8]
 800b8b6:	9103      	str	r1, [sp, #12]
 800b8b8:	428b      	cmp	r3, r1
 800b8ba:	d80c      	bhi.n	800b8d6 <__multiply+0x9e>
 800b8bc:	2e00      	cmp	r6, #0
 800b8be:	dd03      	ble.n	800b8c8 <__multiply+0x90>
 800b8c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d05b      	beq.n	800b980 <__multiply+0x148>
 800b8c8:	6106      	str	r6, [r0, #16]
 800b8ca:	b005      	add	sp, #20
 800b8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d0:	f843 2b04 	str.w	r2, [r3], #4
 800b8d4:	e7d8      	b.n	800b888 <__multiply+0x50>
 800b8d6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b8da:	f1ba 0f00 	cmp.w	sl, #0
 800b8de:	d024      	beq.n	800b92a <__multiply+0xf2>
 800b8e0:	f104 0e14 	add.w	lr, r4, #20
 800b8e4:	46a9      	mov	r9, r5
 800b8e6:	f04f 0c00 	mov.w	ip, #0
 800b8ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8ee:	f8d9 3000 	ldr.w	r3, [r9]
 800b8f2:	fa1f fb87 	uxth.w	fp, r7
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b8fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b900:	f8d9 7000 	ldr.w	r7, [r9]
 800b904:	4463      	add	r3, ip
 800b906:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b90a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b90e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b912:	b29b      	uxth	r3, r3
 800b914:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b918:	4572      	cmp	r2, lr
 800b91a:	f849 3b04 	str.w	r3, [r9], #4
 800b91e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b922:	d8e2      	bhi.n	800b8ea <__multiply+0xb2>
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	f845 c003 	str.w	ip, [r5, r3]
 800b92a:	9b03      	ldr	r3, [sp, #12]
 800b92c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b930:	3104      	adds	r1, #4
 800b932:	f1b9 0f00 	cmp.w	r9, #0
 800b936:	d021      	beq.n	800b97c <__multiply+0x144>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	f104 0c14 	add.w	ip, r4, #20
 800b93e:	46ae      	mov	lr, r5
 800b940:	f04f 0a00 	mov.w	sl, #0
 800b944:	f8bc b000 	ldrh.w	fp, [ip]
 800b948:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b94c:	fb09 770b 	mla	r7, r9, fp, r7
 800b950:	4457      	add	r7, sl
 800b952:	b29b      	uxth	r3, r3
 800b954:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b958:	f84e 3b04 	str.w	r3, [lr], #4
 800b95c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b960:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b964:	f8be 3000 	ldrh.w	r3, [lr]
 800b968:	fb09 330a 	mla	r3, r9, sl, r3
 800b96c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b970:	4562      	cmp	r2, ip
 800b972:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b976:	d8e5      	bhi.n	800b944 <__multiply+0x10c>
 800b978:	9f01      	ldr	r7, [sp, #4]
 800b97a:	51eb      	str	r3, [r5, r7]
 800b97c:	3504      	adds	r5, #4
 800b97e:	e799      	b.n	800b8b4 <__multiply+0x7c>
 800b980:	3e01      	subs	r6, #1
 800b982:	e79b      	b.n	800b8bc <__multiply+0x84>
 800b984:	0800df90 	.word	0x0800df90
 800b988:	0800dfa1 	.word	0x0800dfa1

0800b98c <__pow5mult>:
 800b98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b990:	4615      	mov	r5, r2
 800b992:	f012 0203 	ands.w	r2, r2, #3
 800b996:	4607      	mov	r7, r0
 800b998:	460e      	mov	r6, r1
 800b99a:	d007      	beq.n	800b9ac <__pow5mult+0x20>
 800b99c:	4c25      	ldr	r4, [pc, #148]	@ (800ba34 <__pow5mult+0xa8>)
 800b99e:	3a01      	subs	r2, #1
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9a6:	f7ff fe55 	bl	800b654 <__multadd>
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	10ad      	asrs	r5, r5, #2
 800b9ae:	d03d      	beq.n	800ba2c <__pow5mult+0xa0>
 800b9b0:	69fc      	ldr	r4, [r7, #28]
 800b9b2:	b97c      	cbnz	r4, 800b9d4 <__pow5mult+0x48>
 800b9b4:	2010      	movs	r0, #16
 800b9b6:	f7ff fd35 	bl	800b424 <malloc>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	61f8      	str	r0, [r7, #28]
 800b9be:	b928      	cbnz	r0, 800b9cc <__pow5mult+0x40>
 800b9c0:	4b1d      	ldr	r3, [pc, #116]	@ (800ba38 <__pow5mult+0xac>)
 800b9c2:	481e      	ldr	r0, [pc, #120]	@ (800ba3c <__pow5mult+0xb0>)
 800b9c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b9c8:	f7fe fe78 	bl	800a6bc <__assert_func>
 800b9cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9d0:	6004      	str	r4, [r0, #0]
 800b9d2:	60c4      	str	r4, [r0, #12]
 800b9d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b9d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9dc:	b94c      	cbnz	r4, 800b9f2 <__pow5mult+0x66>
 800b9de:	f240 2171 	movw	r1, #625	@ 0x271
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	f7ff ff12 	bl	800b80c <__i2b>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	6003      	str	r3, [r0, #0]
 800b9f2:	f04f 0900 	mov.w	r9, #0
 800b9f6:	07eb      	lsls	r3, r5, #31
 800b9f8:	d50a      	bpl.n	800ba10 <__pow5mult+0x84>
 800b9fa:	4631      	mov	r1, r6
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	4638      	mov	r0, r7
 800ba00:	f7ff ff1a 	bl	800b838 <__multiply>
 800ba04:	4631      	mov	r1, r6
 800ba06:	4680      	mov	r8, r0
 800ba08:	4638      	mov	r0, r7
 800ba0a:	f7ff fe01 	bl	800b610 <_Bfree>
 800ba0e:	4646      	mov	r6, r8
 800ba10:	106d      	asrs	r5, r5, #1
 800ba12:	d00b      	beq.n	800ba2c <__pow5mult+0xa0>
 800ba14:	6820      	ldr	r0, [r4, #0]
 800ba16:	b938      	cbnz	r0, 800ba28 <__pow5mult+0x9c>
 800ba18:	4622      	mov	r2, r4
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4638      	mov	r0, r7
 800ba1e:	f7ff ff0b 	bl	800b838 <__multiply>
 800ba22:	6020      	str	r0, [r4, #0]
 800ba24:	f8c0 9000 	str.w	r9, [r0]
 800ba28:	4604      	mov	r4, r0
 800ba2a:	e7e4      	b.n	800b9f6 <__pow5mult+0x6a>
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba32:	bf00      	nop
 800ba34:	0800dffc 	.word	0x0800dffc
 800ba38:	0800de7e 	.word	0x0800de7e
 800ba3c:	0800dfa1 	.word	0x0800dfa1

0800ba40 <__lshift>:
 800ba40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba44:	460c      	mov	r4, r1
 800ba46:	6849      	ldr	r1, [r1, #4]
 800ba48:	6923      	ldr	r3, [r4, #16]
 800ba4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba4e:	68a3      	ldr	r3, [r4, #8]
 800ba50:	4607      	mov	r7, r0
 800ba52:	4691      	mov	r9, r2
 800ba54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba58:	f108 0601 	add.w	r6, r8, #1
 800ba5c:	42b3      	cmp	r3, r6
 800ba5e:	db0b      	blt.n	800ba78 <__lshift+0x38>
 800ba60:	4638      	mov	r0, r7
 800ba62:	f7ff fd95 	bl	800b590 <_Balloc>
 800ba66:	4605      	mov	r5, r0
 800ba68:	b948      	cbnz	r0, 800ba7e <__lshift+0x3e>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	4b28      	ldr	r3, [pc, #160]	@ (800bb10 <__lshift+0xd0>)
 800ba6e:	4829      	ldr	r0, [pc, #164]	@ (800bb14 <__lshift+0xd4>)
 800ba70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba74:	f7fe fe22 	bl	800a6bc <__assert_func>
 800ba78:	3101      	adds	r1, #1
 800ba7a:	005b      	lsls	r3, r3, #1
 800ba7c:	e7ee      	b.n	800ba5c <__lshift+0x1c>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f100 0114 	add.w	r1, r0, #20
 800ba84:	f100 0210 	add.w	r2, r0, #16
 800ba88:	4618      	mov	r0, r3
 800ba8a:	4553      	cmp	r3, sl
 800ba8c:	db33      	blt.n	800baf6 <__lshift+0xb6>
 800ba8e:	6920      	ldr	r0, [r4, #16]
 800ba90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba94:	f104 0314 	add.w	r3, r4, #20
 800ba98:	f019 091f 	ands.w	r9, r9, #31
 800ba9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800baa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800baa4:	d02b      	beq.n	800bafe <__lshift+0xbe>
 800baa6:	f1c9 0e20 	rsb	lr, r9, #32
 800baaa:	468a      	mov	sl, r1
 800baac:	2200      	movs	r2, #0
 800baae:	6818      	ldr	r0, [r3, #0]
 800bab0:	fa00 f009 	lsl.w	r0, r0, r9
 800bab4:	4310      	orrs	r0, r2
 800bab6:	f84a 0b04 	str.w	r0, [sl], #4
 800baba:	f853 2b04 	ldr.w	r2, [r3], #4
 800babe:	459c      	cmp	ip, r3
 800bac0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bac4:	d8f3      	bhi.n	800baae <__lshift+0x6e>
 800bac6:	ebac 0304 	sub.w	r3, ip, r4
 800baca:	3b15      	subs	r3, #21
 800bacc:	f023 0303 	bic.w	r3, r3, #3
 800bad0:	3304      	adds	r3, #4
 800bad2:	f104 0015 	add.w	r0, r4, #21
 800bad6:	4584      	cmp	ip, r0
 800bad8:	bf38      	it	cc
 800bada:	2304      	movcc	r3, #4
 800badc:	50ca      	str	r2, [r1, r3]
 800bade:	b10a      	cbz	r2, 800bae4 <__lshift+0xa4>
 800bae0:	f108 0602 	add.w	r6, r8, #2
 800bae4:	3e01      	subs	r6, #1
 800bae6:	4638      	mov	r0, r7
 800bae8:	612e      	str	r6, [r5, #16]
 800baea:	4621      	mov	r1, r4
 800baec:	f7ff fd90 	bl	800b610 <_Bfree>
 800baf0:	4628      	mov	r0, r5
 800baf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bafa:	3301      	adds	r3, #1
 800bafc:	e7c5      	b.n	800ba8a <__lshift+0x4a>
 800bafe:	3904      	subs	r1, #4
 800bb00:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb04:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb08:	459c      	cmp	ip, r3
 800bb0a:	d8f9      	bhi.n	800bb00 <__lshift+0xc0>
 800bb0c:	e7ea      	b.n	800bae4 <__lshift+0xa4>
 800bb0e:	bf00      	nop
 800bb10:	0800df90 	.word	0x0800df90
 800bb14:	0800dfa1 	.word	0x0800dfa1

0800bb18 <__mcmp>:
 800bb18:	690a      	ldr	r2, [r1, #16]
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	6900      	ldr	r0, [r0, #16]
 800bb1e:	1a80      	subs	r0, r0, r2
 800bb20:	b530      	push	{r4, r5, lr}
 800bb22:	d10e      	bne.n	800bb42 <__mcmp+0x2a>
 800bb24:	3314      	adds	r3, #20
 800bb26:	3114      	adds	r1, #20
 800bb28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb38:	4295      	cmp	r5, r2
 800bb3a:	d003      	beq.n	800bb44 <__mcmp+0x2c>
 800bb3c:	d205      	bcs.n	800bb4a <__mcmp+0x32>
 800bb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb42:	bd30      	pop	{r4, r5, pc}
 800bb44:	42a3      	cmp	r3, r4
 800bb46:	d3f3      	bcc.n	800bb30 <__mcmp+0x18>
 800bb48:	e7fb      	b.n	800bb42 <__mcmp+0x2a>
 800bb4a:	2001      	movs	r0, #1
 800bb4c:	e7f9      	b.n	800bb42 <__mcmp+0x2a>
	...

0800bb50 <__mdiff>:
 800bb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	4689      	mov	r9, r1
 800bb56:	4606      	mov	r6, r0
 800bb58:	4611      	mov	r1, r2
 800bb5a:	4648      	mov	r0, r9
 800bb5c:	4614      	mov	r4, r2
 800bb5e:	f7ff ffdb 	bl	800bb18 <__mcmp>
 800bb62:	1e05      	subs	r5, r0, #0
 800bb64:	d112      	bne.n	800bb8c <__mdiff+0x3c>
 800bb66:	4629      	mov	r1, r5
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7ff fd11 	bl	800b590 <_Balloc>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	b928      	cbnz	r0, 800bb7e <__mdiff+0x2e>
 800bb72:	4b3f      	ldr	r3, [pc, #252]	@ (800bc70 <__mdiff+0x120>)
 800bb74:	f240 2137 	movw	r1, #567	@ 0x237
 800bb78:	483e      	ldr	r0, [pc, #248]	@ (800bc74 <__mdiff+0x124>)
 800bb7a:	f7fe fd9f 	bl	800a6bc <__assert_func>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb84:	4610      	mov	r0, r2
 800bb86:	b003      	add	sp, #12
 800bb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8c:	bfbc      	itt	lt
 800bb8e:	464b      	movlt	r3, r9
 800bb90:	46a1      	movlt	r9, r4
 800bb92:	4630      	mov	r0, r6
 800bb94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb98:	bfba      	itte	lt
 800bb9a:	461c      	movlt	r4, r3
 800bb9c:	2501      	movlt	r5, #1
 800bb9e:	2500      	movge	r5, #0
 800bba0:	f7ff fcf6 	bl	800b590 <_Balloc>
 800bba4:	4602      	mov	r2, r0
 800bba6:	b918      	cbnz	r0, 800bbb0 <__mdiff+0x60>
 800bba8:	4b31      	ldr	r3, [pc, #196]	@ (800bc70 <__mdiff+0x120>)
 800bbaa:	f240 2145 	movw	r1, #581	@ 0x245
 800bbae:	e7e3      	b.n	800bb78 <__mdiff+0x28>
 800bbb0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bbb4:	6926      	ldr	r6, [r4, #16]
 800bbb6:	60c5      	str	r5, [r0, #12]
 800bbb8:	f109 0310 	add.w	r3, r9, #16
 800bbbc:	f109 0514 	add.w	r5, r9, #20
 800bbc0:	f104 0e14 	add.w	lr, r4, #20
 800bbc4:	f100 0b14 	add.w	fp, r0, #20
 800bbc8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bbcc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bbd0:	9301      	str	r3, [sp, #4]
 800bbd2:	46d9      	mov	r9, fp
 800bbd4:	f04f 0c00 	mov.w	ip, #0
 800bbd8:	9b01      	ldr	r3, [sp, #4]
 800bbda:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bbde:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	fa1f f38a 	uxth.w	r3, sl
 800bbe8:	4619      	mov	r1, r3
 800bbea:	b283      	uxth	r3, r0
 800bbec:	1acb      	subs	r3, r1, r3
 800bbee:	0c00      	lsrs	r0, r0, #16
 800bbf0:	4463      	add	r3, ip
 800bbf2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bbf6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc00:	4576      	cmp	r6, lr
 800bc02:	f849 3b04 	str.w	r3, [r9], #4
 800bc06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc0a:	d8e5      	bhi.n	800bbd8 <__mdiff+0x88>
 800bc0c:	1b33      	subs	r3, r6, r4
 800bc0e:	3b15      	subs	r3, #21
 800bc10:	f023 0303 	bic.w	r3, r3, #3
 800bc14:	3415      	adds	r4, #21
 800bc16:	3304      	adds	r3, #4
 800bc18:	42a6      	cmp	r6, r4
 800bc1a:	bf38      	it	cc
 800bc1c:	2304      	movcc	r3, #4
 800bc1e:	441d      	add	r5, r3
 800bc20:	445b      	add	r3, fp
 800bc22:	461e      	mov	r6, r3
 800bc24:	462c      	mov	r4, r5
 800bc26:	4544      	cmp	r4, r8
 800bc28:	d30e      	bcc.n	800bc48 <__mdiff+0xf8>
 800bc2a:	f108 0103 	add.w	r1, r8, #3
 800bc2e:	1b49      	subs	r1, r1, r5
 800bc30:	f021 0103 	bic.w	r1, r1, #3
 800bc34:	3d03      	subs	r5, #3
 800bc36:	45a8      	cmp	r8, r5
 800bc38:	bf38      	it	cc
 800bc3a:	2100      	movcc	r1, #0
 800bc3c:	440b      	add	r3, r1
 800bc3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc42:	b191      	cbz	r1, 800bc6a <__mdiff+0x11a>
 800bc44:	6117      	str	r7, [r2, #16]
 800bc46:	e79d      	b.n	800bb84 <__mdiff+0x34>
 800bc48:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc4c:	46e6      	mov	lr, ip
 800bc4e:	0c08      	lsrs	r0, r1, #16
 800bc50:	fa1c fc81 	uxtah	ip, ip, r1
 800bc54:	4471      	add	r1, lr
 800bc56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc5a:	b289      	uxth	r1, r1
 800bc5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc60:	f846 1b04 	str.w	r1, [r6], #4
 800bc64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc68:	e7dd      	b.n	800bc26 <__mdiff+0xd6>
 800bc6a:	3f01      	subs	r7, #1
 800bc6c:	e7e7      	b.n	800bc3e <__mdiff+0xee>
 800bc6e:	bf00      	nop
 800bc70:	0800df90 	.word	0x0800df90
 800bc74:	0800dfa1 	.word	0x0800dfa1

0800bc78 <__ulp>:
 800bc78:	b082      	sub	sp, #8
 800bc7a:	ed8d 0b00 	vstr	d0, [sp]
 800bc7e:	9a01      	ldr	r2, [sp, #4]
 800bc80:	4b0f      	ldr	r3, [pc, #60]	@ (800bcc0 <__ulp+0x48>)
 800bc82:	4013      	ands	r3, r2
 800bc84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	dc08      	bgt.n	800bc9e <__ulp+0x26>
 800bc8c:	425b      	negs	r3, r3
 800bc8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bc92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc96:	da04      	bge.n	800bca2 <__ulp+0x2a>
 800bc98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bc9c:	4113      	asrs	r3, r2
 800bc9e:	2200      	movs	r2, #0
 800bca0:	e008      	b.n	800bcb4 <__ulp+0x3c>
 800bca2:	f1a2 0314 	sub.w	r3, r2, #20
 800bca6:	2b1e      	cmp	r3, #30
 800bca8:	bfda      	itte	le
 800bcaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bcae:	40da      	lsrle	r2, r3
 800bcb0:	2201      	movgt	r2, #1
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	ec41 0b10 	vmov	d0, r0, r1
 800bcbc:	b002      	add	sp, #8
 800bcbe:	4770      	bx	lr
 800bcc0:	7ff00000 	.word	0x7ff00000

0800bcc4 <__b2d>:
 800bcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc8:	6906      	ldr	r6, [r0, #16]
 800bcca:	f100 0814 	add.w	r8, r0, #20
 800bcce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bcd2:	1f37      	subs	r7, r6, #4
 800bcd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bcd8:	4610      	mov	r0, r2
 800bcda:	f7ff fd4b 	bl	800b774 <__hi0bits>
 800bcde:	f1c0 0320 	rsb	r3, r0, #32
 800bce2:	280a      	cmp	r0, #10
 800bce4:	600b      	str	r3, [r1, #0]
 800bce6:	491b      	ldr	r1, [pc, #108]	@ (800bd54 <__b2d+0x90>)
 800bce8:	dc15      	bgt.n	800bd16 <__b2d+0x52>
 800bcea:	f1c0 0c0b 	rsb	ip, r0, #11
 800bcee:	fa22 f30c 	lsr.w	r3, r2, ip
 800bcf2:	45b8      	cmp	r8, r7
 800bcf4:	ea43 0501 	orr.w	r5, r3, r1
 800bcf8:	bf34      	ite	cc
 800bcfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bcfe:	2300      	movcs	r3, #0
 800bd00:	3015      	adds	r0, #21
 800bd02:	fa02 f000 	lsl.w	r0, r2, r0
 800bd06:	fa23 f30c 	lsr.w	r3, r3, ip
 800bd0a:	4303      	orrs	r3, r0
 800bd0c:	461c      	mov	r4, r3
 800bd0e:	ec45 4b10 	vmov	d0, r4, r5
 800bd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd16:	45b8      	cmp	r8, r7
 800bd18:	bf3a      	itte	cc
 800bd1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd1e:	f1a6 0708 	subcc.w	r7, r6, #8
 800bd22:	2300      	movcs	r3, #0
 800bd24:	380b      	subs	r0, #11
 800bd26:	d012      	beq.n	800bd4e <__b2d+0x8a>
 800bd28:	f1c0 0120 	rsb	r1, r0, #32
 800bd2c:	fa23 f401 	lsr.w	r4, r3, r1
 800bd30:	4082      	lsls	r2, r0
 800bd32:	4322      	orrs	r2, r4
 800bd34:	4547      	cmp	r7, r8
 800bd36:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bd3a:	bf8c      	ite	hi
 800bd3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bd40:	2200      	movls	r2, #0
 800bd42:	4083      	lsls	r3, r0
 800bd44:	40ca      	lsrs	r2, r1
 800bd46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	e7de      	b.n	800bd0c <__b2d+0x48>
 800bd4e:	ea42 0501 	orr.w	r5, r2, r1
 800bd52:	e7db      	b.n	800bd0c <__b2d+0x48>
 800bd54:	3ff00000 	.word	0x3ff00000

0800bd58 <__d2b>:
 800bd58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd5c:	460f      	mov	r7, r1
 800bd5e:	2101      	movs	r1, #1
 800bd60:	ec59 8b10 	vmov	r8, r9, d0
 800bd64:	4616      	mov	r6, r2
 800bd66:	f7ff fc13 	bl	800b590 <_Balloc>
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	b930      	cbnz	r0, 800bd7c <__d2b+0x24>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	4b23      	ldr	r3, [pc, #140]	@ (800be00 <__d2b+0xa8>)
 800bd72:	4824      	ldr	r0, [pc, #144]	@ (800be04 <__d2b+0xac>)
 800bd74:	f240 310f 	movw	r1, #783	@ 0x30f
 800bd78:	f7fe fca0 	bl	800a6bc <__assert_func>
 800bd7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd84:	b10d      	cbz	r5, 800bd8a <__d2b+0x32>
 800bd86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd8a:	9301      	str	r3, [sp, #4]
 800bd8c:	f1b8 0300 	subs.w	r3, r8, #0
 800bd90:	d023      	beq.n	800bdda <__d2b+0x82>
 800bd92:	4668      	mov	r0, sp
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	f7ff fd0c 	bl	800b7b2 <__lo0bits>
 800bd9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd9e:	b1d0      	cbz	r0, 800bdd6 <__d2b+0x7e>
 800bda0:	f1c0 0320 	rsb	r3, r0, #32
 800bda4:	fa02 f303 	lsl.w	r3, r2, r3
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	40c2      	lsrs	r2, r0
 800bdac:	6163      	str	r3, [r4, #20]
 800bdae:	9201      	str	r2, [sp, #4]
 800bdb0:	9b01      	ldr	r3, [sp, #4]
 800bdb2:	61a3      	str	r3, [r4, #24]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	bf0c      	ite	eq
 800bdb8:	2201      	moveq	r2, #1
 800bdba:	2202      	movne	r2, #2
 800bdbc:	6122      	str	r2, [r4, #16]
 800bdbe:	b1a5      	cbz	r5, 800bdea <__d2b+0x92>
 800bdc0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bdc4:	4405      	add	r5, r0
 800bdc6:	603d      	str	r5, [r7, #0]
 800bdc8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bdcc:	6030      	str	r0, [r6, #0]
 800bdce:	4620      	mov	r0, r4
 800bdd0:	b003      	add	sp, #12
 800bdd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdd6:	6161      	str	r1, [r4, #20]
 800bdd8:	e7ea      	b.n	800bdb0 <__d2b+0x58>
 800bdda:	a801      	add	r0, sp, #4
 800bddc:	f7ff fce9 	bl	800b7b2 <__lo0bits>
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	6163      	str	r3, [r4, #20]
 800bde4:	3020      	adds	r0, #32
 800bde6:	2201      	movs	r2, #1
 800bde8:	e7e8      	b.n	800bdbc <__d2b+0x64>
 800bdea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bdf2:	6038      	str	r0, [r7, #0]
 800bdf4:	6918      	ldr	r0, [r3, #16]
 800bdf6:	f7ff fcbd 	bl	800b774 <__hi0bits>
 800bdfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdfe:	e7e5      	b.n	800bdcc <__d2b+0x74>
 800be00:	0800df90 	.word	0x0800df90
 800be04:	0800dfa1 	.word	0x0800dfa1

0800be08 <__ratio>:
 800be08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0c:	b085      	sub	sp, #20
 800be0e:	e9cd 1000 	strd	r1, r0, [sp]
 800be12:	a902      	add	r1, sp, #8
 800be14:	f7ff ff56 	bl	800bcc4 <__b2d>
 800be18:	9800      	ldr	r0, [sp, #0]
 800be1a:	a903      	add	r1, sp, #12
 800be1c:	ec55 4b10 	vmov	r4, r5, d0
 800be20:	f7ff ff50 	bl	800bcc4 <__b2d>
 800be24:	9b01      	ldr	r3, [sp, #4]
 800be26:	6919      	ldr	r1, [r3, #16]
 800be28:	9b00      	ldr	r3, [sp, #0]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	1ac9      	subs	r1, r1, r3
 800be2e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800be32:	1a9b      	subs	r3, r3, r2
 800be34:	ec5b ab10 	vmov	sl, fp, d0
 800be38:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	bfce      	itee	gt
 800be40:	462a      	movgt	r2, r5
 800be42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be46:	465a      	movle	r2, fp
 800be48:	462f      	mov	r7, r5
 800be4a:	46d9      	mov	r9, fp
 800be4c:	bfcc      	ite	gt
 800be4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be52:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800be56:	464b      	mov	r3, r9
 800be58:	4652      	mov	r2, sl
 800be5a:	4620      	mov	r0, r4
 800be5c:	4639      	mov	r1, r7
 800be5e:	f7f4 fd2d 	bl	80008bc <__aeabi_ddiv>
 800be62:	ec41 0b10 	vmov	d0, r0, r1
 800be66:	b005      	add	sp, #20
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be6c <__copybits>:
 800be6c:	3901      	subs	r1, #1
 800be6e:	b570      	push	{r4, r5, r6, lr}
 800be70:	1149      	asrs	r1, r1, #5
 800be72:	6914      	ldr	r4, [r2, #16]
 800be74:	3101      	adds	r1, #1
 800be76:	f102 0314 	add.w	r3, r2, #20
 800be7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be82:	1f05      	subs	r5, r0, #4
 800be84:	42a3      	cmp	r3, r4
 800be86:	d30c      	bcc.n	800bea2 <__copybits+0x36>
 800be88:	1aa3      	subs	r3, r4, r2
 800be8a:	3b11      	subs	r3, #17
 800be8c:	f023 0303 	bic.w	r3, r3, #3
 800be90:	3211      	adds	r2, #17
 800be92:	42a2      	cmp	r2, r4
 800be94:	bf88      	it	hi
 800be96:	2300      	movhi	r3, #0
 800be98:	4418      	add	r0, r3
 800be9a:	2300      	movs	r3, #0
 800be9c:	4288      	cmp	r0, r1
 800be9e:	d305      	bcc.n	800beac <__copybits+0x40>
 800bea0:	bd70      	pop	{r4, r5, r6, pc}
 800bea2:	f853 6b04 	ldr.w	r6, [r3], #4
 800bea6:	f845 6f04 	str.w	r6, [r5, #4]!
 800beaa:	e7eb      	b.n	800be84 <__copybits+0x18>
 800beac:	f840 3b04 	str.w	r3, [r0], #4
 800beb0:	e7f4      	b.n	800be9c <__copybits+0x30>

0800beb2 <__any_on>:
 800beb2:	f100 0214 	add.w	r2, r0, #20
 800beb6:	6900      	ldr	r0, [r0, #16]
 800beb8:	114b      	asrs	r3, r1, #5
 800beba:	4298      	cmp	r0, r3
 800bebc:	b510      	push	{r4, lr}
 800bebe:	db11      	blt.n	800bee4 <__any_on+0x32>
 800bec0:	dd0a      	ble.n	800bed8 <__any_on+0x26>
 800bec2:	f011 011f 	ands.w	r1, r1, #31
 800bec6:	d007      	beq.n	800bed8 <__any_on+0x26>
 800bec8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800becc:	fa24 f001 	lsr.w	r0, r4, r1
 800bed0:	fa00 f101 	lsl.w	r1, r0, r1
 800bed4:	428c      	cmp	r4, r1
 800bed6:	d10b      	bne.n	800bef0 <__any_on+0x3e>
 800bed8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bedc:	4293      	cmp	r3, r2
 800bede:	d803      	bhi.n	800bee8 <__any_on+0x36>
 800bee0:	2000      	movs	r0, #0
 800bee2:	bd10      	pop	{r4, pc}
 800bee4:	4603      	mov	r3, r0
 800bee6:	e7f7      	b.n	800bed8 <__any_on+0x26>
 800bee8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800beec:	2900      	cmp	r1, #0
 800beee:	d0f5      	beq.n	800bedc <__any_on+0x2a>
 800bef0:	2001      	movs	r0, #1
 800bef2:	e7f6      	b.n	800bee2 <__any_on+0x30>

0800bef4 <sulp>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	4604      	mov	r4, r0
 800bef8:	460d      	mov	r5, r1
 800befa:	ec45 4b10 	vmov	d0, r4, r5
 800befe:	4616      	mov	r6, r2
 800bf00:	f7ff feba 	bl	800bc78 <__ulp>
 800bf04:	ec51 0b10 	vmov	r0, r1, d0
 800bf08:	b17e      	cbz	r6, 800bf2a <sulp+0x36>
 800bf0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf0e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dd09      	ble.n	800bf2a <sulp+0x36>
 800bf16:	051b      	lsls	r3, r3, #20
 800bf18:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bf1c:	2400      	movs	r4, #0
 800bf1e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bf22:	4622      	mov	r2, r4
 800bf24:	462b      	mov	r3, r5
 800bf26:	f7f4 fb9f 	bl	8000668 <__aeabi_dmul>
 800bf2a:	ec41 0b10 	vmov	d0, r0, r1
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}

0800bf30 <_strtod_l>:
 800bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	b09f      	sub	sp, #124	@ 0x7c
 800bf36:	460c      	mov	r4, r1
 800bf38:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	921a      	str	r2, [sp, #104]	@ 0x68
 800bf3e:	9005      	str	r0, [sp, #20]
 800bf40:	f04f 0a00 	mov.w	sl, #0
 800bf44:	f04f 0b00 	mov.w	fp, #0
 800bf48:	460a      	mov	r2, r1
 800bf4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf4c:	7811      	ldrb	r1, [r2, #0]
 800bf4e:	292b      	cmp	r1, #43	@ 0x2b
 800bf50:	d04a      	beq.n	800bfe8 <_strtod_l+0xb8>
 800bf52:	d838      	bhi.n	800bfc6 <_strtod_l+0x96>
 800bf54:	290d      	cmp	r1, #13
 800bf56:	d832      	bhi.n	800bfbe <_strtod_l+0x8e>
 800bf58:	2908      	cmp	r1, #8
 800bf5a:	d832      	bhi.n	800bfc2 <_strtod_l+0x92>
 800bf5c:	2900      	cmp	r1, #0
 800bf5e:	d03b      	beq.n	800bfd8 <_strtod_l+0xa8>
 800bf60:	2200      	movs	r2, #0
 800bf62:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bf64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bf66:	782a      	ldrb	r2, [r5, #0]
 800bf68:	2a30      	cmp	r2, #48	@ 0x30
 800bf6a:	f040 80b3 	bne.w	800c0d4 <_strtod_l+0x1a4>
 800bf6e:	786a      	ldrb	r2, [r5, #1]
 800bf70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf74:	2a58      	cmp	r2, #88	@ 0x58
 800bf76:	d16e      	bne.n	800c056 <_strtod_l+0x126>
 800bf78:	9302      	str	r3, [sp, #8]
 800bf7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf7c:	9301      	str	r3, [sp, #4]
 800bf7e:	ab1a      	add	r3, sp, #104	@ 0x68
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	4a8e      	ldr	r2, [pc, #568]	@ (800c1bc <_strtod_l+0x28c>)
 800bf84:	9805      	ldr	r0, [sp, #20]
 800bf86:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bf88:	a919      	add	r1, sp, #100	@ 0x64
 800bf8a:	f001 f8a7 	bl	800d0dc <__gethex>
 800bf8e:	f010 060f 	ands.w	r6, r0, #15
 800bf92:	4604      	mov	r4, r0
 800bf94:	d005      	beq.n	800bfa2 <_strtod_l+0x72>
 800bf96:	2e06      	cmp	r6, #6
 800bf98:	d128      	bne.n	800bfec <_strtod_l+0xbc>
 800bf9a:	3501      	adds	r5, #1
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	9519      	str	r5, [sp, #100]	@ 0x64
 800bfa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f040 858e 	bne.w	800cac6 <_strtod_l+0xb96>
 800bfaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfac:	b1cb      	cbz	r3, 800bfe2 <_strtod_l+0xb2>
 800bfae:	4652      	mov	r2, sl
 800bfb0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bfb4:	ec43 2b10 	vmov	d0, r2, r3
 800bfb8:	b01f      	add	sp, #124	@ 0x7c
 800bfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfbe:	2920      	cmp	r1, #32
 800bfc0:	d1ce      	bne.n	800bf60 <_strtod_l+0x30>
 800bfc2:	3201      	adds	r2, #1
 800bfc4:	e7c1      	b.n	800bf4a <_strtod_l+0x1a>
 800bfc6:	292d      	cmp	r1, #45	@ 0x2d
 800bfc8:	d1ca      	bne.n	800bf60 <_strtod_l+0x30>
 800bfca:	2101      	movs	r1, #1
 800bfcc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bfce:	1c51      	adds	r1, r2, #1
 800bfd0:	9119      	str	r1, [sp, #100]	@ 0x64
 800bfd2:	7852      	ldrb	r2, [r2, #1]
 800bfd4:	2a00      	cmp	r2, #0
 800bfd6:	d1c5      	bne.n	800bf64 <_strtod_l+0x34>
 800bfd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bfda:	9419      	str	r4, [sp, #100]	@ 0x64
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f040 8570 	bne.w	800cac2 <_strtod_l+0xb92>
 800bfe2:	4652      	mov	r2, sl
 800bfe4:	465b      	mov	r3, fp
 800bfe6:	e7e5      	b.n	800bfb4 <_strtod_l+0x84>
 800bfe8:	2100      	movs	r1, #0
 800bfea:	e7ef      	b.n	800bfcc <_strtod_l+0x9c>
 800bfec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bfee:	b13a      	cbz	r2, 800c000 <_strtod_l+0xd0>
 800bff0:	2135      	movs	r1, #53	@ 0x35
 800bff2:	a81c      	add	r0, sp, #112	@ 0x70
 800bff4:	f7ff ff3a 	bl	800be6c <__copybits>
 800bff8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bffa:	9805      	ldr	r0, [sp, #20]
 800bffc:	f7ff fb08 	bl	800b610 <_Bfree>
 800c000:	3e01      	subs	r6, #1
 800c002:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c004:	2e04      	cmp	r6, #4
 800c006:	d806      	bhi.n	800c016 <_strtod_l+0xe6>
 800c008:	e8df f006 	tbb	[pc, r6]
 800c00c:	201d0314 	.word	0x201d0314
 800c010:	14          	.byte	0x14
 800c011:	00          	.byte	0x00
 800c012:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c016:	05e1      	lsls	r1, r4, #23
 800c018:	bf48      	it	mi
 800c01a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c01e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c022:	0d1b      	lsrs	r3, r3, #20
 800c024:	051b      	lsls	r3, r3, #20
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1bb      	bne.n	800bfa2 <_strtod_l+0x72>
 800c02a:	f7fe fb13 	bl	800a654 <__errno>
 800c02e:	2322      	movs	r3, #34	@ 0x22
 800c030:	6003      	str	r3, [r0, #0]
 800c032:	e7b6      	b.n	800bfa2 <_strtod_l+0x72>
 800c034:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c038:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c03c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c040:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c044:	e7e7      	b.n	800c016 <_strtod_l+0xe6>
 800c046:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c1c4 <_strtod_l+0x294>
 800c04a:	e7e4      	b.n	800c016 <_strtod_l+0xe6>
 800c04c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c050:	f04f 3aff 	mov.w	sl, #4294967295
 800c054:	e7df      	b.n	800c016 <_strtod_l+0xe6>
 800c056:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c05c:	785b      	ldrb	r3, [r3, #1]
 800c05e:	2b30      	cmp	r3, #48	@ 0x30
 800c060:	d0f9      	beq.n	800c056 <_strtod_l+0x126>
 800c062:	2b00      	cmp	r3, #0
 800c064:	d09d      	beq.n	800bfa2 <_strtod_l+0x72>
 800c066:	2301      	movs	r3, #1
 800c068:	9309      	str	r3, [sp, #36]	@ 0x24
 800c06a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c06c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c06e:	2300      	movs	r3, #0
 800c070:	9308      	str	r3, [sp, #32]
 800c072:	930a      	str	r3, [sp, #40]	@ 0x28
 800c074:	461f      	mov	r7, r3
 800c076:	220a      	movs	r2, #10
 800c078:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c07a:	7805      	ldrb	r5, [r0, #0]
 800c07c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c080:	b2d9      	uxtb	r1, r3
 800c082:	2909      	cmp	r1, #9
 800c084:	d928      	bls.n	800c0d8 <_strtod_l+0x1a8>
 800c086:	494e      	ldr	r1, [pc, #312]	@ (800c1c0 <_strtod_l+0x290>)
 800c088:	2201      	movs	r2, #1
 800c08a:	f000 ff6b 	bl	800cf64 <strncmp>
 800c08e:	2800      	cmp	r0, #0
 800c090:	d032      	beq.n	800c0f8 <_strtod_l+0x1c8>
 800c092:	2000      	movs	r0, #0
 800c094:	462a      	mov	r2, r5
 800c096:	4681      	mov	r9, r0
 800c098:	463d      	mov	r5, r7
 800c09a:	4603      	mov	r3, r0
 800c09c:	2a65      	cmp	r2, #101	@ 0x65
 800c09e:	d001      	beq.n	800c0a4 <_strtod_l+0x174>
 800c0a0:	2a45      	cmp	r2, #69	@ 0x45
 800c0a2:	d114      	bne.n	800c0ce <_strtod_l+0x19e>
 800c0a4:	b91d      	cbnz	r5, 800c0ae <_strtod_l+0x17e>
 800c0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0a8:	4302      	orrs	r2, r0
 800c0aa:	d095      	beq.n	800bfd8 <_strtod_l+0xa8>
 800c0ac:	2500      	movs	r5, #0
 800c0ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c0b0:	1c62      	adds	r2, r4, #1
 800c0b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0b4:	7862      	ldrb	r2, [r4, #1]
 800c0b6:	2a2b      	cmp	r2, #43	@ 0x2b
 800c0b8:	d077      	beq.n	800c1aa <_strtod_l+0x27a>
 800c0ba:	2a2d      	cmp	r2, #45	@ 0x2d
 800c0bc:	d07b      	beq.n	800c1b6 <_strtod_l+0x286>
 800c0be:	f04f 0c00 	mov.w	ip, #0
 800c0c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c0c6:	2909      	cmp	r1, #9
 800c0c8:	f240 8082 	bls.w	800c1d0 <_strtod_l+0x2a0>
 800c0cc:	9419      	str	r4, [sp, #100]	@ 0x64
 800c0ce:	f04f 0800 	mov.w	r8, #0
 800c0d2:	e0a2      	b.n	800c21a <_strtod_l+0x2ea>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	e7c7      	b.n	800c068 <_strtod_l+0x138>
 800c0d8:	2f08      	cmp	r7, #8
 800c0da:	bfd5      	itete	le
 800c0dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c0de:	9908      	ldrgt	r1, [sp, #32]
 800c0e0:	fb02 3301 	mlale	r3, r2, r1, r3
 800c0e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c0e8:	f100 0001 	add.w	r0, r0, #1
 800c0ec:	bfd4      	ite	le
 800c0ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c0f0:	9308      	strgt	r3, [sp, #32]
 800c0f2:	3701      	adds	r7, #1
 800c0f4:	9019      	str	r0, [sp, #100]	@ 0x64
 800c0f6:	e7bf      	b.n	800c078 <_strtod_l+0x148>
 800c0f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0fa:	1c5a      	adds	r2, r3, #1
 800c0fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0fe:	785a      	ldrb	r2, [r3, #1]
 800c100:	b37f      	cbz	r7, 800c162 <_strtod_l+0x232>
 800c102:	4681      	mov	r9, r0
 800c104:	463d      	mov	r5, r7
 800c106:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c10a:	2b09      	cmp	r3, #9
 800c10c:	d912      	bls.n	800c134 <_strtod_l+0x204>
 800c10e:	2301      	movs	r3, #1
 800c110:	e7c4      	b.n	800c09c <_strtod_l+0x16c>
 800c112:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c114:	1c5a      	adds	r2, r3, #1
 800c116:	9219      	str	r2, [sp, #100]	@ 0x64
 800c118:	785a      	ldrb	r2, [r3, #1]
 800c11a:	3001      	adds	r0, #1
 800c11c:	2a30      	cmp	r2, #48	@ 0x30
 800c11e:	d0f8      	beq.n	800c112 <_strtod_l+0x1e2>
 800c120:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c124:	2b08      	cmp	r3, #8
 800c126:	f200 84d3 	bhi.w	800cad0 <_strtod_l+0xba0>
 800c12a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c12c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c12e:	4681      	mov	r9, r0
 800c130:	2000      	movs	r0, #0
 800c132:	4605      	mov	r5, r0
 800c134:	3a30      	subs	r2, #48	@ 0x30
 800c136:	f100 0301 	add.w	r3, r0, #1
 800c13a:	d02a      	beq.n	800c192 <_strtod_l+0x262>
 800c13c:	4499      	add	r9, r3
 800c13e:	eb00 0c05 	add.w	ip, r0, r5
 800c142:	462b      	mov	r3, r5
 800c144:	210a      	movs	r1, #10
 800c146:	4563      	cmp	r3, ip
 800c148:	d10d      	bne.n	800c166 <_strtod_l+0x236>
 800c14a:	1c69      	adds	r1, r5, #1
 800c14c:	4401      	add	r1, r0
 800c14e:	4428      	add	r0, r5
 800c150:	2808      	cmp	r0, #8
 800c152:	dc16      	bgt.n	800c182 <_strtod_l+0x252>
 800c154:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c156:	230a      	movs	r3, #10
 800c158:	fb03 2300 	mla	r3, r3, r0, r2
 800c15c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c15e:	2300      	movs	r3, #0
 800c160:	e018      	b.n	800c194 <_strtod_l+0x264>
 800c162:	4638      	mov	r0, r7
 800c164:	e7da      	b.n	800c11c <_strtod_l+0x1ec>
 800c166:	2b08      	cmp	r3, #8
 800c168:	f103 0301 	add.w	r3, r3, #1
 800c16c:	dc03      	bgt.n	800c176 <_strtod_l+0x246>
 800c16e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c170:	434e      	muls	r6, r1
 800c172:	960a      	str	r6, [sp, #40]	@ 0x28
 800c174:	e7e7      	b.n	800c146 <_strtod_l+0x216>
 800c176:	2b10      	cmp	r3, #16
 800c178:	bfde      	ittt	le
 800c17a:	9e08      	ldrle	r6, [sp, #32]
 800c17c:	434e      	mulle	r6, r1
 800c17e:	9608      	strle	r6, [sp, #32]
 800c180:	e7e1      	b.n	800c146 <_strtod_l+0x216>
 800c182:	280f      	cmp	r0, #15
 800c184:	dceb      	bgt.n	800c15e <_strtod_l+0x22e>
 800c186:	9808      	ldr	r0, [sp, #32]
 800c188:	230a      	movs	r3, #10
 800c18a:	fb03 2300 	mla	r3, r3, r0, r2
 800c18e:	9308      	str	r3, [sp, #32]
 800c190:	e7e5      	b.n	800c15e <_strtod_l+0x22e>
 800c192:	4629      	mov	r1, r5
 800c194:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c196:	1c50      	adds	r0, r2, #1
 800c198:	9019      	str	r0, [sp, #100]	@ 0x64
 800c19a:	7852      	ldrb	r2, [r2, #1]
 800c19c:	4618      	mov	r0, r3
 800c19e:	460d      	mov	r5, r1
 800c1a0:	e7b1      	b.n	800c106 <_strtod_l+0x1d6>
 800c1a2:	f04f 0900 	mov.w	r9, #0
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e77d      	b.n	800c0a6 <_strtod_l+0x176>
 800c1aa:	f04f 0c00 	mov.w	ip, #0
 800c1ae:	1ca2      	adds	r2, r4, #2
 800c1b0:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1b2:	78a2      	ldrb	r2, [r4, #2]
 800c1b4:	e785      	b.n	800c0c2 <_strtod_l+0x192>
 800c1b6:	f04f 0c01 	mov.w	ip, #1
 800c1ba:	e7f8      	b.n	800c1ae <_strtod_l+0x27e>
 800c1bc:	0800e110 	.word	0x0800e110
 800c1c0:	0800e0f8 	.word	0x0800e0f8
 800c1c4:	7ff00000 	.word	0x7ff00000
 800c1c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1ca:	1c51      	adds	r1, r2, #1
 800c1cc:	9119      	str	r1, [sp, #100]	@ 0x64
 800c1ce:	7852      	ldrb	r2, [r2, #1]
 800c1d0:	2a30      	cmp	r2, #48	@ 0x30
 800c1d2:	d0f9      	beq.n	800c1c8 <_strtod_l+0x298>
 800c1d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c1d8:	2908      	cmp	r1, #8
 800c1da:	f63f af78 	bhi.w	800c0ce <_strtod_l+0x19e>
 800c1de:	3a30      	subs	r2, #48	@ 0x30
 800c1e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c1e6:	f04f 080a 	mov.w	r8, #10
 800c1ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1ec:	1c56      	adds	r6, r2, #1
 800c1ee:	9619      	str	r6, [sp, #100]	@ 0x64
 800c1f0:	7852      	ldrb	r2, [r2, #1]
 800c1f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c1f6:	f1be 0f09 	cmp.w	lr, #9
 800c1fa:	d939      	bls.n	800c270 <_strtod_l+0x340>
 800c1fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c1fe:	1a76      	subs	r6, r6, r1
 800c200:	2e08      	cmp	r6, #8
 800c202:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c206:	dc03      	bgt.n	800c210 <_strtod_l+0x2e0>
 800c208:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c20a:	4588      	cmp	r8, r1
 800c20c:	bfa8      	it	ge
 800c20e:	4688      	movge	r8, r1
 800c210:	f1bc 0f00 	cmp.w	ip, #0
 800c214:	d001      	beq.n	800c21a <_strtod_l+0x2ea>
 800c216:	f1c8 0800 	rsb	r8, r8, #0
 800c21a:	2d00      	cmp	r5, #0
 800c21c:	d14e      	bne.n	800c2bc <_strtod_l+0x38c>
 800c21e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c220:	4308      	orrs	r0, r1
 800c222:	f47f aebe 	bne.w	800bfa2 <_strtod_l+0x72>
 800c226:	2b00      	cmp	r3, #0
 800c228:	f47f aed6 	bne.w	800bfd8 <_strtod_l+0xa8>
 800c22c:	2a69      	cmp	r2, #105	@ 0x69
 800c22e:	d028      	beq.n	800c282 <_strtod_l+0x352>
 800c230:	dc25      	bgt.n	800c27e <_strtod_l+0x34e>
 800c232:	2a49      	cmp	r2, #73	@ 0x49
 800c234:	d025      	beq.n	800c282 <_strtod_l+0x352>
 800c236:	2a4e      	cmp	r2, #78	@ 0x4e
 800c238:	f47f aece 	bne.w	800bfd8 <_strtod_l+0xa8>
 800c23c:	499b      	ldr	r1, [pc, #620]	@ (800c4ac <_strtod_l+0x57c>)
 800c23e:	a819      	add	r0, sp, #100	@ 0x64
 800c240:	f001 f96e 	bl	800d520 <__match>
 800c244:	2800      	cmp	r0, #0
 800c246:	f43f aec7 	beq.w	800bfd8 <_strtod_l+0xa8>
 800c24a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b28      	cmp	r3, #40	@ 0x28
 800c250:	d12e      	bne.n	800c2b0 <_strtod_l+0x380>
 800c252:	4997      	ldr	r1, [pc, #604]	@ (800c4b0 <_strtod_l+0x580>)
 800c254:	aa1c      	add	r2, sp, #112	@ 0x70
 800c256:	a819      	add	r0, sp, #100	@ 0x64
 800c258:	f001 f976 	bl	800d548 <__hexnan>
 800c25c:	2805      	cmp	r0, #5
 800c25e:	d127      	bne.n	800c2b0 <_strtod_l+0x380>
 800c260:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c262:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c266:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c26a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c26e:	e698      	b.n	800bfa2 <_strtod_l+0x72>
 800c270:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c272:	fb08 2101 	mla	r1, r8, r1, r2
 800c276:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c27a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c27c:	e7b5      	b.n	800c1ea <_strtod_l+0x2ba>
 800c27e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c280:	e7da      	b.n	800c238 <_strtod_l+0x308>
 800c282:	498c      	ldr	r1, [pc, #560]	@ (800c4b4 <_strtod_l+0x584>)
 800c284:	a819      	add	r0, sp, #100	@ 0x64
 800c286:	f001 f94b 	bl	800d520 <__match>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	f43f aea4 	beq.w	800bfd8 <_strtod_l+0xa8>
 800c290:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c292:	4989      	ldr	r1, [pc, #548]	@ (800c4b8 <_strtod_l+0x588>)
 800c294:	3b01      	subs	r3, #1
 800c296:	a819      	add	r0, sp, #100	@ 0x64
 800c298:	9319      	str	r3, [sp, #100]	@ 0x64
 800c29a:	f001 f941 	bl	800d520 <__match>
 800c29e:	b910      	cbnz	r0, 800c2a6 <_strtod_l+0x376>
 800c2a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c2a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c4c8 <_strtod_l+0x598>
 800c2aa:	f04f 0a00 	mov.w	sl, #0
 800c2ae:	e678      	b.n	800bfa2 <_strtod_l+0x72>
 800c2b0:	4882      	ldr	r0, [pc, #520]	@ (800c4bc <_strtod_l+0x58c>)
 800c2b2:	f000 fe89 	bl	800cfc8 <nan>
 800c2b6:	ec5b ab10 	vmov	sl, fp, d0
 800c2ba:	e672      	b.n	800bfa2 <_strtod_l+0x72>
 800c2bc:	eba8 0309 	sub.w	r3, r8, r9
 800c2c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2c4:	2f00      	cmp	r7, #0
 800c2c6:	bf08      	it	eq
 800c2c8:	462f      	moveq	r7, r5
 800c2ca:	2d10      	cmp	r5, #16
 800c2cc:	462c      	mov	r4, r5
 800c2ce:	bfa8      	it	ge
 800c2d0:	2410      	movge	r4, #16
 800c2d2:	f7f4 f94f 	bl	8000574 <__aeabi_ui2d>
 800c2d6:	2d09      	cmp	r5, #9
 800c2d8:	4682      	mov	sl, r0
 800c2da:	468b      	mov	fp, r1
 800c2dc:	dc13      	bgt.n	800c306 <_strtod_l+0x3d6>
 800c2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f43f ae5e 	beq.w	800bfa2 <_strtod_l+0x72>
 800c2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e8:	dd78      	ble.n	800c3dc <_strtod_l+0x4ac>
 800c2ea:	2b16      	cmp	r3, #22
 800c2ec:	dc5f      	bgt.n	800c3ae <_strtod_l+0x47e>
 800c2ee:	4974      	ldr	r1, [pc, #464]	@ (800c4c0 <_strtod_l+0x590>)
 800c2f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c2f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f8:	4652      	mov	r2, sl
 800c2fa:	465b      	mov	r3, fp
 800c2fc:	f7f4 f9b4 	bl	8000668 <__aeabi_dmul>
 800c300:	4682      	mov	sl, r0
 800c302:	468b      	mov	fp, r1
 800c304:	e64d      	b.n	800bfa2 <_strtod_l+0x72>
 800c306:	4b6e      	ldr	r3, [pc, #440]	@ (800c4c0 <_strtod_l+0x590>)
 800c308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c30c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c310:	f7f4 f9aa 	bl	8000668 <__aeabi_dmul>
 800c314:	4682      	mov	sl, r0
 800c316:	9808      	ldr	r0, [sp, #32]
 800c318:	468b      	mov	fp, r1
 800c31a:	f7f4 f92b 	bl	8000574 <__aeabi_ui2d>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	4650      	mov	r0, sl
 800c324:	4659      	mov	r1, fp
 800c326:	f7f3 ffe9 	bl	80002fc <__adddf3>
 800c32a:	2d0f      	cmp	r5, #15
 800c32c:	4682      	mov	sl, r0
 800c32e:	468b      	mov	fp, r1
 800c330:	ddd5      	ble.n	800c2de <_strtod_l+0x3ae>
 800c332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c334:	1b2c      	subs	r4, r5, r4
 800c336:	441c      	add	r4, r3
 800c338:	2c00      	cmp	r4, #0
 800c33a:	f340 8096 	ble.w	800c46a <_strtod_l+0x53a>
 800c33e:	f014 030f 	ands.w	r3, r4, #15
 800c342:	d00a      	beq.n	800c35a <_strtod_l+0x42a>
 800c344:	495e      	ldr	r1, [pc, #376]	@ (800c4c0 <_strtod_l+0x590>)
 800c346:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c34a:	4652      	mov	r2, sl
 800c34c:	465b      	mov	r3, fp
 800c34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c352:	f7f4 f989 	bl	8000668 <__aeabi_dmul>
 800c356:	4682      	mov	sl, r0
 800c358:	468b      	mov	fp, r1
 800c35a:	f034 040f 	bics.w	r4, r4, #15
 800c35e:	d073      	beq.n	800c448 <_strtod_l+0x518>
 800c360:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c364:	dd48      	ble.n	800c3f8 <_strtod_l+0x4c8>
 800c366:	2400      	movs	r4, #0
 800c368:	46a0      	mov	r8, r4
 800c36a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c36c:	46a1      	mov	r9, r4
 800c36e:	9a05      	ldr	r2, [sp, #20]
 800c370:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c4c8 <_strtod_l+0x598>
 800c374:	2322      	movs	r3, #34	@ 0x22
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	f04f 0a00 	mov.w	sl, #0
 800c37c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f43f ae0f 	beq.w	800bfa2 <_strtod_l+0x72>
 800c384:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c386:	9805      	ldr	r0, [sp, #20]
 800c388:	f7ff f942 	bl	800b610 <_Bfree>
 800c38c:	9805      	ldr	r0, [sp, #20]
 800c38e:	4649      	mov	r1, r9
 800c390:	f7ff f93e 	bl	800b610 <_Bfree>
 800c394:	9805      	ldr	r0, [sp, #20]
 800c396:	4641      	mov	r1, r8
 800c398:	f7ff f93a 	bl	800b610 <_Bfree>
 800c39c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c39e:	9805      	ldr	r0, [sp, #20]
 800c3a0:	f7ff f936 	bl	800b610 <_Bfree>
 800c3a4:	9805      	ldr	r0, [sp, #20]
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	f7ff f932 	bl	800b610 <_Bfree>
 800c3ac:	e5f9      	b.n	800bfa2 <_strtod_l+0x72>
 800c3ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	dbbc      	blt.n	800c332 <_strtod_l+0x402>
 800c3b8:	4c41      	ldr	r4, [pc, #260]	@ (800c4c0 <_strtod_l+0x590>)
 800c3ba:	f1c5 050f 	rsb	r5, r5, #15
 800c3be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c3c2:	4652      	mov	r2, sl
 800c3c4:	465b      	mov	r3, fp
 800c3c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ca:	f7f4 f94d 	bl	8000668 <__aeabi_dmul>
 800c3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3d0:	1b5d      	subs	r5, r3, r5
 800c3d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c3d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c3da:	e78f      	b.n	800c2fc <_strtod_l+0x3cc>
 800c3dc:	3316      	adds	r3, #22
 800c3de:	dba8      	blt.n	800c332 <_strtod_l+0x402>
 800c3e0:	4b37      	ldr	r3, [pc, #220]	@ (800c4c0 <_strtod_l+0x590>)
 800c3e2:	eba9 0808 	sub.w	r8, r9, r8
 800c3e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c3ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c3ee:	4650      	mov	r0, sl
 800c3f0:	4659      	mov	r1, fp
 800c3f2:	f7f4 fa63 	bl	80008bc <__aeabi_ddiv>
 800c3f6:	e783      	b.n	800c300 <_strtod_l+0x3d0>
 800c3f8:	4b32      	ldr	r3, [pc, #200]	@ (800c4c4 <_strtod_l+0x594>)
 800c3fa:	9308      	str	r3, [sp, #32]
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	1124      	asrs	r4, r4, #4
 800c400:	4650      	mov	r0, sl
 800c402:	4659      	mov	r1, fp
 800c404:	461e      	mov	r6, r3
 800c406:	2c01      	cmp	r4, #1
 800c408:	dc21      	bgt.n	800c44e <_strtod_l+0x51e>
 800c40a:	b10b      	cbz	r3, 800c410 <_strtod_l+0x4e0>
 800c40c:	4682      	mov	sl, r0
 800c40e:	468b      	mov	fp, r1
 800c410:	492c      	ldr	r1, [pc, #176]	@ (800c4c4 <_strtod_l+0x594>)
 800c412:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c416:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c41a:	4652      	mov	r2, sl
 800c41c:	465b      	mov	r3, fp
 800c41e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c422:	f7f4 f921 	bl	8000668 <__aeabi_dmul>
 800c426:	4b28      	ldr	r3, [pc, #160]	@ (800c4c8 <_strtod_l+0x598>)
 800c428:	460a      	mov	r2, r1
 800c42a:	400b      	ands	r3, r1
 800c42c:	4927      	ldr	r1, [pc, #156]	@ (800c4cc <_strtod_l+0x59c>)
 800c42e:	428b      	cmp	r3, r1
 800c430:	4682      	mov	sl, r0
 800c432:	d898      	bhi.n	800c366 <_strtod_l+0x436>
 800c434:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c438:	428b      	cmp	r3, r1
 800c43a:	bf86      	itte	hi
 800c43c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c4d0 <_strtod_l+0x5a0>
 800c440:	f04f 3aff 	movhi.w	sl, #4294967295
 800c444:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c448:	2300      	movs	r3, #0
 800c44a:	9308      	str	r3, [sp, #32]
 800c44c:	e07a      	b.n	800c544 <_strtod_l+0x614>
 800c44e:	07e2      	lsls	r2, r4, #31
 800c450:	d505      	bpl.n	800c45e <_strtod_l+0x52e>
 800c452:	9b08      	ldr	r3, [sp, #32]
 800c454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c458:	f7f4 f906 	bl	8000668 <__aeabi_dmul>
 800c45c:	2301      	movs	r3, #1
 800c45e:	9a08      	ldr	r2, [sp, #32]
 800c460:	3208      	adds	r2, #8
 800c462:	3601      	adds	r6, #1
 800c464:	1064      	asrs	r4, r4, #1
 800c466:	9208      	str	r2, [sp, #32]
 800c468:	e7cd      	b.n	800c406 <_strtod_l+0x4d6>
 800c46a:	d0ed      	beq.n	800c448 <_strtod_l+0x518>
 800c46c:	4264      	negs	r4, r4
 800c46e:	f014 020f 	ands.w	r2, r4, #15
 800c472:	d00a      	beq.n	800c48a <_strtod_l+0x55a>
 800c474:	4b12      	ldr	r3, [pc, #72]	@ (800c4c0 <_strtod_l+0x590>)
 800c476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c47a:	4650      	mov	r0, sl
 800c47c:	4659      	mov	r1, fp
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f7f4 fa1b 	bl	80008bc <__aeabi_ddiv>
 800c486:	4682      	mov	sl, r0
 800c488:	468b      	mov	fp, r1
 800c48a:	1124      	asrs	r4, r4, #4
 800c48c:	d0dc      	beq.n	800c448 <_strtod_l+0x518>
 800c48e:	2c1f      	cmp	r4, #31
 800c490:	dd20      	ble.n	800c4d4 <_strtod_l+0x5a4>
 800c492:	2400      	movs	r4, #0
 800c494:	46a0      	mov	r8, r4
 800c496:	940a      	str	r4, [sp, #40]	@ 0x28
 800c498:	46a1      	mov	r9, r4
 800c49a:	9a05      	ldr	r2, [sp, #20]
 800c49c:	2322      	movs	r3, #34	@ 0x22
 800c49e:	f04f 0a00 	mov.w	sl, #0
 800c4a2:	f04f 0b00 	mov.w	fp, #0
 800c4a6:	6013      	str	r3, [r2, #0]
 800c4a8:	e768      	b.n	800c37c <_strtod_l+0x44c>
 800c4aa:	bf00      	nop
 800c4ac:	0800de52 	.word	0x0800de52
 800c4b0:	0800e0fc 	.word	0x0800e0fc
 800c4b4:	0800de4a 	.word	0x0800de4a
 800c4b8:	0800df2e 	.word	0x0800df2e
 800c4bc:	0800df2a 	.word	0x0800df2a
 800c4c0:	0800e030 	.word	0x0800e030
 800c4c4:	0800e008 	.word	0x0800e008
 800c4c8:	7ff00000 	.word	0x7ff00000
 800c4cc:	7ca00000 	.word	0x7ca00000
 800c4d0:	7fefffff 	.word	0x7fefffff
 800c4d4:	f014 0310 	ands.w	r3, r4, #16
 800c4d8:	bf18      	it	ne
 800c4da:	236a      	movne	r3, #106	@ 0x6a
 800c4dc:	4ea9      	ldr	r6, [pc, #676]	@ (800c784 <_strtod_l+0x854>)
 800c4de:	9308      	str	r3, [sp, #32]
 800c4e0:	4650      	mov	r0, sl
 800c4e2:	4659      	mov	r1, fp
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	07e2      	lsls	r2, r4, #31
 800c4e8:	d504      	bpl.n	800c4f4 <_strtod_l+0x5c4>
 800c4ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c4ee:	f7f4 f8bb 	bl	8000668 <__aeabi_dmul>
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	1064      	asrs	r4, r4, #1
 800c4f6:	f106 0608 	add.w	r6, r6, #8
 800c4fa:	d1f4      	bne.n	800c4e6 <_strtod_l+0x5b6>
 800c4fc:	b10b      	cbz	r3, 800c502 <_strtod_l+0x5d2>
 800c4fe:	4682      	mov	sl, r0
 800c500:	468b      	mov	fp, r1
 800c502:	9b08      	ldr	r3, [sp, #32]
 800c504:	b1b3      	cbz	r3, 800c534 <_strtod_l+0x604>
 800c506:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c50a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c50e:	2b00      	cmp	r3, #0
 800c510:	4659      	mov	r1, fp
 800c512:	dd0f      	ble.n	800c534 <_strtod_l+0x604>
 800c514:	2b1f      	cmp	r3, #31
 800c516:	dd55      	ble.n	800c5c4 <_strtod_l+0x694>
 800c518:	2b34      	cmp	r3, #52	@ 0x34
 800c51a:	bfde      	ittt	le
 800c51c:	f04f 33ff 	movle.w	r3, #4294967295
 800c520:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c524:	4093      	lslle	r3, r2
 800c526:	f04f 0a00 	mov.w	sl, #0
 800c52a:	bfcc      	ite	gt
 800c52c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c530:	ea03 0b01 	andle.w	fp, r3, r1
 800c534:	2200      	movs	r2, #0
 800c536:	2300      	movs	r3, #0
 800c538:	4650      	mov	r0, sl
 800c53a:	4659      	mov	r1, fp
 800c53c:	f7f4 fafc 	bl	8000b38 <__aeabi_dcmpeq>
 800c540:	2800      	cmp	r0, #0
 800c542:	d1a6      	bne.n	800c492 <_strtod_l+0x562>
 800c544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c54a:	9805      	ldr	r0, [sp, #20]
 800c54c:	462b      	mov	r3, r5
 800c54e:	463a      	mov	r2, r7
 800c550:	f7ff f8c6 	bl	800b6e0 <__s2b>
 800c554:	900a      	str	r0, [sp, #40]	@ 0x28
 800c556:	2800      	cmp	r0, #0
 800c558:	f43f af05 	beq.w	800c366 <_strtod_l+0x436>
 800c55c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c55e:	2a00      	cmp	r2, #0
 800c560:	eba9 0308 	sub.w	r3, r9, r8
 800c564:	bfa8      	it	ge
 800c566:	2300      	movge	r3, #0
 800c568:	9312      	str	r3, [sp, #72]	@ 0x48
 800c56a:	2400      	movs	r4, #0
 800c56c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c570:	9316      	str	r3, [sp, #88]	@ 0x58
 800c572:	46a0      	mov	r8, r4
 800c574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c576:	9805      	ldr	r0, [sp, #20]
 800c578:	6859      	ldr	r1, [r3, #4]
 800c57a:	f7ff f809 	bl	800b590 <_Balloc>
 800c57e:	4681      	mov	r9, r0
 800c580:	2800      	cmp	r0, #0
 800c582:	f43f aef4 	beq.w	800c36e <_strtod_l+0x43e>
 800c586:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c588:	691a      	ldr	r2, [r3, #16]
 800c58a:	3202      	adds	r2, #2
 800c58c:	f103 010c 	add.w	r1, r3, #12
 800c590:	0092      	lsls	r2, r2, #2
 800c592:	300c      	adds	r0, #12
 800c594:	f000 fd08 	bl	800cfa8 <memcpy>
 800c598:	ec4b ab10 	vmov	d0, sl, fp
 800c59c:	9805      	ldr	r0, [sp, #20]
 800c59e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c5a0:	a91b      	add	r1, sp, #108	@ 0x6c
 800c5a2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c5a6:	f7ff fbd7 	bl	800bd58 <__d2b>
 800c5aa:	901a      	str	r0, [sp, #104]	@ 0x68
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	f43f aede 	beq.w	800c36e <_strtod_l+0x43e>
 800c5b2:	9805      	ldr	r0, [sp, #20]
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	f7ff f929 	bl	800b80c <__i2b>
 800c5ba:	4680      	mov	r8, r0
 800c5bc:	b948      	cbnz	r0, 800c5d2 <_strtod_l+0x6a2>
 800c5be:	f04f 0800 	mov.w	r8, #0
 800c5c2:	e6d4      	b.n	800c36e <_strtod_l+0x43e>
 800c5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5cc:	ea03 0a0a 	and.w	sl, r3, sl
 800c5d0:	e7b0      	b.n	800c534 <_strtod_l+0x604>
 800c5d2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c5d4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c5d6:	2d00      	cmp	r5, #0
 800c5d8:	bfab      	itete	ge
 800c5da:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c5dc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c5de:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c5e0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c5e2:	bfac      	ite	ge
 800c5e4:	18ef      	addge	r7, r5, r3
 800c5e6:	1b5e      	sublt	r6, r3, r5
 800c5e8:	9b08      	ldr	r3, [sp, #32]
 800c5ea:	1aed      	subs	r5, r5, r3
 800c5ec:	4415      	add	r5, r2
 800c5ee:	4b66      	ldr	r3, [pc, #408]	@ (800c788 <_strtod_l+0x858>)
 800c5f0:	3d01      	subs	r5, #1
 800c5f2:	429d      	cmp	r5, r3
 800c5f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c5f8:	da50      	bge.n	800c69c <_strtod_l+0x76c>
 800c5fa:	1b5b      	subs	r3, r3, r5
 800c5fc:	2b1f      	cmp	r3, #31
 800c5fe:	eba2 0203 	sub.w	r2, r2, r3
 800c602:	f04f 0101 	mov.w	r1, #1
 800c606:	dc3d      	bgt.n	800c684 <_strtod_l+0x754>
 800c608:	fa01 f303 	lsl.w	r3, r1, r3
 800c60c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c60e:	2300      	movs	r3, #0
 800c610:	9310      	str	r3, [sp, #64]	@ 0x40
 800c612:	18bd      	adds	r5, r7, r2
 800c614:	9b08      	ldr	r3, [sp, #32]
 800c616:	42af      	cmp	r7, r5
 800c618:	4416      	add	r6, r2
 800c61a:	441e      	add	r6, r3
 800c61c:	463b      	mov	r3, r7
 800c61e:	bfa8      	it	ge
 800c620:	462b      	movge	r3, r5
 800c622:	42b3      	cmp	r3, r6
 800c624:	bfa8      	it	ge
 800c626:	4633      	movge	r3, r6
 800c628:	2b00      	cmp	r3, #0
 800c62a:	bfc2      	ittt	gt
 800c62c:	1aed      	subgt	r5, r5, r3
 800c62e:	1af6      	subgt	r6, r6, r3
 800c630:	1aff      	subgt	r7, r7, r3
 800c632:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c634:	2b00      	cmp	r3, #0
 800c636:	dd16      	ble.n	800c666 <_strtod_l+0x736>
 800c638:	4641      	mov	r1, r8
 800c63a:	9805      	ldr	r0, [sp, #20]
 800c63c:	461a      	mov	r2, r3
 800c63e:	f7ff f9a5 	bl	800b98c <__pow5mult>
 800c642:	4680      	mov	r8, r0
 800c644:	2800      	cmp	r0, #0
 800c646:	d0ba      	beq.n	800c5be <_strtod_l+0x68e>
 800c648:	4601      	mov	r1, r0
 800c64a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c64c:	9805      	ldr	r0, [sp, #20]
 800c64e:	f7ff f8f3 	bl	800b838 <__multiply>
 800c652:	900e      	str	r0, [sp, #56]	@ 0x38
 800c654:	2800      	cmp	r0, #0
 800c656:	f43f ae8a 	beq.w	800c36e <_strtod_l+0x43e>
 800c65a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c65c:	9805      	ldr	r0, [sp, #20]
 800c65e:	f7fe ffd7 	bl	800b610 <_Bfree>
 800c662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c664:	931a      	str	r3, [sp, #104]	@ 0x68
 800c666:	2d00      	cmp	r5, #0
 800c668:	dc1d      	bgt.n	800c6a6 <_strtod_l+0x776>
 800c66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dd23      	ble.n	800c6b8 <_strtod_l+0x788>
 800c670:	4649      	mov	r1, r9
 800c672:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c674:	9805      	ldr	r0, [sp, #20]
 800c676:	f7ff f989 	bl	800b98c <__pow5mult>
 800c67a:	4681      	mov	r9, r0
 800c67c:	b9e0      	cbnz	r0, 800c6b8 <_strtod_l+0x788>
 800c67e:	f04f 0900 	mov.w	r9, #0
 800c682:	e674      	b.n	800c36e <_strtod_l+0x43e>
 800c684:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c688:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c68c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c690:	35e2      	adds	r5, #226	@ 0xe2
 800c692:	fa01 f305 	lsl.w	r3, r1, r5
 800c696:	9310      	str	r3, [sp, #64]	@ 0x40
 800c698:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c69a:	e7ba      	b.n	800c612 <_strtod_l+0x6e2>
 800c69c:	2300      	movs	r3, #0
 800c69e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c6a4:	e7b5      	b.n	800c612 <_strtod_l+0x6e2>
 800c6a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6a8:	9805      	ldr	r0, [sp, #20]
 800c6aa:	462a      	mov	r2, r5
 800c6ac:	f7ff f9c8 	bl	800ba40 <__lshift>
 800c6b0:	901a      	str	r0, [sp, #104]	@ 0x68
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	d1d9      	bne.n	800c66a <_strtod_l+0x73a>
 800c6b6:	e65a      	b.n	800c36e <_strtod_l+0x43e>
 800c6b8:	2e00      	cmp	r6, #0
 800c6ba:	dd07      	ble.n	800c6cc <_strtod_l+0x79c>
 800c6bc:	4649      	mov	r1, r9
 800c6be:	9805      	ldr	r0, [sp, #20]
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	f7ff f9bd 	bl	800ba40 <__lshift>
 800c6c6:	4681      	mov	r9, r0
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d0d8      	beq.n	800c67e <_strtod_l+0x74e>
 800c6cc:	2f00      	cmp	r7, #0
 800c6ce:	dd08      	ble.n	800c6e2 <_strtod_l+0x7b2>
 800c6d0:	4641      	mov	r1, r8
 800c6d2:	9805      	ldr	r0, [sp, #20]
 800c6d4:	463a      	mov	r2, r7
 800c6d6:	f7ff f9b3 	bl	800ba40 <__lshift>
 800c6da:	4680      	mov	r8, r0
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	f43f ae46 	beq.w	800c36e <_strtod_l+0x43e>
 800c6e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6e4:	9805      	ldr	r0, [sp, #20]
 800c6e6:	464a      	mov	r2, r9
 800c6e8:	f7ff fa32 	bl	800bb50 <__mdiff>
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	f43f ae3d 	beq.w	800c36e <_strtod_l+0x43e>
 800c6f4:	68c3      	ldr	r3, [r0, #12]
 800c6f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	60c3      	str	r3, [r0, #12]
 800c6fc:	4641      	mov	r1, r8
 800c6fe:	f7ff fa0b 	bl	800bb18 <__mcmp>
 800c702:	2800      	cmp	r0, #0
 800c704:	da46      	bge.n	800c794 <_strtod_l+0x864>
 800c706:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c708:	ea53 030a 	orrs.w	r3, r3, sl
 800c70c:	d16c      	bne.n	800c7e8 <_strtod_l+0x8b8>
 800c70e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c712:	2b00      	cmp	r3, #0
 800c714:	d168      	bne.n	800c7e8 <_strtod_l+0x8b8>
 800c716:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c71a:	0d1b      	lsrs	r3, r3, #20
 800c71c:	051b      	lsls	r3, r3, #20
 800c71e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c722:	d961      	bls.n	800c7e8 <_strtod_l+0x8b8>
 800c724:	6963      	ldr	r3, [r4, #20]
 800c726:	b913      	cbnz	r3, 800c72e <_strtod_l+0x7fe>
 800c728:	6923      	ldr	r3, [r4, #16]
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	dd5c      	ble.n	800c7e8 <_strtod_l+0x8b8>
 800c72e:	4621      	mov	r1, r4
 800c730:	2201      	movs	r2, #1
 800c732:	9805      	ldr	r0, [sp, #20]
 800c734:	f7ff f984 	bl	800ba40 <__lshift>
 800c738:	4641      	mov	r1, r8
 800c73a:	4604      	mov	r4, r0
 800c73c:	f7ff f9ec 	bl	800bb18 <__mcmp>
 800c740:	2800      	cmp	r0, #0
 800c742:	dd51      	ble.n	800c7e8 <_strtod_l+0x8b8>
 800c744:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c748:	9a08      	ldr	r2, [sp, #32]
 800c74a:	0d1b      	lsrs	r3, r3, #20
 800c74c:	051b      	lsls	r3, r3, #20
 800c74e:	2a00      	cmp	r2, #0
 800c750:	d06b      	beq.n	800c82a <_strtod_l+0x8fa>
 800c752:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c756:	d868      	bhi.n	800c82a <_strtod_l+0x8fa>
 800c758:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c75c:	f67f ae9d 	bls.w	800c49a <_strtod_l+0x56a>
 800c760:	4b0a      	ldr	r3, [pc, #40]	@ (800c78c <_strtod_l+0x85c>)
 800c762:	4650      	mov	r0, sl
 800c764:	4659      	mov	r1, fp
 800c766:	2200      	movs	r2, #0
 800c768:	f7f3 ff7e 	bl	8000668 <__aeabi_dmul>
 800c76c:	4b08      	ldr	r3, [pc, #32]	@ (800c790 <_strtod_l+0x860>)
 800c76e:	400b      	ands	r3, r1
 800c770:	4682      	mov	sl, r0
 800c772:	468b      	mov	fp, r1
 800c774:	2b00      	cmp	r3, #0
 800c776:	f47f ae05 	bne.w	800c384 <_strtod_l+0x454>
 800c77a:	9a05      	ldr	r2, [sp, #20]
 800c77c:	2322      	movs	r3, #34	@ 0x22
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	e600      	b.n	800c384 <_strtod_l+0x454>
 800c782:	bf00      	nop
 800c784:	0800e128 	.word	0x0800e128
 800c788:	fffffc02 	.word	0xfffffc02
 800c78c:	39500000 	.word	0x39500000
 800c790:	7ff00000 	.word	0x7ff00000
 800c794:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c798:	d165      	bne.n	800c866 <_strtod_l+0x936>
 800c79a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c79c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7a0:	b35a      	cbz	r2, 800c7fa <_strtod_l+0x8ca>
 800c7a2:	4a9f      	ldr	r2, [pc, #636]	@ (800ca20 <_strtod_l+0xaf0>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d12b      	bne.n	800c800 <_strtod_l+0x8d0>
 800c7a8:	9b08      	ldr	r3, [sp, #32]
 800c7aa:	4651      	mov	r1, sl
 800c7ac:	b303      	cbz	r3, 800c7f0 <_strtod_l+0x8c0>
 800c7ae:	4b9d      	ldr	r3, [pc, #628]	@ (800ca24 <_strtod_l+0xaf4>)
 800c7b0:	465a      	mov	r2, fp
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7bc:	d81b      	bhi.n	800c7f6 <_strtod_l+0x8c6>
 800c7be:	0d1b      	lsrs	r3, r3, #20
 800c7c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c8:	4299      	cmp	r1, r3
 800c7ca:	d119      	bne.n	800c800 <_strtod_l+0x8d0>
 800c7cc:	4b96      	ldr	r3, [pc, #600]	@ (800ca28 <_strtod_l+0xaf8>)
 800c7ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d102      	bne.n	800c7da <_strtod_l+0x8aa>
 800c7d4:	3101      	adds	r1, #1
 800c7d6:	f43f adca 	beq.w	800c36e <_strtod_l+0x43e>
 800c7da:	4b92      	ldr	r3, [pc, #584]	@ (800ca24 <_strtod_l+0xaf4>)
 800c7dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7de:	401a      	ands	r2, r3
 800c7e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c7e4:	f04f 0a00 	mov.w	sl, #0
 800c7e8:	9b08      	ldr	r3, [sp, #32]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1b8      	bne.n	800c760 <_strtod_l+0x830>
 800c7ee:	e5c9      	b.n	800c384 <_strtod_l+0x454>
 800c7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7f4:	e7e8      	b.n	800c7c8 <_strtod_l+0x898>
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	e7e6      	b.n	800c7c8 <_strtod_l+0x898>
 800c7fa:	ea53 030a 	orrs.w	r3, r3, sl
 800c7fe:	d0a1      	beq.n	800c744 <_strtod_l+0x814>
 800c800:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c802:	b1db      	cbz	r3, 800c83c <_strtod_l+0x90c>
 800c804:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c806:	4213      	tst	r3, r2
 800c808:	d0ee      	beq.n	800c7e8 <_strtod_l+0x8b8>
 800c80a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c80c:	9a08      	ldr	r2, [sp, #32]
 800c80e:	4650      	mov	r0, sl
 800c810:	4659      	mov	r1, fp
 800c812:	b1bb      	cbz	r3, 800c844 <_strtod_l+0x914>
 800c814:	f7ff fb6e 	bl	800bef4 <sulp>
 800c818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c81c:	ec53 2b10 	vmov	r2, r3, d0
 800c820:	f7f3 fd6c 	bl	80002fc <__adddf3>
 800c824:	4682      	mov	sl, r0
 800c826:	468b      	mov	fp, r1
 800c828:	e7de      	b.n	800c7e8 <_strtod_l+0x8b8>
 800c82a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c82e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c832:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c836:	f04f 3aff 	mov.w	sl, #4294967295
 800c83a:	e7d5      	b.n	800c7e8 <_strtod_l+0x8b8>
 800c83c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c83e:	ea13 0f0a 	tst.w	r3, sl
 800c842:	e7e1      	b.n	800c808 <_strtod_l+0x8d8>
 800c844:	f7ff fb56 	bl	800bef4 <sulp>
 800c848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c84c:	ec53 2b10 	vmov	r2, r3, d0
 800c850:	f7f3 fd52 	bl	80002f8 <__aeabi_dsub>
 800c854:	2200      	movs	r2, #0
 800c856:	2300      	movs	r3, #0
 800c858:	4682      	mov	sl, r0
 800c85a:	468b      	mov	fp, r1
 800c85c:	f7f4 f96c 	bl	8000b38 <__aeabi_dcmpeq>
 800c860:	2800      	cmp	r0, #0
 800c862:	d0c1      	beq.n	800c7e8 <_strtod_l+0x8b8>
 800c864:	e619      	b.n	800c49a <_strtod_l+0x56a>
 800c866:	4641      	mov	r1, r8
 800c868:	4620      	mov	r0, r4
 800c86a:	f7ff facd 	bl	800be08 <__ratio>
 800c86e:	ec57 6b10 	vmov	r6, r7, d0
 800c872:	2200      	movs	r2, #0
 800c874:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c878:	4630      	mov	r0, r6
 800c87a:	4639      	mov	r1, r7
 800c87c:	f7f4 f970 	bl	8000b60 <__aeabi_dcmple>
 800c880:	2800      	cmp	r0, #0
 800c882:	d06f      	beq.n	800c964 <_strtod_l+0xa34>
 800c884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c886:	2b00      	cmp	r3, #0
 800c888:	d17a      	bne.n	800c980 <_strtod_l+0xa50>
 800c88a:	f1ba 0f00 	cmp.w	sl, #0
 800c88e:	d158      	bne.n	800c942 <_strtod_l+0xa12>
 800c890:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c896:	2b00      	cmp	r3, #0
 800c898:	d15a      	bne.n	800c950 <_strtod_l+0xa20>
 800c89a:	4b64      	ldr	r3, [pc, #400]	@ (800ca2c <_strtod_l+0xafc>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	4630      	mov	r0, r6
 800c8a0:	4639      	mov	r1, r7
 800c8a2:	f7f4 f953 	bl	8000b4c <__aeabi_dcmplt>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d159      	bne.n	800c95e <_strtod_l+0xa2e>
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	4639      	mov	r1, r7
 800c8ae:	4b60      	ldr	r3, [pc, #384]	@ (800ca30 <_strtod_l+0xb00>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f7f3 fed9 	bl	8000668 <__aeabi_dmul>
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	460f      	mov	r7, r1
 800c8ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c8be:	9606      	str	r6, [sp, #24]
 800c8c0:	9307      	str	r3, [sp, #28]
 800c8c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8c6:	4d57      	ldr	r5, [pc, #348]	@ (800ca24 <_strtod_l+0xaf4>)
 800c8c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c8cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8ce:	401d      	ands	r5, r3
 800c8d0:	4b58      	ldr	r3, [pc, #352]	@ (800ca34 <_strtod_l+0xb04>)
 800c8d2:	429d      	cmp	r5, r3
 800c8d4:	f040 80b2 	bne.w	800ca3c <_strtod_l+0xb0c>
 800c8d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c8de:	ec4b ab10 	vmov	d0, sl, fp
 800c8e2:	f7ff f9c9 	bl	800bc78 <__ulp>
 800c8e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8ea:	ec51 0b10 	vmov	r0, r1, d0
 800c8ee:	f7f3 febb 	bl	8000668 <__aeabi_dmul>
 800c8f2:	4652      	mov	r2, sl
 800c8f4:	465b      	mov	r3, fp
 800c8f6:	f7f3 fd01 	bl	80002fc <__adddf3>
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4949      	ldr	r1, [pc, #292]	@ (800ca24 <_strtod_l+0xaf4>)
 800c8fe:	4a4e      	ldr	r2, [pc, #312]	@ (800ca38 <_strtod_l+0xb08>)
 800c900:	4019      	ands	r1, r3
 800c902:	4291      	cmp	r1, r2
 800c904:	4682      	mov	sl, r0
 800c906:	d942      	bls.n	800c98e <_strtod_l+0xa5e>
 800c908:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c90a:	4b47      	ldr	r3, [pc, #284]	@ (800ca28 <_strtod_l+0xaf8>)
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d103      	bne.n	800c918 <_strtod_l+0x9e8>
 800c910:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c912:	3301      	adds	r3, #1
 800c914:	f43f ad2b 	beq.w	800c36e <_strtod_l+0x43e>
 800c918:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ca28 <_strtod_l+0xaf8>
 800c91c:	f04f 3aff 	mov.w	sl, #4294967295
 800c920:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c922:	9805      	ldr	r0, [sp, #20]
 800c924:	f7fe fe74 	bl	800b610 <_Bfree>
 800c928:	9805      	ldr	r0, [sp, #20]
 800c92a:	4649      	mov	r1, r9
 800c92c:	f7fe fe70 	bl	800b610 <_Bfree>
 800c930:	9805      	ldr	r0, [sp, #20]
 800c932:	4641      	mov	r1, r8
 800c934:	f7fe fe6c 	bl	800b610 <_Bfree>
 800c938:	9805      	ldr	r0, [sp, #20]
 800c93a:	4621      	mov	r1, r4
 800c93c:	f7fe fe68 	bl	800b610 <_Bfree>
 800c940:	e618      	b.n	800c574 <_strtod_l+0x644>
 800c942:	f1ba 0f01 	cmp.w	sl, #1
 800c946:	d103      	bne.n	800c950 <_strtod_l+0xa20>
 800c948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f43f ada5 	beq.w	800c49a <_strtod_l+0x56a>
 800c950:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ca00 <_strtod_l+0xad0>
 800c954:	4f35      	ldr	r7, [pc, #212]	@ (800ca2c <_strtod_l+0xafc>)
 800c956:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c95a:	2600      	movs	r6, #0
 800c95c:	e7b1      	b.n	800c8c2 <_strtod_l+0x992>
 800c95e:	4f34      	ldr	r7, [pc, #208]	@ (800ca30 <_strtod_l+0xb00>)
 800c960:	2600      	movs	r6, #0
 800c962:	e7aa      	b.n	800c8ba <_strtod_l+0x98a>
 800c964:	4b32      	ldr	r3, [pc, #200]	@ (800ca30 <_strtod_l+0xb00>)
 800c966:	4630      	mov	r0, r6
 800c968:	4639      	mov	r1, r7
 800c96a:	2200      	movs	r2, #0
 800c96c:	f7f3 fe7c 	bl	8000668 <__aeabi_dmul>
 800c970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c972:	4606      	mov	r6, r0
 800c974:	460f      	mov	r7, r1
 800c976:	2b00      	cmp	r3, #0
 800c978:	d09f      	beq.n	800c8ba <_strtod_l+0x98a>
 800c97a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c97e:	e7a0      	b.n	800c8c2 <_strtod_l+0x992>
 800c980:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ca08 <_strtod_l+0xad8>
 800c984:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c988:	ec57 6b17 	vmov	r6, r7, d7
 800c98c:	e799      	b.n	800c8c2 <_strtod_l+0x992>
 800c98e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c992:	9b08      	ldr	r3, [sp, #32]
 800c994:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1c1      	bne.n	800c920 <_strtod_l+0x9f0>
 800c99c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9a0:	0d1b      	lsrs	r3, r3, #20
 800c9a2:	051b      	lsls	r3, r3, #20
 800c9a4:	429d      	cmp	r5, r3
 800c9a6:	d1bb      	bne.n	800c920 <_strtod_l+0x9f0>
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	4639      	mov	r1, r7
 800c9ac:	f7f4 f9bc 	bl	8000d28 <__aeabi_d2lz>
 800c9b0:	f7f3 fe2c 	bl	800060c <__aeabi_l2d>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	4639      	mov	r1, r7
 800c9bc:	f7f3 fc9c 	bl	80002f8 <__aeabi_dsub>
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c9c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c9cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9ce:	ea46 060a 	orr.w	r6, r6, sl
 800c9d2:	431e      	orrs	r6, r3
 800c9d4:	d06f      	beq.n	800cab6 <_strtod_l+0xb86>
 800c9d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ca10 <_strtod_l+0xae0>)
 800c9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9dc:	f7f4 f8b6 	bl	8000b4c <__aeabi_dcmplt>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	f47f accf 	bne.w	800c384 <_strtod_l+0x454>
 800c9e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800ca18 <_strtod_l+0xae8>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9f0:	f7f4 f8ca 	bl	8000b88 <__aeabi_dcmpgt>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d093      	beq.n	800c920 <_strtod_l+0x9f0>
 800c9f8:	e4c4      	b.n	800c384 <_strtod_l+0x454>
 800c9fa:	bf00      	nop
 800c9fc:	f3af 8000 	nop.w
 800ca00:	00000000 	.word	0x00000000
 800ca04:	bff00000 	.word	0xbff00000
 800ca08:	00000000 	.word	0x00000000
 800ca0c:	3ff00000 	.word	0x3ff00000
 800ca10:	94a03595 	.word	0x94a03595
 800ca14:	3fdfffff 	.word	0x3fdfffff
 800ca18:	35afe535 	.word	0x35afe535
 800ca1c:	3fe00000 	.word	0x3fe00000
 800ca20:	000fffff 	.word	0x000fffff
 800ca24:	7ff00000 	.word	0x7ff00000
 800ca28:	7fefffff 	.word	0x7fefffff
 800ca2c:	3ff00000 	.word	0x3ff00000
 800ca30:	3fe00000 	.word	0x3fe00000
 800ca34:	7fe00000 	.word	0x7fe00000
 800ca38:	7c9fffff 	.word	0x7c9fffff
 800ca3c:	9b08      	ldr	r3, [sp, #32]
 800ca3e:	b323      	cbz	r3, 800ca8a <_strtod_l+0xb5a>
 800ca40:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ca44:	d821      	bhi.n	800ca8a <_strtod_l+0xb5a>
 800ca46:	a328      	add	r3, pc, #160	@ (adr r3, 800cae8 <_strtod_l+0xbb8>)
 800ca48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	4639      	mov	r1, r7
 800ca50:	f7f4 f886 	bl	8000b60 <__aeabi_dcmple>
 800ca54:	b1a0      	cbz	r0, 800ca80 <_strtod_l+0xb50>
 800ca56:	4639      	mov	r1, r7
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f7f4 f8dd 	bl	8000c18 <__aeabi_d2uiz>
 800ca5e:	2801      	cmp	r0, #1
 800ca60:	bf38      	it	cc
 800ca62:	2001      	movcc	r0, #1
 800ca64:	f7f3 fd86 	bl	8000574 <__aeabi_ui2d>
 800ca68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460f      	mov	r7, r1
 800ca6e:	b9fb      	cbnz	r3, 800cab0 <_strtod_l+0xb80>
 800ca70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca74:	9014      	str	r0, [sp, #80]	@ 0x50
 800ca76:	9315      	str	r3, [sp, #84]	@ 0x54
 800ca78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ca7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca82:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ca86:	1b5b      	subs	r3, r3, r5
 800ca88:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca8a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ca8e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ca92:	f7ff f8f1 	bl	800bc78 <__ulp>
 800ca96:	4650      	mov	r0, sl
 800ca98:	ec53 2b10 	vmov	r2, r3, d0
 800ca9c:	4659      	mov	r1, fp
 800ca9e:	f7f3 fde3 	bl	8000668 <__aeabi_dmul>
 800caa2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800caa6:	f7f3 fc29 	bl	80002fc <__adddf3>
 800caaa:	4682      	mov	sl, r0
 800caac:	468b      	mov	fp, r1
 800caae:	e770      	b.n	800c992 <_strtod_l+0xa62>
 800cab0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cab4:	e7e0      	b.n	800ca78 <_strtod_l+0xb48>
 800cab6:	a30e      	add	r3, pc, #56	@ (adr r3, 800caf0 <_strtod_l+0xbc0>)
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	f7f4 f846 	bl	8000b4c <__aeabi_dcmplt>
 800cac0:	e798      	b.n	800c9f4 <_strtod_l+0xac4>
 800cac2:	2300      	movs	r3, #0
 800cac4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cac6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cac8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caca:	6013      	str	r3, [r2, #0]
 800cacc:	f7ff ba6d 	b.w	800bfaa <_strtod_l+0x7a>
 800cad0:	2a65      	cmp	r2, #101	@ 0x65
 800cad2:	f43f ab66 	beq.w	800c1a2 <_strtod_l+0x272>
 800cad6:	2a45      	cmp	r2, #69	@ 0x45
 800cad8:	f43f ab63 	beq.w	800c1a2 <_strtod_l+0x272>
 800cadc:	2301      	movs	r3, #1
 800cade:	f7ff bb9e 	b.w	800c21e <_strtod_l+0x2ee>
 800cae2:	bf00      	nop
 800cae4:	f3af 8000 	nop.w
 800cae8:	ffc00000 	.word	0xffc00000
 800caec:	41dfffff 	.word	0x41dfffff
 800caf0:	94a03595 	.word	0x94a03595
 800caf4:	3fcfffff 	.word	0x3fcfffff

0800caf8 <_strtod_r>:
 800caf8:	4b01      	ldr	r3, [pc, #4]	@ (800cb00 <_strtod_r+0x8>)
 800cafa:	f7ff ba19 	b.w	800bf30 <_strtod_l>
 800cafe:	bf00      	nop
 800cb00:	20000254 	.word	0x20000254

0800cb04 <__ssputs_r>:
 800cb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb08:	688e      	ldr	r6, [r1, #8]
 800cb0a:	461f      	mov	r7, r3
 800cb0c:	42be      	cmp	r6, r7
 800cb0e:	680b      	ldr	r3, [r1, #0]
 800cb10:	4682      	mov	sl, r0
 800cb12:	460c      	mov	r4, r1
 800cb14:	4690      	mov	r8, r2
 800cb16:	d82d      	bhi.n	800cb74 <__ssputs_r+0x70>
 800cb18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb20:	d026      	beq.n	800cb70 <__ssputs_r+0x6c>
 800cb22:	6965      	ldr	r5, [r4, #20]
 800cb24:	6909      	ldr	r1, [r1, #16]
 800cb26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb2a:	eba3 0901 	sub.w	r9, r3, r1
 800cb2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb32:	1c7b      	adds	r3, r7, #1
 800cb34:	444b      	add	r3, r9
 800cb36:	106d      	asrs	r5, r5, #1
 800cb38:	429d      	cmp	r5, r3
 800cb3a:	bf38      	it	cc
 800cb3c:	461d      	movcc	r5, r3
 800cb3e:	0553      	lsls	r3, r2, #21
 800cb40:	d527      	bpl.n	800cb92 <__ssputs_r+0x8e>
 800cb42:	4629      	mov	r1, r5
 800cb44:	f7fe fc98 	bl	800b478 <_malloc_r>
 800cb48:	4606      	mov	r6, r0
 800cb4a:	b360      	cbz	r0, 800cba6 <__ssputs_r+0xa2>
 800cb4c:	6921      	ldr	r1, [r4, #16]
 800cb4e:	464a      	mov	r2, r9
 800cb50:	f000 fa2a 	bl	800cfa8 <memcpy>
 800cb54:	89a3      	ldrh	r3, [r4, #12]
 800cb56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb5e:	81a3      	strh	r3, [r4, #12]
 800cb60:	6126      	str	r6, [r4, #16]
 800cb62:	6165      	str	r5, [r4, #20]
 800cb64:	444e      	add	r6, r9
 800cb66:	eba5 0509 	sub.w	r5, r5, r9
 800cb6a:	6026      	str	r6, [r4, #0]
 800cb6c:	60a5      	str	r5, [r4, #8]
 800cb6e:	463e      	mov	r6, r7
 800cb70:	42be      	cmp	r6, r7
 800cb72:	d900      	bls.n	800cb76 <__ssputs_r+0x72>
 800cb74:	463e      	mov	r6, r7
 800cb76:	6820      	ldr	r0, [r4, #0]
 800cb78:	4632      	mov	r2, r6
 800cb7a:	4641      	mov	r1, r8
 800cb7c:	f000 f9d8 	bl	800cf30 <memmove>
 800cb80:	68a3      	ldr	r3, [r4, #8]
 800cb82:	1b9b      	subs	r3, r3, r6
 800cb84:	60a3      	str	r3, [r4, #8]
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	4433      	add	r3, r6
 800cb8a:	6023      	str	r3, [r4, #0]
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb92:	462a      	mov	r2, r5
 800cb94:	f000 fd85 	bl	800d6a2 <_realloc_r>
 800cb98:	4606      	mov	r6, r0
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d1e0      	bne.n	800cb60 <__ssputs_r+0x5c>
 800cb9e:	6921      	ldr	r1, [r4, #16]
 800cba0:	4650      	mov	r0, sl
 800cba2:	f7fe fbf5 	bl	800b390 <_free_r>
 800cba6:	230c      	movs	r3, #12
 800cba8:	f8ca 3000 	str.w	r3, [sl]
 800cbac:	89a3      	ldrh	r3, [r4, #12]
 800cbae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbb2:	81a3      	strh	r3, [r4, #12]
 800cbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb8:	e7e9      	b.n	800cb8e <__ssputs_r+0x8a>
	...

0800cbbc <_svfiprintf_r>:
 800cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	4698      	mov	r8, r3
 800cbc2:	898b      	ldrh	r3, [r1, #12]
 800cbc4:	061b      	lsls	r3, r3, #24
 800cbc6:	b09d      	sub	sp, #116	@ 0x74
 800cbc8:	4607      	mov	r7, r0
 800cbca:	460d      	mov	r5, r1
 800cbcc:	4614      	mov	r4, r2
 800cbce:	d510      	bpl.n	800cbf2 <_svfiprintf_r+0x36>
 800cbd0:	690b      	ldr	r3, [r1, #16]
 800cbd2:	b973      	cbnz	r3, 800cbf2 <_svfiprintf_r+0x36>
 800cbd4:	2140      	movs	r1, #64	@ 0x40
 800cbd6:	f7fe fc4f 	bl	800b478 <_malloc_r>
 800cbda:	6028      	str	r0, [r5, #0]
 800cbdc:	6128      	str	r0, [r5, #16]
 800cbde:	b930      	cbnz	r0, 800cbee <_svfiprintf_r+0x32>
 800cbe0:	230c      	movs	r3, #12
 800cbe2:	603b      	str	r3, [r7, #0]
 800cbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe8:	b01d      	add	sp, #116	@ 0x74
 800cbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbee:	2340      	movs	r3, #64	@ 0x40
 800cbf0:	616b      	str	r3, [r5, #20]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbf6:	2320      	movs	r3, #32
 800cbf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc00:	2330      	movs	r3, #48	@ 0x30
 800cc02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cda0 <_svfiprintf_r+0x1e4>
 800cc06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc0a:	f04f 0901 	mov.w	r9, #1
 800cc0e:	4623      	mov	r3, r4
 800cc10:	469a      	mov	sl, r3
 800cc12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc16:	b10a      	cbz	r2, 800cc1c <_svfiprintf_r+0x60>
 800cc18:	2a25      	cmp	r2, #37	@ 0x25
 800cc1a:	d1f9      	bne.n	800cc10 <_svfiprintf_r+0x54>
 800cc1c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc20:	d00b      	beq.n	800cc3a <_svfiprintf_r+0x7e>
 800cc22:	465b      	mov	r3, fp
 800cc24:	4622      	mov	r2, r4
 800cc26:	4629      	mov	r1, r5
 800cc28:	4638      	mov	r0, r7
 800cc2a:	f7ff ff6b 	bl	800cb04 <__ssputs_r>
 800cc2e:	3001      	adds	r0, #1
 800cc30:	f000 80a7 	beq.w	800cd82 <_svfiprintf_r+0x1c6>
 800cc34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc36:	445a      	add	r2, fp
 800cc38:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	f000 809f 	beq.w	800cd82 <_svfiprintf_r+0x1c6>
 800cc44:	2300      	movs	r3, #0
 800cc46:	f04f 32ff 	mov.w	r2, #4294967295
 800cc4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc4e:	f10a 0a01 	add.w	sl, sl, #1
 800cc52:	9304      	str	r3, [sp, #16]
 800cc54:	9307      	str	r3, [sp, #28]
 800cc56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc5c:	4654      	mov	r4, sl
 800cc5e:	2205      	movs	r2, #5
 800cc60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc64:	484e      	ldr	r0, [pc, #312]	@ (800cda0 <_svfiprintf_r+0x1e4>)
 800cc66:	f7f3 faeb 	bl	8000240 <memchr>
 800cc6a:	9a04      	ldr	r2, [sp, #16]
 800cc6c:	b9d8      	cbnz	r0, 800cca6 <_svfiprintf_r+0xea>
 800cc6e:	06d0      	lsls	r0, r2, #27
 800cc70:	bf44      	itt	mi
 800cc72:	2320      	movmi	r3, #32
 800cc74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc78:	0711      	lsls	r1, r2, #28
 800cc7a:	bf44      	itt	mi
 800cc7c:	232b      	movmi	r3, #43	@ 0x2b
 800cc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc82:	f89a 3000 	ldrb.w	r3, [sl]
 800cc86:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc88:	d015      	beq.n	800ccb6 <_svfiprintf_r+0xfa>
 800cc8a:	9a07      	ldr	r2, [sp, #28]
 800cc8c:	4654      	mov	r4, sl
 800cc8e:	2000      	movs	r0, #0
 800cc90:	f04f 0c0a 	mov.w	ip, #10
 800cc94:	4621      	mov	r1, r4
 800cc96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc9a:	3b30      	subs	r3, #48	@ 0x30
 800cc9c:	2b09      	cmp	r3, #9
 800cc9e:	d94b      	bls.n	800cd38 <_svfiprintf_r+0x17c>
 800cca0:	b1b0      	cbz	r0, 800ccd0 <_svfiprintf_r+0x114>
 800cca2:	9207      	str	r2, [sp, #28]
 800cca4:	e014      	b.n	800ccd0 <_svfiprintf_r+0x114>
 800cca6:	eba0 0308 	sub.w	r3, r0, r8
 800ccaa:	fa09 f303 	lsl.w	r3, r9, r3
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	9304      	str	r3, [sp, #16]
 800ccb2:	46a2      	mov	sl, r4
 800ccb4:	e7d2      	b.n	800cc5c <_svfiprintf_r+0xa0>
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	1d19      	adds	r1, r3, #4
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	9103      	str	r1, [sp, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	bfbb      	ittet	lt
 800ccc2:	425b      	neglt	r3, r3
 800ccc4:	f042 0202 	orrlt.w	r2, r2, #2
 800ccc8:	9307      	strge	r3, [sp, #28]
 800ccca:	9307      	strlt	r3, [sp, #28]
 800cccc:	bfb8      	it	lt
 800ccce:	9204      	strlt	r2, [sp, #16]
 800ccd0:	7823      	ldrb	r3, [r4, #0]
 800ccd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccd4:	d10a      	bne.n	800ccec <_svfiprintf_r+0x130>
 800ccd6:	7863      	ldrb	r3, [r4, #1]
 800ccd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccda:	d132      	bne.n	800cd42 <_svfiprintf_r+0x186>
 800ccdc:	9b03      	ldr	r3, [sp, #12]
 800ccde:	1d1a      	adds	r2, r3, #4
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	9203      	str	r2, [sp, #12]
 800cce4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cce8:	3402      	adds	r4, #2
 800ccea:	9305      	str	r3, [sp, #20]
 800ccec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cdb0 <_svfiprintf_r+0x1f4>
 800ccf0:	7821      	ldrb	r1, [r4, #0]
 800ccf2:	2203      	movs	r2, #3
 800ccf4:	4650      	mov	r0, sl
 800ccf6:	f7f3 faa3 	bl	8000240 <memchr>
 800ccfa:	b138      	cbz	r0, 800cd0c <_svfiprintf_r+0x150>
 800ccfc:	9b04      	ldr	r3, [sp, #16]
 800ccfe:	eba0 000a 	sub.w	r0, r0, sl
 800cd02:	2240      	movs	r2, #64	@ 0x40
 800cd04:	4082      	lsls	r2, r0
 800cd06:	4313      	orrs	r3, r2
 800cd08:	3401      	adds	r4, #1
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd10:	4824      	ldr	r0, [pc, #144]	@ (800cda4 <_svfiprintf_r+0x1e8>)
 800cd12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd16:	2206      	movs	r2, #6
 800cd18:	f7f3 fa92 	bl	8000240 <memchr>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d036      	beq.n	800cd8e <_svfiprintf_r+0x1d2>
 800cd20:	4b21      	ldr	r3, [pc, #132]	@ (800cda8 <_svfiprintf_r+0x1ec>)
 800cd22:	bb1b      	cbnz	r3, 800cd6c <_svfiprintf_r+0x1b0>
 800cd24:	9b03      	ldr	r3, [sp, #12]
 800cd26:	3307      	adds	r3, #7
 800cd28:	f023 0307 	bic.w	r3, r3, #7
 800cd2c:	3308      	adds	r3, #8
 800cd2e:	9303      	str	r3, [sp, #12]
 800cd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd32:	4433      	add	r3, r6
 800cd34:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd36:	e76a      	b.n	800cc0e <_svfiprintf_r+0x52>
 800cd38:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd3c:	460c      	mov	r4, r1
 800cd3e:	2001      	movs	r0, #1
 800cd40:	e7a8      	b.n	800cc94 <_svfiprintf_r+0xd8>
 800cd42:	2300      	movs	r3, #0
 800cd44:	3401      	adds	r4, #1
 800cd46:	9305      	str	r3, [sp, #20]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	f04f 0c0a 	mov.w	ip, #10
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd54:	3a30      	subs	r2, #48	@ 0x30
 800cd56:	2a09      	cmp	r2, #9
 800cd58:	d903      	bls.n	800cd62 <_svfiprintf_r+0x1a6>
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d0c6      	beq.n	800ccec <_svfiprintf_r+0x130>
 800cd5e:	9105      	str	r1, [sp, #20]
 800cd60:	e7c4      	b.n	800ccec <_svfiprintf_r+0x130>
 800cd62:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd66:	4604      	mov	r4, r0
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e7f0      	b.n	800cd4e <_svfiprintf_r+0x192>
 800cd6c:	ab03      	add	r3, sp, #12
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	462a      	mov	r2, r5
 800cd72:	4b0e      	ldr	r3, [pc, #56]	@ (800cdac <_svfiprintf_r+0x1f0>)
 800cd74:	a904      	add	r1, sp, #16
 800cd76:	4638      	mov	r0, r7
 800cd78:	f7fc fccc 	bl	8009714 <_printf_float>
 800cd7c:	1c42      	adds	r2, r0, #1
 800cd7e:	4606      	mov	r6, r0
 800cd80:	d1d6      	bne.n	800cd30 <_svfiprintf_r+0x174>
 800cd82:	89ab      	ldrh	r3, [r5, #12]
 800cd84:	065b      	lsls	r3, r3, #25
 800cd86:	f53f af2d 	bmi.w	800cbe4 <_svfiprintf_r+0x28>
 800cd8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd8c:	e72c      	b.n	800cbe8 <_svfiprintf_r+0x2c>
 800cd8e:	ab03      	add	r3, sp, #12
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	462a      	mov	r2, r5
 800cd94:	4b05      	ldr	r3, [pc, #20]	@ (800cdac <_svfiprintf_r+0x1f0>)
 800cd96:	a904      	add	r1, sp, #16
 800cd98:	4638      	mov	r0, r7
 800cd9a:	f7fc ff53 	bl	8009c44 <_printf_i>
 800cd9e:	e7ed      	b.n	800cd7c <_svfiprintf_r+0x1c0>
 800cda0:	0800e150 	.word	0x0800e150
 800cda4:	0800e15a 	.word	0x0800e15a
 800cda8:	08009715 	.word	0x08009715
 800cdac:	0800cb05 	.word	0x0800cb05
 800cdb0:	0800e156 	.word	0x0800e156

0800cdb4 <__sflush_r>:
 800cdb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdbc:	0716      	lsls	r6, r2, #28
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	d454      	bmi.n	800ce6e <__sflush_r+0xba>
 800cdc4:	684b      	ldr	r3, [r1, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	dc02      	bgt.n	800cdd0 <__sflush_r+0x1c>
 800cdca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	dd48      	ble.n	800ce62 <__sflush_r+0xae>
 800cdd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdd2:	2e00      	cmp	r6, #0
 800cdd4:	d045      	beq.n	800ce62 <__sflush_r+0xae>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cddc:	682f      	ldr	r7, [r5, #0]
 800cdde:	6a21      	ldr	r1, [r4, #32]
 800cde0:	602b      	str	r3, [r5, #0]
 800cde2:	d030      	beq.n	800ce46 <__sflush_r+0x92>
 800cde4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	0759      	lsls	r1, r3, #29
 800cdea:	d505      	bpl.n	800cdf8 <__sflush_r+0x44>
 800cdec:	6863      	ldr	r3, [r4, #4]
 800cdee:	1ad2      	subs	r2, r2, r3
 800cdf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cdf2:	b10b      	cbz	r3, 800cdf8 <__sflush_r+0x44>
 800cdf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cdf6:	1ad2      	subs	r2, r2, r3
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdfc:	6a21      	ldr	r1, [r4, #32]
 800cdfe:	4628      	mov	r0, r5
 800ce00:	47b0      	blx	r6
 800ce02:	1c43      	adds	r3, r0, #1
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	d106      	bne.n	800ce16 <__sflush_r+0x62>
 800ce08:	6829      	ldr	r1, [r5, #0]
 800ce0a:	291d      	cmp	r1, #29
 800ce0c:	d82b      	bhi.n	800ce66 <__sflush_r+0xb2>
 800ce0e:	4a2a      	ldr	r2, [pc, #168]	@ (800ceb8 <__sflush_r+0x104>)
 800ce10:	410a      	asrs	r2, r1
 800ce12:	07d6      	lsls	r6, r2, #31
 800ce14:	d427      	bmi.n	800ce66 <__sflush_r+0xb2>
 800ce16:	2200      	movs	r2, #0
 800ce18:	6062      	str	r2, [r4, #4]
 800ce1a:	04d9      	lsls	r1, r3, #19
 800ce1c:	6922      	ldr	r2, [r4, #16]
 800ce1e:	6022      	str	r2, [r4, #0]
 800ce20:	d504      	bpl.n	800ce2c <__sflush_r+0x78>
 800ce22:	1c42      	adds	r2, r0, #1
 800ce24:	d101      	bne.n	800ce2a <__sflush_r+0x76>
 800ce26:	682b      	ldr	r3, [r5, #0]
 800ce28:	b903      	cbnz	r3, 800ce2c <__sflush_r+0x78>
 800ce2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ce2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce2e:	602f      	str	r7, [r5, #0]
 800ce30:	b1b9      	cbz	r1, 800ce62 <__sflush_r+0xae>
 800ce32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce36:	4299      	cmp	r1, r3
 800ce38:	d002      	beq.n	800ce40 <__sflush_r+0x8c>
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	f7fe faa8 	bl	800b390 <_free_r>
 800ce40:	2300      	movs	r3, #0
 800ce42:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce44:	e00d      	b.n	800ce62 <__sflush_r+0xae>
 800ce46:	2301      	movs	r3, #1
 800ce48:	4628      	mov	r0, r5
 800ce4a:	47b0      	blx	r6
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	1c50      	adds	r0, r2, #1
 800ce50:	d1c9      	bne.n	800cde6 <__sflush_r+0x32>
 800ce52:	682b      	ldr	r3, [r5, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d0c6      	beq.n	800cde6 <__sflush_r+0x32>
 800ce58:	2b1d      	cmp	r3, #29
 800ce5a:	d001      	beq.n	800ce60 <__sflush_r+0xac>
 800ce5c:	2b16      	cmp	r3, #22
 800ce5e:	d11e      	bne.n	800ce9e <__sflush_r+0xea>
 800ce60:	602f      	str	r7, [r5, #0]
 800ce62:	2000      	movs	r0, #0
 800ce64:	e022      	b.n	800ceac <__sflush_r+0xf8>
 800ce66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce6a:	b21b      	sxth	r3, r3
 800ce6c:	e01b      	b.n	800cea6 <__sflush_r+0xf2>
 800ce6e:	690f      	ldr	r7, [r1, #16]
 800ce70:	2f00      	cmp	r7, #0
 800ce72:	d0f6      	beq.n	800ce62 <__sflush_r+0xae>
 800ce74:	0793      	lsls	r3, r2, #30
 800ce76:	680e      	ldr	r6, [r1, #0]
 800ce78:	bf08      	it	eq
 800ce7a:	694b      	ldreq	r3, [r1, #20]
 800ce7c:	600f      	str	r7, [r1, #0]
 800ce7e:	bf18      	it	ne
 800ce80:	2300      	movne	r3, #0
 800ce82:	eba6 0807 	sub.w	r8, r6, r7
 800ce86:	608b      	str	r3, [r1, #8]
 800ce88:	f1b8 0f00 	cmp.w	r8, #0
 800ce8c:	dde9      	ble.n	800ce62 <__sflush_r+0xae>
 800ce8e:	6a21      	ldr	r1, [r4, #32]
 800ce90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce92:	4643      	mov	r3, r8
 800ce94:	463a      	mov	r2, r7
 800ce96:	4628      	mov	r0, r5
 800ce98:	47b0      	blx	r6
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	dc08      	bgt.n	800ceb0 <__sflush_r+0xfc>
 800ce9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cea6:	81a3      	strh	r3, [r4, #12]
 800cea8:	f04f 30ff 	mov.w	r0, #4294967295
 800ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb0:	4407      	add	r7, r0
 800ceb2:	eba8 0800 	sub.w	r8, r8, r0
 800ceb6:	e7e7      	b.n	800ce88 <__sflush_r+0xd4>
 800ceb8:	dfbffffe 	.word	0xdfbffffe

0800cebc <_fflush_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	690b      	ldr	r3, [r1, #16]
 800cec0:	4605      	mov	r5, r0
 800cec2:	460c      	mov	r4, r1
 800cec4:	b913      	cbnz	r3, 800cecc <_fflush_r+0x10>
 800cec6:	2500      	movs	r5, #0
 800cec8:	4628      	mov	r0, r5
 800ceca:	bd38      	pop	{r3, r4, r5, pc}
 800cecc:	b118      	cbz	r0, 800ced6 <_fflush_r+0x1a>
 800cece:	6a03      	ldr	r3, [r0, #32]
 800ced0:	b90b      	cbnz	r3, 800ced6 <_fflush_r+0x1a>
 800ced2:	f7fd fa77 	bl	800a3c4 <__sinit>
 800ced6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d0f3      	beq.n	800cec6 <_fflush_r+0xa>
 800cede:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cee0:	07d0      	lsls	r0, r2, #31
 800cee2:	d404      	bmi.n	800ceee <_fflush_r+0x32>
 800cee4:	0599      	lsls	r1, r3, #22
 800cee6:	d402      	bmi.n	800ceee <_fflush_r+0x32>
 800cee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceea:	f7fd fbde 	bl	800a6aa <__retarget_lock_acquire_recursive>
 800ceee:	4628      	mov	r0, r5
 800cef0:	4621      	mov	r1, r4
 800cef2:	f7ff ff5f 	bl	800cdb4 <__sflush_r>
 800cef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cef8:	07da      	lsls	r2, r3, #31
 800cefa:	4605      	mov	r5, r0
 800cefc:	d4e4      	bmi.n	800cec8 <_fflush_r+0xc>
 800cefe:	89a3      	ldrh	r3, [r4, #12]
 800cf00:	059b      	lsls	r3, r3, #22
 800cf02:	d4e1      	bmi.n	800cec8 <_fflush_r+0xc>
 800cf04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf06:	f7fd fbd1 	bl	800a6ac <__retarget_lock_release_recursive>
 800cf0a:	e7dd      	b.n	800cec8 <_fflush_r+0xc>

0800cf0c <fiprintf>:
 800cf0c:	b40e      	push	{r1, r2, r3}
 800cf0e:	b503      	push	{r0, r1, lr}
 800cf10:	4601      	mov	r1, r0
 800cf12:	ab03      	add	r3, sp, #12
 800cf14:	4805      	ldr	r0, [pc, #20]	@ (800cf2c <fiprintf+0x20>)
 800cf16:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf1a:	6800      	ldr	r0, [r0, #0]
 800cf1c:	9301      	str	r3, [sp, #4]
 800cf1e:	f000 fc25 	bl	800d76c <_vfiprintf_r>
 800cf22:	b002      	add	sp, #8
 800cf24:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf28:	b003      	add	sp, #12
 800cf2a:	4770      	bx	lr
 800cf2c:	20000204 	.word	0x20000204

0800cf30 <memmove>:
 800cf30:	4288      	cmp	r0, r1
 800cf32:	b510      	push	{r4, lr}
 800cf34:	eb01 0402 	add.w	r4, r1, r2
 800cf38:	d902      	bls.n	800cf40 <memmove+0x10>
 800cf3a:	4284      	cmp	r4, r0
 800cf3c:	4623      	mov	r3, r4
 800cf3e:	d807      	bhi.n	800cf50 <memmove+0x20>
 800cf40:	1e43      	subs	r3, r0, #1
 800cf42:	42a1      	cmp	r1, r4
 800cf44:	d008      	beq.n	800cf58 <memmove+0x28>
 800cf46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf4e:	e7f8      	b.n	800cf42 <memmove+0x12>
 800cf50:	4402      	add	r2, r0
 800cf52:	4601      	mov	r1, r0
 800cf54:	428a      	cmp	r2, r1
 800cf56:	d100      	bne.n	800cf5a <memmove+0x2a>
 800cf58:	bd10      	pop	{r4, pc}
 800cf5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf62:	e7f7      	b.n	800cf54 <memmove+0x24>

0800cf64 <strncmp>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	b16a      	cbz	r2, 800cf84 <strncmp+0x20>
 800cf68:	3901      	subs	r1, #1
 800cf6a:	1884      	adds	r4, r0, r2
 800cf6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d103      	bne.n	800cf80 <strncmp+0x1c>
 800cf78:	42a0      	cmp	r0, r4
 800cf7a:	d001      	beq.n	800cf80 <strncmp+0x1c>
 800cf7c:	2a00      	cmp	r2, #0
 800cf7e:	d1f5      	bne.n	800cf6c <strncmp+0x8>
 800cf80:	1ad0      	subs	r0, r2, r3
 800cf82:	bd10      	pop	{r4, pc}
 800cf84:	4610      	mov	r0, r2
 800cf86:	e7fc      	b.n	800cf82 <strncmp+0x1e>

0800cf88 <_sbrk_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4d06      	ldr	r5, [pc, #24]	@ (800cfa4 <_sbrk_r+0x1c>)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4604      	mov	r4, r0
 800cf90:	4608      	mov	r0, r1
 800cf92:	602b      	str	r3, [r5, #0]
 800cf94:	f7f5 faf6 	bl	8002584 <_sbrk>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	d102      	bne.n	800cfa2 <_sbrk_r+0x1a>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	b103      	cbz	r3, 800cfa2 <_sbrk_r+0x1a>
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	20000858 	.word	0x20000858

0800cfa8 <memcpy>:
 800cfa8:	440a      	add	r2, r1
 800cfaa:	4291      	cmp	r1, r2
 800cfac:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfb0:	d100      	bne.n	800cfb4 <memcpy+0xc>
 800cfb2:	4770      	bx	lr
 800cfb4:	b510      	push	{r4, lr}
 800cfb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfbe:	4291      	cmp	r1, r2
 800cfc0:	d1f9      	bne.n	800cfb6 <memcpy+0xe>
 800cfc2:	bd10      	pop	{r4, pc}
 800cfc4:	0000      	movs	r0, r0
	...

0800cfc8 <nan>:
 800cfc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cfd0 <nan+0x8>
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	00000000 	.word	0x00000000
 800cfd4:	7ff80000 	.word	0x7ff80000

0800cfd8 <abort>:
 800cfd8:	b508      	push	{r3, lr}
 800cfda:	2006      	movs	r0, #6
 800cfdc:	f000 fd9a 	bl	800db14 <raise>
 800cfe0:	2001      	movs	r0, #1
 800cfe2:	f7f5 fa57 	bl	8002494 <_exit>

0800cfe6 <_calloc_r>:
 800cfe6:	b570      	push	{r4, r5, r6, lr}
 800cfe8:	fba1 5402 	umull	r5, r4, r1, r2
 800cfec:	b93c      	cbnz	r4, 800cffe <_calloc_r+0x18>
 800cfee:	4629      	mov	r1, r5
 800cff0:	f7fe fa42 	bl	800b478 <_malloc_r>
 800cff4:	4606      	mov	r6, r0
 800cff6:	b928      	cbnz	r0, 800d004 <_calloc_r+0x1e>
 800cff8:	2600      	movs	r6, #0
 800cffa:	4630      	mov	r0, r6
 800cffc:	bd70      	pop	{r4, r5, r6, pc}
 800cffe:	220c      	movs	r2, #12
 800d000:	6002      	str	r2, [r0, #0]
 800d002:	e7f9      	b.n	800cff8 <_calloc_r+0x12>
 800d004:	462a      	mov	r2, r5
 800d006:	4621      	mov	r1, r4
 800d008:	f7fd fa75 	bl	800a4f6 <memset>
 800d00c:	e7f5      	b.n	800cffa <_calloc_r+0x14>

0800d00e <rshift>:
 800d00e:	6903      	ldr	r3, [r0, #16]
 800d010:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d018:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d01c:	f100 0414 	add.w	r4, r0, #20
 800d020:	dd45      	ble.n	800d0ae <rshift+0xa0>
 800d022:	f011 011f 	ands.w	r1, r1, #31
 800d026:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d02a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d02e:	d10c      	bne.n	800d04a <rshift+0x3c>
 800d030:	f100 0710 	add.w	r7, r0, #16
 800d034:	4629      	mov	r1, r5
 800d036:	42b1      	cmp	r1, r6
 800d038:	d334      	bcc.n	800d0a4 <rshift+0x96>
 800d03a:	1a9b      	subs	r3, r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	1eea      	subs	r2, r5, #3
 800d040:	4296      	cmp	r6, r2
 800d042:	bf38      	it	cc
 800d044:	2300      	movcc	r3, #0
 800d046:	4423      	add	r3, r4
 800d048:	e015      	b.n	800d076 <rshift+0x68>
 800d04a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d04e:	f1c1 0820 	rsb	r8, r1, #32
 800d052:	40cf      	lsrs	r7, r1
 800d054:	f105 0e04 	add.w	lr, r5, #4
 800d058:	46a1      	mov	r9, r4
 800d05a:	4576      	cmp	r6, lr
 800d05c:	46f4      	mov	ip, lr
 800d05e:	d815      	bhi.n	800d08c <rshift+0x7e>
 800d060:	1a9a      	subs	r2, r3, r2
 800d062:	0092      	lsls	r2, r2, #2
 800d064:	3a04      	subs	r2, #4
 800d066:	3501      	adds	r5, #1
 800d068:	42ae      	cmp	r6, r5
 800d06a:	bf38      	it	cc
 800d06c:	2200      	movcc	r2, #0
 800d06e:	18a3      	adds	r3, r4, r2
 800d070:	50a7      	str	r7, [r4, r2]
 800d072:	b107      	cbz	r7, 800d076 <rshift+0x68>
 800d074:	3304      	adds	r3, #4
 800d076:	1b1a      	subs	r2, r3, r4
 800d078:	42a3      	cmp	r3, r4
 800d07a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d07e:	bf08      	it	eq
 800d080:	2300      	moveq	r3, #0
 800d082:	6102      	str	r2, [r0, #16]
 800d084:	bf08      	it	eq
 800d086:	6143      	streq	r3, [r0, #20]
 800d088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d08c:	f8dc c000 	ldr.w	ip, [ip]
 800d090:	fa0c fc08 	lsl.w	ip, ip, r8
 800d094:	ea4c 0707 	orr.w	r7, ip, r7
 800d098:	f849 7b04 	str.w	r7, [r9], #4
 800d09c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d0a0:	40cf      	lsrs	r7, r1
 800d0a2:	e7da      	b.n	800d05a <rshift+0x4c>
 800d0a4:	f851 cb04 	ldr.w	ip, [r1], #4
 800d0a8:	f847 cf04 	str.w	ip, [r7, #4]!
 800d0ac:	e7c3      	b.n	800d036 <rshift+0x28>
 800d0ae:	4623      	mov	r3, r4
 800d0b0:	e7e1      	b.n	800d076 <rshift+0x68>

0800d0b2 <__hexdig_fun>:
 800d0b2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d0b6:	2b09      	cmp	r3, #9
 800d0b8:	d802      	bhi.n	800d0c0 <__hexdig_fun+0xe>
 800d0ba:	3820      	subs	r0, #32
 800d0bc:	b2c0      	uxtb	r0, r0
 800d0be:	4770      	bx	lr
 800d0c0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d0c4:	2b05      	cmp	r3, #5
 800d0c6:	d801      	bhi.n	800d0cc <__hexdig_fun+0x1a>
 800d0c8:	3847      	subs	r0, #71	@ 0x47
 800d0ca:	e7f7      	b.n	800d0bc <__hexdig_fun+0xa>
 800d0cc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d0d0:	2b05      	cmp	r3, #5
 800d0d2:	d801      	bhi.n	800d0d8 <__hexdig_fun+0x26>
 800d0d4:	3827      	subs	r0, #39	@ 0x27
 800d0d6:	e7f1      	b.n	800d0bc <__hexdig_fun+0xa>
 800d0d8:	2000      	movs	r0, #0
 800d0da:	4770      	bx	lr

0800d0dc <__gethex>:
 800d0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e0:	b085      	sub	sp, #20
 800d0e2:	468a      	mov	sl, r1
 800d0e4:	9302      	str	r3, [sp, #8]
 800d0e6:	680b      	ldr	r3, [r1, #0]
 800d0e8:	9001      	str	r0, [sp, #4]
 800d0ea:	4690      	mov	r8, r2
 800d0ec:	1c9c      	adds	r4, r3, #2
 800d0ee:	46a1      	mov	r9, r4
 800d0f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d0f4:	2830      	cmp	r0, #48	@ 0x30
 800d0f6:	d0fa      	beq.n	800d0ee <__gethex+0x12>
 800d0f8:	eba9 0303 	sub.w	r3, r9, r3
 800d0fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800d100:	f7ff ffd7 	bl	800d0b2 <__hexdig_fun>
 800d104:	4605      	mov	r5, r0
 800d106:	2800      	cmp	r0, #0
 800d108:	d168      	bne.n	800d1dc <__gethex+0x100>
 800d10a:	49a0      	ldr	r1, [pc, #640]	@ (800d38c <__gethex+0x2b0>)
 800d10c:	2201      	movs	r2, #1
 800d10e:	4648      	mov	r0, r9
 800d110:	f7ff ff28 	bl	800cf64 <strncmp>
 800d114:	4607      	mov	r7, r0
 800d116:	2800      	cmp	r0, #0
 800d118:	d167      	bne.n	800d1ea <__gethex+0x10e>
 800d11a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d11e:	4626      	mov	r6, r4
 800d120:	f7ff ffc7 	bl	800d0b2 <__hexdig_fun>
 800d124:	2800      	cmp	r0, #0
 800d126:	d062      	beq.n	800d1ee <__gethex+0x112>
 800d128:	4623      	mov	r3, r4
 800d12a:	7818      	ldrb	r0, [r3, #0]
 800d12c:	2830      	cmp	r0, #48	@ 0x30
 800d12e:	4699      	mov	r9, r3
 800d130:	f103 0301 	add.w	r3, r3, #1
 800d134:	d0f9      	beq.n	800d12a <__gethex+0x4e>
 800d136:	f7ff ffbc 	bl	800d0b2 <__hexdig_fun>
 800d13a:	fab0 f580 	clz	r5, r0
 800d13e:	096d      	lsrs	r5, r5, #5
 800d140:	f04f 0b01 	mov.w	fp, #1
 800d144:	464a      	mov	r2, r9
 800d146:	4616      	mov	r6, r2
 800d148:	3201      	adds	r2, #1
 800d14a:	7830      	ldrb	r0, [r6, #0]
 800d14c:	f7ff ffb1 	bl	800d0b2 <__hexdig_fun>
 800d150:	2800      	cmp	r0, #0
 800d152:	d1f8      	bne.n	800d146 <__gethex+0x6a>
 800d154:	498d      	ldr	r1, [pc, #564]	@ (800d38c <__gethex+0x2b0>)
 800d156:	2201      	movs	r2, #1
 800d158:	4630      	mov	r0, r6
 800d15a:	f7ff ff03 	bl	800cf64 <strncmp>
 800d15e:	2800      	cmp	r0, #0
 800d160:	d13f      	bne.n	800d1e2 <__gethex+0x106>
 800d162:	b944      	cbnz	r4, 800d176 <__gethex+0x9a>
 800d164:	1c74      	adds	r4, r6, #1
 800d166:	4622      	mov	r2, r4
 800d168:	4616      	mov	r6, r2
 800d16a:	3201      	adds	r2, #1
 800d16c:	7830      	ldrb	r0, [r6, #0]
 800d16e:	f7ff ffa0 	bl	800d0b2 <__hexdig_fun>
 800d172:	2800      	cmp	r0, #0
 800d174:	d1f8      	bne.n	800d168 <__gethex+0x8c>
 800d176:	1ba4      	subs	r4, r4, r6
 800d178:	00a7      	lsls	r7, r4, #2
 800d17a:	7833      	ldrb	r3, [r6, #0]
 800d17c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d180:	2b50      	cmp	r3, #80	@ 0x50
 800d182:	d13e      	bne.n	800d202 <__gethex+0x126>
 800d184:	7873      	ldrb	r3, [r6, #1]
 800d186:	2b2b      	cmp	r3, #43	@ 0x2b
 800d188:	d033      	beq.n	800d1f2 <__gethex+0x116>
 800d18a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d18c:	d034      	beq.n	800d1f8 <__gethex+0x11c>
 800d18e:	1c71      	adds	r1, r6, #1
 800d190:	2400      	movs	r4, #0
 800d192:	7808      	ldrb	r0, [r1, #0]
 800d194:	f7ff ff8d 	bl	800d0b2 <__hexdig_fun>
 800d198:	1e43      	subs	r3, r0, #1
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b18      	cmp	r3, #24
 800d19e:	d830      	bhi.n	800d202 <__gethex+0x126>
 800d1a0:	f1a0 0210 	sub.w	r2, r0, #16
 800d1a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1a8:	f7ff ff83 	bl	800d0b2 <__hexdig_fun>
 800d1ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800d1b0:	fa5f fc8c 	uxtb.w	ip, ip
 800d1b4:	f1bc 0f18 	cmp.w	ip, #24
 800d1b8:	f04f 030a 	mov.w	r3, #10
 800d1bc:	d91e      	bls.n	800d1fc <__gethex+0x120>
 800d1be:	b104      	cbz	r4, 800d1c2 <__gethex+0xe6>
 800d1c0:	4252      	negs	r2, r2
 800d1c2:	4417      	add	r7, r2
 800d1c4:	f8ca 1000 	str.w	r1, [sl]
 800d1c8:	b1ed      	cbz	r5, 800d206 <__gethex+0x12a>
 800d1ca:	f1bb 0f00 	cmp.w	fp, #0
 800d1ce:	bf0c      	ite	eq
 800d1d0:	2506      	moveq	r5, #6
 800d1d2:	2500      	movne	r5, #0
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	b005      	add	sp, #20
 800d1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1dc:	2500      	movs	r5, #0
 800d1de:	462c      	mov	r4, r5
 800d1e0:	e7b0      	b.n	800d144 <__gethex+0x68>
 800d1e2:	2c00      	cmp	r4, #0
 800d1e4:	d1c7      	bne.n	800d176 <__gethex+0x9a>
 800d1e6:	4627      	mov	r7, r4
 800d1e8:	e7c7      	b.n	800d17a <__gethex+0x9e>
 800d1ea:	464e      	mov	r6, r9
 800d1ec:	462f      	mov	r7, r5
 800d1ee:	2501      	movs	r5, #1
 800d1f0:	e7c3      	b.n	800d17a <__gethex+0x9e>
 800d1f2:	2400      	movs	r4, #0
 800d1f4:	1cb1      	adds	r1, r6, #2
 800d1f6:	e7cc      	b.n	800d192 <__gethex+0xb6>
 800d1f8:	2401      	movs	r4, #1
 800d1fa:	e7fb      	b.n	800d1f4 <__gethex+0x118>
 800d1fc:	fb03 0002 	mla	r0, r3, r2, r0
 800d200:	e7ce      	b.n	800d1a0 <__gethex+0xc4>
 800d202:	4631      	mov	r1, r6
 800d204:	e7de      	b.n	800d1c4 <__gethex+0xe8>
 800d206:	eba6 0309 	sub.w	r3, r6, r9
 800d20a:	3b01      	subs	r3, #1
 800d20c:	4629      	mov	r1, r5
 800d20e:	2b07      	cmp	r3, #7
 800d210:	dc0a      	bgt.n	800d228 <__gethex+0x14c>
 800d212:	9801      	ldr	r0, [sp, #4]
 800d214:	f7fe f9bc 	bl	800b590 <_Balloc>
 800d218:	4604      	mov	r4, r0
 800d21a:	b940      	cbnz	r0, 800d22e <__gethex+0x152>
 800d21c:	4b5c      	ldr	r3, [pc, #368]	@ (800d390 <__gethex+0x2b4>)
 800d21e:	4602      	mov	r2, r0
 800d220:	21e4      	movs	r1, #228	@ 0xe4
 800d222:	485c      	ldr	r0, [pc, #368]	@ (800d394 <__gethex+0x2b8>)
 800d224:	f7fd fa4a 	bl	800a6bc <__assert_func>
 800d228:	3101      	adds	r1, #1
 800d22a:	105b      	asrs	r3, r3, #1
 800d22c:	e7ef      	b.n	800d20e <__gethex+0x132>
 800d22e:	f100 0a14 	add.w	sl, r0, #20
 800d232:	2300      	movs	r3, #0
 800d234:	4655      	mov	r5, sl
 800d236:	469b      	mov	fp, r3
 800d238:	45b1      	cmp	r9, r6
 800d23a:	d337      	bcc.n	800d2ac <__gethex+0x1d0>
 800d23c:	f845 bb04 	str.w	fp, [r5], #4
 800d240:	eba5 050a 	sub.w	r5, r5, sl
 800d244:	10ad      	asrs	r5, r5, #2
 800d246:	6125      	str	r5, [r4, #16]
 800d248:	4658      	mov	r0, fp
 800d24a:	f7fe fa93 	bl	800b774 <__hi0bits>
 800d24e:	016d      	lsls	r5, r5, #5
 800d250:	f8d8 6000 	ldr.w	r6, [r8]
 800d254:	1a2d      	subs	r5, r5, r0
 800d256:	42b5      	cmp	r5, r6
 800d258:	dd54      	ble.n	800d304 <__gethex+0x228>
 800d25a:	1bad      	subs	r5, r5, r6
 800d25c:	4629      	mov	r1, r5
 800d25e:	4620      	mov	r0, r4
 800d260:	f7fe fe27 	bl	800beb2 <__any_on>
 800d264:	4681      	mov	r9, r0
 800d266:	b178      	cbz	r0, 800d288 <__gethex+0x1ac>
 800d268:	1e6b      	subs	r3, r5, #1
 800d26a:	1159      	asrs	r1, r3, #5
 800d26c:	f003 021f 	and.w	r2, r3, #31
 800d270:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d274:	f04f 0901 	mov.w	r9, #1
 800d278:	fa09 f202 	lsl.w	r2, r9, r2
 800d27c:	420a      	tst	r2, r1
 800d27e:	d003      	beq.n	800d288 <__gethex+0x1ac>
 800d280:	454b      	cmp	r3, r9
 800d282:	dc36      	bgt.n	800d2f2 <__gethex+0x216>
 800d284:	f04f 0902 	mov.w	r9, #2
 800d288:	4629      	mov	r1, r5
 800d28a:	4620      	mov	r0, r4
 800d28c:	f7ff febf 	bl	800d00e <rshift>
 800d290:	442f      	add	r7, r5
 800d292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d296:	42bb      	cmp	r3, r7
 800d298:	da42      	bge.n	800d320 <__gethex+0x244>
 800d29a:	9801      	ldr	r0, [sp, #4]
 800d29c:	4621      	mov	r1, r4
 800d29e:	f7fe f9b7 	bl	800b610 <_Bfree>
 800d2a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	6013      	str	r3, [r2, #0]
 800d2a8:	25a3      	movs	r5, #163	@ 0xa3
 800d2aa:	e793      	b.n	800d1d4 <__gethex+0xf8>
 800d2ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d2b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d2b2:	d012      	beq.n	800d2da <__gethex+0x1fe>
 800d2b4:	2b20      	cmp	r3, #32
 800d2b6:	d104      	bne.n	800d2c2 <__gethex+0x1e6>
 800d2b8:	f845 bb04 	str.w	fp, [r5], #4
 800d2bc:	f04f 0b00 	mov.w	fp, #0
 800d2c0:	465b      	mov	r3, fp
 800d2c2:	7830      	ldrb	r0, [r6, #0]
 800d2c4:	9303      	str	r3, [sp, #12]
 800d2c6:	f7ff fef4 	bl	800d0b2 <__hexdig_fun>
 800d2ca:	9b03      	ldr	r3, [sp, #12]
 800d2cc:	f000 000f 	and.w	r0, r0, #15
 800d2d0:	4098      	lsls	r0, r3
 800d2d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d2d6:	3304      	adds	r3, #4
 800d2d8:	e7ae      	b.n	800d238 <__gethex+0x15c>
 800d2da:	45b1      	cmp	r9, r6
 800d2dc:	d8ea      	bhi.n	800d2b4 <__gethex+0x1d8>
 800d2de:	492b      	ldr	r1, [pc, #172]	@ (800d38c <__gethex+0x2b0>)
 800d2e0:	9303      	str	r3, [sp, #12]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f7ff fe3d 	bl	800cf64 <strncmp>
 800d2ea:	9b03      	ldr	r3, [sp, #12]
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d1e1      	bne.n	800d2b4 <__gethex+0x1d8>
 800d2f0:	e7a2      	b.n	800d238 <__gethex+0x15c>
 800d2f2:	1ea9      	subs	r1, r5, #2
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f7fe fddc 	bl	800beb2 <__any_on>
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d0c2      	beq.n	800d284 <__gethex+0x1a8>
 800d2fe:	f04f 0903 	mov.w	r9, #3
 800d302:	e7c1      	b.n	800d288 <__gethex+0x1ac>
 800d304:	da09      	bge.n	800d31a <__gethex+0x23e>
 800d306:	1b75      	subs	r5, r6, r5
 800d308:	4621      	mov	r1, r4
 800d30a:	9801      	ldr	r0, [sp, #4]
 800d30c:	462a      	mov	r2, r5
 800d30e:	f7fe fb97 	bl	800ba40 <__lshift>
 800d312:	1b7f      	subs	r7, r7, r5
 800d314:	4604      	mov	r4, r0
 800d316:	f100 0a14 	add.w	sl, r0, #20
 800d31a:	f04f 0900 	mov.w	r9, #0
 800d31e:	e7b8      	b.n	800d292 <__gethex+0x1b6>
 800d320:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d324:	42bd      	cmp	r5, r7
 800d326:	dd6f      	ble.n	800d408 <__gethex+0x32c>
 800d328:	1bed      	subs	r5, r5, r7
 800d32a:	42ae      	cmp	r6, r5
 800d32c:	dc34      	bgt.n	800d398 <__gethex+0x2bc>
 800d32e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d332:	2b02      	cmp	r3, #2
 800d334:	d022      	beq.n	800d37c <__gethex+0x2a0>
 800d336:	2b03      	cmp	r3, #3
 800d338:	d024      	beq.n	800d384 <__gethex+0x2a8>
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d115      	bne.n	800d36a <__gethex+0x28e>
 800d33e:	42ae      	cmp	r6, r5
 800d340:	d113      	bne.n	800d36a <__gethex+0x28e>
 800d342:	2e01      	cmp	r6, #1
 800d344:	d10b      	bne.n	800d35e <__gethex+0x282>
 800d346:	9a02      	ldr	r2, [sp, #8]
 800d348:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d34c:	6013      	str	r3, [r2, #0]
 800d34e:	2301      	movs	r3, #1
 800d350:	6123      	str	r3, [r4, #16]
 800d352:	f8ca 3000 	str.w	r3, [sl]
 800d356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d358:	2562      	movs	r5, #98	@ 0x62
 800d35a:	601c      	str	r4, [r3, #0]
 800d35c:	e73a      	b.n	800d1d4 <__gethex+0xf8>
 800d35e:	1e71      	subs	r1, r6, #1
 800d360:	4620      	mov	r0, r4
 800d362:	f7fe fda6 	bl	800beb2 <__any_on>
 800d366:	2800      	cmp	r0, #0
 800d368:	d1ed      	bne.n	800d346 <__gethex+0x26a>
 800d36a:	9801      	ldr	r0, [sp, #4]
 800d36c:	4621      	mov	r1, r4
 800d36e:	f7fe f94f 	bl	800b610 <_Bfree>
 800d372:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d374:	2300      	movs	r3, #0
 800d376:	6013      	str	r3, [r2, #0]
 800d378:	2550      	movs	r5, #80	@ 0x50
 800d37a:	e72b      	b.n	800d1d4 <__gethex+0xf8>
 800d37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d1f3      	bne.n	800d36a <__gethex+0x28e>
 800d382:	e7e0      	b.n	800d346 <__gethex+0x26a>
 800d384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1dd      	bne.n	800d346 <__gethex+0x26a>
 800d38a:	e7ee      	b.n	800d36a <__gethex+0x28e>
 800d38c:	0800e0f8 	.word	0x0800e0f8
 800d390:	0800df90 	.word	0x0800df90
 800d394:	0800e169 	.word	0x0800e169
 800d398:	1e6f      	subs	r7, r5, #1
 800d39a:	f1b9 0f00 	cmp.w	r9, #0
 800d39e:	d130      	bne.n	800d402 <__gethex+0x326>
 800d3a0:	b127      	cbz	r7, 800d3ac <__gethex+0x2d0>
 800d3a2:	4639      	mov	r1, r7
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f7fe fd84 	bl	800beb2 <__any_on>
 800d3aa:	4681      	mov	r9, r0
 800d3ac:	117a      	asrs	r2, r7, #5
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d3b4:	f007 071f 	and.w	r7, r7, #31
 800d3b8:	40bb      	lsls	r3, r7
 800d3ba:	4213      	tst	r3, r2
 800d3bc:	4629      	mov	r1, r5
 800d3be:	4620      	mov	r0, r4
 800d3c0:	bf18      	it	ne
 800d3c2:	f049 0902 	orrne.w	r9, r9, #2
 800d3c6:	f7ff fe22 	bl	800d00e <rshift>
 800d3ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d3ce:	1b76      	subs	r6, r6, r5
 800d3d0:	2502      	movs	r5, #2
 800d3d2:	f1b9 0f00 	cmp.w	r9, #0
 800d3d6:	d047      	beq.n	800d468 <__gethex+0x38c>
 800d3d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d3dc:	2b02      	cmp	r3, #2
 800d3de:	d015      	beq.n	800d40c <__gethex+0x330>
 800d3e0:	2b03      	cmp	r3, #3
 800d3e2:	d017      	beq.n	800d414 <__gethex+0x338>
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d109      	bne.n	800d3fc <__gethex+0x320>
 800d3e8:	f019 0f02 	tst.w	r9, #2
 800d3ec:	d006      	beq.n	800d3fc <__gethex+0x320>
 800d3ee:	f8da 3000 	ldr.w	r3, [sl]
 800d3f2:	ea49 0903 	orr.w	r9, r9, r3
 800d3f6:	f019 0f01 	tst.w	r9, #1
 800d3fa:	d10e      	bne.n	800d41a <__gethex+0x33e>
 800d3fc:	f045 0510 	orr.w	r5, r5, #16
 800d400:	e032      	b.n	800d468 <__gethex+0x38c>
 800d402:	f04f 0901 	mov.w	r9, #1
 800d406:	e7d1      	b.n	800d3ac <__gethex+0x2d0>
 800d408:	2501      	movs	r5, #1
 800d40a:	e7e2      	b.n	800d3d2 <__gethex+0x2f6>
 800d40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d40e:	f1c3 0301 	rsb	r3, r3, #1
 800d412:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d416:	2b00      	cmp	r3, #0
 800d418:	d0f0      	beq.n	800d3fc <__gethex+0x320>
 800d41a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d41e:	f104 0314 	add.w	r3, r4, #20
 800d422:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d426:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d42a:	f04f 0c00 	mov.w	ip, #0
 800d42e:	4618      	mov	r0, r3
 800d430:	f853 2b04 	ldr.w	r2, [r3], #4
 800d434:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d438:	d01b      	beq.n	800d472 <__gethex+0x396>
 800d43a:	3201      	adds	r2, #1
 800d43c:	6002      	str	r2, [r0, #0]
 800d43e:	2d02      	cmp	r5, #2
 800d440:	f104 0314 	add.w	r3, r4, #20
 800d444:	d13c      	bne.n	800d4c0 <__gethex+0x3e4>
 800d446:	f8d8 2000 	ldr.w	r2, [r8]
 800d44a:	3a01      	subs	r2, #1
 800d44c:	42b2      	cmp	r2, r6
 800d44e:	d109      	bne.n	800d464 <__gethex+0x388>
 800d450:	1171      	asrs	r1, r6, #5
 800d452:	2201      	movs	r2, #1
 800d454:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d458:	f006 061f 	and.w	r6, r6, #31
 800d45c:	fa02 f606 	lsl.w	r6, r2, r6
 800d460:	421e      	tst	r6, r3
 800d462:	d13a      	bne.n	800d4da <__gethex+0x3fe>
 800d464:	f045 0520 	orr.w	r5, r5, #32
 800d468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d46a:	601c      	str	r4, [r3, #0]
 800d46c:	9b02      	ldr	r3, [sp, #8]
 800d46e:	601f      	str	r7, [r3, #0]
 800d470:	e6b0      	b.n	800d1d4 <__gethex+0xf8>
 800d472:	4299      	cmp	r1, r3
 800d474:	f843 cc04 	str.w	ip, [r3, #-4]
 800d478:	d8d9      	bhi.n	800d42e <__gethex+0x352>
 800d47a:	68a3      	ldr	r3, [r4, #8]
 800d47c:	459b      	cmp	fp, r3
 800d47e:	db17      	blt.n	800d4b0 <__gethex+0x3d4>
 800d480:	6861      	ldr	r1, [r4, #4]
 800d482:	9801      	ldr	r0, [sp, #4]
 800d484:	3101      	adds	r1, #1
 800d486:	f7fe f883 	bl	800b590 <_Balloc>
 800d48a:	4681      	mov	r9, r0
 800d48c:	b918      	cbnz	r0, 800d496 <__gethex+0x3ba>
 800d48e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4f8 <__gethex+0x41c>)
 800d490:	4602      	mov	r2, r0
 800d492:	2184      	movs	r1, #132	@ 0x84
 800d494:	e6c5      	b.n	800d222 <__gethex+0x146>
 800d496:	6922      	ldr	r2, [r4, #16]
 800d498:	3202      	adds	r2, #2
 800d49a:	f104 010c 	add.w	r1, r4, #12
 800d49e:	0092      	lsls	r2, r2, #2
 800d4a0:	300c      	adds	r0, #12
 800d4a2:	f7ff fd81 	bl	800cfa8 <memcpy>
 800d4a6:	4621      	mov	r1, r4
 800d4a8:	9801      	ldr	r0, [sp, #4]
 800d4aa:	f7fe f8b1 	bl	800b610 <_Bfree>
 800d4ae:	464c      	mov	r4, r9
 800d4b0:	6923      	ldr	r3, [r4, #16]
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4b8:	6122      	str	r2, [r4, #16]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	615a      	str	r2, [r3, #20]
 800d4be:	e7be      	b.n	800d43e <__gethex+0x362>
 800d4c0:	6922      	ldr	r2, [r4, #16]
 800d4c2:	455a      	cmp	r2, fp
 800d4c4:	dd0b      	ble.n	800d4de <__gethex+0x402>
 800d4c6:	2101      	movs	r1, #1
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f7ff fda0 	bl	800d00e <rshift>
 800d4ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4d2:	3701      	adds	r7, #1
 800d4d4:	42bb      	cmp	r3, r7
 800d4d6:	f6ff aee0 	blt.w	800d29a <__gethex+0x1be>
 800d4da:	2501      	movs	r5, #1
 800d4dc:	e7c2      	b.n	800d464 <__gethex+0x388>
 800d4de:	f016 061f 	ands.w	r6, r6, #31
 800d4e2:	d0fa      	beq.n	800d4da <__gethex+0x3fe>
 800d4e4:	4453      	add	r3, sl
 800d4e6:	f1c6 0620 	rsb	r6, r6, #32
 800d4ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d4ee:	f7fe f941 	bl	800b774 <__hi0bits>
 800d4f2:	42b0      	cmp	r0, r6
 800d4f4:	dbe7      	blt.n	800d4c6 <__gethex+0x3ea>
 800d4f6:	e7f0      	b.n	800d4da <__gethex+0x3fe>
 800d4f8:	0800df90 	.word	0x0800df90

0800d4fc <L_shift>:
 800d4fc:	f1c2 0208 	rsb	r2, r2, #8
 800d500:	0092      	lsls	r2, r2, #2
 800d502:	b570      	push	{r4, r5, r6, lr}
 800d504:	f1c2 0620 	rsb	r6, r2, #32
 800d508:	6843      	ldr	r3, [r0, #4]
 800d50a:	6804      	ldr	r4, [r0, #0]
 800d50c:	fa03 f506 	lsl.w	r5, r3, r6
 800d510:	432c      	orrs	r4, r5
 800d512:	40d3      	lsrs	r3, r2
 800d514:	6004      	str	r4, [r0, #0]
 800d516:	f840 3f04 	str.w	r3, [r0, #4]!
 800d51a:	4288      	cmp	r0, r1
 800d51c:	d3f4      	bcc.n	800d508 <L_shift+0xc>
 800d51e:	bd70      	pop	{r4, r5, r6, pc}

0800d520 <__match>:
 800d520:	b530      	push	{r4, r5, lr}
 800d522:	6803      	ldr	r3, [r0, #0]
 800d524:	3301      	adds	r3, #1
 800d526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d52a:	b914      	cbnz	r4, 800d532 <__match+0x12>
 800d52c:	6003      	str	r3, [r0, #0]
 800d52e:	2001      	movs	r0, #1
 800d530:	bd30      	pop	{r4, r5, pc}
 800d532:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d536:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d53a:	2d19      	cmp	r5, #25
 800d53c:	bf98      	it	ls
 800d53e:	3220      	addls	r2, #32
 800d540:	42a2      	cmp	r2, r4
 800d542:	d0f0      	beq.n	800d526 <__match+0x6>
 800d544:	2000      	movs	r0, #0
 800d546:	e7f3      	b.n	800d530 <__match+0x10>

0800d548 <__hexnan>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	680b      	ldr	r3, [r1, #0]
 800d54e:	6801      	ldr	r1, [r0, #0]
 800d550:	115e      	asrs	r6, r3, #5
 800d552:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d556:	f013 031f 	ands.w	r3, r3, #31
 800d55a:	b087      	sub	sp, #28
 800d55c:	bf18      	it	ne
 800d55e:	3604      	addne	r6, #4
 800d560:	2500      	movs	r5, #0
 800d562:	1f37      	subs	r7, r6, #4
 800d564:	4682      	mov	sl, r0
 800d566:	4690      	mov	r8, r2
 800d568:	9301      	str	r3, [sp, #4]
 800d56a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d56e:	46b9      	mov	r9, r7
 800d570:	463c      	mov	r4, r7
 800d572:	9502      	str	r5, [sp, #8]
 800d574:	46ab      	mov	fp, r5
 800d576:	784a      	ldrb	r2, [r1, #1]
 800d578:	1c4b      	adds	r3, r1, #1
 800d57a:	9303      	str	r3, [sp, #12]
 800d57c:	b342      	cbz	r2, 800d5d0 <__hexnan+0x88>
 800d57e:	4610      	mov	r0, r2
 800d580:	9105      	str	r1, [sp, #20]
 800d582:	9204      	str	r2, [sp, #16]
 800d584:	f7ff fd95 	bl	800d0b2 <__hexdig_fun>
 800d588:	2800      	cmp	r0, #0
 800d58a:	d151      	bne.n	800d630 <__hexnan+0xe8>
 800d58c:	9a04      	ldr	r2, [sp, #16]
 800d58e:	9905      	ldr	r1, [sp, #20]
 800d590:	2a20      	cmp	r2, #32
 800d592:	d818      	bhi.n	800d5c6 <__hexnan+0x7e>
 800d594:	9b02      	ldr	r3, [sp, #8]
 800d596:	459b      	cmp	fp, r3
 800d598:	dd13      	ble.n	800d5c2 <__hexnan+0x7a>
 800d59a:	454c      	cmp	r4, r9
 800d59c:	d206      	bcs.n	800d5ac <__hexnan+0x64>
 800d59e:	2d07      	cmp	r5, #7
 800d5a0:	dc04      	bgt.n	800d5ac <__hexnan+0x64>
 800d5a2:	462a      	mov	r2, r5
 800d5a4:	4649      	mov	r1, r9
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f7ff ffa8 	bl	800d4fc <L_shift>
 800d5ac:	4544      	cmp	r4, r8
 800d5ae:	d952      	bls.n	800d656 <__hexnan+0x10e>
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	f1a4 0904 	sub.w	r9, r4, #4
 800d5b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5ba:	f8cd b008 	str.w	fp, [sp, #8]
 800d5be:	464c      	mov	r4, r9
 800d5c0:	461d      	mov	r5, r3
 800d5c2:	9903      	ldr	r1, [sp, #12]
 800d5c4:	e7d7      	b.n	800d576 <__hexnan+0x2e>
 800d5c6:	2a29      	cmp	r2, #41	@ 0x29
 800d5c8:	d157      	bne.n	800d67a <__hexnan+0x132>
 800d5ca:	3102      	adds	r1, #2
 800d5cc:	f8ca 1000 	str.w	r1, [sl]
 800d5d0:	f1bb 0f00 	cmp.w	fp, #0
 800d5d4:	d051      	beq.n	800d67a <__hexnan+0x132>
 800d5d6:	454c      	cmp	r4, r9
 800d5d8:	d206      	bcs.n	800d5e8 <__hexnan+0xa0>
 800d5da:	2d07      	cmp	r5, #7
 800d5dc:	dc04      	bgt.n	800d5e8 <__hexnan+0xa0>
 800d5de:	462a      	mov	r2, r5
 800d5e0:	4649      	mov	r1, r9
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f7ff ff8a 	bl	800d4fc <L_shift>
 800d5e8:	4544      	cmp	r4, r8
 800d5ea:	d936      	bls.n	800d65a <__hexnan+0x112>
 800d5ec:	f1a8 0204 	sub.w	r2, r8, #4
 800d5f0:	4623      	mov	r3, r4
 800d5f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d5f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d5fa:	429f      	cmp	r7, r3
 800d5fc:	d2f9      	bcs.n	800d5f2 <__hexnan+0xaa>
 800d5fe:	1b3b      	subs	r3, r7, r4
 800d600:	f023 0303 	bic.w	r3, r3, #3
 800d604:	3304      	adds	r3, #4
 800d606:	3401      	adds	r4, #1
 800d608:	3e03      	subs	r6, #3
 800d60a:	42b4      	cmp	r4, r6
 800d60c:	bf88      	it	hi
 800d60e:	2304      	movhi	r3, #4
 800d610:	4443      	add	r3, r8
 800d612:	2200      	movs	r2, #0
 800d614:	f843 2b04 	str.w	r2, [r3], #4
 800d618:	429f      	cmp	r7, r3
 800d61a:	d2fb      	bcs.n	800d614 <__hexnan+0xcc>
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	b91b      	cbnz	r3, 800d628 <__hexnan+0xe0>
 800d620:	4547      	cmp	r7, r8
 800d622:	d128      	bne.n	800d676 <__hexnan+0x12e>
 800d624:	2301      	movs	r3, #1
 800d626:	603b      	str	r3, [r7, #0]
 800d628:	2005      	movs	r0, #5
 800d62a:	b007      	add	sp, #28
 800d62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d630:	3501      	adds	r5, #1
 800d632:	2d08      	cmp	r5, #8
 800d634:	f10b 0b01 	add.w	fp, fp, #1
 800d638:	dd06      	ble.n	800d648 <__hexnan+0x100>
 800d63a:	4544      	cmp	r4, r8
 800d63c:	d9c1      	bls.n	800d5c2 <__hexnan+0x7a>
 800d63e:	2300      	movs	r3, #0
 800d640:	f844 3c04 	str.w	r3, [r4, #-4]
 800d644:	2501      	movs	r5, #1
 800d646:	3c04      	subs	r4, #4
 800d648:	6822      	ldr	r2, [r4, #0]
 800d64a:	f000 000f 	and.w	r0, r0, #15
 800d64e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d652:	6020      	str	r0, [r4, #0]
 800d654:	e7b5      	b.n	800d5c2 <__hexnan+0x7a>
 800d656:	2508      	movs	r5, #8
 800d658:	e7b3      	b.n	800d5c2 <__hexnan+0x7a>
 800d65a:	9b01      	ldr	r3, [sp, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d0dd      	beq.n	800d61c <__hexnan+0xd4>
 800d660:	f1c3 0320 	rsb	r3, r3, #32
 800d664:	f04f 32ff 	mov.w	r2, #4294967295
 800d668:	40da      	lsrs	r2, r3
 800d66a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d66e:	4013      	ands	r3, r2
 800d670:	f846 3c04 	str.w	r3, [r6, #-4]
 800d674:	e7d2      	b.n	800d61c <__hexnan+0xd4>
 800d676:	3f04      	subs	r7, #4
 800d678:	e7d0      	b.n	800d61c <__hexnan+0xd4>
 800d67a:	2004      	movs	r0, #4
 800d67c:	e7d5      	b.n	800d62a <__hexnan+0xe2>

0800d67e <__ascii_mbtowc>:
 800d67e:	b082      	sub	sp, #8
 800d680:	b901      	cbnz	r1, 800d684 <__ascii_mbtowc+0x6>
 800d682:	a901      	add	r1, sp, #4
 800d684:	b142      	cbz	r2, 800d698 <__ascii_mbtowc+0x1a>
 800d686:	b14b      	cbz	r3, 800d69c <__ascii_mbtowc+0x1e>
 800d688:	7813      	ldrb	r3, [r2, #0]
 800d68a:	600b      	str	r3, [r1, #0]
 800d68c:	7812      	ldrb	r2, [r2, #0]
 800d68e:	1e10      	subs	r0, r2, #0
 800d690:	bf18      	it	ne
 800d692:	2001      	movne	r0, #1
 800d694:	b002      	add	sp, #8
 800d696:	4770      	bx	lr
 800d698:	4610      	mov	r0, r2
 800d69a:	e7fb      	b.n	800d694 <__ascii_mbtowc+0x16>
 800d69c:	f06f 0001 	mvn.w	r0, #1
 800d6a0:	e7f8      	b.n	800d694 <__ascii_mbtowc+0x16>

0800d6a2 <_realloc_r>:
 800d6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a6:	4680      	mov	r8, r0
 800d6a8:	4615      	mov	r5, r2
 800d6aa:	460c      	mov	r4, r1
 800d6ac:	b921      	cbnz	r1, 800d6b8 <_realloc_r+0x16>
 800d6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b2:	4611      	mov	r1, r2
 800d6b4:	f7fd bee0 	b.w	800b478 <_malloc_r>
 800d6b8:	b92a      	cbnz	r2, 800d6c6 <_realloc_r+0x24>
 800d6ba:	f7fd fe69 	bl	800b390 <_free_r>
 800d6be:	2400      	movs	r4, #0
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c6:	f000 fa41 	bl	800db4c <_malloc_usable_size_r>
 800d6ca:	4285      	cmp	r5, r0
 800d6cc:	4606      	mov	r6, r0
 800d6ce:	d802      	bhi.n	800d6d6 <_realloc_r+0x34>
 800d6d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d6d4:	d8f4      	bhi.n	800d6c0 <_realloc_r+0x1e>
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	4640      	mov	r0, r8
 800d6da:	f7fd fecd 	bl	800b478 <_malloc_r>
 800d6de:	4607      	mov	r7, r0
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d0ec      	beq.n	800d6be <_realloc_r+0x1c>
 800d6e4:	42b5      	cmp	r5, r6
 800d6e6:	462a      	mov	r2, r5
 800d6e8:	4621      	mov	r1, r4
 800d6ea:	bf28      	it	cs
 800d6ec:	4632      	movcs	r2, r6
 800d6ee:	f7ff fc5b 	bl	800cfa8 <memcpy>
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	f7fd fe4b 	bl	800b390 <_free_r>
 800d6fa:	463c      	mov	r4, r7
 800d6fc:	e7e0      	b.n	800d6c0 <_realloc_r+0x1e>

0800d6fe <__ascii_wctomb>:
 800d6fe:	4603      	mov	r3, r0
 800d700:	4608      	mov	r0, r1
 800d702:	b141      	cbz	r1, 800d716 <__ascii_wctomb+0x18>
 800d704:	2aff      	cmp	r2, #255	@ 0xff
 800d706:	d904      	bls.n	800d712 <__ascii_wctomb+0x14>
 800d708:	228a      	movs	r2, #138	@ 0x8a
 800d70a:	601a      	str	r2, [r3, #0]
 800d70c:	f04f 30ff 	mov.w	r0, #4294967295
 800d710:	4770      	bx	lr
 800d712:	700a      	strb	r2, [r1, #0]
 800d714:	2001      	movs	r0, #1
 800d716:	4770      	bx	lr

0800d718 <__sfputc_r>:
 800d718:	6893      	ldr	r3, [r2, #8]
 800d71a:	3b01      	subs	r3, #1
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	b410      	push	{r4}
 800d720:	6093      	str	r3, [r2, #8]
 800d722:	da08      	bge.n	800d736 <__sfputc_r+0x1e>
 800d724:	6994      	ldr	r4, [r2, #24]
 800d726:	42a3      	cmp	r3, r4
 800d728:	db01      	blt.n	800d72e <__sfputc_r+0x16>
 800d72a:	290a      	cmp	r1, #10
 800d72c:	d103      	bne.n	800d736 <__sfputc_r+0x1e>
 800d72e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d732:	f000 b933 	b.w	800d99c <__swbuf_r>
 800d736:	6813      	ldr	r3, [r2, #0]
 800d738:	1c58      	adds	r0, r3, #1
 800d73a:	6010      	str	r0, [r2, #0]
 800d73c:	7019      	strb	r1, [r3, #0]
 800d73e:	4608      	mov	r0, r1
 800d740:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <__sfputs_r>:
 800d746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d748:	4606      	mov	r6, r0
 800d74a:	460f      	mov	r7, r1
 800d74c:	4614      	mov	r4, r2
 800d74e:	18d5      	adds	r5, r2, r3
 800d750:	42ac      	cmp	r4, r5
 800d752:	d101      	bne.n	800d758 <__sfputs_r+0x12>
 800d754:	2000      	movs	r0, #0
 800d756:	e007      	b.n	800d768 <__sfputs_r+0x22>
 800d758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d75c:	463a      	mov	r2, r7
 800d75e:	4630      	mov	r0, r6
 800d760:	f7ff ffda 	bl	800d718 <__sfputc_r>
 800d764:	1c43      	adds	r3, r0, #1
 800d766:	d1f3      	bne.n	800d750 <__sfputs_r+0xa>
 800d768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d76c <_vfiprintf_r>:
 800d76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d770:	460d      	mov	r5, r1
 800d772:	b09d      	sub	sp, #116	@ 0x74
 800d774:	4614      	mov	r4, r2
 800d776:	4698      	mov	r8, r3
 800d778:	4606      	mov	r6, r0
 800d77a:	b118      	cbz	r0, 800d784 <_vfiprintf_r+0x18>
 800d77c:	6a03      	ldr	r3, [r0, #32]
 800d77e:	b90b      	cbnz	r3, 800d784 <_vfiprintf_r+0x18>
 800d780:	f7fc fe20 	bl	800a3c4 <__sinit>
 800d784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d786:	07d9      	lsls	r1, r3, #31
 800d788:	d405      	bmi.n	800d796 <_vfiprintf_r+0x2a>
 800d78a:	89ab      	ldrh	r3, [r5, #12]
 800d78c:	059a      	lsls	r2, r3, #22
 800d78e:	d402      	bmi.n	800d796 <_vfiprintf_r+0x2a>
 800d790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d792:	f7fc ff8a 	bl	800a6aa <__retarget_lock_acquire_recursive>
 800d796:	89ab      	ldrh	r3, [r5, #12]
 800d798:	071b      	lsls	r3, r3, #28
 800d79a:	d501      	bpl.n	800d7a0 <_vfiprintf_r+0x34>
 800d79c:	692b      	ldr	r3, [r5, #16]
 800d79e:	b99b      	cbnz	r3, 800d7c8 <_vfiprintf_r+0x5c>
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f000 f938 	bl	800da18 <__swsetup_r>
 800d7a8:	b170      	cbz	r0, 800d7c8 <_vfiprintf_r+0x5c>
 800d7aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7ac:	07dc      	lsls	r4, r3, #31
 800d7ae:	d504      	bpl.n	800d7ba <_vfiprintf_r+0x4e>
 800d7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b4:	b01d      	add	sp, #116	@ 0x74
 800d7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ba:	89ab      	ldrh	r3, [r5, #12]
 800d7bc:	0598      	lsls	r0, r3, #22
 800d7be:	d4f7      	bmi.n	800d7b0 <_vfiprintf_r+0x44>
 800d7c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7c2:	f7fc ff73 	bl	800a6ac <__retarget_lock_release_recursive>
 800d7c6:	e7f3      	b.n	800d7b0 <_vfiprintf_r+0x44>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7cc:	2320      	movs	r3, #32
 800d7ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7d6:	2330      	movs	r3, #48	@ 0x30
 800d7d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d988 <_vfiprintf_r+0x21c>
 800d7dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7e0:	f04f 0901 	mov.w	r9, #1
 800d7e4:	4623      	mov	r3, r4
 800d7e6:	469a      	mov	sl, r3
 800d7e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ec:	b10a      	cbz	r2, 800d7f2 <_vfiprintf_r+0x86>
 800d7ee:	2a25      	cmp	r2, #37	@ 0x25
 800d7f0:	d1f9      	bne.n	800d7e6 <_vfiprintf_r+0x7a>
 800d7f2:	ebba 0b04 	subs.w	fp, sl, r4
 800d7f6:	d00b      	beq.n	800d810 <_vfiprintf_r+0xa4>
 800d7f8:	465b      	mov	r3, fp
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	4630      	mov	r0, r6
 800d800:	f7ff ffa1 	bl	800d746 <__sfputs_r>
 800d804:	3001      	adds	r0, #1
 800d806:	f000 80a7 	beq.w	800d958 <_vfiprintf_r+0x1ec>
 800d80a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d80c:	445a      	add	r2, fp
 800d80e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d810:	f89a 3000 	ldrb.w	r3, [sl]
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 809f 	beq.w	800d958 <_vfiprintf_r+0x1ec>
 800d81a:	2300      	movs	r3, #0
 800d81c:	f04f 32ff 	mov.w	r2, #4294967295
 800d820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d824:	f10a 0a01 	add.w	sl, sl, #1
 800d828:	9304      	str	r3, [sp, #16]
 800d82a:	9307      	str	r3, [sp, #28]
 800d82c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d830:	931a      	str	r3, [sp, #104]	@ 0x68
 800d832:	4654      	mov	r4, sl
 800d834:	2205      	movs	r2, #5
 800d836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d83a:	4853      	ldr	r0, [pc, #332]	@ (800d988 <_vfiprintf_r+0x21c>)
 800d83c:	f7f2 fd00 	bl	8000240 <memchr>
 800d840:	9a04      	ldr	r2, [sp, #16]
 800d842:	b9d8      	cbnz	r0, 800d87c <_vfiprintf_r+0x110>
 800d844:	06d1      	lsls	r1, r2, #27
 800d846:	bf44      	itt	mi
 800d848:	2320      	movmi	r3, #32
 800d84a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d84e:	0713      	lsls	r3, r2, #28
 800d850:	bf44      	itt	mi
 800d852:	232b      	movmi	r3, #43	@ 0x2b
 800d854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d858:	f89a 3000 	ldrb.w	r3, [sl]
 800d85c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d85e:	d015      	beq.n	800d88c <_vfiprintf_r+0x120>
 800d860:	9a07      	ldr	r2, [sp, #28]
 800d862:	4654      	mov	r4, sl
 800d864:	2000      	movs	r0, #0
 800d866:	f04f 0c0a 	mov.w	ip, #10
 800d86a:	4621      	mov	r1, r4
 800d86c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d870:	3b30      	subs	r3, #48	@ 0x30
 800d872:	2b09      	cmp	r3, #9
 800d874:	d94b      	bls.n	800d90e <_vfiprintf_r+0x1a2>
 800d876:	b1b0      	cbz	r0, 800d8a6 <_vfiprintf_r+0x13a>
 800d878:	9207      	str	r2, [sp, #28]
 800d87a:	e014      	b.n	800d8a6 <_vfiprintf_r+0x13a>
 800d87c:	eba0 0308 	sub.w	r3, r0, r8
 800d880:	fa09 f303 	lsl.w	r3, r9, r3
 800d884:	4313      	orrs	r3, r2
 800d886:	9304      	str	r3, [sp, #16]
 800d888:	46a2      	mov	sl, r4
 800d88a:	e7d2      	b.n	800d832 <_vfiprintf_r+0xc6>
 800d88c:	9b03      	ldr	r3, [sp, #12]
 800d88e:	1d19      	adds	r1, r3, #4
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	9103      	str	r1, [sp, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	bfbb      	ittet	lt
 800d898:	425b      	neglt	r3, r3
 800d89a:	f042 0202 	orrlt.w	r2, r2, #2
 800d89e:	9307      	strge	r3, [sp, #28]
 800d8a0:	9307      	strlt	r3, [sp, #28]
 800d8a2:	bfb8      	it	lt
 800d8a4:	9204      	strlt	r2, [sp, #16]
 800d8a6:	7823      	ldrb	r3, [r4, #0]
 800d8a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8aa:	d10a      	bne.n	800d8c2 <_vfiprintf_r+0x156>
 800d8ac:	7863      	ldrb	r3, [r4, #1]
 800d8ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8b0:	d132      	bne.n	800d918 <_vfiprintf_r+0x1ac>
 800d8b2:	9b03      	ldr	r3, [sp, #12]
 800d8b4:	1d1a      	adds	r2, r3, #4
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	9203      	str	r2, [sp, #12]
 800d8ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8be:	3402      	adds	r4, #2
 800d8c0:	9305      	str	r3, [sp, #20]
 800d8c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d998 <_vfiprintf_r+0x22c>
 800d8c6:	7821      	ldrb	r1, [r4, #0]
 800d8c8:	2203      	movs	r2, #3
 800d8ca:	4650      	mov	r0, sl
 800d8cc:	f7f2 fcb8 	bl	8000240 <memchr>
 800d8d0:	b138      	cbz	r0, 800d8e2 <_vfiprintf_r+0x176>
 800d8d2:	9b04      	ldr	r3, [sp, #16]
 800d8d4:	eba0 000a 	sub.w	r0, r0, sl
 800d8d8:	2240      	movs	r2, #64	@ 0x40
 800d8da:	4082      	lsls	r2, r0
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	3401      	adds	r4, #1
 800d8e0:	9304      	str	r3, [sp, #16]
 800d8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8e6:	4829      	ldr	r0, [pc, #164]	@ (800d98c <_vfiprintf_r+0x220>)
 800d8e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8ec:	2206      	movs	r2, #6
 800d8ee:	f7f2 fca7 	bl	8000240 <memchr>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	d03f      	beq.n	800d976 <_vfiprintf_r+0x20a>
 800d8f6:	4b26      	ldr	r3, [pc, #152]	@ (800d990 <_vfiprintf_r+0x224>)
 800d8f8:	bb1b      	cbnz	r3, 800d942 <_vfiprintf_r+0x1d6>
 800d8fa:	9b03      	ldr	r3, [sp, #12]
 800d8fc:	3307      	adds	r3, #7
 800d8fe:	f023 0307 	bic.w	r3, r3, #7
 800d902:	3308      	adds	r3, #8
 800d904:	9303      	str	r3, [sp, #12]
 800d906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d908:	443b      	add	r3, r7
 800d90a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d90c:	e76a      	b.n	800d7e4 <_vfiprintf_r+0x78>
 800d90e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d912:	460c      	mov	r4, r1
 800d914:	2001      	movs	r0, #1
 800d916:	e7a8      	b.n	800d86a <_vfiprintf_r+0xfe>
 800d918:	2300      	movs	r3, #0
 800d91a:	3401      	adds	r4, #1
 800d91c:	9305      	str	r3, [sp, #20]
 800d91e:	4619      	mov	r1, r3
 800d920:	f04f 0c0a 	mov.w	ip, #10
 800d924:	4620      	mov	r0, r4
 800d926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d92a:	3a30      	subs	r2, #48	@ 0x30
 800d92c:	2a09      	cmp	r2, #9
 800d92e:	d903      	bls.n	800d938 <_vfiprintf_r+0x1cc>
 800d930:	2b00      	cmp	r3, #0
 800d932:	d0c6      	beq.n	800d8c2 <_vfiprintf_r+0x156>
 800d934:	9105      	str	r1, [sp, #20]
 800d936:	e7c4      	b.n	800d8c2 <_vfiprintf_r+0x156>
 800d938:	fb0c 2101 	mla	r1, ip, r1, r2
 800d93c:	4604      	mov	r4, r0
 800d93e:	2301      	movs	r3, #1
 800d940:	e7f0      	b.n	800d924 <_vfiprintf_r+0x1b8>
 800d942:	ab03      	add	r3, sp, #12
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	462a      	mov	r2, r5
 800d948:	4b12      	ldr	r3, [pc, #72]	@ (800d994 <_vfiprintf_r+0x228>)
 800d94a:	a904      	add	r1, sp, #16
 800d94c:	4630      	mov	r0, r6
 800d94e:	f7fb fee1 	bl	8009714 <_printf_float>
 800d952:	4607      	mov	r7, r0
 800d954:	1c78      	adds	r0, r7, #1
 800d956:	d1d6      	bne.n	800d906 <_vfiprintf_r+0x19a>
 800d958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d95a:	07d9      	lsls	r1, r3, #31
 800d95c:	d405      	bmi.n	800d96a <_vfiprintf_r+0x1fe>
 800d95e:	89ab      	ldrh	r3, [r5, #12]
 800d960:	059a      	lsls	r2, r3, #22
 800d962:	d402      	bmi.n	800d96a <_vfiprintf_r+0x1fe>
 800d964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d966:	f7fc fea1 	bl	800a6ac <__retarget_lock_release_recursive>
 800d96a:	89ab      	ldrh	r3, [r5, #12]
 800d96c:	065b      	lsls	r3, r3, #25
 800d96e:	f53f af1f 	bmi.w	800d7b0 <_vfiprintf_r+0x44>
 800d972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d974:	e71e      	b.n	800d7b4 <_vfiprintf_r+0x48>
 800d976:	ab03      	add	r3, sp, #12
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	462a      	mov	r2, r5
 800d97c:	4b05      	ldr	r3, [pc, #20]	@ (800d994 <_vfiprintf_r+0x228>)
 800d97e:	a904      	add	r1, sp, #16
 800d980:	4630      	mov	r0, r6
 800d982:	f7fc f95f 	bl	8009c44 <_printf_i>
 800d986:	e7e4      	b.n	800d952 <_vfiprintf_r+0x1e6>
 800d988:	0800e150 	.word	0x0800e150
 800d98c:	0800e15a 	.word	0x0800e15a
 800d990:	08009715 	.word	0x08009715
 800d994:	0800d747 	.word	0x0800d747
 800d998:	0800e156 	.word	0x0800e156

0800d99c <__swbuf_r>:
 800d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99e:	460e      	mov	r6, r1
 800d9a0:	4614      	mov	r4, r2
 800d9a2:	4605      	mov	r5, r0
 800d9a4:	b118      	cbz	r0, 800d9ae <__swbuf_r+0x12>
 800d9a6:	6a03      	ldr	r3, [r0, #32]
 800d9a8:	b90b      	cbnz	r3, 800d9ae <__swbuf_r+0x12>
 800d9aa:	f7fc fd0b 	bl	800a3c4 <__sinit>
 800d9ae:	69a3      	ldr	r3, [r4, #24]
 800d9b0:	60a3      	str	r3, [r4, #8]
 800d9b2:	89a3      	ldrh	r3, [r4, #12]
 800d9b4:	071a      	lsls	r2, r3, #28
 800d9b6:	d501      	bpl.n	800d9bc <__swbuf_r+0x20>
 800d9b8:	6923      	ldr	r3, [r4, #16]
 800d9ba:	b943      	cbnz	r3, 800d9ce <__swbuf_r+0x32>
 800d9bc:	4621      	mov	r1, r4
 800d9be:	4628      	mov	r0, r5
 800d9c0:	f000 f82a 	bl	800da18 <__swsetup_r>
 800d9c4:	b118      	cbz	r0, 800d9ce <__swbuf_r+0x32>
 800d9c6:	f04f 37ff 	mov.w	r7, #4294967295
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ce:	6823      	ldr	r3, [r4, #0]
 800d9d0:	6922      	ldr	r2, [r4, #16]
 800d9d2:	1a98      	subs	r0, r3, r2
 800d9d4:	6963      	ldr	r3, [r4, #20]
 800d9d6:	b2f6      	uxtb	r6, r6
 800d9d8:	4283      	cmp	r3, r0
 800d9da:	4637      	mov	r7, r6
 800d9dc:	dc05      	bgt.n	800d9ea <__swbuf_r+0x4e>
 800d9de:	4621      	mov	r1, r4
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	f7ff fa6b 	bl	800cebc <_fflush_r>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d1ed      	bne.n	800d9c6 <__swbuf_r+0x2a>
 800d9ea:	68a3      	ldr	r3, [r4, #8]
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	60a3      	str	r3, [r4, #8]
 800d9f0:	6823      	ldr	r3, [r4, #0]
 800d9f2:	1c5a      	adds	r2, r3, #1
 800d9f4:	6022      	str	r2, [r4, #0]
 800d9f6:	701e      	strb	r6, [r3, #0]
 800d9f8:	6962      	ldr	r2, [r4, #20]
 800d9fa:	1c43      	adds	r3, r0, #1
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d004      	beq.n	800da0a <__swbuf_r+0x6e>
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	07db      	lsls	r3, r3, #31
 800da04:	d5e1      	bpl.n	800d9ca <__swbuf_r+0x2e>
 800da06:	2e0a      	cmp	r6, #10
 800da08:	d1df      	bne.n	800d9ca <__swbuf_r+0x2e>
 800da0a:	4621      	mov	r1, r4
 800da0c:	4628      	mov	r0, r5
 800da0e:	f7ff fa55 	bl	800cebc <_fflush_r>
 800da12:	2800      	cmp	r0, #0
 800da14:	d0d9      	beq.n	800d9ca <__swbuf_r+0x2e>
 800da16:	e7d6      	b.n	800d9c6 <__swbuf_r+0x2a>

0800da18 <__swsetup_r>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	4b29      	ldr	r3, [pc, #164]	@ (800dac0 <__swsetup_r+0xa8>)
 800da1c:	4605      	mov	r5, r0
 800da1e:	6818      	ldr	r0, [r3, #0]
 800da20:	460c      	mov	r4, r1
 800da22:	b118      	cbz	r0, 800da2c <__swsetup_r+0x14>
 800da24:	6a03      	ldr	r3, [r0, #32]
 800da26:	b90b      	cbnz	r3, 800da2c <__swsetup_r+0x14>
 800da28:	f7fc fccc 	bl	800a3c4 <__sinit>
 800da2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da30:	0719      	lsls	r1, r3, #28
 800da32:	d422      	bmi.n	800da7a <__swsetup_r+0x62>
 800da34:	06da      	lsls	r2, r3, #27
 800da36:	d407      	bmi.n	800da48 <__swsetup_r+0x30>
 800da38:	2209      	movs	r2, #9
 800da3a:	602a      	str	r2, [r5, #0]
 800da3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da40:	81a3      	strh	r3, [r4, #12]
 800da42:	f04f 30ff 	mov.w	r0, #4294967295
 800da46:	e033      	b.n	800dab0 <__swsetup_r+0x98>
 800da48:	0758      	lsls	r0, r3, #29
 800da4a:	d512      	bpl.n	800da72 <__swsetup_r+0x5a>
 800da4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da4e:	b141      	cbz	r1, 800da62 <__swsetup_r+0x4a>
 800da50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da54:	4299      	cmp	r1, r3
 800da56:	d002      	beq.n	800da5e <__swsetup_r+0x46>
 800da58:	4628      	mov	r0, r5
 800da5a:	f7fd fc99 	bl	800b390 <_free_r>
 800da5e:	2300      	movs	r3, #0
 800da60:	6363      	str	r3, [r4, #52]	@ 0x34
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da68:	81a3      	strh	r3, [r4, #12]
 800da6a:	2300      	movs	r3, #0
 800da6c:	6063      	str	r3, [r4, #4]
 800da6e:	6923      	ldr	r3, [r4, #16]
 800da70:	6023      	str	r3, [r4, #0]
 800da72:	89a3      	ldrh	r3, [r4, #12]
 800da74:	f043 0308 	orr.w	r3, r3, #8
 800da78:	81a3      	strh	r3, [r4, #12]
 800da7a:	6923      	ldr	r3, [r4, #16]
 800da7c:	b94b      	cbnz	r3, 800da92 <__swsetup_r+0x7a>
 800da7e:	89a3      	ldrh	r3, [r4, #12]
 800da80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da88:	d003      	beq.n	800da92 <__swsetup_r+0x7a>
 800da8a:	4621      	mov	r1, r4
 800da8c:	4628      	mov	r0, r5
 800da8e:	f000 f88b 	bl	800dba8 <__smakebuf_r>
 800da92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da96:	f013 0201 	ands.w	r2, r3, #1
 800da9a:	d00a      	beq.n	800dab2 <__swsetup_r+0x9a>
 800da9c:	2200      	movs	r2, #0
 800da9e:	60a2      	str	r2, [r4, #8]
 800daa0:	6962      	ldr	r2, [r4, #20]
 800daa2:	4252      	negs	r2, r2
 800daa4:	61a2      	str	r2, [r4, #24]
 800daa6:	6922      	ldr	r2, [r4, #16]
 800daa8:	b942      	cbnz	r2, 800dabc <__swsetup_r+0xa4>
 800daaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800daae:	d1c5      	bne.n	800da3c <__swsetup_r+0x24>
 800dab0:	bd38      	pop	{r3, r4, r5, pc}
 800dab2:	0799      	lsls	r1, r3, #30
 800dab4:	bf58      	it	pl
 800dab6:	6962      	ldrpl	r2, [r4, #20]
 800dab8:	60a2      	str	r2, [r4, #8]
 800daba:	e7f4      	b.n	800daa6 <__swsetup_r+0x8e>
 800dabc:	2000      	movs	r0, #0
 800dabe:	e7f7      	b.n	800dab0 <__swsetup_r+0x98>
 800dac0:	20000204 	.word	0x20000204

0800dac4 <_raise_r>:
 800dac4:	291f      	cmp	r1, #31
 800dac6:	b538      	push	{r3, r4, r5, lr}
 800dac8:	4605      	mov	r5, r0
 800daca:	460c      	mov	r4, r1
 800dacc:	d904      	bls.n	800dad8 <_raise_r+0x14>
 800dace:	2316      	movs	r3, #22
 800dad0:	6003      	str	r3, [r0, #0]
 800dad2:	f04f 30ff 	mov.w	r0, #4294967295
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dada:	b112      	cbz	r2, 800dae2 <_raise_r+0x1e>
 800dadc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dae0:	b94b      	cbnz	r3, 800daf6 <_raise_r+0x32>
 800dae2:	4628      	mov	r0, r5
 800dae4:	f000 f830 	bl	800db48 <_getpid_r>
 800dae8:	4622      	mov	r2, r4
 800daea:	4601      	mov	r1, r0
 800daec:	4628      	mov	r0, r5
 800daee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daf2:	f000 b817 	b.w	800db24 <_kill_r>
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d00a      	beq.n	800db10 <_raise_r+0x4c>
 800dafa:	1c59      	adds	r1, r3, #1
 800dafc:	d103      	bne.n	800db06 <_raise_r+0x42>
 800dafe:	2316      	movs	r3, #22
 800db00:	6003      	str	r3, [r0, #0]
 800db02:	2001      	movs	r0, #1
 800db04:	e7e7      	b.n	800dad6 <_raise_r+0x12>
 800db06:	2100      	movs	r1, #0
 800db08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800db0c:	4620      	mov	r0, r4
 800db0e:	4798      	blx	r3
 800db10:	2000      	movs	r0, #0
 800db12:	e7e0      	b.n	800dad6 <_raise_r+0x12>

0800db14 <raise>:
 800db14:	4b02      	ldr	r3, [pc, #8]	@ (800db20 <raise+0xc>)
 800db16:	4601      	mov	r1, r0
 800db18:	6818      	ldr	r0, [r3, #0]
 800db1a:	f7ff bfd3 	b.w	800dac4 <_raise_r>
 800db1e:	bf00      	nop
 800db20:	20000204 	.word	0x20000204

0800db24 <_kill_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	4d07      	ldr	r5, [pc, #28]	@ (800db44 <_kill_r+0x20>)
 800db28:	2300      	movs	r3, #0
 800db2a:	4604      	mov	r4, r0
 800db2c:	4608      	mov	r0, r1
 800db2e:	4611      	mov	r1, r2
 800db30:	602b      	str	r3, [r5, #0]
 800db32:	f7f4 fc9f 	bl	8002474 <_kill>
 800db36:	1c43      	adds	r3, r0, #1
 800db38:	d102      	bne.n	800db40 <_kill_r+0x1c>
 800db3a:	682b      	ldr	r3, [r5, #0]
 800db3c:	b103      	cbz	r3, 800db40 <_kill_r+0x1c>
 800db3e:	6023      	str	r3, [r4, #0]
 800db40:	bd38      	pop	{r3, r4, r5, pc}
 800db42:	bf00      	nop
 800db44:	20000858 	.word	0x20000858

0800db48 <_getpid_r>:
 800db48:	f7f4 bc8c 	b.w	8002464 <_getpid>

0800db4c <_malloc_usable_size_r>:
 800db4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db50:	1f18      	subs	r0, r3, #4
 800db52:	2b00      	cmp	r3, #0
 800db54:	bfbc      	itt	lt
 800db56:	580b      	ldrlt	r3, [r1, r0]
 800db58:	18c0      	addlt	r0, r0, r3
 800db5a:	4770      	bx	lr

0800db5c <__swhatbuf_r>:
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	460c      	mov	r4, r1
 800db60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db64:	2900      	cmp	r1, #0
 800db66:	b096      	sub	sp, #88	@ 0x58
 800db68:	4615      	mov	r5, r2
 800db6a:	461e      	mov	r6, r3
 800db6c:	da0d      	bge.n	800db8a <__swhatbuf_r+0x2e>
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db74:	f04f 0100 	mov.w	r1, #0
 800db78:	bf14      	ite	ne
 800db7a:	2340      	movne	r3, #64	@ 0x40
 800db7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db80:	2000      	movs	r0, #0
 800db82:	6031      	str	r1, [r6, #0]
 800db84:	602b      	str	r3, [r5, #0]
 800db86:	b016      	add	sp, #88	@ 0x58
 800db88:	bd70      	pop	{r4, r5, r6, pc}
 800db8a:	466a      	mov	r2, sp
 800db8c:	f000 f848 	bl	800dc20 <_fstat_r>
 800db90:	2800      	cmp	r0, #0
 800db92:	dbec      	blt.n	800db6e <__swhatbuf_r+0x12>
 800db94:	9901      	ldr	r1, [sp, #4]
 800db96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db9e:	4259      	negs	r1, r3
 800dba0:	4159      	adcs	r1, r3
 800dba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dba6:	e7eb      	b.n	800db80 <__swhatbuf_r+0x24>

0800dba8 <__smakebuf_r>:
 800dba8:	898b      	ldrh	r3, [r1, #12]
 800dbaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbac:	079d      	lsls	r5, r3, #30
 800dbae:	4606      	mov	r6, r0
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	d507      	bpl.n	800dbc4 <__smakebuf_r+0x1c>
 800dbb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dbb8:	6023      	str	r3, [r4, #0]
 800dbba:	6123      	str	r3, [r4, #16]
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	6163      	str	r3, [r4, #20]
 800dbc0:	b003      	add	sp, #12
 800dbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbc4:	ab01      	add	r3, sp, #4
 800dbc6:	466a      	mov	r2, sp
 800dbc8:	f7ff ffc8 	bl	800db5c <__swhatbuf_r>
 800dbcc:	9f00      	ldr	r7, [sp, #0]
 800dbce:	4605      	mov	r5, r0
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f7fd fc50 	bl	800b478 <_malloc_r>
 800dbd8:	b948      	cbnz	r0, 800dbee <__smakebuf_r+0x46>
 800dbda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbde:	059a      	lsls	r2, r3, #22
 800dbe0:	d4ee      	bmi.n	800dbc0 <__smakebuf_r+0x18>
 800dbe2:	f023 0303 	bic.w	r3, r3, #3
 800dbe6:	f043 0302 	orr.w	r3, r3, #2
 800dbea:	81a3      	strh	r3, [r4, #12]
 800dbec:	e7e2      	b.n	800dbb4 <__smakebuf_r+0xc>
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	6020      	str	r0, [r4, #0]
 800dbf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbf6:	81a3      	strh	r3, [r4, #12]
 800dbf8:	9b01      	ldr	r3, [sp, #4]
 800dbfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dbfe:	b15b      	cbz	r3, 800dc18 <__smakebuf_r+0x70>
 800dc00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc04:	4630      	mov	r0, r6
 800dc06:	f000 f81d 	bl	800dc44 <_isatty_r>
 800dc0a:	b128      	cbz	r0, 800dc18 <__smakebuf_r+0x70>
 800dc0c:	89a3      	ldrh	r3, [r4, #12]
 800dc0e:	f023 0303 	bic.w	r3, r3, #3
 800dc12:	f043 0301 	orr.w	r3, r3, #1
 800dc16:	81a3      	strh	r3, [r4, #12]
 800dc18:	89a3      	ldrh	r3, [r4, #12]
 800dc1a:	431d      	orrs	r5, r3
 800dc1c:	81a5      	strh	r5, [r4, #12]
 800dc1e:	e7cf      	b.n	800dbc0 <__smakebuf_r+0x18>

0800dc20 <_fstat_r>:
 800dc20:	b538      	push	{r3, r4, r5, lr}
 800dc22:	4d07      	ldr	r5, [pc, #28]	@ (800dc40 <_fstat_r+0x20>)
 800dc24:	2300      	movs	r3, #0
 800dc26:	4604      	mov	r4, r0
 800dc28:	4608      	mov	r0, r1
 800dc2a:	4611      	mov	r1, r2
 800dc2c:	602b      	str	r3, [r5, #0]
 800dc2e:	f7f4 fc81 	bl	8002534 <_fstat>
 800dc32:	1c43      	adds	r3, r0, #1
 800dc34:	d102      	bne.n	800dc3c <_fstat_r+0x1c>
 800dc36:	682b      	ldr	r3, [r5, #0]
 800dc38:	b103      	cbz	r3, 800dc3c <_fstat_r+0x1c>
 800dc3a:	6023      	str	r3, [r4, #0]
 800dc3c:	bd38      	pop	{r3, r4, r5, pc}
 800dc3e:	bf00      	nop
 800dc40:	20000858 	.word	0x20000858

0800dc44 <_isatty_r>:
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	4d06      	ldr	r5, [pc, #24]	@ (800dc60 <_isatty_r+0x1c>)
 800dc48:	2300      	movs	r3, #0
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	4608      	mov	r0, r1
 800dc4e:	602b      	str	r3, [r5, #0]
 800dc50:	f7f4 fc80 	bl	8002554 <_isatty>
 800dc54:	1c43      	adds	r3, r0, #1
 800dc56:	d102      	bne.n	800dc5e <_isatty_r+0x1a>
 800dc58:	682b      	ldr	r3, [r5, #0]
 800dc5a:	b103      	cbz	r3, 800dc5e <_isatty_r+0x1a>
 800dc5c:	6023      	str	r3, [r4, #0]
 800dc5e:	bd38      	pop	{r3, r4, r5, pc}
 800dc60:	20000858 	.word	0x20000858

0800dc64 <_init>:
 800dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc66:	bf00      	nop
 800dc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc6a:	bc08      	pop	{r3}
 800dc6c:	469e      	mov	lr, r3
 800dc6e:	4770      	bx	lr

0800dc70 <_fini>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	bf00      	nop
 800dc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc76:	bc08      	pop	{r3}
 800dc78:	469e      	mov	lr, r3
 800dc7a:	4770      	bx	lr
