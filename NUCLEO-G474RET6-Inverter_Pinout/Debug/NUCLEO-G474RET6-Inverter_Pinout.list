
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08008e40  08008e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b4  080090b4  0000b23c  2**0
                  CONTENTS
  4 .ARM          00000008  080090b4  080090b4  0000a0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090bc  080090bc  0000b23c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090bc  080090bc  0000a0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090c0  080090c0  0000a0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  080090c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  2000023c  08009300  0000b23c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08009300  0000b6dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b23c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190c1  00000000  00000000  0000b26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f23  00000000  00000000  0002432d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00027250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ce  00000000  00000000  000287e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295b0  00000000  00000000  000298b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e04  00000000  00000000  00052e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011463d  00000000  00000000  0006bc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001802a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006900  00000000  00000000  001802ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00186bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000023c 	.word	0x2000023c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008e28 	.word	0x08008e28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000240 	.word	0x20000240
 800021c:	08008e28 	.word	0x08008e28

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b09e      	sub	sp, #120	@ 0x78
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	673b      	str	r3, [r7, #112]	@ 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 f934 	bl	800184a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f95b 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fc11 	bl	8000e0c <MX_GPIO_Init>
  MX_ADC2_Init();
 80005ea:	f000 fa19 	bl	8000a20 <MX_ADC2_Init>
  MX_ADC1_Init();
 80005ee:	f000 f99f 	bl	8000930 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005f2:	f000 fa7b 	bl	8000aec <MX_TIM1_Init>
  MX_TIM3_Init();
 80005f6:	f000 fb25 	bl	8000c44 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 fb6f 	bl	8000cdc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005fe:	f000 fbb9 	bl	8000d74 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//void Shell_Init(void){
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2224      	movs	r2, #36	@ 0x24
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f007 fb60 	bl	8007cce <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 800060e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000612:	2240      	movs	r2, #64	@ 0x40
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f007 fb59 	bl	8007cce <memset>
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 800061c:	4b8a      	ldr	r3, [pc, #552]	@ (8000848 <main+0x278>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000622:	2240      	movs	r2, #64	@ 0x40
 8000624:	2100      	movs	r1, #0
 8000626:	4889      	ldr	r0, [pc, #548]	@ (800084c <main+0x27c>)
 8000628:	f007 fb51 	bl	8007cce <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800062c:	2201      	movs	r2, #1
 800062e:	4986      	ldr	r1, [pc, #536]	@ (8000848 <main+0x278>)
 8000630:	4887      	ldr	r0, [pc, #540]	@ (8000850 <main+0x280>)
 8000632:	f005 f92f 	bl	8005894 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f001 f93e 	bl	80018b8 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	2266      	movs	r2, #102	@ 0x66
 8000642:	4984      	ldr	r1, [pc, #528]	@ (8000854 <main+0x284>)
 8000644:	4882      	ldr	r0, [pc, #520]	@ (8000850 <main+0x280>)
 8000646:	f005 f897 	bl	8005778 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	2218      	movs	r2, #24
 8000650:	4981      	ldr	r1, [pc, #516]	@ (8000858 <main+0x288>)
 8000652:	487f      	ldr	r0, [pc, #508]	@ (8000850 <main+0x280>)
 8000654:	f005 f890 	bl	8005778 <HAL_UART_Transmit>
  while (1)
  {
	  /**
	   * @brief Vérifie que le caractère a été reçu : uartRxReceived mis à 1
	   */
	  	  if(uartRxReceived)
 8000658:	4b80      	ldr	r3, [pc, #512]	@ (800085c <main+0x28c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d058      	beq.n	8000712 <main+0x142>
	  	  {
	  		  /**
	  		   * @brief Echo du caractère sur la console
	  		   */
	  		  switch(uartRxBuffer[0]){
 8000660:	4b79      	ldr	r3, [pc, #484]	@ (8000848 <main+0x278>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b0d      	cmp	r3, #13
 8000666:	d002      	beq.n	800066e <main+0x9e>
 8000668:	2b7f      	cmp	r3, #127	@ 0x7f
 800066a:	d02f      	beq.n	80006cc <main+0xfc>
 800066c:	e03e      	b.n	80006ec <main+0x11c>
	  		  // Nouvelle ligne, instruction à traiter
	  		  case ASCII_CR:
	  			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2203      	movs	r2, #3
 8000674:	497a      	ldr	r1, [pc, #488]	@ (8000860 <main+0x290>)
 8000676:	4876      	ldr	r0, [pc, #472]	@ (8000850 <main+0x280>)
 8000678:	f005 f87e 	bl	8005778 <HAL_UART_Transmit>
	  			  cmdBuffer[idx_cmd] = '\0';
 800067c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000682:	4413      	add	r3, r2
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	  			  argc = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	673b      	str	r3, [r7, #112]	@ 0x70
	  			  token = strtok(cmdBuffer, " ");
 800068c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000690:	4974      	ldr	r1, [pc, #464]	@ (8000864 <main+0x294>)
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fb24 	bl	8007ce0 <strtok>
 8000698:	4603      	mov	r3, r0
 800069a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  			  while(token!=NULL){
 800069c:	e00e      	b.n	80006bc <main+0xec>
	  				  argv[argc++] = token;
 800069e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	673a      	str	r2, [r7, #112]	@ 0x70
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	3378      	adds	r3, #120	@ 0x78
 80006a8:	443b      	add	r3, r7
 80006aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80006ac:	f843 2c74 	str.w	r2, [r3, #-116]
	  				  token = strtok(NULL, " ");
 80006b0:	496c      	ldr	r1, [pc, #432]	@ (8000864 <main+0x294>)
 80006b2:	2000      	movs	r0, #0
 80006b4:	f007 fb14 	bl	8007ce0 <strtok>
 80006b8:	4603      	mov	r3, r0
 80006ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  			  while(token!=NULL){
 80006bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1ed      	bne.n	800069e <main+0xce>
	  			  }

	  			  idx_cmd = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	677b      	str	r3, [r7, #116]	@ 0x74
	  			  newCmdReady = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	66bb      	str	r3, [r7, #104]	@ 0x68
	  			  break;
 80006ca:	e01f      	b.n	800070c <main+0x13c>
	  		  // Suppression du dernier caractère
	  		  case ASCII_DEL:
	  			  cmdBuffer[idx_cmd--] = '\0';
 80006cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80006d2:	3378      	adds	r3, #120	@ 0x78
 80006d4:	443b      	add	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	2201      	movs	r2, #1
 80006e2:	4959      	ldr	r1, [pc, #356]	@ (8000848 <main+0x278>)
 80006e4:	485a      	ldr	r0, [pc, #360]	@ (8000850 <main+0x280>)
 80006e6:	f005 f847 	bl	8005778 <HAL_UART_Transmit>
	  			  break;
 80006ea:	e00f      	b.n	800070c <main+0x13c>
	  	      // Nouveau caractère
	  		  default:
	  			  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80006ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80006f2:	4a55      	ldr	r2, [pc, #340]	@ (8000848 <main+0x278>)
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	3378      	adds	r3, #120	@ 0x78
 80006f8:	443b      	add	r3, r7
 80006fa:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	2201      	movs	r2, #1
 8000704:	4950      	ldr	r1, [pc, #320]	@ (8000848 <main+0x278>)
 8000706:	4852      	ldr	r0, [pc, #328]	@ (8000850 <main+0x280>)
 8000708:	f005 f836 	bl	8005778 <HAL_UART_Transmit>
	  		  }
	  		  uartRxReceived = 0;
 800070c:	4b53      	ldr	r3, [pc, #332]	@ (800085c <main+0x28c>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(newCmdReady){
 8000712:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000714:	2b00      	cmp	r3, #0
 8000716:	d09f      	beq.n	8000658 <main+0x88>
	  		  if(strcmp(argv[0],"set")==0){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4953      	ldr	r1, [pc, #332]	@ (8000868 <main+0x298>)
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd7f 	bl	8000220 <strcmp>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d12d      	bne.n	8000784 <main+0x1b4>
	  			  if(strcmp(argv[1],"PA5")==0){
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4950      	ldr	r1, [pc, #320]	@ (800086c <main+0x29c>)
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd77 	bl	8000220 <strcmp>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d11d      	bne.n	8000774 <main+0x1a4>
	  				  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4618      	mov	r0, r3
 800073c:	f007 f91a 	bl	8007974 <atoi>
 8000740:	4603      	mov	r3, r0
 8000742:	b2db      	uxtb	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	2120      	movs	r1, #32
 8000748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074c:	f002 fcf8 	bl	8003140 <HAL_GPIO_WritePin>
	  				  sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4618      	mov	r0, r3
 8000754:	f007 f90e 	bl	8007974 <atoi>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4944      	ldr	r1, [pc, #272]	@ (8000870 <main+0x2a0>)
 800075e:	483b      	ldr	r0, [pc, #236]	@ (800084c <main+0x27c>)
 8000760:	f007 fa52 	bl	8007c08 <siprintf>
	  				  HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2220      	movs	r2, #32
 800076a:	4938      	ldr	r1, [pc, #224]	@ (800084c <main+0x27c>)
 800076c:	4838      	ldr	r0, [pc, #224]	@ (8000850 <main+0x280>)
 800076e:	f005 f803 	bl	8005778 <HAL_UART_Transmit>
 8000772:	e05e      	b.n	8000832 <main+0x262>
	  			  }
	  			  else{
	  				  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
 8000778:	2214      	movs	r2, #20
 800077a:	493e      	ldr	r1, [pc, #248]	@ (8000874 <main+0x2a4>)
 800077c:	4834      	ldr	r0, [pc, #208]	@ (8000850 <main+0x280>)
 800077e:	f004 fffb 	bl	8005778 <HAL_UART_Transmit>
 8000782:	e056      	b.n	8000832 <main+0x262>
	  			  }
	  		  }
	  		  else if(strcmp(argv[0],"pinout")==0)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	493c      	ldr	r1, [pc, #240]	@ (8000878 <main+0x2a8>)
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd49 	bl	8000220 <strcmp>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d107      	bne.n	80007a4 <main+0x1d4>
	  		  {
	  			  HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	228b      	movs	r2, #139	@ 0x8b
 800079a:	4938      	ldr	r1, [pc, #224]	@ (800087c <main+0x2ac>)
 800079c:	482c      	ldr	r0, [pc, #176]	@ (8000850 <main+0x280>)
 800079e:	f004 ffeb 	bl	8005778 <HAL_UART_Transmit>
 80007a2:	e046      	b.n	8000832 <main+0x262>
	  		  }
	  		  else if(strcmp(argv[0],"help")==0)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4936      	ldr	r1, [pc, #216]	@ (8000880 <main+0x2b0>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd39 	bl	8000220 <strcmp>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d107      	bne.n	80007c4 <main+0x1f4>
	  		  {
	  			  HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	2296      	movs	r2, #150	@ 0x96
 80007ba:	4932      	ldr	r1, [pc, #200]	@ (8000884 <main+0x2b4>)
 80007bc:	4824      	ldr	r0, [pc, #144]	@ (8000850 <main+0x280>)
 80007be:	f004 ffdb 	bl	8005778 <HAL_UART_Transmit>
 80007c2:	e036      	b.n	8000832 <main+0x262>
	  		  }
	  		  else if(strcmp(argv[0],"powerOn")==0)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4930      	ldr	r1, [pc, #192]	@ (8000888 <main+0x2b8>)
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd29 	bl	8000220 <strcmp>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d107      	bne.n	80007e4 <main+0x214>
	  		  {
	  			  HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	220b      	movs	r2, #11
 80007da:	492c      	ldr	r1, [pc, #176]	@ (800088c <main+0x2bc>)
 80007dc:	481c      	ldr	r0, [pc, #112]	@ (8000850 <main+0x280>)
 80007de:	f004 ffcb 	bl	8005778 <HAL_UART_Transmit>
 80007e2:	e026      	b.n	8000832 <main+0x262>
	  		  }
	  		  else if(strcmp(argv[0],"powerOff")==0)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	492a      	ldr	r1, [pc, #168]	@ (8000890 <main+0x2c0>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fd19 	bl	8000220 <strcmp>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d107      	bne.n	8000804 <main+0x234>
	  		  {
	  			  HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	220c      	movs	r2, #12
 80007fa:	4926      	ldr	r1, [pc, #152]	@ (8000894 <main+0x2c4>)
 80007fc:	4814      	ldr	r0, [pc, #80]	@ (8000850 <main+0x280>)
 80007fe:	f004 ffbb 	bl	8005778 <HAL_UART_Transmit>
 8000802:	e016      	b.n	8000832 <main+0x262>
	  		  }
	  		  else if(strcmp(argv[0],"get")==0)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4924      	ldr	r1, [pc, #144]	@ (8000898 <main+0x2c8>)
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd09 	bl	8000220 <strcmp>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d107      	bne.n	8000824 <main+0x254>
	  		  {
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	2214      	movs	r2, #20
 800081a:	4916      	ldr	r1, [pc, #88]	@ (8000874 <main+0x2a4>)
 800081c:	480c      	ldr	r0, [pc, #48]	@ (8000850 <main+0x280>)
 800081e:	f004 ffab 	bl	8005778 <HAL_UART_Transmit>
 8000822:	e006      	b.n	8000832 <main+0x262>
	  		  }
	  		  else{
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	2214      	movs	r2, #20
 800082a:	4912      	ldr	r1, [pc, #72]	@ (8000874 <main+0x2a4>)
 800082c:	4808      	ldr	r0, [pc, #32]	@ (8000850 <main+0x280>)
 800082e:	f004 ffa3 	bl	8005778 <HAL_UART_Transmit>
	  		  }
	  			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2218      	movs	r2, #24
 8000838:	4907      	ldr	r1, [pc, #28]	@ (8000858 <main+0x288>)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <main+0x280>)
 800083c:	f004 ff9c 	bl	8005778 <HAL_UART_Transmit>
	  			  newCmdReady = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	66bb      	str	r3, [r7, #104]	@ 0x68
	  	  if(uartRxReceived)
 8000844:	e708      	b.n	8000658 <main+0x88>
 8000846:	bf00      	nop
 8000848:	200004f4 	.word	0x200004f4
 800084c:	200004f8 	.word	0x200004f8
 8000850:	200003c8 	.word	0x200003c8
 8000854:	20000018 	.word	0x20000018
 8000858:	20000000 	.word	0x20000000
 800085c:	200004f0 	.word	0x200004f0
 8000860:	20000080 	.word	0x20000080
 8000864:	08008e40 	.word	0x08008e40
 8000868:	08008e44 	.word	0x08008e44
 800086c:	08008e48 	.word	0x08008e48
 8000870:	08008e4c 	.word	0x08008e4c
 8000874:	20000084 	.word	0x20000084
 8000878:	08008e68 	.word	0x08008e68
 800087c:	20000130 	.word	0x20000130
 8000880:	08008e70 	.word	0x08008e70
 8000884:	20000098 	.word	0x20000098
 8000888:	08008e78 	.word	0x08008e78
 800088c:	200001bc 	.word	0x200001bc
 8000890:	08008e80 	.word	0x08008e80
 8000894:	200001c8 	.word	0x200001c8
 8000898:	08008e8c 	.word	0x08008e8c

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	@ 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2238      	movs	r2, #56	@ 0x38
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f007 fa0f 	bl	8007cce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008be:	2000      	movs	r0, #0
 80008c0:	f002 fc7a 	bl	80031b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	2303      	movs	r3, #3
 80008d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80008d6:	2306      	movs	r3, #6
 80008d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008da:	2355      	movs	r3, #85	@ 0x55
 80008dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fd16 	bl	8003320 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x62>
  {
    Error_Handler();
 80008fa:	f000 fb3f 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2303      	movs	r3, #3
 8000904:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2104      	movs	r1, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f003 f814 	bl	8003944 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000922:	f000 fb2b 	bl	8000f7c <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	@ 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	@ 0x30
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2220      	movs	r2, #32
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f007 f9c0 	bl	8007cce <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800094e:	4b32      	ldr	r3, [pc, #200]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 8000950:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000954:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000956:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 8000958:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800095e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000964:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800096a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000970:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000976:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 8000978:	2204      	movs	r2, #4
 800097a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800097c:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 800097e:	2200      	movs	r2, #0
 8000980:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000982:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 8000984:	2200      	movs	r2, #0
 8000986:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000988:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 800098a:	2201      	movs	r2, #1
 800098c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098e:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009b0:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b8:	4817      	ldr	r0, [pc, #92]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 80009ba:	f001 f975 	bl	8001ca8 <HAL_ADC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80009c4:	f000 fada 	bl	8000f7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	4811      	ldr	r0, [pc, #68]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 80009d4:	f001 ff8a 	bl	80028ec <HAL_ADCEx_MultiModeConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009de:	f000 facd 	bl	8000f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_ADC1_Init+0xec>)
 80009e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e6:	2306      	movs	r3, #6
 80009e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ee:	237f      	movs	r3, #127	@ 0x7f
 80009f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f2:	2304      	movs	r3, #4
 80009f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <MX_ADC1_Init+0xe8>)
 8000a00:	f001 fb0e 	bl	8002020 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a0a:	f000 fab7 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	@ 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000258 	.word	0x20000258
 8000a1c:	21800100 	.word	0x21800100

08000a20 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	463b      	mov	r3, r7
 8000a28:	2220      	movs	r2, #32
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f007 f94e 	bl	8007cce <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a34:	4a2b      	ldr	r2, [pc, #172]	@ (8000ae4 <MX_ADC2_Init+0xc4>)
 8000a36:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a38:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a3a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a3e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a40:	4b27      	ldr	r3, [pc, #156]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a46:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000a4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a58:	4b21      	ldr	r3, [pc, #132]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a78:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a9a:	4811      	ldr	r0, [pc, #68]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000a9c:	f001 f904 	bl	8001ca8 <HAL_ADC_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000aa6:	f000 fa69 	bl	8000f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_ADC2_Init+0xc8>)
 8000aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aae:	2306      	movs	r3, #6
 8000ab0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab6:	237f      	movs	r3, #127	@ 0x7f
 8000ab8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aba:	2304      	movs	r3, #4
 8000abc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <MX_ADC2_Init+0xc0>)
 8000ac8:	f001 faaa 	bl	8002020 <HAL_ADC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ad2:	f000 fa53 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200002c4 	.word	0x200002c4
 8000ae4:	50000100 	.word	0x50000100
 8000ae8:	19200040 	.word	0x19200040

08000aec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b098      	sub	sp, #96	@ 0x60
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
 8000b0e:	615a      	str	r2, [r3, #20]
 8000b10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2234      	movs	r2, #52	@ 0x34
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f007 f8d8 	bl	8007cce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1e:	4b47      	ldr	r3, [pc, #284]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000b20:	4a47      	ldr	r2, [pc, #284]	@ (8000c40 <MX_TIM1_Init+0x154>)
 8000b22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b24:	4b45      	ldr	r3, [pc, #276]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b44      	ldr	r3, [pc, #272]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b30:	4b42      	ldr	r3, [pc, #264]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000b32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b40      	ldr	r3, [pc, #256]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b3d      	ldr	r3, [pc, #244]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b4a:	483c      	ldr	r0, [pc, #240]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000b4c:	f003 fc70 	bl	8004430 <HAL_TIM_PWM_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b56:	f000 fa11 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4833      	ldr	r0, [pc, #204]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000b6e:	f004 fc43 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b78:	f000 fa00 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7c:	2360      	movs	r3, #96	@ 0x60
 8000b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b84:	2300      	movs	r3, #0
 8000b86:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b98:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4826      	ldr	r0, [pc, #152]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000ba2:	f003 fdeb 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bac:	f000 f9e6 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4820      	ldr	r0, [pc, #128]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000bba:	f003 fddf 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000bc4:	f000 f9da 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bcc:	2208      	movs	r2, #8
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481a      	ldr	r0, [pc, #104]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000bd2:	f003 fdd3 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000bdc:	f000 f9ce 	bl	8000f7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000c1e:	f004 fc81 	bl	8005524 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000c28:	f000 f9a8 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c2c:	4803      	ldr	r0, [pc, #12]	@ (8000c3c <MX_TIM1_Init+0x150>)
 8000c2e:	f000 fb4b 	bl	80012c8 <HAL_TIM_MspPostInit>

}
 8000c32:	bf00      	nop
 8000c34:	3760      	adds	r7, #96	@ 0x60
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000330 	.word	0x20000330
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <MX_TIM3_Init+0x90>)
 8000c64:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd8 <MX_TIM3_Init+0x94>)
 8000c66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <MX_TIM3_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <MX_TIM3_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c74:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <MX_TIM3_Init+0x90>)
 8000c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <MX_TIM3_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_TIM3_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <MX_TIM3_Init+0x90>)
 8000ca0:	f004 fafa 	bl	8005298 <HAL_TIMEx_HallSensor_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000caa:	f000 f967 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000cae:	2350      	movs	r3, #80	@ 0x50
 8000cb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	@ (8000cd4 <MX_TIM3_Init+0x90>)
 8000cbc:	f004 fb9c 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000cc6:	f000 f959 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000037c 	.word	0x2000037c
 8000cd8:	40000400 	.word	0x40000400

08000cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000ce2:	4a23      	ldr	r2, [pc, #140]	@ (8000d70 <MX_USART2_UART_Init+0x94>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d24:	4811      	ldr	r0, [pc, #68]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000d26:	f004 fcd7 	bl	80056d8 <HAL_UART_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d30:	f000 f924 	bl	8000f7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d34:	2100      	movs	r1, #0
 8000d36:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000d38:	f006 fd51 	bl	80077de <HAL_UARTEx_SetTxFifoThreshold>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d42:	f000 f91b 	bl	8000f7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d46:	2100      	movs	r1, #0
 8000d48:	4808      	ldr	r0, [pc, #32]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000d4a:	f006 fd86 	bl	800785a <HAL_UARTEx_SetRxFifoThreshold>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d54:	f000 f912 	bl	8000f7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <MX_USART2_UART_Init+0x90>)
 8000d5a:	f006 fd07 	bl	800776c <HAL_UARTEx_DisableFifoMode>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d64:	f000 f90a 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200003c8 	.word	0x200003c8
 8000d70:	40004400 	.word	0x40004400

08000d74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d78:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d7a:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <MX_USART3_UART_Init+0x94>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000daa:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dbc:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000dbe:	f004 fc8b 	bl	80056d8 <HAL_UART_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dc8:	f000 f8d8 	bl	8000f7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000dd0:	f006 fd05 	bl	80077de <HAL_UARTEx_SetTxFifoThreshold>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dda:	f000 f8cf 	bl	8000f7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4808      	ldr	r0, [pc, #32]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000de2:	f006 fd3a 	bl	800785a <HAL_UARTEx_SetRxFifoThreshold>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dec:	f000 f8c6 	bl	8000f7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <MX_USART3_UART_Init+0x90>)
 8000df2:	f006 fcbb 	bl	800776c <HAL_UARTEx_DisableFifoMode>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dfc:	f000 f8be 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000045c 	.word	0x2000045c
 8000e08:	40004800 	.word	0x40004800

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b3f      	ldr	r3, [pc, #252]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	4a3e      	ldr	r2, [pc, #248]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3a:	4b39      	ldr	r3, [pc, #228]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	4a38      	ldr	r2, [pc, #224]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e40:	f043 0320 	orr.w	r3, r3, #32
 8000e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e46:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b33      	ldr	r3, [pc, #204]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	4a32      	ldr	r2, [pc, #200]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5e:	4b30      	ldr	r3, [pc, #192]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e76:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e82:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	4a26      	ldr	r2, [pc, #152]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8e:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <MX_GPIO_Init+0x114>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea2:	f002 f94d 	bl	8003140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	481e      	ldr	r0, [pc, #120]	@ (8000f24 <MX_GPIO_Init+0x118>)
 8000eac:	f002 f948 	bl	8003140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4818      	ldr	r0, [pc, #96]	@ (8000f28 <MX_GPIO_Init+0x11c>)
 8000ec8:	f001 ffb8 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000ecc:	2320      	movs	r3, #32
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee6:	f001 ffa9 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000eea:	2304      	movs	r3, #4
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	4808      	ldr	r0, [pc, #32]	@ (8000f24 <MX_GPIO_Init+0x118>)
 8000f02:	f001 ff9b 	bl	8002e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2028      	movs	r0, #40	@ 0x28
 8000f0c:	f001 feae 	bl	8002c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f10:	2028      	movs	r0, #40	@ 0x28
 8000f12:	f001 fec5 	bl	8002ca0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	@ 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000c00 	.word	0x48000c00
 8000f28:	48000800 	.word	0x48000800

08000f2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HAL_UART_RxCpltCallback+0x20>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4904      	ldr	r1, [pc, #16]	@ (8000f50 <HAL_UART_RxCpltCallback+0x24>)
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <HAL_UART_RxCpltCallback+0x28>)
 8000f40:	f004 fca8 	bl	8005894 <HAL_UART_Receive_IT>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200004f0 	.word	0x200004f0
 8000f50:	200004f4 	.word	0x200004f4
 8000f54:	200003c8 	.word	0x200003c8

08000f58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f6a:	f000 fc87 	bl	800187c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40001000 	.word	0x40001000

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <Error_Handler+0x8>

08000f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <HAL_MspInit+0x44>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f92:	4a0e      	ldr	r2, [pc, #56]	@ (8000fcc <HAL_MspInit+0x44>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_MspInit+0x44>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <HAL_MspInit+0x44>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000faa:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <HAL_MspInit+0x44>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_MspInit+0x44>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fbe:	f002 f99f 	bl	8003300 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0a4      	sub	sp, #144	@ 0x90
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fec:	2254      	movs	r2, #84	@ 0x54
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 fe6c 	bl	8007cce <memset>
  if(hadc->Instance==ADC1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ffe:	d174      	bne.n	80010ea <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001000:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001006:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800100a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fee5 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800101c:	f7ff ffae 	bl	8000f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001020:	4b63      	ldr	r3, [pc, #396]	@ (80011b0 <HAL_ADC_MspInit+0x1e0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a62      	ldr	r2, [pc, #392]	@ (80011b0 <HAL_ADC_MspInit+0x1e0>)
 8001028:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800102a:	4b61      	ldr	r3, [pc, #388]	@ (80011b0 <HAL_ADC_MspInit+0x1e0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d10b      	bne.n	800104a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001032:	4b60      	ldr	r3, [pc, #384]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001036:	4a5f      	ldr	r2, [pc, #380]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001038:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800103c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103e:	4b5d      	ldr	r3, [pc, #372]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
 8001048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b5a      	ldr	r3, [pc, #360]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104e:	4a59      	ldr	r2, [pc, #356]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001056:	4b57      	ldr	r3, [pc, #348]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	623b      	str	r3, [r7, #32]
 8001060:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b54      	ldr	r3, [pc, #336]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a53      	ldr	r2, [pc, #332]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b51      	ldr	r3, [pc, #324]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b4e      	ldr	r3, [pc, #312]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	4a4d      	ldr	r2, [pc, #308]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001086:	4b4b      	ldr	r3, [pc, #300]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
 8001090:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001092:	2304      	movs	r3, #4
 8001094:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010a6:	4619      	mov	r1, r3
 80010a8:	4843      	ldr	r0, [pc, #268]	@ (80011b8 <HAL_ADC_MspInit+0x1e8>)
 80010aa:	f001 fec7 	bl	8002e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80010ae:	2302      	movs	r3, #2
 80010b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b2:	2303      	movs	r3, #3
 80010b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c8:	f001 feb8 	bl	8002e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010cc:	2303      	movs	r3, #3
 80010ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d0:	2303      	movs	r3, #3
 80010d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010e0:	4619      	mov	r1, r3
 80010e2:	4836      	ldr	r0, [pc, #216]	@ (80011bc <HAL_ADC_MspInit+0x1ec>)
 80010e4:	f001 feaa 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010e8:	e05e      	b.n	80011a8 <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC2)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a34      	ldr	r2, [pc, #208]	@ (80011c0 <HAL_ADC_MspInit+0x1f0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d159      	bne.n	80011a8 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001100:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fe6b 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8001110:	f7ff ff34 	bl	8000f7c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001114:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <HAL_ADC_MspInit+0x1e0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	4a25      	ldr	r2, [pc, #148]	@ (80011b0 <HAL_ADC_MspInit+0x1e0>)
 800111c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <HAL_ADC_MspInit+0x1e0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10b      	bne.n	800113e <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001126:	4b23      	ldr	r3, [pc, #140]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	4a22      	ldr	r2, [pc, #136]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 800112c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4a1c      	ldr	r2, [pc, #112]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4a16      	ldr	r2, [pc, #88]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_ADC_MspInit+0x1e4>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800116e:	230b      	movs	r3, #11
 8001170:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001172:	2303      	movs	r3, #3
 8001174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <HAL_ADC_MspInit+0x1e8>)
 8001186:	f001 fe59 	bl	8002e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800118a:	2301      	movs	r3, #1
 800118c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a4:	f001 fe4a 	bl	8002e3c <HAL_GPIO_Init>
}
 80011a8:	bf00      	nop
 80011aa:	3790      	adds	r7, #144	@ 0x90
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000538 	.word	0x20000538
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000800 	.word	0x48000800
 80011bc:	48000400 	.word	0x48000400
 80011c0:	50000100 	.word	0x50000100

080011c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_TIM_PWM_MspInit+0x38>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10b      	bne.n	80011ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_TIM_PWM_MspInit+0x3c>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	4a09      	ldr	r2, [pc, #36]	@ (8001200 <HAL_TIM_PWM_MspInit+0x3c>)
 80011dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <HAL_TIM_PWM_MspInit+0x3c>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a26      	ldr	r2, [pc, #152]	@ (80012bc <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d145      	bne.n	80012b2 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001226:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	4a25      	ldr	r2, [pc, #148]	@ (80012c0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6593      	str	r3, [r2, #88]	@ 0x58
 8001232:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a1f      	ldr	r2, [pc, #124]	@ (80012c0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a19      	ldr	r2, [pc, #100]	@ (80012c0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800126e:	2350      	movs	r3, #80	@ 0x50
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800127e:	2302      	movs	r3, #2
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128c:	f001 fdd6 	bl	8002e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012a2:	2302      	movs	r3, #2
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80012ae:	f001 fdc5 	bl	8002e3c <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	@ 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40000400 	.word	0x40000400
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000800 	.word	0x48000800

080012c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a29      	ldr	r2, [pc, #164]	@ (800138c <HAL_TIM_MspPostInit+0xc4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d14b      	bne.n	8001382 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a28      	ldr	r2, [pc, #160]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <HAL_TIM_MspPostInit+0xc8>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800131a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800132c:	2306      	movs	r3, #6
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4817      	ldr	r0, [pc, #92]	@ (8001394 <HAL_TIM_MspPostInit+0xcc>)
 8001338:	f001 fd80 	bl	8002e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 800133c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800134e:	2304      	movs	r3, #4
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	480e      	ldr	r0, [pc, #56]	@ (8001394 <HAL_TIM_MspPostInit+0xcc>)
 800135a:	f001 fd6f 	bl	8002e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800135e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001370:	2306      	movs	r3, #6
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137e:	f001 fd5d 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	@ 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40012c00 	.word	0x40012c00
 8001390:	40021000 	.word	0x40021000
 8001394:	48000400 	.word	0x48000400

08001398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0a0      	sub	sp, #128	@ 0x80
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	2254      	movs	r2, #84	@ 0x54
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f006 fc88 	bl	8007cce <memset>
  if(huart->Instance==USART2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a41      	ldr	r2, [pc, #260]	@ (80014c8 <HAL_UART_MspInit+0x130>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d13f      	bne.n	8001448 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 fd03 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013e0:	f7ff fdcc 	bl	8000f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e4:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <HAL_UART_MspInit+0x134>)
 80013e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e8:	4a38      	ldr	r2, [pc, #224]	@ (80014cc <HAL_UART_MspInit+0x134>)
 80013ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f0:	4b36      	ldr	r3, [pc, #216]	@ (80014cc <HAL_UART_MspInit+0x134>)
 80013f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <HAL_UART_MspInit+0x134>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	4a32      	ldr	r2, [pc, #200]	@ (80014cc <HAL_UART_MspInit+0x134>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001408:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <HAL_UART_MspInit+0x134>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001414:	230c      	movs	r3, #12
 8001416:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001424:	2307      	movs	r3, #7
 8001426:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001432:	f001 fd03 	bl	8002e3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2026      	movs	r0, #38	@ 0x26
 800143c:	f001 fc16 	bl	8002c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001440:	2026      	movs	r0, #38	@ 0x26
 8001442:	f001 fc2d 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001446:	e03b      	b.n	80014c0 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a20      	ldr	r2, [pc, #128]	@ (80014d0 <HAL_UART_MspInit+0x138>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d136      	bne.n	80014c0 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001452:	2304      	movs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fcbe 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800146a:	f7ff fd87 	bl	8000f7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <HAL_UART_MspInit+0x134>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001472:	4a16      	ldr	r2, [pc, #88]	@ (80014cc <HAL_UART_MspInit+0x134>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001478:	6593      	str	r3, [r2, #88]	@ 0x58
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <HAL_UART_MspInit+0x134>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_UART_MspInit+0x134>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a10      	ldr	r2, [pc, #64]	@ (80014cc <HAL_UART_MspInit+0x134>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <HAL_UART_MspInit+0x134>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800149e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b0:	2307      	movs	r3, #7
 80014b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	@ (80014d4 <HAL_UART_MspInit+0x13c>)
 80014bc:	f001 fcbe 	bl	8002e3c <HAL_GPIO_Init>
}
 80014c0:	bf00      	nop
 80014c2:	3780      	adds	r7, #128	@ 0x80
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40004400 	.word	0x40004400
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40004800 	.word	0x40004800
 80014d4:	48000800 	.word	0x48000800

080014d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	@ 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014e8:	4b2c      	ldr	r3, [pc, #176]	@ (800159c <HAL_InitTick+0xc4>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ec:	4a2b      	ldr	r2, [pc, #172]	@ (800159c <HAL_InitTick+0xc4>)
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <HAL_InitTick+0xc4>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001500:	f107 020c 	add.w	r2, r7, #12
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fbf0 	bl	8003cf0 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001510:	f002 fbc2 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8001514:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001518:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <HAL_InitTick+0xc8>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0c9b      	lsrs	r3, r3, #18
 8001520:	3b01      	subs	r3, #1
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <HAL_InitTick+0xcc>)
 8001526:	4a20      	ldr	r2, [pc, #128]	@ (80015a8 <HAL_InitTick+0xd0>)
 8001528:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800152a:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <HAL_InitTick+0xcc>)
 800152c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001530:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001532:	4a1c      	ldr	r2, [pc, #112]	@ (80015a4 <HAL_InitTick+0xcc>)
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <HAL_InitTick+0xcc>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <HAL_InitTick+0xcc>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001544:	4817      	ldr	r0, [pc, #92]	@ (80015a4 <HAL_InitTick+0xcc>)
 8001546:	f002 fe99 	bl	800427c <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001550:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11b      	bne.n	8001590 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001558:	4812      	ldr	r0, [pc, #72]	@ (80015a4 <HAL_InitTick+0xcc>)
 800155a:	f002 fef1 	bl	8004340 <HAL_TIM_Base_Start_IT>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001564:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001568:	2b00      	cmp	r3, #0
 800156a:	d111      	bne.n	8001590 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800156c:	2036      	movs	r0, #54	@ 0x36
 800156e:	f001 fb97 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d808      	bhi.n	800158a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f001 fb75 	bl	8002c6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001582:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <HAL_InitTick+0xd4>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e002      	b.n	8001590 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001590:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001594:	4618      	mov	r0, r3
 8001596:	3730      	adds	r7, #48	@ 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	2000053c 	.word	0x2000053c
 80015a8:	40001000 	.word	0x40001000
 80015ac:	200001d8 	.word	0x200001d8

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <NMI_Handler+0x4>

080015b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <MemManage_Handler+0x4>

080015c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <USART2_IRQHandler+0x10>)
 8001616:	f004 f989 	bl	800592c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200003c8 	.word	0x200003c8

08001624 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001628:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800162c:	f001 fda0 	bl	8003170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <TIM6_DAC_IRQHandler+0x10>)
 800163a:	f002 ff50 	bl	80044de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000053c 	.word	0x2000053c

08001648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_kill>:

int _kill(int pid, int sig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001662:	f006 fbdf 	bl	8007e24 <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2216      	movs	r2, #22
 800166a:	601a      	str	r2, [r3, #0]
  return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffe7 	bl	8001658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800168a:	bf00      	nop
 800168c:	e7fd      	b.n	800168a <_exit+0x12>

0800168e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e00a      	b.n	80016b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016a0:	f3af 8000 	nop.w
 80016a4:	4601      	mov	r1, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	60ba      	str	r2, [r7, #8]
 80016ac:	b2ca      	uxtb	r2, r1
 80016ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dbf0      	blt.n	80016a0 <_read+0x12>
  }

  return len;
 80016be:	687b      	ldr	r3, [r7, #4]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e009      	b.n	80016ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	60ba      	str	r2, [r7, #8]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dbf1      	blt.n	80016da <_write+0x12>
  }
  return len;
 80016f6:	687b      	ldr	r3, [r7, #4]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_close>:

int _close(int file)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001728:	605a      	str	r2, [r3, #4]
  return 0;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_isatty>:

int _isatty(int file)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	@ (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f006 fb44 	bl	8007e24 <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20020000 	.word	0x20020000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	20000588 	.word	0x20000588
 80017d0:	200006e0 	.word	0x200006e0

080017d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017f8:	480d      	ldr	r0, [pc, #52]	@ (8001830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480d      	ldr	r0, [pc, #52]	@ (8001834 <LoopForever+0x6>)
  ldr r1, =_edata
 80017fe:	490e      	ldr	r1, [pc, #56]	@ (8001838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001800:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <LoopForever+0xe>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001814:	4c0b      	ldr	r4, [pc, #44]	@ (8001844 <LoopForever+0x16>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001822:	f7ff ffd7 	bl	80017d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001826:	f006 fb03 	bl	8007e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800182a:	f7fe fed1 	bl	80005d0 <main>

0800182e <LoopForever>:

LoopForever:
    b LoopForever
 800182e:	e7fe      	b.n	800182e <LoopForever>
  ldr   r0, =_estack
 8001830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 800183c:	080090c4 	.word	0x080090c4
  ldr r2, =_sbss
 8001840:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8001844:	200006dc 	.word	0x200006dc

08001848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC1_2_IRQHandler>

0800184a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f001 f9fe 	bl	8002c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800185a:	200f      	movs	r0, #15
 800185c:	f7ff fe3c 	bl	80014d8 <HAL_InitTick>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	71fb      	strb	r3, [r7, #7]
 800186a:	e001      	b.n	8001870 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800186c:	f7ff fb8c 	bl	8000f88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001870:	79fb      	ldrb	r3, [r7, #7]

}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_IncTick+0x1c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <HAL_IncTick+0x20>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4413      	add	r3, r2
 800188a:	4a03      	ldr	r2, [pc, #12]	@ (8001898 <HAL_IncTick+0x1c>)
 800188c:	6013      	str	r3, [r2, #0]
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	2000058c 	.word	0x2000058c
 800189c:	200001dc 	.word	0x200001dc

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000058c 	.word	0x2000058c

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d004      	beq.n	80018dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_Delay+0x40>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4413      	add	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018dc:	bf00      	nop
 80018de:	f7ff ffdf 	bl	80018a0 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d8f7      	bhi.n	80018de <HAL_Delay+0x26>
  {
  }
}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200001dc 	.word	0x200001dc

080018fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3360      	adds	r3, #96	@ 0x60
 8001976:	461a      	mov	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <LL_ADC_SetOffset+0x44>)
 8001986:	4013      	ands	r3, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	4313      	orrs	r3, r2
 8001994:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	03fff000 	.word	0x03fff000

080019ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3360      	adds	r3, #96	@ 0x60
 80019ba:	461a      	mov	r2, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3360      	adds	r3, #96	@ 0x60
 80019e8:	461a      	mov	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b087      	sub	sp, #28
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	3360      	adds	r3, #96	@ 0x60
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a38:	bf00      	nop
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3360      	adds	r3, #96	@ 0x60
 8001a54:	461a      	mov	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a6e:	bf00      	nop
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	615a      	str	r2, [r3, #20]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3330      	adds	r3, #48	@ 0x30
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	4413      	add	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	211f      	movs	r1, #31
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	f003 011f 	and.w	r1, r3, #31
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3314      	adds	r3, #20
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	0e5b      	lsrs	r3, r3, #25
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	4413      	add	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0d1b      	lsrs	r3, r3, #20
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	2107      	movs	r1, #7
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	0d1b      	lsrs	r3, r3, #20
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0318 	and.w	r3, r3, #24
 8001b72:	4908      	ldr	r1, [pc, #32]	@ (8001b94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b74:	40d9      	lsrs	r1, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	400b      	ands	r3, r1
 8001b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	0007ffff 	.word	0x0007ffff

08001b98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6093      	str	r3, [r2, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bd0:	d101      	bne.n	8001bd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001bf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bf8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c20:	d101      	bne.n	8001c26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <LL_ADC_IsEnabled+0x18>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <LL_ADC_IsEnabled+0x1a>
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d101      	bne.n	8001c72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d101      	bne.n	8001c98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1a9      	b.n	8002016 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff f97d 	bl	8000fd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff67 	bl	8001bbc <LL_ADC_IsDeepPowerDownEnabled>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff4d 	bl	8001b98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff82 	bl	8001c0c <LL_ADC_IsInternalRegulatorEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d115      	bne.n	8001d3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff66 	bl	8001be4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d18:	4b9c      	ldr	r3, [pc, #624]	@ (8001f8c <HAL_ADC_Init+0x2e4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	4a9c      	ldr	r2, [pc, #624]	@ (8001f90 <HAL_ADC_Init+0x2e8>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f9      	bne.n	8001d2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff64 	bl	8001c0c <LL_ADC_IsInternalRegulatorEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10d      	bne.n	8001d66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4e:	f043 0210 	orr.w	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff75 	bl	8001c5a <LL_ADC_REG_IsConversionOngoing>
 8001d70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8142 	bne.w	8002004 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 813e 	bne.w	8002004 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d90:	f043 0202 	orr.w	r2, r3, #2
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff49 	bl	8001c34 <LL_ADC_IsEnabled>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d141      	bne.n	8001e2c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db0:	d004      	beq.n	8001dbc <HAL_ADC_Init+0x114>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a77      	ldr	r2, [pc, #476]	@ (8001f94 <HAL_ADC_Init+0x2ec>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d10f      	bne.n	8001ddc <HAL_ADC_Init+0x134>
 8001dbc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001dc0:	f7ff ff38 	bl	8001c34 <LL_ADC_IsEnabled>
 8001dc4:	4604      	mov	r4, r0
 8001dc6:	4873      	ldr	r0, [pc, #460]	@ (8001f94 <HAL_ADC_Init+0x2ec>)
 8001dc8:	f7ff ff34 	bl	8001c34 <LL_ADC_IsEnabled>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4323      	orrs	r3, r4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	e012      	b.n	8001e02 <HAL_ADC_Init+0x15a>
 8001ddc:	486e      	ldr	r0, [pc, #440]	@ (8001f98 <HAL_ADC_Init+0x2f0>)
 8001dde:	f7ff ff29 	bl	8001c34 <LL_ADC_IsEnabled>
 8001de2:	4604      	mov	r4, r0
 8001de4:	486d      	ldr	r0, [pc, #436]	@ (8001f9c <HAL_ADC_Init+0x2f4>)
 8001de6:	f7ff ff25 	bl	8001c34 <LL_ADC_IsEnabled>
 8001dea:	4603      	mov	r3, r0
 8001dec:	431c      	orrs	r4, r3
 8001dee:	486c      	ldr	r0, [pc, #432]	@ (8001fa0 <HAL_ADC_Init+0x2f8>)
 8001df0:	f7ff ff20 	bl	8001c34 <LL_ADC_IsEnabled>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4323      	orrs	r3, r4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d012      	beq.n	8001e2c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e0e:	d004      	beq.n	8001e1a <HAL_ADC_Init+0x172>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a5f      	ldr	r2, [pc, #380]	@ (8001f94 <HAL_ADC_Init+0x2ec>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_Init+0x176>
 8001e1a:	4a62      	ldr	r2, [pc, #392]	@ (8001fa4 <HAL_ADC_Init+0x2fc>)
 8001e1c:	e000      	b.n	8001e20 <HAL_ADC_Init+0x178>
 8001e1e:	4a62      	ldr	r2, [pc, #392]	@ (8001fa8 <HAL_ADC_Init+0x300>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f7ff fd68 	bl	80018fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7f5b      	ldrb	r3, [r3, #29]
 8001e30:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e36:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e3c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e42:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e4a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d106      	bne.n	8001e68 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	045b      	lsls	r3, r3, #17
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e74:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	4b48      	ldr	r3, [pc, #288]	@ (8001fac <HAL_ADC_Init+0x304>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fee4 	bl	8001c80 <LL_ADC_INJ_IsConversionOngoing>
 8001eb8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d17f      	bne.n	8001fc0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d17c      	bne.n	8001fc0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ed2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ee2:	f023 0302 	bic.w	r3, r3, #2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	69b9      	ldr	r1, [r7, #24]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d017      	beq.n	8001f28 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f10:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6911      	ldr	r1, [r2, #16]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	430b      	orrs	r3, r1
 8001f22:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f26:	e013      	b.n	8001f50 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f4c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d12a      	bne.n	8001fb0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f70:	4311      	orrs	r1, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0201 	orr.w	r2, r2, #1
 8001f88:	611a      	str	r2, [r3, #16]
 8001f8a:	e019      	b.n	8001fc0 <HAL_ADC_Init+0x318>
 8001f8c:	200001d4 	.word	0x200001d4
 8001f90:	053e2d63 	.word	0x053e2d63
 8001f94:	50000100 	.word	0x50000100
 8001f98:	50000400 	.word	0x50000400
 8001f9c:	50000500 	.word	0x50000500
 8001fa0:	50000600 	.word	0x50000600
 8001fa4:	50000300 	.word	0x50000300
 8001fa8:	50000700 	.word	0x50000700
 8001fac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f023 010f 	bic.w	r1, r3, #15
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fe0:	e007      	b.n	8001ff2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 020f 	bic.w	r2, r2, #15
 8001ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff6:	f023 0303 	bic.w	r3, r3, #3
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002002:	e007      	b.n	8002014 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002008:	f043 0210 	orr.w	r2, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002014:	7ffb      	ldrb	r3, [r7, #31]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}
 800201e:	bf00      	nop

08002020 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0b6      	sub	sp, #216	@ 0xd8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x24>
 800203e:	2302      	movs	r3, #2
 8002040:	f000 bc13 	b.w	800286a <HAL_ADC_ConfigChannel+0x84a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fe02 	bl	8001c5a <LL_ADC_REG_IsConversionOngoing>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 83f3 	bne.w	8002844 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6859      	ldr	r1, [r3, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	f7ff fd18 	bl	8001aa0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fdf0 	bl	8001c5a <LL_ADC_REG_IsConversionOngoing>
 800207a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fdfc 	bl	8001c80 <LL_ADC_INJ_IsConversionOngoing>
 8002088:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800208c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 81d9 	bne.w	8002448 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 81d4 	bne.w	8002448 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020a8:	d10f      	bne.n	80020ca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7ff fd1f 	bl	8001af8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fcd9 	bl	8001a7a <LL_ADC_SetSamplingTimeCommonConfig>
 80020c8:	e00e      	b.n	80020e8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6819      	ldr	r1, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f7ff fd0e 	bl	8001af8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fcc9 	bl	8001a7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	08db      	lsrs	r3, r3, #3
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b04      	cmp	r3, #4
 8002108:	d022      	beq.n	8002150 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6919      	ldr	r1, [r3, #16]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800211a:	f7ff fc23 	bl	8001964 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6919      	ldr	r1, [r3, #16]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	461a      	mov	r2, r3
 800212c:	f7ff fc6f 	bl	8001a0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800213c:	2b01      	cmp	r3, #1
 800213e:	d102      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x126>
 8002140:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002144:	e000      	b.n	8002148 <HAL_ADC_ConfigChannel+0x128>
 8002146:	2300      	movs	r3, #0
 8002148:	461a      	mov	r2, r3
 800214a:	f7ff fc7b 	bl	8001a44 <LL_ADC_SetOffsetSaturation>
 800214e:	e17b      	b.n	8002448 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fc28 	bl	80019ac <LL_ADC_GetOffsetChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10a      	bne.n	800217c <HAL_ADC_ConfigChannel+0x15c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fc1d 	bl	80019ac <LL_ADC_GetOffsetChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	0e9b      	lsrs	r3, r3, #26
 8002176:	f003 021f 	and.w	r2, r3, #31
 800217a:	e01e      	b.n	80021ba <HAL_ADC_ConfigChannel+0x19a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fc12 	bl	80019ac <LL_ADC_GetOffsetChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800219a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800219e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80021aa:	2320      	movs	r3, #32
 80021ac:	e004      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80021ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x1b2>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0e9b      	lsrs	r3, r3, #26
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	e018      	b.n	8002204 <HAL_ADC_ConfigChannel+0x1e4>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80021e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80021ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80021f6:	2320      	movs	r3, #32
 80021f8:	e004      	b.n	8002204 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80021fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002204:	429a      	cmp	r2, r3
 8002206:	d106      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fbe1 	bl	80019d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fbc5 	bl	80019ac <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x222>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fbba 	bl	80019ac <LL_ADC_GetOffsetChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	e01e      	b.n	8002280 <HAL_ADC_ConfigChannel+0x260>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2101      	movs	r1, #1
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fbaf 	bl	80019ac <LL_ADC_GetOffsetChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002260:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e004      	b.n	800227e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x278>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	e018      	b.n	80022ca <HAL_ADC_ConfigChannel+0x2aa>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80022ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80022b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e004      	b.n	80022ca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80022c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d106      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2200      	movs	r2, #0
 80022d4:	2101      	movs	r1, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fb7e 	bl	80019d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2102      	movs	r1, #2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fb62 	bl	80019ac <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x2e8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2102      	movs	r1, #2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fb57 	bl	80019ac <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	f003 021f 	and.w	r2, r3, #31
 8002306:	e01e      	b.n	8002346 <HAL_ADC_ConfigChannel+0x326>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2102      	movs	r1, #2
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fb4c 	bl	80019ac <LL_ADC_GetOffsetChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002326:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800232a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800232e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e004      	b.n	8002344 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800233a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <HAL_ADC_ConfigChannel+0x33e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	e016      	b.n	800238c <HAL_ADC_ConfigChannel+0x36c>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002370:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002376:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e004      	b.n	800238c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002382:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800238c:	429a      	cmp	r2, r3
 800238e:	d106      	bne.n	800239e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2200      	movs	r2, #0
 8002396:	2102      	movs	r1, #2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fb1d 	bl	80019d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2103      	movs	r1, #3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fb01 	bl	80019ac <LL_ADC_GetOffsetChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x3aa>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2103      	movs	r1, #3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff faf6 	bl	80019ac <LL_ADC_GetOffsetChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	e017      	b.n	80023fa <HAL_ADC_ConfigChannel+0x3da>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2103      	movs	r1, #3
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff faeb 	bl	80019ac <LL_ADC_GetOffsetChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80023e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80023e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023ec:	2320      	movs	r3, #32
 80023ee:	e003      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x3f2>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0e9b      	lsrs	r3, r3, #26
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	e011      	b.n	8002436 <HAL_ADC_ConfigChannel+0x416>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002422:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e003      	b.n	8002436 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800242e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002436:	429a      	cmp	r2, r3
 8002438:	d106      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2200      	movs	r2, #0
 8002440:	2103      	movs	r1, #3
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fac8 	bl	80019d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fbf1 	bl	8001c34 <LL_ADC_IsEnabled>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 813d 	bne.w	80026d4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6819      	ldr	r1, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	461a      	mov	r2, r3
 8002468:	f7ff fb72 	bl	8001b50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4aa2      	ldr	r2, [pc, #648]	@ (80026fc <HAL_ADC_ConfigChannel+0x6dc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	f040 812e 	bne.w	80026d4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10b      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x480>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	3301      	adds	r3, #1
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2b09      	cmp	r3, #9
 8002496:	bf94      	ite	ls
 8002498:	2301      	movls	r3, #1
 800249a:	2300      	movhi	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e019      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x4b4>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80024ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024b0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80024b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80024bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2b09      	cmp	r3, #9
 80024cc:	bf94      	ite	ls
 80024ce:	2301      	movls	r3, #1
 80024d0:	2300      	movhi	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d079      	beq.n	80025cc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x4d4>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	3301      	adds	r3, #1
 80024ec:	069b      	lsls	r3, r3, #26
 80024ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024f2:	e015      	b.n	8002520 <HAL_ADC_ConfigChannel+0x500>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002504:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800250c:	2320      	movs	r3, #32
 800250e:	e003      	b.n	8002518 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3301      	adds	r3, #1
 800251a:	069b      	lsls	r3, r3, #26
 800251c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x520>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	3301      	adds	r3, #1
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2101      	movs	r1, #1
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	e017      	b.n	8002570 <HAL_ADC_ConfigChannel+0x550>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800254e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002550:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002558:	2320      	movs	r3, #32
 800255a:	e003      	b.n	8002564 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800255c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	ea42 0103 	orr.w	r1, r2, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x576>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	3301      	adds	r3, #1
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	051b      	lsls	r3, r3, #20
 8002594:	e018      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x5a8>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80025a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80025a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80025ae:	2320      	movs	r3, #32
 80025b0:	e003      	b.n	80025ba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80025b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c8:	430b      	orrs	r3, r1
 80025ca:	e07e      	b.n	80026ca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x5c8>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	3301      	adds	r3, #1
 80025e0:	069b      	lsls	r3, r3, #26
 80025e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025e6:	e015      	b.n	8002614 <HAL_ADC_ConfigChannel+0x5f4>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	069b      	lsls	r3, r3, #26
 8002610:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x614>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	3301      	adds	r3, #1
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	e017      	b.n	8002664 <HAL_ADC_ConfigChannel+0x644>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	61fb      	str	r3, [r7, #28]
  return result;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e003      	b.n	8002658 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	ea42 0103 	orr.w	r1, r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10d      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x670>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	3301      	adds	r3, #1
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	3b1e      	subs	r3, #30
 8002688:	051b      	lsls	r3, r3, #20
 800268a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800268e:	e01b      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x6a8>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	613b      	str	r3, [r7, #16]
  return result;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e003      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f003 021f 	and.w	r2, r3, #31
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	3b1e      	subs	r3, #30
 80026c2:	051b      	lsls	r3, r3, #20
 80026c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7ff fa12 	bl	8001af8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <HAL_ADC_ConfigChannel+0x6e0>)
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80be 	beq.w	800285e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026ea:	d004      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x6d6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <HAL_ADC_ConfigChannel+0x6e4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10a      	bne.n	800270c <HAL_ADC_ConfigChannel+0x6ec>
 80026f6:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <HAL_ADC_ConfigChannel+0x6e8>)
 80026f8:	e009      	b.n	800270e <HAL_ADC_ConfigChannel+0x6ee>
 80026fa:	bf00      	nop
 80026fc:	407f0000 	.word	0x407f0000
 8002700:	80080000 	.word	0x80080000
 8002704:	50000100 	.word	0x50000100
 8002708:	50000300 	.word	0x50000300
 800270c:	4b59      	ldr	r3, [pc, #356]	@ (8002874 <HAL_ADC_ConfigChannel+0x854>)
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f91a 	bl	8001948 <LL_ADC_GetCommonPathInternalCh>
 8002714:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a56      	ldr	r2, [pc, #344]	@ (8002878 <HAL_ADC_ConfigChannel+0x858>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_ADC_ConfigChannel+0x70c>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a55      	ldr	r2, [pc, #340]	@ (800287c <HAL_ADC_ConfigChannel+0x85c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d13a      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800272c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002730:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d134      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002740:	d005      	beq.n	800274e <HAL_ADC_ConfigChannel+0x72e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a4e      	ldr	r2, [pc, #312]	@ (8002880 <HAL_ADC_ConfigChannel+0x860>)
 8002748:	4293      	cmp	r3, r2
 800274a:	f040 8085 	bne.w	8002858 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002756:	d004      	beq.n	8002762 <HAL_ADC_ConfigChannel+0x742>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a49      	ldr	r2, [pc, #292]	@ (8002884 <HAL_ADC_ConfigChannel+0x864>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x746>
 8002762:	4a49      	ldr	r2, [pc, #292]	@ (8002888 <HAL_ADC_ConfigChannel+0x868>)
 8002764:	e000      	b.n	8002768 <HAL_ADC_ConfigChannel+0x748>
 8002766:	4a43      	ldr	r2, [pc, #268]	@ (8002874 <HAL_ADC_ConfigChannel+0x854>)
 8002768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800276c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f7ff f8d5 	bl	8001922 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002778:	4b44      	ldr	r3, [pc, #272]	@ (800288c <HAL_ADC_ConfigChannel+0x86c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	4a44      	ldr	r2, [pc, #272]	@ (8002890 <HAL_ADC_ConfigChannel+0x870>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002792:	e002      	b.n	800279a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3b01      	subs	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f9      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a0:	e05a      	b.n	8002858 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002894 <HAL_ADC_ConfigChannel+0x874>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d125      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d11f      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a31      	ldr	r2, [pc, #196]	@ (8002884 <HAL_ADC_ConfigChannel+0x864>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d104      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x7ac>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a34      	ldr	r2, [pc, #208]	@ (8002898 <HAL_ADC_ConfigChannel+0x878>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d047      	beq.n	800285c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x7c0>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2a      	ldr	r2, [pc, #168]	@ (8002884 <HAL_ADC_ConfigChannel+0x864>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x7c4>
 80027e0:	4a29      	ldr	r2, [pc, #164]	@ (8002888 <HAL_ADC_ConfigChannel+0x868>)
 80027e2:	e000      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x7c6>
 80027e4:	4a23      	ldr	r2, [pc, #140]	@ (8002874 <HAL_ADC_ConfigChannel+0x854>)
 80027e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ee:	4619      	mov	r1, r3
 80027f0:	4610      	mov	r0, r2
 80027f2:	f7ff f896 	bl	8001922 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f6:	e031      	b.n	800285c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a27      	ldr	r2, [pc, #156]	@ (800289c <HAL_ADC_ConfigChannel+0x87c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d12d      	bne.n	800285e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d127      	bne.n	800285e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1c      	ldr	r2, [pc, #112]	@ (8002884 <HAL_ADC_ConfigChannel+0x864>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d022      	beq.n	800285e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002820:	d004      	beq.n	800282c <HAL_ADC_ConfigChannel+0x80c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a17      	ldr	r2, [pc, #92]	@ (8002884 <HAL_ADC_ConfigChannel+0x864>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x810>
 800282c:	4a16      	ldr	r2, [pc, #88]	@ (8002888 <HAL_ADC_ConfigChannel+0x868>)
 800282e:	e000      	b.n	8002832 <HAL_ADC_ConfigChannel+0x812>
 8002830:	4a10      	ldr	r2, [pc, #64]	@ (8002874 <HAL_ADC_ConfigChannel+0x854>)
 8002832:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800283a:	4619      	mov	r1, r3
 800283c:	4610      	mov	r0, r2
 800283e:	f7ff f870 	bl	8001922 <LL_ADC_SetCommonPathInternalCh>
 8002842:	e00c      	b.n	800285e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	f043 0220 	orr.w	r2, r3, #32
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002856:	e002      	b.n	800285e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002858:	bf00      	nop
 800285a:	e000      	b.n	800285e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800285c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002866:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800286a:	4618      	mov	r0, r3
 800286c:	37d8      	adds	r7, #216	@ 0xd8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	50000700 	.word	0x50000700
 8002878:	c3210000 	.word	0xc3210000
 800287c:	90c00010 	.word	0x90c00010
 8002880:	50000600 	.word	0x50000600
 8002884:	50000100 	.word	0x50000100
 8002888:	50000300 	.word	0x50000300
 800288c:	200001d4 	.word	0x200001d4
 8002890:	053e2d63 	.word	0x053e2d63
 8002894:	c7520000 	.word	0xc7520000
 8002898:	50000500 	.word	0x50000500
 800289c:	cb840000 	.word	0xcb840000

080028a0 <LL_ADC_IsEnabled>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <LL_ADC_IsEnabled+0x18>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <LL_ADC_IsEnabled+0x1a>
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d101      	bne.n	80028de <LL_ADC_REG_IsConversionOngoing+0x18>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b0a1      	sub	sp, #132	@ 0x84
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002906:	2302      	movs	r3, #2
 8002908:	e0e7      	b.n	8002ada <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002912:	2300      	movs	r3, #0
 8002914:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002916:	2300      	movs	r3, #0
 8002918:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002922:	d102      	bne.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002924:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	e009      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d102      	bne.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002934:	4b6d      	ldr	r3, [pc, #436]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	e001      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0be      	b.n	8002ada <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ffb1 	bl	80028c6 <LL_ADC_REG_IsConversionOngoing>
 8002964:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ffab 	bl	80028c6 <LL_ADC_REG_IsConversionOngoing>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 80a0 	bne.w	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002978:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 809c 	bne.w	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002988:	d004      	beq.n	8002994 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a55      	ldr	r2, [pc, #340]	@ (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002994:	4b56      	ldr	r3, [pc, #344]	@ (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002996:	e000      	b.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002998:	4b56      	ldr	r3, [pc, #344]	@ (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800299a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d04b      	beq.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029b6:	035b      	lsls	r3, r3, #13
 80029b8:	430b      	orrs	r3, r1
 80029ba:	431a      	orrs	r2, r3
 80029bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c8:	d004      	beq.n	80029d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a45      	ldr	r2, [pc, #276]	@ (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d10f      	bne.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80029d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029d8:	f7ff ff62 	bl	80028a0 <LL_ADC_IsEnabled>
 80029dc:	4604      	mov	r4, r0
 80029de:	4841      	ldr	r0, [pc, #260]	@ (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029e0:	f7ff ff5e 	bl	80028a0 <LL_ADC_IsEnabled>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4323      	orrs	r3, r4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e012      	b.n	8002a1a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80029f4:	483c      	ldr	r0, [pc, #240]	@ (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029f6:	f7ff ff53 	bl	80028a0 <LL_ADC_IsEnabled>
 80029fa:	4604      	mov	r4, r0
 80029fc:	483b      	ldr	r0, [pc, #236]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029fe:	f7ff ff4f 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a02:	4603      	mov	r3, r0
 8002a04:	431c      	orrs	r4, r3
 8002a06:	483c      	ldr	r0, [pc, #240]	@ (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a08:	f7ff ff4a 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4323      	orrs	r3, r4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d056      	beq.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a26:	f023 030f 	bic.w	r3, r3, #15
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	6811      	ldr	r1, [r2, #0]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	6892      	ldr	r2, [r2, #8]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	431a      	orrs	r2, r3
 8002a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a38:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a3a:	e047      	b.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a46:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a50:	d004      	beq.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a23      	ldr	r2, [pc, #140]	@ (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d10f      	bne.n	8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a60:	f7ff ff1e 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a64:	4604      	mov	r4, r0
 8002a66:	481f      	ldr	r0, [pc, #124]	@ (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a68:	f7ff ff1a 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4323      	orrs	r3, r4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e012      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a7c:	481a      	ldr	r0, [pc, #104]	@ (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a7e:	f7ff ff0f 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a82:	4604      	mov	r4, r0
 8002a84:	4819      	ldr	r0, [pc, #100]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a86:	f7ff ff0b 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	431c      	orrs	r4, r3
 8002a8e:	481a      	ldr	r0, [pc, #104]	@ (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a90:	f7ff ff06 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4323      	orrs	r3, r4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d012      	beq.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002aae:	f023 030f 	bic.w	r3, r3, #15
 8002ab2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ab4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab6:	e009      	b.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002aca:	e000      	b.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002acc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ad6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3784      	adds	r7, #132	@ 0x84
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd90      	pop	{r4, r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	50000100 	.word	0x50000100
 8002ae8:	50000400 	.word	0x50000400
 8002aec:	50000500 	.word	0x50000500
 8002af0:	50000300 	.word	0x50000300
 8002af4:	50000700 	.word	0x50000700
 8002af8:	50000600 	.word	0x50000600

08002afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	@ (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db0b      	blt.n	8002b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4907      	ldr	r1, [pc, #28]	@ (8002b98 <__NVIC_EnableIRQ+0x38>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2001      	movs	r0, #1
 8002b82:	fa00 f202 	lsl.w	r2, r0, r2
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	@ (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	@ (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	@ 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f1c3 0307 	rsb	r3, r3, #7
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf28      	it	cs
 8002c0e:	2304      	movcs	r3, #4
 8002c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d902      	bls.n	8002c20 <NVIC_EncodePriority+0x30>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3b03      	subs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <NVIC_EncodePriority+0x32>
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	4313      	orrs	r3, r2
         );
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	@ 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff ff4c 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7a:	f7ff ff63 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002c7e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	6978      	ldr	r0, [r7, #20]
 8002c86:	f7ff ffb3 	bl	8002bf0 <NVIC_EncodePriority>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ff82 	bl	8002b9c <__NVIC_SetPriority>
}
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff56 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d005      	beq.n	8002ce0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e037      	b.n	8002d50 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 020e 	bic.w	r2, r2, #14
 8002cee:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cfe:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d2c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00c      	beq.n	8002d50 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d44:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d4e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d00d      	beq.n	8002da2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2204      	movs	r2, #4
 8002d8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e047      	b.n	8002e32 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 020e 	bic.w	r2, r2, #14
 8002db0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f003 021f 	and.w	r2, r3, #31
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00c      	beq.n	8002e12 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e10:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
    }
  }
  return status;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e4a:	e15a      	b.n	8003102 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 814c 	beq.w	80030fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d005      	beq.n	8002e7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d130      	bne.n	8002ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f003 0201 	and.w	r2, r3, #1
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d017      	beq.n	8002f1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d123      	bne.n	8002f6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	08da      	lsrs	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3208      	adds	r2, #8
 8002f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	220f      	movs	r2, #15
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	08da      	lsrs	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3208      	adds	r2, #8
 8002f68:	6939      	ldr	r1, [r7, #16]
 8002f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0203 	and.w	r2, r3, #3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80a6 	beq.w	80030fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	@ (8003120 <HAL_GPIO_Init+0x2e4>)
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8003120 <HAL_GPIO_Init+0x2e4>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fbc:	4b58      	ldr	r3, [pc, #352]	@ (8003120 <HAL_GPIO_Init+0x2e4>)
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc8:	4a56      	ldr	r2, [pc, #344]	@ (8003124 <HAL_GPIO_Init+0x2e8>)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	220f      	movs	r2, #15
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ff2:	d01f      	beq.n	8003034 <HAL_GPIO_Init+0x1f8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a4c      	ldr	r2, [pc, #304]	@ (8003128 <HAL_GPIO_Init+0x2ec>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d019      	beq.n	8003030 <HAL_GPIO_Init+0x1f4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a4b      	ldr	r2, [pc, #300]	@ (800312c <HAL_GPIO_Init+0x2f0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <HAL_GPIO_Init+0x1f0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a4a      	ldr	r2, [pc, #296]	@ (8003130 <HAL_GPIO_Init+0x2f4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00d      	beq.n	8003028 <HAL_GPIO_Init+0x1ec>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a49      	ldr	r2, [pc, #292]	@ (8003134 <HAL_GPIO_Init+0x2f8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d007      	beq.n	8003024 <HAL_GPIO_Init+0x1e8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a48      	ldr	r2, [pc, #288]	@ (8003138 <HAL_GPIO_Init+0x2fc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_GPIO_Init+0x1e4>
 800301c:	2305      	movs	r3, #5
 800301e:	e00a      	b.n	8003036 <HAL_GPIO_Init+0x1fa>
 8003020:	2306      	movs	r3, #6
 8003022:	e008      	b.n	8003036 <HAL_GPIO_Init+0x1fa>
 8003024:	2304      	movs	r3, #4
 8003026:	e006      	b.n	8003036 <HAL_GPIO_Init+0x1fa>
 8003028:	2303      	movs	r3, #3
 800302a:	e004      	b.n	8003036 <HAL_GPIO_Init+0x1fa>
 800302c:	2302      	movs	r3, #2
 800302e:	e002      	b.n	8003036 <HAL_GPIO_Init+0x1fa>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_GPIO_Init+0x1fa>
 8003034:	2300      	movs	r3, #0
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	f002 0203 	and.w	r2, r2, #3
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	4093      	lsls	r3, r2
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003046:	4937      	ldr	r1, [pc, #220]	@ (8003124 <HAL_GPIO_Init+0x2e8>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003054:	4b39      	ldr	r3, [pc, #228]	@ (800313c <HAL_GPIO_Init+0x300>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	43db      	mvns	r3, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4013      	ands	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003078:	4a30      	ldr	r2, [pc, #192]	@ (800313c <HAL_GPIO_Init+0x300>)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800307e:	4b2f      	ldr	r3, [pc, #188]	@ (800313c <HAL_GPIO_Init+0x300>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43db      	mvns	r3, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030a2:	4a26      	ldr	r2, [pc, #152]	@ (800313c <HAL_GPIO_Init+0x300>)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030a8:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_GPIO_Init+0x300>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030cc:	4a1b      	ldr	r2, [pc, #108]	@ (800313c <HAL_GPIO_Init+0x300>)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030d2:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <HAL_GPIO_Init+0x300>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	43db      	mvns	r3, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030f6:	4a11      	ldr	r2, [pc, #68]	@ (800313c <HAL_GPIO_Init+0x300>)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3301      	adds	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	f47f ae9d 	bne.w	8002e4c <HAL_GPIO_Init+0x10>
  }
}
 8003112:	bf00      	nop
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40021000 	.word	0x40021000
 8003124:	40010000 	.word	0x40010000
 8003128:	48000400 	.word	0x48000400
 800312c:	48000800 	.word	0x48000800
 8003130:	48000c00 	.word	0x48000c00
 8003134:	48001000 	.word	0x48001000
 8003138:	48001400 	.word	0x48001400
 800313c:	40010400 	.word	0x40010400

08003140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]
 800314c:	4613      	mov	r3, r2
 800314e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003150:	787b      	ldrb	r3, [r7, #1]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003156:	887a      	ldrh	r2, [r7, #2]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800315c:	e002      	b.n	8003164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800317a:	4b08      	ldr	r3, [pc, #32]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003186:	4a05      	ldr	r2, [pc, #20]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f806 	bl	80031a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40010400 	.word	0x40010400

080031a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d141      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c6:	4b4b      	ldr	r3, [pc, #300]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d2:	d131      	bne.n	8003238 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d4:	4b47      	ldr	r3, [pc, #284]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031da:	4a46      	ldr	r2, [pc, #280]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e4:	4b43      	ldr	r3, [pc, #268]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031ec:	4a41      	ldr	r2, [pc, #260]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f4:	4b40      	ldr	r3, [pc, #256]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2232      	movs	r2, #50	@ 0x32
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	4a3f      	ldr	r2, [pc, #252]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	0c9b      	lsrs	r3, r3, #18
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320a:	e002      	b.n	8003212 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3b01      	subs	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003212:	4b38      	ldr	r3, [pc, #224]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321e:	d102      	bne.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f2      	bne.n	800320c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003226:	4b33      	ldr	r3, [pc, #204]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003232:	d158      	bne.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e057      	b.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003238:	4b2e      	ldr	r3, [pc, #184]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800323e:	4a2d      	ldr	r2, [pc, #180]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003244:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003248:	e04d      	b.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003250:	d141      	bne.n	80032d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003252:	4b28      	ldr	r3, [pc, #160]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325e:	d131      	bne.n	80032c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003260:	4b24      	ldr	r3, [pc, #144]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003266:	4a23      	ldr	r2, [pc, #140]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003270:	4b20      	ldr	r3, [pc, #128]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003278:	4a1e      	ldr	r2, [pc, #120]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800327e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003280:	4b1d      	ldr	r3, [pc, #116]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2232      	movs	r2, #50	@ 0x32
 8003286:	fb02 f303 	mul.w	r3, r2, r3
 800328a:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	0c9b      	lsrs	r3, r3, #18
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003296:	e002      	b.n	800329e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3b01      	subs	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329e:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	d102      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f2      	bne.n	8003298 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032be:	d112      	bne.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e011      	b.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ca:	4a0a      	ldr	r2, [pc, #40]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032d4:	e007      	b.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032d6:	4b07      	ldr	r3, [pc, #28]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032de:	4a05      	ldr	r2, [pc, #20]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40007000 	.word	0x40007000
 80032f8:	200001d4 	.word	0x200001d4
 80032fc:	431bde83 	.word	0x431bde83

08003300 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a04      	ldr	r2, [pc, #16]	@ (800331c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800330a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800330e:	6093      	str	r3, [r2, #8]
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40007000 	.word	0x40007000

08003320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e2fe      	b.n	8003930 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d075      	beq.n	800342a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333e:	4b97      	ldr	r3, [pc, #604]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003348:	4b94      	ldr	r3, [pc, #592]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b0c      	cmp	r3, #12
 8003356:	d102      	bne.n	800335e <HAL_RCC_OscConfig+0x3e>
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d002      	beq.n	8003364 <HAL_RCC_OscConfig+0x44>
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d10b      	bne.n	800337c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	4b8d      	ldr	r3, [pc, #564]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d05b      	beq.n	8003428 <HAL_RCC_OscConfig+0x108>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d157      	bne.n	8003428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e2d9      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003384:	d106      	bne.n	8003394 <HAL_RCC_OscConfig+0x74>
 8003386:	4b85      	ldr	r3, [pc, #532]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a84      	ldr	r2, [pc, #528]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e01d      	b.n	80033d0 <HAL_RCC_OscConfig+0xb0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x98>
 800339e:	4b7f      	ldr	r3, [pc, #508]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a7e      	ldr	r2, [pc, #504]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b7c      	ldr	r3, [pc, #496]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a7b      	ldr	r2, [pc, #492]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xb0>
 80033b8:	4b78      	ldr	r3, [pc, #480]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a77      	ldr	r2, [pc, #476]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b75      	ldr	r3, [pc, #468]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a74      	ldr	r2, [pc, #464]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fa62 	bl	80018a0 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe fa5e 	bl	80018a0 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	@ 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e29e      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f2:	4b6a      	ldr	r3, [pc, #424]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xc0>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fa4e 	bl	80018a0 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fa4a 	bl	80018a0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	@ 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e28a      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800341a:	4b60      	ldr	r3, [pc, #384]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0xe8>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d075      	beq.n	8003522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003436:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003440:	4b56      	ldr	r3, [pc, #344]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b0c      	cmp	r3, #12
 800344e:	d102      	bne.n	8003456 <HAL_RCC_OscConfig+0x136>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d002      	beq.n	800345c <HAL_RCC_OscConfig+0x13c>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d11f      	bne.n	800349c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800345c:	4b4f      	ldr	r3, [pc, #316]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_OscConfig+0x154>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e25d      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003474:	4b49      	ldr	r3, [pc, #292]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	4946      	ldr	r1, [pc, #280]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003488:	4b45      	ldr	r3, [pc, #276]	@ (80035a0 <HAL_RCC_OscConfig+0x280>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe f823 	bl	80014d8 <HAL_InitTick>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d043      	beq.n	8003520 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e249      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d023      	beq.n	80034ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a4:	4b3d      	ldr	r3, [pc, #244]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a3c      	ldr	r2, [pc, #240]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80034aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe f9f6 	bl	80018a0 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fe f9f2 	bl	80018a0 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e232      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ca:	4b34      	ldr	r3, [pc, #208]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	4b31      	ldr	r3, [pc, #196]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	061b      	lsls	r3, r3, #24
 80034e4:	492d      	ldr	r1, [pc, #180]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
 80034ea:	e01a      	b.n	8003522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ec:	4b2b      	ldr	r3, [pc, #172]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2a      	ldr	r2, [pc, #168]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 80034f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe f9d2 	bl	80018a0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003500:	f7fe f9ce 	bl	80018a0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e20e      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003512:	4b22      	ldr	r3, [pc, #136]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x1e0>
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003520:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d041      	beq.n	80035b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01c      	beq.n	8003570 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003536:	4b19      	ldr	r3, [pc, #100]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800353c:	4a17      	ldr	r2, [pc, #92]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe f9ab 	bl	80018a0 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354e:	f7fe f9a7 	bl	80018a0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1e7      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003560:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ef      	beq.n	800354e <HAL_RCC_OscConfig+0x22e>
 800356e:	e020      	b.n	80035b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003570:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003576:	4a09      	ldr	r2, [pc, #36]	@ (800359c <HAL_RCC_OscConfig+0x27c>)
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fe f98e 	bl	80018a0 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003586:	e00d      	b.n	80035a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003588:	f7fe f98a 	bl	80018a0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d906      	bls.n	80035a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e1ca      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	200001d8 	.word	0x200001d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a4:	4b8c      	ldr	r3, [pc, #560]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ea      	bne.n	8003588 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80a6 	beq.w	800370c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c0:	2300      	movs	r3, #0
 80035c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035c4:	4b84      	ldr	r3, [pc, #528]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_OscConfig+0x2b4>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x2b6>
 80035d4:	2300      	movs	r3, #0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00d      	beq.n	80035f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	4b7f      	ldr	r3, [pc, #508]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	4a7e      	ldr	r2, [pc, #504]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80035e6:	4b7c      	ldr	r3, [pc, #496]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035f2:	2301      	movs	r3, #1
 80035f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f6:	4b79      	ldr	r3, [pc, #484]	@ (80037dc <HAL_RCC_OscConfig+0x4bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d118      	bne.n	8003634 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003602:	4b76      	ldr	r3, [pc, #472]	@ (80037dc <HAL_RCC_OscConfig+0x4bc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a75      	ldr	r2, [pc, #468]	@ (80037dc <HAL_RCC_OscConfig+0x4bc>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360e:	f7fe f947 	bl	80018a0 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fe f943 	bl	80018a0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e183      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003628:	4b6c      	ldr	r3, [pc, #432]	@ (80037dc <HAL_RCC_OscConfig+0x4bc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d108      	bne.n	800364e <HAL_RCC_OscConfig+0x32e>
 800363c:	4b66      	ldr	r3, [pc, #408]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	4a65      	ldr	r2, [pc, #404]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800364c:	e024      	b.n	8003698 <HAL_RCC_OscConfig+0x378>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b05      	cmp	r3, #5
 8003654:	d110      	bne.n	8003678 <HAL_RCC_OscConfig+0x358>
 8003656:	4b60      	ldr	r3, [pc, #384]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365c:	4a5e      	ldr	r2, [pc, #376]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003666:	4b5c      	ldr	r3, [pc, #368]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366c:	4a5a      	ldr	r2, [pc, #360]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003676:	e00f      	b.n	8003698 <HAL_RCC_OscConfig+0x378>
 8003678:	4b57      	ldr	r3, [pc, #348]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367e:	4a56      	ldr	r2, [pc, #344]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003688:	4b53      	ldr	r3, [pc, #332]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	4a52      	ldr	r2, [pc, #328]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003690:	f023 0304 	bic.w	r3, r3, #4
 8003694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d016      	beq.n	80036ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe f8fe 	bl	80018a0 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe f8fa 	bl	80018a0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e138      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036be:	4b46      	ldr	r3, [pc, #280]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ed      	beq.n	80036a8 <HAL_RCC_OscConfig+0x388>
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fe f8e7 	bl	80018a0 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fe f8e3 	bl	80018a0 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e121      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ec:	4b3a      	ldr	r3, [pc, #232]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ed      	bne.n	80036d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b35      	ldr	r3, [pc, #212]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003704:	4a34      	ldr	r2, [pc, #208]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d03c      	beq.n	8003792 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01c      	beq.n	800375a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003720:	4b2d      	ldr	r3, [pc, #180]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003726:	4a2c      	ldr	r2, [pc, #176]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fe f8b6 	bl	80018a0 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003738:	f7fe f8b2 	bl	80018a0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e0f2      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800374a:	4b23      	ldr	r3, [pc, #140]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800374c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <HAL_RCC_OscConfig+0x418>
 8003758:	e01b      	b.n	8003792 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800375a:	4b1f      	ldr	r3, [pc, #124]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800375c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003760:	4a1d      	ldr	r2, [pc, #116]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fe f899 	bl	80018a0 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003772:	f7fe f895 	bl	80018a0 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0d5      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003784:	4b14      	ldr	r3, [pc, #80]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ef      	bne.n	8003772 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80c9 	beq.w	800392e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800379c:	4b0e      	ldr	r3, [pc, #56]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b0c      	cmp	r3, #12
 80037a6:	f000 8083 	beq.w	80038b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d15e      	bne.n	8003870 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a08      	ldr	r2, [pc, #32]	@ (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80037b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fe f86f 	bl	80018a0 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c4:	e00c      	b.n	80037e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe f86b 	bl	80018a0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d905      	bls.n	80037e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0ab      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e0:	4b55      	ldr	r3, [pc, #340]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1ec      	bne.n	80037c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ec:	4b52      	ldr	r3, [pc, #328]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	4b52      	ldr	r3, [pc, #328]	@ (800393c <HAL_RCC_OscConfig+0x61c>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6a11      	ldr	r1, [r2, #32]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037fc:	3a01      	subs	r2, #1
 80037fe:	0112      	lsls	r2, r2, #4
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003806:	0212      	lsls	r2, r2, #8
 8003808:	4311      	orrs	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800380e:	0852      	lsrs	r2, r2, #1
 8003810:	3a01      	subs	r2, #1
 8003812:	0552      	lsls	r2, r2, #21
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800381a:	0852      	lsrs	r2, r2, #1
 800381c:	3a01      	subs	r2, #1
 800381e:	0652      	lsls	r2, r2, #25
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003826:	06d2      	lsls	r2, r2, #27
 8003828:	430a      	orrs	r2, r1
 800382a:	4943      	ldr	r1, [pc, #268]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 800382c:	4313      	orrs	r3, r2
 800382e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003830:	4b41      	ldr	r3, [pc, #260]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a40      	ldr	r2, [pc, #256]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800383c:	4b3e      	ldr	r3, [pc, #248]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a3d      	ldr	r2, [pc, #244]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 8003842:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003846:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe f82a 	bl	80018a0 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003850:	f7fe f826 	bl	80018a0 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e066      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003862:	4b35      	ldr	r3, [pc, #212]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x530>
 800386e:	e05e      	b.n	800392e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003870:	4b31      	ldr	r3, [pc, #196]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a30      	ldr	r2, [pc, #192]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 8003876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800387a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe f810 	bl	80018a0 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003884:	f7fe f80c 	bl	80018a0 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e04c      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003896:	4b28      	ldr	r3, [pc, #160]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038a2:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	4924      	ldr	r1, [pc, #144]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 80038a8:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <HAL_RCC_OscConfig+0x620>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	60cb      	str	r3, [r1, #12]
 80038ae:	e03e      	b.n	800392e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e039      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <HAL_RCC_OscConfig+0x618>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0203 	and.w	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d12c      	bne.n	800392a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	3b01      	subs	r3, #1
 80038dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d123      	bne.n	800392a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d11b      	bne.n	800392a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d113      	bne.n	800392a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	3b01      	subs	r3, #1
 8003910:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d109      	bne.n	800392a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	019f800c 	.word	0x019f800c
 8003940:	feeefffc 	.word	0xfeeefffc

08003944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e11e      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800395c:	4b91      	ldr	r3, [pc, #580]	@ (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d910      	bls.n	800398c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b8e      	ldr	r3, [pc, #568]	@ (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 020f 	bic.w	r2, r3, #15
 8003972:	498c      	ldr	r1, [pc, #560]	@ (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b8a      	ldr	r3, [pc, #552]	@ (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e106      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d073      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d129      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a0:	4b81      	ldr	r3, [pc, #516]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0f4      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039b0:	f000 f9d0 	bl	8003d54 <RCC_GetSysClockFreqFromPLLSource>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4a7c      	ldr	r2, [pc, #496]	@ (8003bac <HAL_RCC_ClockConfig+0x268>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d93f      	bls.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039be:	4b7a      	ldr	r3, [pc, #488]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d033      	beq.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d12f      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039de:	4b72      	ldr	r3, [pc, #456]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039e6:	4a70      	ldr	r2, [pc, #448]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039ee:	2380      	movs	r3, #128	@ 0x80
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e024      	b.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fc:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0c6      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a0c:	4b66      	ldr	r3, [pc, #408]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0be      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a1c:	f000 f8ce 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4a61      	ldr	r2, [pc, #388]	@ (8003bac <HAL_RCC_ClockConfig+0x268>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d909      	bls.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a32:	4a5d      	ldr	r2, [pc, #372]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a3a:	2380      	movs	r3, #128	@ 0x80
 8003a3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4957      	ldr	r1, [pc, #348]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a50:	f7fd ff26 	bl	80018a0 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fd ff22 	bl	80018a0 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e095      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 020c 	and.w	r2, r3, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d1eb      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a98:	4b43      	ldr	r3, [pc, #268]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a42      	ldr	r2, [pc, #264]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aa2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ab8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003abe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac0:	4b39      	ldr	r3, [pc, #228]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4936      	ldr	r1, [pc, #216]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b80      	cmp	r3, #128	@ 0x80
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ada:	4b33      	ldr	r3, [pc, #204]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4a32      	ldr	r2, [pc, #200]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ae0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ae4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d21d      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 020f 	bic.w	r2, r3, #15
 8003afc:	4929      	ldr	r1, [pc, #164]	@ (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b04:	f7fd fecc 	bl	80018a0 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fd fec8 	bl	80018a0 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e03b      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b20      	ldr	r3, [pc, #128]	@ (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1ed      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4917      	ldr	r1, [pc, #92]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490f      	ldr	r1, [pc, #60]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b6e:	f000 f825 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490c      	ldr	r1, [pc, #48]	@ (8003bb0 <HAL_RCC_ClockConfig+0x26c>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <HAL_RCC_ClockConfig+0x270>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <HAL_RCC_ClockConfig+0x274>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd fca0 	bl	80014d8 <HAL_InitTick>
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40022000 	.word	0x40022000
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	04c4b400 	.word	0x04c4b400
 8003bb0:	08008e90 	.word	0x08008e90
 8003bb4:	200001d4 	.word	0x200001d4
 8003bb8:	200001d8 	.word	0x200001d8

08003bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d102      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bce:	4b2a      	ldr	r3, [pc, #168]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e047      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bd4:	4b27      	ldr	r3, [pc, #156]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003be0:	4b26      	ldr	r3, [pc, #152]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e03e      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003be6:	4b23      	ldr	r3, [pc, #140]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d136      	bne.n	8003c60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bf2:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	3301      	adds	r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c10:	4a1a      	ldr	r2, [pc, #104]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	4a16      	ldr	r2, [pc, #88]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1a:	68d2      	ldr	r2, [r2, #12]
 8003c1c:	0a12      	lsrs	r2, r2, #8
 8003c1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
      break;
 8003c28:	e00c      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c2a:	4a13      	ldr	r2, [pc, #76]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	4a10      	ldr	r2, [pc, #64]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c34:	68d2      	ldr	r2, [r2, #12]
 8003c36:	0a12      	lsrs	r2, r2, #8
 8003c38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c3c:	fb02 f303 	mul.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]
      break;
 8003c42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c44:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	0e5b      	lsrs	r3, r3, #25
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e001      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c64:	693b      	ldr	r3, [r7, #16]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	016e3600 	.word	0x016e3600

08003c80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c84:	4b03      	ldr	r3, [pc, #12]	@ (8003c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	200001d4 	.word	0x200001d4

08003c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c9c:	f7ff fff0 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4904      	ldr	r1, [pc, #16]	@ (8003cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	08008ea0 	.word	0x08008ea0

08003cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cc8:	f7ff ffda 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0adb      	lsrs	r3, r3, #11
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4904      	ldr	r1, [pc, #16]	@ (8003cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	08008ea0 	.word	0x08008ea0

08003cf0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	220f      	movs	r2, #15
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d00:	4b12      	ldr	r3, [pc, #72]	@ (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0203 	and.w	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d18:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d24:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d32:	4b07      	ldr	r3, [pc, #28]	@ (8003d50 <HAL_RCC_GetClockConfig+0x60>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40022000 	.word	0x40022000

08003d54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d10c      	bne.n	8003d92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d78:	4a17      	ldr	r2, [pc, #92]	@ (8003dd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	4a14      	ldr	r2, [pc, #80]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d82:	68d2      	ldr	r2, [r2, #12]
 8003d84:	0a12      	lsrs	r2, r2, #8
 8003d86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	617b      	str	r3, [r7, #20]
    break;
 8003d90:	e00c      	b.n	8003dac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d92:	4a12      	ldr	r2, [pc, #72]	@ (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	0a12      	lsrs	r2, r2, #8
 8003da0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003da4:	fb02 f303 	mul.w	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
    break;
 8003daa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dac:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0e5b      	lsrs	r3, r3, #25
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dc6:	687b      	ldr	r3, [r7, #4]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	016e3600 	.word	0x016e3600
 8003ddc:	00f42400 	.word	0x00f42400

08003de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de8:	2300      	movs	r3, #0
 8003dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dec:	2300      	movs	r3, #0
 8003dee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8098 	beq.w	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b43      	ldr	r3, [pc, #268]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4b40      	ldr	r3, [pc, #256]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e12:	4a3f      	ldr	r2, [pc, #252]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a39      	ldr	r2, [pc, #228]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e36:	f7fd fd33 	bl	80018a0 <HAL_GetTick>
 8003e3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3c:	e009      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fd fd2f 	bl	80018a0 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d902      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	74fb      	strb	r3, [r7, #19]
        break;
 8003e50:	e005      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e52:	4b30      	ldr	r3, [pc, #192]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0ef      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d159      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e64:	4b2a      	ldr	r3, [pc, #168]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01e      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d019      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e80:	4b23      	ldr	r3, [pc, #140]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e8c:	4b20      	ldr	r3, [pc, #128]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e92:	4a1f      	ldr	r2, [pc, #124]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eac:	4a18      	ldr	r2, [pc, #96]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fd fcef 	bl	80018a0 <HAL_GetTick>
 8003ec2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec4:	e00b      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fceb 	bl	80018a0 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d902      	bls.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	74fb      	strb	r3, [r7, #19]
            break;
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ede:	4b0c      	ldr	r3, [pc, #48]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ec      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef2:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f00:	4903      	ldr	r1, [pc, #12]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f08:	e008      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	74bb      	strb	r3, [r7, #18]
 8003f0e:	e005      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1c:	7c7b      	ldrb	r3, [r7, #17]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4ba7      	ldr	r3, [pc, #668]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	4aa6      	ldr	r2, [pc, #664]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f3a:	4ba1      	ldr	r3, [pc, #644]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	f023 0203 	bic.w	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	499d      	ldr	r1, [pc, #628]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f5c:	4b98      	ldr	r3, [pc, #608]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	f023 020c 	bic.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4995      	ldr	r1, [pc, #596]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f7e:	4b90      	ldr	r3, [pc, #576]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	498c      	ldr	r1, [pc, #560]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fa0:	4b87      	ldr	r3, [pc, #540]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	4984      	ldr	r1, [pc, #528]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	497b      	ldr	r1, [pc, #492]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fe4:	4b76      	ldr	r3, [pc, #472]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4973      	ldr	r1, [pc, #460]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004006:	4b6e      	ldr	r3, [pc, #440]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	496a      	ldr	r1, [pc, #424]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004028:	4b65      	ldr	r3, [pc, #404]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4962      	ldr	r1, [pc, #392]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800404a:	4b5d      	ldr	r3, [pc, #372]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004050:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	4959      	ldr	r1, [pc, #356]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800406c:	4b54      	ldr	r3, [pc, #336]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004072:	f023 0203 	bic.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407a:	4951      	ldr	r1, [pc, #324]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800408e:	4b4c      	ldr	r3, [pc, #304]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004094:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	4948      	ldr	r1, [pc, #288]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040b0:	4b43      	ldr	r3, [pc, #268]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	4940      	ldr	r1, [pc, #256]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d0:	4b3b      	ldr	r3, [pc, #236]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a3a      	ldr	r2, [pc, #232]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040da:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040e8:	4b35      	ldr	r3, [pc, #212]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f6:	4932      	ldr	r1, [pc, #200]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b2d      	ldr	r3, [pc, #180]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a2c      	ldr	r2, [pc, #176]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004112:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d015      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004120:	4b27      	ldr	r3, [pc, #156]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004126:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412e:	4924      	ldr	r1, [pc, #144]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800413e:	d105      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b1f      	ldr	r3, [pc, #124]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a1e      	ldr	r2, [pc, #120]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004166:	4916      	ldr	r1, [pc, #88]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004176:	d105      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a10      	ldr	r2, [pc, #64]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d019      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004190:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004196:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	4908      	ldr	r1, [pc, #32]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041ae:	d109      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b0:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4a02      	ldr	r2, [pc, #8]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ba:	60d3      	str	r3, [r2, #12]
 80041bc:	e002      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041d0:	4b29      	ldr	r3, [pc, #164]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	4926      	ldr	r1, [pc, #152]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041ee:	d105      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041f0:	4b21      	ldr	r3, [pc, #132]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4a20      	ldr	r2, [pc, #128]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d015      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004208:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004216:	4918      	ldr	r1, [pc, #96]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004226:	d105      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004228:	4b13      	ldr	r3, [pc, #76]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004232:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d015      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004240:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004246:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424e:	490a      	ldr	r1, [pc, #40]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800425e:	d105      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a04      	ldr	r2, [pc, #16]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800426a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800426c:	7cbb      	ldrb	r3, [r7, #18]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e049      	b.n	8004322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f841 	bl	800432a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f000 fb9a 	bl	80049f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d001      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e054      	b.n	8004402 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a26      	ldr	r2, [pc, #152]	@ (8004410 <HAL_TIM_Base_Start_IT+0xd0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d022      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x80>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004382:	d01d      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x80>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a22      	ldr	r2, [pc, #136]	@ (8004414 <HAL_TIM_Base_Start_IT+0xd4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d018      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x80>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a21      	ldr	r2, [pc, #132]	@ (8004418 <HAL_TIM_Base_Start_IT+0xd8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d013      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x80>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <HAL_TIM_Base_Start_IT+0xdc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00e      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x80>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004420 <HAL_TIM_Base_Start_IT+0xe0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d009      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x80>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004424 <HAL_TIM_Base_Start_IT+0xe4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x80>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004428 <HAL_TIM_Base_Start_IT+0xe8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d115      	bne.n	80043ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	4b19      	ldr	r3, [pc, #100]	@ (800442c <HAL_TIM_Base_Start_IT+0xec>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d015      	beq.n	80043fe <HAL_TIM_Base_Start_IT+0xbe>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d8:	d011      	beq.n	80043fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	e008      	b.n	80043fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e000      	b.n	8004400 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40013400 	.word	0x40013400
 8004424:	40014000 	.word	0x40014000
 8004428:	40015000 	.word	0x40015000
 800442c:	00010007 	.word	0x00010007

08004430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e049      	b.n	80044d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc feb4 	bl	80011c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f000 fac0 	bl	80049f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01b      	beq.n	8004542 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f06f 0202 	mvn.w	r2, #2
 8004512:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa45 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 800452e:	e005      	b.n	800453c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fa37 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa48 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01b      	beq.n	800458e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f06f 0204 	mvn.w	r2, #4
 800455e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fa1f 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 800457a:	e005      	b.n	8004588 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fa11 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa22 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d020      	beq.n	80045da <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01b      	beq.n	80045da <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f06f 0208 	mvn.w	r2, #8
 80045aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2204      	movs	r2, #4
 80045b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f9f9 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 80045c6:	e005      	b.n	80045d4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f9eb 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f9fc 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d020      	beq.n	8004626 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01b      	beq.n	8004626 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f06f 0210 	mvn.w	r2, #16
 80045f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2208      	movs	r2, #8
 80045fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f9d3 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 8004612:	e005      	b.n	8004620 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f9c5 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f9d6 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f06f 0201 	mvn.w	r2, #1
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fc fc87 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004650:	2b00      	cmp	r3, #0
 8004652:	d104      	bne.n	800465e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fff4 	bl	8005660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 ffec 	bl	8005674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f990 	bl	80049e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0220 	mvn.w	r2, #32
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 ffb4 	bl	800564c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 ffc0 	bl	8005688 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 ffb8 	bl	800569c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 ffb0 	bl	80056b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 ffa8 	bl	80056c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004796:	2302      	movs	r3, #2
 8004798:	e0ff      	b.n	800499a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b14      	cmp	r3, #20
 80047a6:	f200 80f0 	bhi.w	800498a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047aa:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	08004805 	.word	0x08004805
 80047b4:	0800498b 	.word	0x0800498b
 80047b8:	0800498b 	.word	0x0800498b
 80047bc:	0800498b 	.word	0x0800498b
 80047c0:	08004845 	.word	0x08004845
 80047c4:	0800498b 	.word	0x0800498b
 80047c8:	0800498b 	.word	0x0800498b
 80047cc:	0800498b 	.word	0x0800498b
 80047d0:	08004887 	.word	0x08004887
 80047d4:	0800498b 	.word	0x0800498b
 80047d8:	0800498b 	.word	0x0800498b
 80047dc:	0800498b 	.word	0x0800498b
 80047e0:	080048c7 	.word	0x080048c7
 80047e4:	0800498b 	.word	0x0800498b
 80047e8:	0800498b 	.word	0x0800498b
 80047ec:	0800498b 	.word	0x0800498b
 80047f0:	08004909 	.word	0x08004909
 80047f4:	0800498b 	.word	0x0800498b
 80047f8:	0800498b 	.word	0x0800498b
 80047fc:	0800498b 	.word	0x0800498b
 8004800:	08004949 	.word	0x08004949
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f9a6 	bl	8004b5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0208 	orr.w	r2, r2, #8
 800481e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0204 	bic.w	r2, r2, #4
 800482e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6999      	ldr	r1, [r3, #24]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	619a      	str	r2, [r3, #24]
      break;
 8004842:	e0a5      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fa20 	bl	8004c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800485e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800486e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6999      	ldr	r1, [r3, #24]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	021a      	lsls	r2, r3, #8
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	619a      	str	r2, [r3, #24]
      break;
 8004884:	e084      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fa93 	bl	8004db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0208 	orr.w	r2, r2, #8
 80048a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0204 	bic.w	r2, r2, #4
 80048b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69d9      	ldr	r1, [r3, #28]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	61da      	str	r2, [r3, #28]
      break;
 80048c4:	e064      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fb05 	bl	8004edc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69d9      	ldr	r1, [r3, #28]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	021a      	lsls	r2, r3, #8
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	61da      	str	r2, [r3, #28]
      break;
 8004906:	e043      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fb78 	bl	8005004 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0208 	orr.w	r2, r2, #8
 8004922:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0204 	bic.w	r2, r2, #4
 8004932:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004946:	e023      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fbc2 	bl	80050d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004962:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004972:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	021a      	lsls	r2, r3, #8
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004988:	e002      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
      break;
 800498e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004998:	7dfb      	ldrb	r3, [r7, #23]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop

080049a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a4c      	ldr	r2, [pc, #304]	@ (8004b38 <TIM_Base_SetConfig+0x144>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d017      	beq.n	8004a3c <TIM_Base_SetConfig+0x48>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a12:	d013      	beq.n	8004a3c <TIM_Base_SetConfig+0x48>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a49      	ldr	r2, [pc, #292]	@ (8004b3c <TIM_Base_SetConfig+0x148>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00f      	beq.n	8004a3c <TIM_Base_SetConfig+0x48>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a48      	ldr	r2, [pc, #288]	@ (8004b40 <TIM_Base_SetConfig+0x14c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <TIM_Base_SetConfig+0x48>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a47      	ldr	r2, [pc, #284]	@ (8004b44 <TIM_Base_SetConfig+0x150>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d007      	beq.n	8004a3c <TIM_Base_SetConfig+0x48>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a46      	ldr	r2, [pc, #280]	@ (8004b48 <TIM_Base_SetConfig+0x154>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_Base_SetConfig+0x48>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a45      	ldr	r2, [pc, #276]	@ (8004b4c <TIM_Base_SetConfig+0x158>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d108      	bne.n	8004a4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a39      	ldr	r2, [pc, #228]	@ (8004b38 <TIM_Base_SetConfig+0x144>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d023      	beq.n	8004a9e <TIM_Base_SetConfig+0xaa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5c:	d01f      	beq.n	8004a9e <TIM_Base_SetConfig+0xaa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a36      	ldr	r2, [pc, #216]	@ (8004b3c <TIM_Base_SetConfig+0x148>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01b      	beq.n	8004a9e <TIM_Base_SetConfig+0xaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a35      	ldr	r2, [pc, #212]	@ (8004b40 <TIM_Base_SetConfig+0x14c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d017      	beq.n	8004a9e <TIM_Base_SetConfig+0xaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a34      	ldr	r2, [pc, #208]	@ (8004b44 <TIM_Base_SetConfig+0x150>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <TIM_Base_SetConfig+0xaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a33      	ldr	r2, [pc, #204]	@ (8004b48 <TIM_Base_SetConfig+0x154>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00f      	beq.n	8004a9e <TIM_Base_SetConfig+0xaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a33      	ldr	r2, [pc, #204]	@ (8004b50 <TIM_Base_SetConfig+0x15c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_Base_SetConfig+0xaa>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a32      	ldr	r2, [pc, #200]	@ (8004b54 <TIM_Base_SetConfig+0x160>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_Base_SetConfig+0xaa>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a31      	ldr	r2, [pc, #196]	@ (8004b58 <TIM_Base_SetConfig+0x164>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_Base_SetConfig+0xaa>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2c      	ldr	r2, [pc, #176]	@ (8004b4c <TIM_Base_SetConfig+0x158>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d108      	bne.n	8004ab0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a18      	ldr	r2, [pc, #96]	@ (8004b38 <TIM_Base_SetConfig+0x144>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <TIM_Base_SetConfig+0x110>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a1a      	ldr	r2, [pc, #104]	@ (8004b48 <TIM_Base_SetConfig+0x154>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00f      	beq.n	8004b04 <TIM_Base_SetConfig+0x110>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b50 <TIM_Base_SetConfig+0x15c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00b      	beq.n	8004b04 <TIM_Base_SetConfig+0x110>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a19      	ldr	r2, [pc, #100]	@ (8004b54 <TIM_Base_SetConfig+0x160>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <TIM_Base_SetConfig+0x110>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a18      	ldr	r2, [pc, #96]	@ (8004b58 <TIM_Base_SetConfig+0x164>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_Base_SetConfig+0x110>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a13      	ldr	r2, [pc, #76]	@ (8004b4c <TIM_Base_SetConfig+0x158>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d103      	bne.n	8004b0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f023 0201 	bic.w	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	611a      	str	r2, [r3, #16]
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40013400 	.word	0x40013400
 8004b4c:	40015000 	.word	0x40015000
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800

08004b5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f023 0201 	bic.w	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0302 	bic.w	r3, r3, #2
 8004ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a30      	ldr	r2, [pc, #192]	@ (8004c78 <TIM_OC1_SetConfig+0x11c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d013      	beq.n	8004be4 <TIM_OC1_SetConfig+0x88>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8004c7c <TIM_OC1_SetConfig+0x120>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00f      	beq.n	8004be4 <TIM_OC1_SetConfig+0x88>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8004c80 <TIM_OC1_SetConfig+0x124>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00b      	beq.n	8004be4 <TIM_OC1_SetConfig+0x88>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a2d      	ldr	r2, [pc, #180]	@ (8004c84 <TIM_OC1_SetConfig+0x128>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_OC1_SetConfig+0x88>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c88 <TIM_OC1_SetConfig+0x12c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC1_SetConfig+0x88>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a2b      	ldr	r2, [pc, #172]	@ (8004c8c <TIM_OC1_SetConfig+0x130>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10c      	bne.n	8004bfe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0308 	bic.w	r3, r3, #8
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a1d      	ldr	r2, [pc, #116]	@ (8004c78 <TIM_OC1_SetConfig+0x11c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <TIM_OC1_SetConfig+0xd2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a1c      	ldr	r2, [pc, #112]	@ (8004c7c <TIM_OC1_SetConfig+0x120>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00f      	beq.n	8004c2e <TIM_OC1_SetConfig+0xd2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1b      	ldr	r2, [pc, #108]	@ (8004c80 <TIM_OC1_SetConfig+0x124>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00b      	beq.n	8004c2e <TIM_OC1_SetConfig+0xd2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1a      	ldr	r2, [pc, #104]	@ (8004c84 <TIM_OC1_SetConfig+0x128>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d007      	beq.n	8004c2e <TIM_OC1_SetConfig+0xd2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a19      	ldr	r2, [pc, #100]	@ (8004c88 <TIM_OC1_SetConfig+0x12c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_OC1_SetConfig+0xd2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <TIM_OC1_SetConfig+0x130>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d111      	bne.n	8004c52 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40013400 	.word	0x40013400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40014400 	.word	0x40014400
 8004c88:	40014800 	.word	0x40014800
 8004c8c:	40015000 	.word	0x40015000

08004c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f023 0210 	bic.w	r2, r3, #16
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 0320 	bic.w	r3, r3, #32
 8004cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a2c      	ldr	r2, [pc, #176]	@ (8004da0 <TIM_OC2_SetConfig+0x110>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d007      	beq.n	8004d04 <TIM_OC2_SetConfig+0x74>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8004da4 <TIM_OC2_SetConfig+0x114>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_OC2_SetConfig+0x74>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8004da8 <TIM_OC2_SetConfig+0x118>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10d      	bne.n	8004d20 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a1f      	ldr	r2, [pc, #124]	@ (8004da0 <TIM_OC2_SetConfig+0x110>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <TIM_OC2_SetConfig+0xc0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004da4 <TIM_OC2_SetConfig+0x114>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00f      	beq.n	8004d50 <TIM_OC2_SetConfig+0xc0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1e      	ldr	r2, [pc, #120]	@ (8004dac <TIM_OC2_SetConfig+0x11c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <TIM_OC2_SetConfig+0xc0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004db0 <TIM_OC2_SetConfig+0x120>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d007      	beq.n	8004d50 <TIM_OC2_SetConfig+0xc0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a1c      	ldr	r2, [pc, #112]	@ (8004db4 <TIM_OC2_SetConfig+0x124>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_OC2_SetConfig+0xc0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	@ (8004da8 <TIM_OC2_SetConfig+0x118>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d113      	bne.n	8004d78 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40013400 	.word	0x40013400
 8004da8:	40015000 	.word	0x40015000
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40014400 	.word	0x40014400
 8004db4:	40014800 	.word	0x40014800

08004db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0303 	bic.w	r3, r3, #3
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec4 <TIM_OC3_SetConfig+0x10c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_OC3_SetConfig+0x72>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec8 <TIM_OC3_SetConfig+0x110>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_OC3_SetConfig+0x72>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a29      	ldr	r2, [pc, #164]	@ (8004ecc <TIM_OC3_SetConfig+0x114>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10d      	bne.n	8004e46 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec4 <TIM_OC3_SetConfig+0x10c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d013      	beq.n	8004e76 <TIM_OC3_SetConfig+0xbe>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec8 <TIM_OC3_SetConfig+0x110>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00f      	beq.n	8004e76 <TIM_OC3_SetConfig+0xbe>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed0 <TIM_OC3_SetConfig+0x118>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <TIM_OC3_SetConfig+0xbe>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed4 <TIM_OC3_SetConfig+0x11c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <TIM_OC3_SetConfig+0xbe>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed8 <TIM_OC3_SetConfig+0x120>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_OC3_SetConfig+0xbe>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a16      	ldr	r2, [pc, #88]	@ (8004ecc <TIM_OC3_SetConfig+0x114>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d113      	bne.n	8004e9e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40015000 	.word	0x40015000
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40014400 	.word	0x40014400
 8004ed8:	40014800 	.word	0x40014800

08004edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	031b      	lsls	r3, r3, #12
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004fec <TIM_OC4_SetConfig+0x110>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d007      	beq.n	8004f50 <TIM_OC4_SetConfig+0x74>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff0 <TIM_OC4_SetConfig+0x114>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_OC4_SetConfig+0x74>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff4 <TIM_OC4_SetConfig+0x118>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10d      	bne.n	8004f6c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	031b      	lsls	r3, r3, #12
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fec <TIM_OC4_SetConfig+0x110>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d013      	beq.n	8004f9c <TIM_OC4_SetConfig+0xc0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff0 <TIM_OC4_SetConfig+0x114>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00f      	beq.n	8004f9c <TIM_OC4_SetConfig+0xc0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff8 <TIM_OC4_SetConfig+0x11c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00b      	beq.n	8004f9c <TIM_OC4_SetConfig+0xc0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a1d      	ldr	r2, [pc, #116]	@ (8004ffc <TIM_OC4_SetConfig+0x120>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d007      	beq.n	8004f9c <TIM_OC4_SetConfig+0xc0>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005000 <TIM_OC4_SetConfig+0x124>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_OC4_SetConfig+0xc0>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a17      	ldr	r2, [pc, #92]	@ (8004ff4 <TIM_OC4_SetConfig+0x118>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d113      	bne.n	8004fc4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fa2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004faa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	019b      	lsls	r3, r3, #6
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	019b      	lsls	r3, r3, #6
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40013400 	.word	0x40013400
 8004ff4:	40015000 	.word	0x40015000
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40014400 	.word	0x40014400
 8005000:	40014800 	.word	0x40014800

08005004 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a19      	ldr	r2, [pc, #100]	@ (80050c0 <TIM_OC5_SetConfig+0xbc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <TIM_OC5_SetConfig+0x82>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a18      	ldr	r2, [pc, #96]	@ (80050c4 <TIM_OC5_SetConfig+0xc0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00f      	beq.n	8005086 <TIM_OC5_SetConfig+0x82>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a17      	ldr	r2, [pc, #92]	@ (80050c8 <TIM_OC5_SetConfig+0xc4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00b      	beq.n	8005086 <TIM_OC5_SetConfig+0x82>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a16      	ldr	r2, [pc, #88]	@ (80050cc <TIM_OC5_SetConfig+0xc8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d007      	beq.n	8005086 <TIM_OC5_SetConfig+0x82>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a15      	ldr	r2, [pc, #84]	@ (80050d0 <TIM_OC5_SetConfig+0xcc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <TIM_OC5_SetConfig+0x82>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a14      	ldr	r2, [pc, #80]	@ (80050d4 <TIM_OC5_SetConfig+0xd0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d109      	bne.n	800509a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800508c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40013400 	.word	0x40013400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40014400 	.word	0x40014400
 80050d0:	40014800 	.word	0x40014800
 80050d4:	40015000 	.word	0x40015000

080050d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800510a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800511e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	051b      	lsls	r3, r3, #20
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a1a      	ldr	r2, [pc, #104]	@ (8005198 <TIM_OC6_SetConfig+0xc0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d013      	beq.n	800515c <TIM_OC6_SetConfig+0x84>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a19      	ldr	r2, [pc, #100]	@ (800519c <TIM_OC6_SetConfig+0xc4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00f      	beq.n	800515c <TIM_OC6_SetConfig+0x84>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <TIM_OC6_SetConfig+0xc8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00b      	beq.n	800515c <TIM_OC6_SetConfig+0x84>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a17      	ldr	r2, [pc, #92]	@ (80051a4 <TIM_OC6_SetConfig+0xcc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d007      	beq.n	800515c <TIM_OC6_SetConfig+0x84>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a16      	ldr	r2, [pc, #88]	@ (80051a8 <TIM_OC6_SetConfig+0xd0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_OC6_SetConfig+0x84>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a15      	ldr	r2, [pc, #84]	@ (80051ac <TIM_OC6_SetConfig+0xd4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d109      	bne.n	8005170 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	029b      	lsls	r3, r3, #10
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40013400 	.word	0x40013400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800
 80051ac:	40015000 	.word	0x40015000

080051b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f023 0201 	bic.w	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a28      	ldr	r2, [pc, #160]	@ (800527c <TIM_TI1_SetConfig+0xcc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01b      	beq.n	8005216 <TIM_TI1_SetConfig+0x66>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e4:	d017      	beq.n	8005216 <TIM_TI1_SetConfig+0x66>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4a25      	ldr	r2, [pc, #148]	@ (8005280 <TIM_TI1_SetConfig+0xd0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <TIM_TI1_SetConfig+0x66>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a24      	ldr	r2, [pc, #144]	@ (8005284 <TIM_TI1_SetConfig+0xd4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00f      	beq.n	8005216 <TIM_TI1_SetConfig+0x66>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a23      	ldr	r2, [pc, #140]	@ (8005288 <TIM_TI1_SetConfig+0xd8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00b      	beq.n	8005216 <TIM_TI1_SetConfig+0x66>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a22      	ldr	r2, [pc, #136]	@ (800528c <TIM_TI1_SetConfig+0xdc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d007      	beq.n	8005216 <TIM_TI1_SetConfig+0x66>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4a21      	ldr	r2, [pc, #132]	@ (8005290 <TIM_TI1_SetConfig+0xe0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d003      	beq.n	8005216 <TIM_TI1_SetConfig+0x66>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4a20      	ldr	r2, [pc, #128]	@ (8005294 <TIM_TI1_SetConfig+0xe4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d101      	bne.n	800521a <TIM_TI1_SetConfig+0x6a>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <TIM_TI1_SetConfig+0x6c>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	e003      	b.n	800523a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	b2db      	uxtb	r3, r3
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f023 030a 	bic.w	r3, r3, #10
 8005254:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f003 030a 	and.w	r3, r3, #10
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40013400 	.word	0x40013400
 8005290:	40014000 	.word	0x40014000
 8005294:	40015000 	.word	0x40015000

08005298 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	@ 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0a0      	b.n	80053ee <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fb ff9f 	bl	8001204 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7ff fb8b 	bl	80049f4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2203      	movs	r2, #3
 80052ec:	f7ff ff60 	bl	80051b0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 020c 	bic.w	r2, r2, #12
 80052fe:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6999      	ldr	r1, [r3, #24]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005320:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005334:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005344:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005354:	f023 0307 	bic.w	r3, r3, #7
 8005358:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0204 	orr.w	r2, r2, #4
 8005368:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800536e:	2300      	movs	r3, #0
 8005370:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005372:	2370      	movs	r3, #112	@ 0x70
 8005374:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f107 020c 	add.w	r2, r7, #12
 8005390:	4611      	mov	r1, r2
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fc7c 	bl	8004c90 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80053a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053aa:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80053ba:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3728      	adds	r7, #40	@ 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800540c:	2302      	movs	r3, #2
 800540e:	e074      	b.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a34      	ldr	r2, [pc, #208]	@ (8005508 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a33      	ldr	r2, [pc, #204]	@ (800550c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a31      	ldr	r2, [pc, #196]	@ (8005510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d108      	bne.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005454:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800546a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a21      	ldr	r2, [pc, #132]	@ (8005508 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005490:	d01d      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1f      	ldr	r2, [pc, #124]	@ (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005518 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	@ (800551c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a15      	ldr	r2, [pc, #84]	@ (800550c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a18      	ldr	r2, [pc, #96]	@ (8005520 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a11      	ldr	r2, [pc, #68]	@ (8005510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d10c      	bne.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40015000 	.word	0x40015000
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40014000 	.word	0x40014000

08005524 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800553c:	2302      	movs	r3, #2
 800553e:	e078      	b.n	8005632 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	041b      	lsls	r3, r3, #16
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005640 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005644 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a19      	ldr	r2, [pc, #100]	@ (8005648 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d11c      	bne.n	8005620 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	051b      	lsls	r3, r3, #20
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40012c00 	.word	0x40012c00
 8005644:	40013400 	.word	0x40013400
 8005648:	40015000 	.word	0x40015000

0800564c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e042      	b.n	8005770 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7fb fe4b 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2224      	movs	r2, #36	@ 0x24
 8005706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 ff60 	bl	80065e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fc61 	bl	8005ff0 <UART_SetConfig>
 800572e:	4603      	mov	r3, r0
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e01b      	b.n	8005770 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 ffdf 	bl	800672c <UART_CheckIdleState>
 800576e:	4603      	mov	r3, r0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	@ 0x28
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578e:	2b20      	cmp	r3, #32
 8005790:	d17b      	bne.n	800588a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_Transmit+0x26>
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e074      	b.n	800588c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2221      	movs	r2, #33	@ 0x21
 80057ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057b2:	f7fc f875 	bl	80018a0 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	88fa      	ldrh	r2, [r7, #6]
 80057c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d0:	d108      	bne.n	80057e4 <HAL_UART_Transmit+0x6c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e003      	b.n	80057ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057ec:	e030      	b.n	8005850 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2180      	movs	r1, #128	@ 0x80
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f001 f841 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e03d      	b.n	800588c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10b      	bne.n	800582e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005824:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	3302      	adds	r3, #2
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e007      	b.n	800583e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	781a      	ldrb	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	3301      	adds	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1c8      	bne.n	80057ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2200      	movs	r2, #0
 8005864:	2140      	movs	r1, #64	@ 0x40
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f001 f80a 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e006      	b.n	800588c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
  }
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	@ 0x28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d137      	bne.n	800591c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_UART_Receive_IT+0x24>
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e030      	b.n	800591e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a18      	ldr	r2, [pc, #96]	@ (8005928 <HAL_UART_Receive_IT+0x94>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d01f      	beq.n	800590c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	613b      	str	r3, [r7, #16]
   return(result);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	623b      	str	r3, [r7, #32]
 80058fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	69f9      	ldr	r1, [r7, #28]
 80058fe:	6a3a      	ldr	r2, [r7, #32]
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	61bb      	str	r3, [r7, #24]
   return(result);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e6      	bne.n	80058da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	461a      	mov	r2, r3
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f001 f822 	bl	800695c <UART_Start_Receive_IT>
 8005918:	4603      	mov	r3, r0
 800591a:	e000      	b.n	800591e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800591c:	2302      	movs	r3, #2
  }
}
 800591e:	4618      	mov	r0, r3
 8005920:	3728      	adds	r7, #40	@ 0x28
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40008000 	.word	0x40008000

0800592c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b0ba      	sub	sp, #232	@ 0xe8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005952:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005956:	f640 030f 	movw	r3, #2063	@ 0x80f
 800595a:	4013      	ands	r3, r2
 800595c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d11b      	bne.n	80059a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d015      	beq.n	80059a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d105      	bne.n	800598c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d009      	beq.n	80059a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8300 	beq.w	8005f96 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	4798      	blx	r3
      }
      return;
 800599e:	e2fa      	b.n	8005f96 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8123 	beq.w	8005bf0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80059aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80059ae:	4b8d      	ldr	r3, [pc, #564]	@ (8005be4 <HAL_UART_IRQHandler+0x2b8>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80059b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80059ba:	4b8b      	ldr	r3, [pc, #556]	@ (8005be8 <HAL_UART_IRQHandler+0x2bc>)
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8116 	beq.w	8005bf0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d011      	beq.n	80059f4 <HAL_UART_IRQHandler+0xc8>
 80059d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2201      	movs	r2, #1
 80059e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ea:	f043 0201 	orr.w	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d011      	beq.n	8005a24 <HAL_UART_IRQHandler+0xf8>
 8005a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2202      	movs	r2, #2
 8005a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d011      	beq.n	8005a54 <HAL_UART_IRQHandler+0x128>
 8005a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2204      	movs	r2, #4
 8005a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4a:	f043 0202 	orr.w	r2, r3, #2
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d017      	beq.n	8005a90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d105      	bne.n	8005a78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a70:	4b5c      	ldr	r3, [pc, #368]	@ (8005be4 <HAL_UART_IRQHandler+0x2b8>)
 8005a72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a86:	f043 0208 	orr.w	r2, r3, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d012      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x196>
 8005a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00c      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab8:	f043 0220 	orr.w	r2, r3, #32
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8266 	beq.w	8005f9a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d013      	beq.n	8005b02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d105      	bne.n	8005af2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b16:	2b40      	cmp	r3, #64	@ 0x40
 8005b18:	d005      	beq.n	8005b26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d054      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 f83a 	bl	8006ba0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b36:	2b40      	cmp	r3, #64	@ 0x40
 8005b38:	d146      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3308      	adds	r3, #8
 8005b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1d9      	bne.n	8005b3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d017      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b96:	4a15      	ldr	r2, [pc, #84]	@ (8005bec <HAL_UART_IRQHandler+0x2c0>)
 8005b98:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fd f8e4 	bl	8002d6e <HAL_DMA_Abort_IT>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d019      	beq.n	8005be0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005bba:	4610      	mov	r0, r2
 8005bbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbe:	e00f      	b.n	8005be0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f9ff 	bl	8005fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc6:	e00b      	b.n	8005be0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f9fb 	bl	8005fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bce:	e007      	b.n	8005be0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f9f7 	bl	8005fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005bde:	e1dc      	b.n	8005f9a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be0:	bf00      	nop
    return;
 8005be2:	e1da      	b.n	8005f9a <HAL_UART_IRQHandler+0x66e>
 8005be4:	10000001 	.word	0x10000001
 8005be8:	04000120 	.word	0x04000120
 8005bec:	08006c6d 	.word	0x08006c6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	f040 8170 	bne.w	8005eda <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8169 	beq.w	8005eda <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8162 	beq.w	8005eda <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2210      	movs	r2, #16
 8005c1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b40      	cmp	r3, #64	@ 0x40
 8005c2a:	f040 80d8 	bne.w	8005dde <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 80af 	beq.w	8005da4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c50:	429a      	cmp	r2, r3
 8005c52:	f080 80a7 	bcs.w	8005da4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f040 8087 	bne.w	8005d82 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ca2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005caa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1da      	bne.n	8005c74 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005cce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cd0:	f023 0301 	bic.w	r3, r3, #1
 8005cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ce2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ce6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e1      	bne.n	8005cbe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e3      	bne.n	8005cfa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d50:	f023 0310 	bic.w	r3, r3, #16
 8005d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e4      	bne.n	8005d40 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fc ff9d 	bl	8002cbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2202      	movs	r2, #2
 8005d86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f91b 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005da2:	e0fc      	b.n	8005f9e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dae:	429a      	cmp	r2, r3
 8005db0:	f040 80f5 	bne.w	8005f9e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	f040 80eb 	bne.w	8005f9e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f8fe 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
      return;
 8005ddc:	e0df      	b.n	8005f9e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80d1 	beq.w	8005fa2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005e00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80cc 	beq.w	8005fa2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e4      	bne.n	8005e0a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3308      	adds	r3, #8
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	623b      	str	r3, [r7, #32]
   return(result);
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3308      	adds	r3, #8
 8005e64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e68:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e1      	bne.n	8005e40 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f023 0310 	bic.w	r3, r3, #16
 8005ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	69b9      	ldr	r1, [r7, #24]
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e4      	bne.n	8005e90 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f880 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ed8:	e063      	b.n	8005fa2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00e      	beq.n	8005f04 <HAL_UART_IRQHandler+0x5d8>
 8005ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d008      	beq.n	8005f04 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005efa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 fc17 	bl	8007730 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f02:	e051      	b.n	8005fa8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d014      	beq.n	8005f3a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d03a      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
    }
    return;
 8005f38:	e035      	b.n	8005fa6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <HAL_UART_IRQHandler+0x62e>
 8005f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fea0 	bl	8006c98 <UART_EndTransmit_IT>
    return;
 8005f58:	e026      	b.n	8005fa8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <HAL_UART_IRQHandler+0x64e>
 8005f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 fbf0 	bl	8007758 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f78:	e016      	b.n	8005fa8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d010      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x67c>
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da0c      	bge.n	8005fa8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 fbd8 	bl	8007744 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f94:	e008      	b.n	8005fa8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f96:	bf00      	nop
 8005f98:	e006      	b.n	8005fa8 <HAL_UART_IRQHandler+0x67c>
    return;
 8005f9a:	bf00      	nop
 8005f9c:	e004      	b.n	8005fa8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <HAL_UART_IRQHandler+0x67c>
    return;
 8005fa6:	bf00      	nop
  }
}
 8005fa8:	37e8      	adds	r7, #232	@ 0xe8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop

08005fb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff4:	b08c      	sub	sp, #48	@ 0x30
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	431a      	orrs	r2, r3
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	431a      	orrs	r2, r3
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	4313      	orrs	r3, r2
 8006016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4baa      	ldr	r3, [pc, #680]	@ (80062c8 <UART_SetConfig+0x2d8>)
 8006020:	4013      	ands	r3, r2
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006028:	430b      	orrs	r3, r1
 800602a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a9f      	ldr	r2, [pc, #636]	@ (80062cc <UART_SetConfig+0x2dc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006058:	4313      	orrs	r3, r2
 800605a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006066:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006070:	430b      	orrs	r3, r1
 8006072:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607a:	f023 010f 	bic.w	r1, r3, #15
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a90      	ldr	r2, [pc, #576]	@ (80062d0 <UART_SetConfig+0x2e0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d125      	bne.n	80060e0 <UART_SetConfig+0xf0>
 8006094:	4b8f      	ldr	r3, [pc, #572]	@ (80062d4 <UART_SetConfig+0x2e4>)
 8006096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d81a      	bhi.n	80060d8 <UART_SetConfig+0xe8>
 80060a2:	a201      	add	r2, pc, #4	@ (adr r2, 80060a8 <UART_SetConfig+0xb8>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060b9 	.word	0x080060b9
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	080060d1 	.word	0x080060d1
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060be:	e116      	b.n	80062ee <UART_SetConfig+0x2fe>
 80060c0:	2302      	movs	r3, #2
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c6:	e112      	b.n	80062ee <UART_SetConfig+0x2fe>
 80060c8:	2304      	movs	r3, #4
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ce:	e10e      	b.n	80062ee <UART_SetConfig+0x2fe>
 80060d0:	2308      	movs	r3, #8
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d6:	e10a      	b.n	80062ee <UART_SetConfig+0x2fe>
 80060d8:	2310      	movs	r3, #16
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060de:	e106      	b.n	80062ee <UART_SetConfig+0x2fe>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a7c      	ldr	r2, [pc, #496]	@ (80062d8 <UART_SetConfig+0x2e8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d138      	bne.n	800615c <UART_SetConfig+0x16c>
 80060ea:	4b7a      	ldr	r3, [pc, #488]	@ (80062d4 <UART_SetConfig+0x2e4>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f0:	f003 030c 	and.w	r3, r3, #12
 80060f4:	2b0c      	cmp	r3, #12
 80060f6:	d82d      	bhi.n	8006154 <UART_SetConfig+0x164>
 80060f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006100 <UART_SetConfig+0x110>)
 80060fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fe:	bf00      	nop
 8006100:	08006135 	.word	0x08006135
 8006104:	08006155 	.word	0x08006155
 8006108:	08006155 	.word	0x08006155
 800610c:	08006155 	.word	0x08006155
 8006110:	08006145 	.word	0x08006145
 8006114:	08006155 	.word	0x08006155
 8006118:	08006155 	.word	0x08006155
 800611c:	08006155 	.word	0x08006155
 8006120:	0800613d 	.word	0x0800613d
 8006124:	08006155 	.word	0x08006155
 8006128:	08006155 	.word	0x08006155
 800612c:	08006155 	.word	0x08006155
 8006130:	0800614d 	.word	0x0800614d
 8006134:	2300      	movs	r3, #0
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613a:	e0d8      	b.n	80062ee <UART_SetConfig+0x2fe>
 800613c:	2302      	movs	r3, #2
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006142:	e0d4      	b.n	80062ee <UART_SetConfig+0x2fe>
 8006144:	2304      	movs	r3, #4
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800614a:	e0d0      	b.n	80062ee <UART_SetConfig+0x2fe>
 800614c:	2308      	movs	r3, #8
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006152:	e0cc      	b.n	80062ee <UART_SetConfig+0x2fe>
 8006154:	2310      	movs	r3, #16
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800615a:	e0c8      	b.n	80062ee <UART_SetConfig+0x2fe>
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a5e      	ldr	r2, [pc, #376]	@ (80062dc <UART_SetConfig+0x2ec>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d125      	bne.n	80061b2 <UART_SetConfig+0x1c2>
 8006166:	4b5b      	ldr	r3, [pc, #364]	@ (80062d4 <UART_SetConfig+0x2e4>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800616c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006170:	2b30      	cmp	r3, #48	@ 0x30
 8006172:	d016      	beq.n	80061a2 <UART_SetConfig+0x1b2>
 8006174:	2b30      	cmp	r3, #48	@ 0x30
 8006176:	d818      	bhi.n	80061aa <UART_SetConfig+0x1ba>
 8006178:	2b20      	cmp	r3, #32
 800617a:	d00a      	beq.n	8006192 <UART_SetConfig+0x1a2>
 800617c:	2b20      	cmp	r3, #32
 800617e:	d814      	bhi.n	80061aa <UART_SetConfig+0x1ba>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <UART_SetConfig+0x19a>
 8006184:	2b10      	cmp	r3, #16
 8006186:	d008      	beq.n	800619a <UART_SetConfig+0x1aa>
 8006188:	e00f      	b.n	80061aa <UART_SetConfig+0x1ba>
 800618a:	2300      	movs	r3, #0
 800618c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006190:	e0ad      	b.n	80062ee <UART_SetConfig+0x2fe>
 8006192:	2302      	movs	r3, #2
 8006194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006198:	e0a9      	b.n	80062ee <UART_SetConfig+0x2fe>
 800619a:	2304      	movs	r3, #4
 800619c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a0:	e0a5      	b.n	80062ee <UART_SetConfig+0x2fe>
 80061a2:	2308      	movs	r3, #8
 80061a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a8:	e0a1      	b.n	80062ee <UART_SetConfig+0x2fe>
 80061aa:	2310      	movs	r3, #16
 80061ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b0:	e09d      	b.n	80062ee <UART_SetConfig+0x2fe>
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a4a      	ldr	r2, [pc, #296]	@ (80062e0 <UART_SetConfig+0x2f0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d125      	bne.n	8006208 <UART_SetConfig+0x218>
 80061bc:	4b45      	ldr	r3, [pc, #276]	@ (80062d4 <UART_SetConfig+0x2e4>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80061c8:	d016      	beq.n	80061f8 <UART_SetConfig+0x208>
 80061ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80061cc:	d818      	bhi.n	8006200 <UART_SetConfig+0x210>
 80061ce:	2b80      	cmp	r3, #128	@ 0x80
 80061d0:	d00a      	beq.n	80061e8 <UART_SetConfig+0x1f8>
 80061d2:	2b80      	cmp	r3, #128	@ 0x80
 80061d4:	d814      	bhi.n	8006200 <UART_SetConfig+0x210>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <UART_SetConfig+0x1f0>
 80061da:	2b40      	cmp	r3, #64	@ 0x40
 80061dc:	d008      	beq.n	80061f0 <UART_SetConfig+0x200>
 80061de:	e00f      	b.n	8006200 <UART_SetConfig+0x210>
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e6:	e082      	b.n	80062ee <UART_SetConfig+0x2fe>
 80061e8:	2302      	movs	r3, #2
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ee:	e07e      	b.n	80062ee <UART_SetConfig+0x2fe>
 80061f0:	2304      	movs	r3, #4
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f6:	e07a      	b.n	80062ee <UART_SetConfig+0x2fe>
 80061f8:	2308      	movs	r3, #8
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fe:	e076      	b.n	80062ee <UART_SetConfig+0x2fe>
 8006200:	2310      	movs	r3, #16
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006206:	e072      	b.n	80062ee <UART_SetConfig+0x2fe>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a35      	ldr	r2, [pc, #212]	@ (80062e4 <UART_SetConfig+0x2f4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d12a      	bne.n	8006268 <UART_SetConfig+0x278>
 8006212:	4b30      	ldr	r3, [pc, #192]	@ (80062d4 <UART_SetConfig+0x2e4>)
 8006214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800621c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006220:	d01a      	beq.n	8006258 <UART_SetConfig+0x268>
 8006222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006226:	d81b      	bhi.n	8006260 <UART_SetConfig+0x270>
 8006228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800622c:	d00c      	beq.n	8006248 <UART_SetConfig+0x258>
 800622e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006232:	d815      	bhi.n	8006260 <UART_SetConfig+0x270>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <UART_SetConfig+0x250>
 8006238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800623c:	d008      	beq.n	8006250 <UART_SetConfig+0x260>
 800623e:	e00f      	b.n	8006260 <UART_SetConfig+0x270>
 8006240:	2300      	movs	r3, #0
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006246:	e052      	b.n	80062ee <UART_SetConfig+0x2fe>
 8006248:	2302      	movs	r3, #2
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624e:	e04e      	b.n	80062ee <UART_SetConfig+0x2fe>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006256:	e04a      	b.n	80062ee <UART_SetConfig+0x2fe>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625e:	e046      	b.n	80062ee <UART_SetConfig+0x2fe>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006266:	e042      	b.n	80062ee <UART_SetConfig+0x2fe>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a17      	ldr	r2, [pc, #92]	@ (80062cc <UART_SetConfig+0x2dc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d13a      	bne.n	80062e8 <UART_SetConfig+0x2f8>
 8006272:	4b18      	ldr	r3, [pc, #96]	@ (80062d4 <UART_SetConfig+0x2e4>)
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006278:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800627c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006280:	d01a      	beq.n	80062b8 <UART_SetConfig+0x2c8>
 8006282:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006286:	d81b      	bhi.n	80062c0 <UART_SetConfig+0x2d0>
 8006288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800628c:	d00c      	beq.n	80062a8 <UART_SetConfig+0x2b8>
 800628e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006292:	d815      	bhi.n	80062c0 <UART_SetConfig+0x2d0>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <UART_SetConfig+0x2b0>
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800629c:	d008      	beq.n	80062b0 <UART_SetConfig+0x2c0>
 800629e:	e00f      	b.n	80062c0 <UART_SetConfig+0x2d0>
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a6:	e022      	b.n	80062ee <UART_SetConfig+0x2fe>
 80062a8:	2302      	movs	r3, #2
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ae:	e01e      	b.n	80062ee <UART_SetConfig+0x2fe>
 80062b0:	2304      	movs	r3, #4
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b6:	e01a      	b.n	80062ee <UART_SetConfig+0x2fe>
 80062b8:	2308      	movs	r3, #8
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062be:	e016      	b.n	80062ee <UART_SetConfig+0x2fe>
 80062c0:	2310      	movs	r3, #16
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c6:	e012      	b.n	80062ee <UART_SetConfig+0x2fe>
 80062c8:	cfff69f3 	.word	0xcfff69f3
 80062cc:	40008000 	.word	0x40008000
 80062d0:	40013800 	.word	0x40013800
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40004400 	.word	0x40004400
 80062dc:	40004800 	.word	0x40004800
 80062e0:	40004c00 	.word	0x40004c00
 80062e4:	40005000 	.word	0x40005000
 80062e8:	2310      	movs	r3, #16
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4aae      	ldr	r2, [pc, #696]	@ (80065ac <UART_SetConfig+0x5bc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	f040 8097 	bne.w	8006428 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d823      	bhi.n	800634a <UART_SetConfig+0x35a>
 8006302:	a201      	add	r2, pc, #4	@ (adr r2, 8006308 <UART_SetConfig+0x318>)
 8006304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006308:	0800632d 	.word	0x0800632d
 800630c:	0800634b 	.word	0x0800634b
 8006310:	08006335 	.word	0x08006335
 8006314:	0800634b 	.word	0x0800634b
 8006318:	0800633b 	.word	0x0800633b
 800631c:	0800634b 	.word	0x0800634b
 8006320:	0800634b 	.word	0x0800634b
 8006324:	0800634b 	.word	0x0800634b
 8006328:	08006343 	.word	0x08006343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632c:	f7fd fcb4 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8006330:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006332:	e010      	b.n	8006356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006334:	4b9e      	ldr	r3, [pc, #632]	@ (80065b0 <UART_SetConfig+0x5c0>)
 8006336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006338:	e00d      	b.n	8006356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800633a:	f7fd fc3f 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 800633e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006340:	e009      	b.n	8006356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006348:	e005      	b.n	8006356 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006354:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8130 	beq.w	80065be <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006362:	4a94      	ldr	r2, [pc, #592]	@ (80065b4 <UART_SetConfig+0x5c4>)
 8006364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006368:	461a      	mov	r2, r3
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006370:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	4413      	add	r3, r2
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	429a      	cmp	r2, r3
 8006380:	d305      	bcc.n	800638e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	429a      	cmp	r2, r3
 800638c:	d903      	bls.n	8006396 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006394:	e113      	b.n	80065be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	2200      	movs	r2, #0
 800639a:	60bb      	str	r3, [r7, #8]
 800639c:	60fa      	str	r2, [r7, #12]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a2:	4a84      	ldr	r2, [pc, #528]	@ (80065b4 <UART_SetConfig+0x5c4>)
 80063a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2200      	movs	r2, #0
 80063ac:	603b      	str	r3, [r7, #0]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063b8:	f7f9 ff92 	bl	80002e0 <__aeabi_uldivmod>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4610      	mov	r0, r2
 80063c2:	4619      	mov	r1, r3
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	020b      	lsls	r3, r1, #8
 80063ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063d2:	0202      	lsls	r2, r0, #8
 80063d4:	6979      	ldr	r1, [r7, #20]
 80063d6:	6849      	ldr	r1, [r1, #4]
 80063d8:	0849      	lsrs	r1, r1, #1
 80063da:	2000      	movs	r0, #0
 80063dc:	460c      	mov	r4, r1
 80063de:	4605      	mov	r5, r0
 80063e0:	eb12 0804 	adds.w	r8, r2, r4
 80063e4:	eb43 0905 	adc.w	r9, r3, r5
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	469a      	mov	sl, r3
 80063f0:	4693      	mov	fp, r2
 80063f2:	4652      	mov	r2, sl
 80063f4:	465b      	mov	r3, fp
 80063f6:	4640      	mov	r0, r8
 80063f8:	4649      	mov	r1, r9
 80063fa:	f7f9 ff71 	bl	80002e0 <__aeabi_uldivmod>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4613      	mov	r3, r2
 8006404:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800640c:	d308      	bcc.n	8006420 <UART_SetConfig+0x430>
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006414:	d204      	bcs.n	8006420 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6a3a      	ldr	r2, [r7, #32]
 800641c:	60da      	str	r2, [r3, #12]
 800641e:	e0ce      	b.n	80065be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006426:	e0ca      	b.n	80065be <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006430:	d166      	bne.n	8006500 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006432:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006436:	2b08      	cmp	r3, #8
 8006438:	d827      	bhi.n	800648a <UART_SetConfig+0x49a>
 800643a:	a201      	add	r2, pc, #4	@ (adr r2, 8006440 <UART_SetConfig+0x450>)
 800643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006440:	08006465 	.word	0x08006465
 8006444:	0800646d 	.word	0x0800646d
 8006448:	08006475 	.word	0x08006475
 800644c:	0800648b 	.word	0x0800648b
 8006450:	0800647b 	.word	0x0800647b
 8006454:	0800648b 	.word	0x0800648b
 8006458:	0800648b 	.word	0x0800648b
 800645c:	0800648b 	.word	0x0800648b
 8006460:	08006483 	.word	0x08006483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006464:	f7fd fc18 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8006468:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800646a:	e014      	b.n	8006496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646c:	f7fd fc2a 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 8006470:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006472:	e010      	b.n	8006496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006474:	4b4e      	ldr	r3, [pc, #312]	@ (80065b0 <UART_SetConfig+0x5c0>)
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006478:	e00d      	b.n	8006496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647a:	f7fd fb9f 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 800647e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006480:	e009      	b.n	8006496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006488:	e005      	b.n	8006496 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8090 	beq.w	80065be <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	4a44      	ldr	r2, [pc, #272]	@ (80065b4 <UART_SetConfig+0x5c4>)
 80064a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a8:	461a      	mov	r2, r3
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b0:	005a      	lsls	r2, r3, #1
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	441a      	add	r2, r3
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	2b0f      	cmp	r3, #15
 80064c8:	d916      	bls.n	80064f8 <UART_SetConfig+0x508>
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d0:	d212      	bcs.n	80064f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f023 030f 	bic.w	r3, r3, #15
 80064da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f003 0307 	and.w	r3, r3, #7
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	8bfb      	ldrh	r3, [r7, #30]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	8bfa      	ldrh	r2, [r7, #30]
 80064f4:	60da      	str	r2, [r3, #12]
 80064f6:	e062      	b.n	80065be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064fe:	e05e      	b.n	80065be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006500:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006504:	2b08      	cmp	r3, #8
 8006506:	d828      	bhi.n	800655a <UART_SetConfig+0x56a>
 8006508:	a201      	add	r2, pc, #4	@ (adr r2, 8006510 <UART_SetConfig+0x520>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	08006535 	.word	0x08006535
 8006514:	0800653d 	.word	0x0800653d
 8006518:	08006545 	.word	0x08006545
 800651c:	0800655b 	.word	0x0800655b
 8006520:	0800654b 	.word	0x0800654b
 8006524:	0800655b 	.word	0x0800655b
 8006528:	0800655b 	.word	0x0800655b
 800652c:	0800655b 	.word	0x0800655b
 8006530:	08006553 	.word	0x08006553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006534:	f7fd fbb0 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8006538:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800653a:	e014      	b.n	8006566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800653c:	f7fd fbc2 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 8006540:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006542:	e010      	b.n	8006566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006544:	4b1a      	ldr	r3, [pc, #104]	@ (80065b0 <UART_SetConfig+0x5c0>)
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006548:	e00d      	b.n	8006566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800654a:	f7fd fb37 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 800654e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006550:	e009      	b.n	8006566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006556:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006558:	e005      	b.n	8006566 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006564:	bf00      	nop
    }

    if (pclk != 0U)
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	d028      	beq.n	80065be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006570:	4a10      	ldr	r2, [pc, #64]	@ (80065b4 <UART_SetConfig+0x5c4>)
 8006572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006576:	461a      	mov	r2, r3
 8006578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657a:	fbb3 f2f2 	udiv	r2, r3, r2
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	085b      	lsrs	r3, r3, #1
 8006584:	441a      	add	r2, r3
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	fbb2 f3f3 	udiv	r3, r2, r3
 800658e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	2b0f      	cmp	r3, #15
 8006594:	d910      	bls.n	80065b8 <UART_SetConfig+0x5c8>
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800659c:	d20c      	bcs.n	80065b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60da      	str	r2, [r3, #12]
 80065a8:	e009      	b.n	80065be <UART_SetConfig+0x5ce>
 80065aa:	bf00      	nop
 80065ac:	40008000 	.word	0x40008000
 80065b0:	00f42400 	.word	0x00f42400
 80065b4:	08008ea8 	.word	0x08008ea8
      }
      else
      {
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2200      	movs	r2, #0
 80065d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2200      	movs	r2, #0
 80065d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3730      	adds	r7, #48	@ 0x30
 80065e2:	46bd      	mov	sp, r7
 80065e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01a      	beq.n	80066fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066e6:	d10a      	bne.n	80066fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	605a      	str	r2, [r3, #4]
  }
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b098      	sub	sp, #96	@ 0x60
 8006730:	af02      	add	r7, sp, #8
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800673c:	f7fb f8b0 	bl	80018a0 <HAL_GetTick>
 8006740:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b08      	cmp	r3, #8
 800674e:	d12f      	bne.n	80067b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006758:	2200      	movs	r2, #0
 800675a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f88e 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d022      	beq.n	80067b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800677e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006788:	647b      	str	r3, [r7, #68]	@ 0x44
 800678a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800678e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006790:	e841 2300 	strex	r3, r2, [r1]
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e6      	bne.n	800676a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e063      	b.n	8006878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	d149      	bne.n	8006852 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067c6:	2200      	movs	r2, #0
 80067c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f857 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d03c      	beq.n	8006852 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	623b      	str	r3, [r7, #32]
   return(result);
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80067f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e6      	bne.n	80067d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	60fb      	str	r3, [r7, #12]
   return(result);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800682a:	61fa      	str	r2, [r7, #28]
 800682c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	69b9      	ldr	r1, [r7, #24]
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	617b      	str	r3, [r7, #20]
   return(result);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e012      	b.n	8006878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3758      	adds	r7, #88	@ 0x58
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006890:	e04f      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d04b      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689a:	f7fb f801 	bl	80018a0 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d302      	bcc.n	80068b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e04e      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d037      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b80      	cmp	r3, #128	@ 0x80
 80068c6:	d034      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d031      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d110      	bne.n	80068fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2208      	movs	r2, #8
 80068e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f95b 	bl	8006ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2208      	movs	r2, #8
 80068ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e029      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800690c:	d111      	bne.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f941 	bl	8006ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e00f      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4013      	ands	r3, r2
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	429a      	cmp	r2, r3
 8006940:	bf0c      	ite	eq
 8006942:	2301      	moveq	r3, #1
 8006944:	2300      	movne	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	429a      	cmp	r2, r3
 800694e:	d0a0      	beq.n	8006892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800695c:	b480      	push	{r7}
 800695e:	b0a3      	sub	sp, #140	@ 0x8c
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	88fa      	ldrh	r2, [r7, #6]
 8006974:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	88fa      	ldrh	r2, [r7, #6]
 800697c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800698e:	d10e      	bne.n	80069ae <UART_Start_Receive_IT+0x52>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <UART_Start_Receive_IT+0x48>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800699e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069a2:	e02d      	b.n	8006a00 <UART_Start_Receive_IT+0xa4>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	22ff      	movs	r2, #255	@ 0xff
 80069a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069ac:	e028      	b.n	8006a00 <UART_Start_Receive_IT+0xa4>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10d      	bne.n	80069d2 <UART_Start_Receive_IT+0x76>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <UART_Start_Receive_IT+0x6c>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	22ff      	movs	r2, #255	@ 0xff
 80069c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069c6:	e01b      	b.n	8006a00 <UART_Start_Receive_IT+0xa4>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	227f      	movs	r2, #127	@ 0x7f
 80069cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069d0:	e016      	b.n	8006a00 <UART_Start_Receive_IT+0xa4>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069da:	d10d      	bne.n	80069f8 <UART_Start_Receive_IT+0x9c>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <UART_Start_Receive_IT+0x92>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	227f      	movs	r2, #127	@ 0x7f
 80069e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069ec:	e008      	b.n	8006a00 <UART_Start_Receive_IT+0xa4>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	223f      	movs	r2, #63	@ 0x3f
 80069f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069f6:	e003      	b.n	8006a00 <UART_Start_Receive_IT+0xa4>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2222      	movs	r2, #34	@ 0x22
 8006a0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006a20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006a34:	673a      	str	r2, [r7, #112]	@ 0x70
 8006a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006a3a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006a42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e3      	bne.n	8006a10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a50:	d14f      	bne.n	8006af2 <UART_Start_Receive_IT+0x196>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a58:	88fa      	ldrh	r2, [r7, #6]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d349      	bcc.n	8006af2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a66:	d107      	bne.n	8006a78 <UART_Start_Receive_IT+0x11c>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d103      	bne.n	8006a78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a47      	ldr	r2, [pc, #284]	@ (8006b90 <UART_Start_Receive_IT+0x234>)
 8006a74:	675a      	str	r2, [r3, #116]	@ 0x74
 8006a76:	e002      	b.n	8006a7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a46      	ldr	r2, [pc, #280]	@ (8006b94 <UART_Start_Receive_IT+0x238>)
 8006a7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01a      	beq.n	8006abc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aaa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006aae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e4      	bne.n	8006a86 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006adc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ade:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e5      	bne.n	8006abc <UART_Start_Receive_IT+0x160>
 8006af0:	e046      	b.n	8006b80 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afa:	d107      	bne.n	8006b0c <UART_Start_Receive_IT+0x1b0>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d103      	bne.n	8006b0c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a24      	ldr	r2, [pc, #144]	@ (8006b98 <UART_Start_Receive_IT+0x23c>)
 8006b08:	675a      	str	r2, [r3, #116]	@ 0x74
 8006b0a:	e002      	b.n	8006b12 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a23      	ldr	r2, [pc, #140]	@ (8006b9c <UART_Start_Receive_IT+0x240>)
 8006b10:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d019      	beq.n	8006b4e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006b2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	461a      	mov	r2, r3
 8006b36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e6      	bne.n	8006b1a <UART_Start_Receive_IT+0x1be>
 8006b4c:	e018      	b.n	8006b80 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f043 0320 	orr.w	r3, r3, #32
 8006b62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b6c:	623b      	str	r3, [r7, #32]
 8006b6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	69f9      	ldr	r1, [r7, #28]
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e6      	bne.n	8006b4e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	378c      	adds	r7, #140	@ 0x8c
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	080073c5 	.word	0x080073c5
 8006b94:	08007061 	.word	0x08007061
 8006b98:	08006ea9 	.word	0x08006ea9
 8006b9c:	08006cf1 	.word	0x08006cf1

08006ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b095      	sub	sp, #84	@ 0x54
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e6      	bne.n	8006ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3308      	adds	r3, #8
 8006be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bf0:	f023 0301 	bic.w	r3, r3, #1
 8006bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e3      	bne.n	8006bda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d118      	bne.n	8006c4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0310 	bic.w	r3, r3, #16
 8006c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	613b      	str	r3, [r7, #16]
   return(result);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c60:	bf00      	nop
 8006c62:	3754      	adds	r7, #84	@ 0x54
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f7ff f99a 	bl	8005fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c90:	bf00      	nop
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6979      	ldr	r1, [r7, #20]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	613b      	str	r3, [r7, #16]
   return(result);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e6      	bne.n	8006ca0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff f965 	bl	8005fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ce6:	bf00      	nop
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b09c      	sub	sp, #112	@ 0x70
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006cfe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d08:	2b22      	cmp	r3, #34	@ 0x22
 8006d0a:	f040 80be 	bne.w	8006e8a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d14:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d1c:	b2d9      	uxtb	r1, r3
 8006d1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d28:	400a      	ands	r2, r1
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f040 80a1 	bne.w	8006e9a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e6      	bne.n	8006d58 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3308      	adds	r3, #8
 8006d90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9c:	f023 0301 	bic.w	r3, r3, #1
 8006da0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006daa:	647a      	str	r2, [r7, #68]	@ 0x44
 8006dac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006db0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e5      	bne.n	8006d8a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a33      	ldr	r2, [pc, #204]	@ (8006ea4 <UART_RxISR_8BIT+0x1b4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d01f      	beq.n	8006e1c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d018      	beq.n	8006e1c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	623b      	str	r3, [r7, #32]
   return(result);
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dfe:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e6      	bne.n	8006dea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d12e      	bne.n	8006e82 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0310 	bic.w	r3, r3, #16
 8006e3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	69b9      	ldr	r1, [r7, #24]
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	617b      	str	r3, [r7, #20]
   return(result);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e6      	bne.n	8006e2a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f003 0310 	and.w	r3, r3, #16
 8006e66:	2b10      	cmp	r3, #16
 8006e68:	d103      	bne.n	8006e72 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2210      	movs	r2, #16
 8006e70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff f8ac 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e80:	e00b      	b.n	8006e9a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fa f852 	bl	8000f2c <HAL_UART_RxCpltCallback>
}
 8006e88:	e007      	b.n	8006e9a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699a      	ldr	r2, [r3, #24]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 0208 	orr.w	r2, r2, #8
 8006e98:	619a      	str	r2, [r3, #24]
}
 8006e9a:	bf00      	nop
 8006e9c:	3770      	adds	r7, #112	@ 0x70
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40008000 	.word	0x40008000

08006ea8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b09c      	sub	sp, #112	@ 0x70
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006eb6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ec0:	2b22      	cmp	r3, #34	@ 0x22
 8006ec2:	f040 80be 	bne.w	8007042 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ecc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ed6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006eda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006ede:	4013      	ands	r3, r2
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ee4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eea:	1c9a      	adds	r2, r3, #2
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 80a1 	bne.w	8007052 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f24:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f30:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e6      	bne.n	8006f10 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	f023 0301 	bic.w	r3, r3, #1
 8006f58:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f62:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e5      	bne.n	8006f42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a33      	ldr	r2, [pc, #204]	@ (800705c <UART_RxISR_16BIT+0x1b4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d01f      	beq.n	8006fd4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d018      	beq.n	8006fd4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fc2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e6      	bne.n	8006fa2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d12e      	bne.n	800703a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f023 0310 	bic.w	r3, r3, #16
 8006ff6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6979      	ldr	r1, [r7, #20]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	613b      	str	r3, [r7, #16]
   return(result);
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e6      	bne.n	8006fe2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f003 0310 	and.w	r3, r3, #16
 800701e:	2b10      	cmp	r3, #16
 8007020:	d103      	bne.n	800702a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2210      	movs	r2, #16
 8007028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fe ffd0 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007038:	e00b      	b.n	8007052 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7f9 ff76 	bl	8000f2c <HAL_UART_RxCpltCallback>
}
 8007040:	e007      	b.n	8007052 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0208 	orr.w	r2, r2, #8
 8007050:	619a      	str	r2, [r3, #24]
}
 8007052:	bf00      	nop
 8007054:	3770      	adds	r7, #112	@ 0x70
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	40008000 	.word	0x40008000

08007060 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b0ac      	sub	sp, #176	@ 0xb0
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800706e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007096:	2b22      	cmp	r3, #34	@ 0x22
 8007098:	f040 8183 	bne.w	80073a2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80070a2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070a6:	e126      	b.n	80072f6 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ae:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80070b6:	b2d9      	uxtb	r1, r3
 80070b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c2:	400a      	ands	r2, r1
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80070ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d053      	beq.n	80071a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d011      	beq.n	800712a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800710a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2201      	movs	r2, #1
 8007118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007120:	f043 0201 	orr.w	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800712a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d011      	beq.n	800715a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2202      	movs	r2, #2
 8007148:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007150:	f043 0204 	orr.w	r2, r3, #4
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800715a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	d011      	beq.n	800718a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2204      	movs	r2, #4
 8007178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007180:	f043 0202 	orr.w	r2, r3, #2
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007190:	2b00      	cmp	r3, #0
 8007192:	d006      	beq.n	80071a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7fe ff15 	bl	8005fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f040 80a3 	bne.w	80072f6 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80071be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071d4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80071d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80071e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e4      	bne.n	80071b0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80071f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800720e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007210:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007214:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800721c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e1      	bne.n	80071e6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a60      	ldr	r2, [pc, #384]	@ (80073bc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d021      	beq.n	8007284 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d01a      	beq.n	8007284 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800725c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800725e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007262:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007270:	657b      	str	r3, [r7, #84]	@ 0x54
 8007272:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007274:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007276:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007278:	e841 2300 	strex	r3, r2, [r1]
 800727c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800727e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1e4      	bne.n	800724e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007288:	2b01      	cmp	r3, #1
 800728a:	d130      	bne.n	80072ee <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	f023 0310 	bic.w	r3, r3, #16
 80072a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80072b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e4      	bne.n	8007292 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	f003 0310 	and.w	r3, r3, #16
 80072d2:	2b10      	cmp	r3, #16
 80072d4:	d103      	bne.n	80072de <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2210      	movs	r2, #16
 80072dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7fe fe76 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80072ec:	e00e      	b.n	800730c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7f9 fe1c 	bl	8000f2c <HAL_UART_RxCpltCallback>
        break;
 80072f4:	e00a      	b.n	800730c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072f6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80072fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	f47f aece 	bne.w	80070a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007312:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007316:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800731a:	2b00      	cmp	r3, #0
 800731c:	d049      	beq.n	80073b2 <UART_RxISR_8BIT_FIFOEN+0x352>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007324:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007328:	429a      	cmp	r2, r3
 800732a:	d242      	bcs.n	80073b2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3308      	adds	r3, #8
 8007332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	61fb      	str	r3, [r7, #28]
   return(result);
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007342:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007350:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007352:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e3      	bne.n	800732c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a16      	ldr	r2, [pc, #88]	@ (80073c0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007368:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	60bb      	str	r3, [r7, #8]
   return(result);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f043 0320 	orr.w	r3, r3, #32
 800737e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6979      	ldr	r1, [r7, #20]
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	613b      	str	r3, [r7, #16]
   return(result);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e4      	bne.n	800736a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073a0:	e007      	b.n	80073b2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	699a      	ldr	r2, [r3, #24]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0208 	orr.w	r2, r2, #8
 80073b0:	619a      	str	r2, [r3, #24]
}
 80073b2:	bf00      	nop
 80073b4:	37b0      	adds	r7, #176	@ 0xb0
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	40008000 	.word	0x40008000
 80073c0:	08006cf1 	.word	0x08006cf1

080073c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b0ae      	sub	sp, #184	@ 0xb8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073fa:	2b22      	cmp	r3, #34	@ 0x22
 80073fc:	f040 8187 	bne.w	800770e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007406:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800740a:	e12a      	b.n	8007662 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007412:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800741e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007422:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007426:	4013      	ands	r3, r2
 8007428:	b29a      	uxth	r2, r3
 800742a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800742e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007434:	1c9a      	adds	r2, r3, #2
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007456:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	2b00      	cmp	r3, #0
 8007460:	d053      	beq.n	800750a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d011      	beq.n	8007492 <UART_RxISR_16BIT_FIFOEN+0xce>
 800746e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2201      	movs	r2, #1
 8007480:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007488:	f043 0201 	orr.w	r2, r3, #1
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007492:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d011      	beq.n	80074c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800749e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2202      	movs	r2, #2
 80074b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b8:	f043 0204 	orr.w	r2, r3, #4
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d011      	beq.n	80074f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80074ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00b      	beq.n	80074f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2204      	movs	r2, #4
 80074e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e8:	f043 0202 	orr.w	r2, r3, #2
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d006      	beq.n	800750a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7fe fd61 	bl	8005fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	f040 80a5 	bne.w	8007662 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800752c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800753a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800753e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007542:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800754c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e2      	bne.n	8007518 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3308      	adds	r3, #8
 8007558:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007568:	f023 0301 	bic.w	r3, r3, #1
 800756c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3308      	adds	r3, #8
 8007576:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800757a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800757c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007580:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007588:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e1      	bne.n	8007552 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a60      	ldr	r2, [pc, #384]	@ (8007728 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d021      	beq.n	80075f0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d01a      	beq.n	80075f0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075c2:	e853 3f00 	ldrex	r3, [r3]
 80075c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075de:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e4      	bne.n	80075ba <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d130      	bne.n	800765a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800760c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760e:	f023 0310 	bic.w	r3, r3, #16
 8007612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007620:	647b      	str	r3, [r7, #68]	@ 0x44
 8007622:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800762e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e4      	bne.n	80075fe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	2b10      	cmp	r3, #16
 8007640:	d103      	bne.n	800764a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2210      	movs	r2, #16
 8007648:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fe fcc0 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007658:	e00e      	b.n	8007678 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7f9 fc66 	bl	8000f2c <HAL_UART_RxCpltCallback>
        break;
 8007660:	e00a      	b.n	8007678 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007662:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007666:	2b00      	cmp	r3, #0
 8007668:	d006      	beq.n	8007678 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800766a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b00      	cmp	r3, #0
 8007674:	f47f aeca 	bne.w	800740c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800767e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007682:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007686:	2b00      	cmp	r3, #0
 8007688:	d049      	beq.n	800771e <UART_RxISR_16BIT_FIFOEN+0x35a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007690:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007694:	429a      	cmp	r2, r3
 8007696:	d242      	bcs.n	800771e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3308      	adds	r3, #8
 800769e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	623b      	str	r3, [r7, #32]
   return(result);
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3308      	adds	r3, #8
 80076b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80076bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80076be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e3      	bne.n	8007698 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a16      	ldr	r2, [pc, #88]	@ (800772c <UART_RxISR_16BIT_FIFOEN+0x368>)
 80076d4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f043 0320 	orr.w	r3, r3, #32
 80076ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076f8:	61fb      	str	r3, [r7, #28]
 80076fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	69b9      	ldr	r1, [r7, #24]
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	617b      	str	r3, [r7, #20]
   return(result);
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e4      	bne.n	80076d6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800770c:	e007      	b.n	800771e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699a      	ldr	r2, [r3, #24]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f042 0208 	orr.w	r2, r2, #8
 800771c:	619a      	str	r2, [r3, #24]
}
 800771e:	bf00      	nop
 8007720:	37b8      	adds	r7, #184	@ 0xb8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40008000 	.word	0x40008000
 800772c:	08006ea9 	.word	0x08006ea9

08007730 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_UARTEx_DisableFifoMode+0x16>
 800777e:	2302      	movs	r3, #2
 8007780:	e027      	b.n	80077d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2224      	movs	r2, #36	@ 0x24
 800778e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0201 	bic.w	r2, r2, #1
 80077a8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e02d      	b.n	8007852 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2224      	movs	r2, #36	@ 0x24
 8007802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0201 	bic.w	r2, r2, #1
 800781c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f850 	bl	80078d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2220      	movs	r2, #32
 8007844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800786a:	2b01      	cmp	r3, #1
 800786c:	d101      	bne.n	8007872 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800786e:	2302      	movs	r3, #2
 8007870:	e02d      	b.n	80078ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2224      	movs	r2, #36	@ 0x24
 800787e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f812 	bl	80078d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d108      	bne.n	80078fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078f8:	e031      	b.n	800795e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078fa:	2308      	movs	r3, #8
 80078fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078fe:	2308      	movs	r3, #8
 8007900:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	0e5b      	lsrs	r3, r3, #25
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	0f5b      	lsrs	r3, r3, #29
 800791a:	b2db      	uxtb	r3, r3
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	7b3a      	ldrb	r2, [r7, #12]
 8007926:	4911      	ldr	r1, [pc, #68]	@ (800796c <UARTEx_SetNbDataToProcess+0x94>)
 8007928:	5c8a      	ldrb	r2, [r1, r2]
 800792a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800792e:	7b3a      	ldrb	r2, [r7, #12]
 8007930:	490f      	ldr	r1, [pc, #60]	@ (8007970 <UARTEx_SetNbDataToProcess+0x98>)
 8007932:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007934:	fb93 f3f2 	sdiv	r3, r3, r2
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	7b7a      	ldrb	r2, [r7, #13]
 8007944:	4909      	ldr	r1, [pc, #36]	@ (800796c <UARTEx_SetNbDataToProcess+0x94>)
 8007946:	5c8a      	ldrb	r2, [r1, r2]
 8007948:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800794c:	7b7a      	ldrb	r2, [r7, #13]
 800794e:	4908      	ldr	r1, [pc, #32]	@ (8007970 <UARTEx_SetNbDataToProcess+0x98>)
 8007950:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007952:	fb93 f3f2 	sdiv	r3, r3, r2
 8007956:	b29a      	uxth	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	08008ec0 	.word	0x08008ec0
 8007970:	08008ec8 	.word	0x08008ec8

08007974 <atoi>:
 8007974:	220a      	movs	r2, #10
 8007976:	2100      	movs	r1, #0
 8007978:	f000 b87a 	b.w	8007a70 <strtol>

0800797c <_strtol_l.constprop.0>:
 800797c:	2b24      	cmp	r3, #36	@ 0x24
 800797e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007982:	4686      	mov	lr, r0
 8007984:	4690      	mov	r8, r2
 8007986:	d801      	bhi.n	800798c <_strtol_l.constprop.0+0x10>
 8007988:	2b01      	cmp	r3, #1
 800798a:	d106      	bne.n	800799a <_strtol_l.constprop.0+0x1e>
 800798c:	f000 fa4a 	bl	8007e24 <__errno>
 8007990:	2316      	movs	r3, #22
 8007992:	6003      	str	r3, [r0, #0]
 8007994:	2000      	movs	r0, #0
 8007996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799a:	4834      	ldr	r0, [pc, #208]	@ (8007a6c <_strtol_l.constprop.0+0xf0>)
 800799c:	460d      	mov	r5, r1
 800799e:	462a      	mov	r2, r5
 80079a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079a4:	5d06      	ldrb	r6, [r0, r4]
 80079a6:	f016 0608 	ands.w	r6, r6, #8
 80079aa:	d1f8      	bne.n	800799e <_strtol_l.constprop.0+0x22>
 80079ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80079ae:	d12d      	bne.n	8007a0c <_strtol_l.constprop.0+0x90>
 80079b0:	782c      	ldrb	r4, [r5, #0]
 80079b2:	2601      	movs	r6, #1
 80079b4:	1c95      	adds	r5, r2, #2
 80079b6:	f033 0210 	bics.w	r2, r3, #16
 80079ba:	d109      	bne.n	80079d0 <_strtol_l.constprop.0+0x54>
 80079bc:	2c30      	cmp	r4, #48	@ 0x30
 80079be:	d12a      	bne.n	8007a16 <_strtol_l.constprop.0+0x9a>
 80079c0:	782a      	ldrb	r2, [r5, #0]
 80079c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079c6:	2a58      	cmp	r2, #88	@ 0x58
 80079c8:	d125      	bne.n	8007a16 <_strtol_l.constprop.0+0x9a>
 80079ca:	786c      	ldrb	r4, [r5, #1]
 80079cc:	2310      	movs	r3, #16
 80079ce:	3502      	adds	r5, #2
 80079d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80079d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80079d8:	2200      	movs	r2, #0
 80079da:	fbbc f9f3 	udiv	r9, ip, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80079e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80079e8:	2f09      	cmp	r7, #9
 80079ea:	d81b      	bhi.n	8007a24 <_strtol_l.constprop.0+0xa8>
 80079ec:	463c      	mov	r4, r7
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	dd27      	ble.n	8007a42 <_strtol_l.constprop.0+0xc6>
 80079f2:	1c57      	adds	r7, r2, #1
 80079f4:	d007      	beq.n	8007a06 <_strtol_l.constprop.0+0x8a>
 80079f6:	4581      	cmp	r9, r0
 80079f8:	d320      	bcc.n	8007a3c <_strtol_l.constprop.0+0xc0>
 80079fa:	d101      	bne.n	8007a00 <_strtol_l.constprop.0+0x84>
 80079fc:	45a2      	cmp	sl, r4
 80079fe:	db1d      	blt.n	8007a3c <_strtol_l.constprop.0+0xc0>
 8007a00:	fb00 4003 	mla	r0, r0, r3, r4
 8007a04:	2201      	movs	r2, #1
 8007a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a0a:	e7eb      	b.n	80079e4 <_strtol_l.constprop.0+0x68>
 8007a0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007a0e:	bf04      	itt	eq
 8007a10:	782c      	ldrbeq	r4, [r5, #0]
 8007a12:	1c95      	addeq	r5, r2, #2
 8007a14:	e7cf      	b.n	80079b6 <_strtol_l.constprop.0+0x3a>
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1da      	bne.n	80079d0 <_strtol_l.constprop.0+0x54>
 8007a1a:	2c30      	cmp	r4, #48	@ 0x30
 8007a1c:	bf0c      	ite	eq
 8007a1e:	2308      	moveq	r3, #8
 8007a20:	230a      	movne	r3, #10
 8007a22:	e7d5      	b.n	80079d0 <_strtol_l.constprop.0+0x54>
 8007a24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007a28:	2f19      	cmp	r7, #25
 8007a2a:	d801      	bhi.n	8007a30 <_strtol_l.constprop.0+0xb4>
 8007a2c:	3c37      	subs	r4, #55	@ 0x37
 8007a2e:	e7de      	b.n	80079ee <_strtol_l.constprop.0+0x72>
 8007a30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a34:	2f19      	cmp	r7, #25
 8007a36:	d804      	bhi.n	8007a42 <_strtol_l.constprop.0+0xc6>
 8007a38:	3c57      	subs	r4, #87	@ 0x57
 8007a3a:	e7d8      	b.n	80079ee <_strtol_l.constprop.0+0x72>
 8007a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a40:	e7e1      	b.n	8007a06 <_strtol_l.constprop.0+0x8a>
 8007a42:	1c53      	adds	r3, r2, #1
 8007a44:	d108      	bne.n	8007a58 <_strtol_l.constprop.0+0xdc>
 8007a46:	2322      	movs	r3, #34	@ 0x22
 8007a48:	f8ce 3000 	str.w	r3, [lr]
 8007a4c:	4660      	mov	r0, ip
 8007a4e:	f1b8 0f00 	cmp.w	r8, #0
 8007a52:	d0a0      	beq.n	8007996 <_strtol_l.constprop.0+0x1a>
 8007a54:	1e69      	subs	r1, r5, #1
 8007a56:	e006      	b.n	8007a66 <_strtol_l.constprop.0+0xea>
 8007a58:	b106      	cbz	r6, 8007a5c <_strtol_l.constprop.0+0xe0>
 8007a5a:	4240      	negs	r0, r0
 8007a5c:	f1b8 0f00 	cmp.w	r8, #0
 8007a60:	d099      	beq.n	8007996 <_strtol_l.constprop.0+0x1a>
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	d1f6      	bne.n	8007a54 <_strtol_l.constprop.0+0xd8>
 8007a66:	f8c8 1000 	str.w	r1, [r8]
 8007a6a:	e794      	b.n	8007996 <_strtol_l.constprop.0+0x1a>
 8007a6c:	08008ed1 	.word	0x08008ed1

08007a70 <strtol>:
 8007a70:	4613      	mov	r3, r2
 8007a72:	460a      	mov	r2, r1
 8007a74:	4601      	mov	r1, r0
 8007a76:	4802      	ldr	r0, [pc, #8]	@ (8007a80 <strtol+0x10>)
 8007a78:	6800      	ldr	r0, [r0, #0]
 8007a7a:	f7ff bf7f 	b.w	800797c <_strtol_l.constprop.0>
 8007a7e:	bf00      	nop
 8007a80:	200001ec 	.word	0x200001ec

08007a84 <std>:
 8007a84:	2300      	movs	r3, #0
 8007a86:	b510      	push	{r4, lr}
 8007a88:	4604      	mov	r4, r0
 8007a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a92:	6083      	str	r3, [r0, #8]
 8007a94:	8181      	strh	r1, [r0, #12]
 8007a96:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a98:	81c2      	strh	r2, [r0, #14]
 8007a9a:	6183      	str	r3, [r0, #24]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	305c      	adds	r0, #92	@ 0x5c
 8007aa2:	f000 f914 	bl	8007cce <memset>
 8007aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007adc <std+0x58>)
 8007aa8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <std+0x5c>)
 8007aac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007aae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <std+0x60>)
 8007ab0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae8 <std+0x64>)
 8007ab4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <std+0x68>)
 8007ab8:	6224      	str	r4, [r4, #32]
 8007aba:	429c      	cmp	r4, r3
 8007abc:	d006      	beq.n	8007acc <std+0x48>
 8007abe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ac2:	4294      	cmp	r4, r2
 8007ac4:	d002      	beq.n	8007acc <std+0x48>
 8007ac6:	33d0      	adds	r3, #208	@ 0xd0
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d105      	bne.n	8007ad8 <std+0x54>
 8007acc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad4:	f000 b9d0 	b.w	8007e78 <__retarget_lock_init_recursive>
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	bf00      	nop
 8007adc:	08007c49 	.word	0x08007c49
 8007ae0:	08007c6b 	.word	0x08007c6b
 8007ae4:	08007ca3 	.word	0x08007ca3
 8007ae8:	08007cc7 	.word	0x08007cc7
 8007aec:	20000590 	.word	0x20000590

08007af0 <stdio_exit_handler>:
 8007af0:	4a02      	ldr	r2, [pc, #8]	@ (8007afc <stdio_exit_handler+0xc>)
 8007af2:	4903      	ldr	r1, [pc, #12]	@ (8007b00 <stdio_exit_handler+0x10>)
 8007af4:	4803      	ldr	r0, [pc, #12]	@ (8007b04 <stdio_exit_handler+0x14>)
 8007af6:	f000 b869 	b.w	8007bcc <_fwalk_sglue>
 8007afa:	bf00      	nop
 8007afc:	200001e0 	.word	0x200001e0
 8007b00:	08008791 	.word	0x08008791
 8007b04:	200001f0 	.word	0x200001f0

08007b08 <cleanup_stdio>:
 8007b08:	6841      	ldr	r1, [r0, #4]
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b3c <cleanup_stdio+0x34>)
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	b510      	push	{r4, lr}
 8007b10:	4604      	mov	r4, r0
 8007b12:	d001      	beq.n	8007b18 <cleanup_stdio+0x10>
 8007b14:	f000 fe3c 	bl	8008790 <_fflush_r>
 8007b18:	68a1      	ldr	r1, [r4, #8]
 8007b1a:	4b09      	ldr	r3, [pc, #36]	@ (8007b40 <cleanup_stdio+0x38>)
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	d002      	beq.n	8007b26 <cleanup_stdio+0x1e>
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 fe35 	bl	8008790 <_fflush_r>
 8007b26:	68e1      	ldr	r1, [r4, #12]
 8007b28:	4b06      	ldr	r3, [pc, #24]	@ (8007b44 <cleanup_stdio+0x3c>)
 8007b2a:	4299      	cmp	r1, r3
 8007b2c:	d004      	beq.n	8007b38 <cleanup_stdio+0x30>
 8007b2e:	4620      	mov	r0, r4
 8007b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b34:	f000 be2c 	b.w	8008790 <_fflush_r>
 8007b38:	bd10      	pop	{r4, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000590 	.word	0x20000590
 8007b40:	200005f8 	.word	0x200005f8
 8007b44:	20000660 	.word	0x20000660

08007b48 <global_stdio_init.part.0>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b78 <global_stdio_init.part.0+0x30>)
 8007b4c:	4c0b      	ldr	r4, [pc, #44]	@ (8007b7c <global_stdio_init.part.0+0x34>)
 8007b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8007b80 <global_stdio_init.part.0+0x38>)
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	4620      	mov	r0, r4
 8007b54:	2200      	movs	r2, #0
 8007b56:	2104      	movs	r1, #4
 8007b58:	f7ff ff94 	bl	8007a84 <std>
 8007b5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b60:	2201      	movs	r2, #1
 8007b62:	2109      	movs	r1, #9
 8007b64:	f7ff ff8e 	bl	8007a84 <std>
 8007b68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b72:	2112      	movs	r1, #18
 8007b74:	f7ff bf86 	b.w	8007a84 <std>
 8007b78:	200006c8 	.word	0x200006c8
 8007b7c:	20000590 	.word	0x20000590
 8007b80:	08007af1 	.word	0x08007af1

08007b84 <__sfp_lock_acquire>:
 8007b84:	4801      	ldr	r0, [pc, #4]	@ (8007b8c <__sfp_lock_acquire+0x8>)
 8007b86:	f000 b978 	b.w	8007e7a <__retarget_lock_acquire_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	200006d1 	.word	0x200006d1

08007b90 <__sfp_lock_release>:
 8007b90:	4801      	ldr	r0, [pc, #4]	@ (8007b98 <__sfp_lock_release+0x8>)
 8007b92:	f000 b973 	b.w	8007e7c <__retarget_lock_release_recursive>
 8007b96:	bf00      	nop
 8007b98:	200006d1 	.word	0x200006d1

08007b9c <__sinit>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	f7ff fff0 	bl	8007b84 <__sfp_lock_acquire>
 8007ba4:	6a23      	ldr	r3, [r4, #32]
 8007ba6:	b11b      	cbz	r3, 8007bb0 <__sinit+0x14>
 8007ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bac:	f7ff bff0 	b.w	8007b90 <__sfp_lock_release>
 8007bb0:	4b04      	ldr	r3, [pc, #16]	@ (8007bc4 <__sinit+0x28>)
 8007bb2:	6223      	str	r3, [r4, #32]
 8007bb4:	4b04      	ldr	r3, [pc, #16]	@ (8007bc8 <__sinit+0x2c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f5      	bne.n	8007ba8 <__sinit+0xc>
 8007bbc:	f7ff ffc4 	bl	8007b48 <global_stdio_init.part.0>
 8007bc0:	e7f2      	b.n	8007ba8 <__sinit+0xc>
 8007bc2:	bf00      	nop
 8007bc4:	08007b09 	.word	0x08007b09
 8007bc8:	200006c8 	.word	0x200006c8

08007bcc <_fwalk_sglue>:
 8007bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	4688      	mov	r8, r1
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8007be0:	d505      	bpl.n	8007bee <_fwalk_sglue+0x22>
 8007be2:	6824      	ldr	r4, [r4, #0]
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	d1f7      	bne.n	8007bd8 <_fwalk_sglue+0xc>
 8007be8:	4630      	mov	r0, r6
 8007bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d907      	bls.n	8007c04 <_fwalk_sglue+0x38>
 8007bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	d003      	beq.n	8007c04 <_fwalk_sglue+0x38>
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	4638      	mov	r0, r7
 8007c00:	47c0      	blx	r8
 8007c02:	4306      	orrs	r6, r0
 8007c04:	3568      	adds	r5, #104	@ 0x68
 8007c06:	e7e9      	b.n	8007bdc <_fwalk_sglue+0x10>

08007c08 <siprintf>:
 8007c08:	b40e      	push	{r1, r2, r3}
 8007c0a:	b500      	push	{lr}
 8007c0c:	b09c      	sub	sp, #112	@ 0x70
 8007c0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c10:	9002      	str	r0, [sp, #8]
 8007c12:	9006      	str	r0, [sp, #24]
 8007c14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c18:	4809      	ldr	r0, [pc, #36]	@ (8007c40 <siprintf+0x38>)
 8007c1a:	9107      	str	r1, [sp, #28]
 8007c1c:	9104      	str	r1, [sp, #16]
 8007c1e:	4909      	ldr	r1, [pc, #36]	@ (8007c44 <siprintf+0x3c>)
 8007c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c24:	9105      	str	r1, [sp, #20]
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	a902      	add	r1, sp, #8
 8007c2c:	f000 faa2 	bl	8008174 <_svfiprintf_r>
 8007c30:	9b02      	ldr	r3, [sp, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	b01c      	add	sp, #112	@ 0x70
 8007c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c3c:	b003      	add	sp, #12
 8007c3e:	4770      	bx	lr
 8007c40:	200001ec 	.word	0x200001ec
 8007c44:	ffff0208 	.word	0xffff0208

08007c48 <__sread>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c50:	f000 f8c4 	bl	8007ddc <_read_r>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	bfab      	itete	ge
 8007c58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c5c:	181b      	addge	r3, r3, r0
 8007c5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c62:	bfac      	ite	ge
 8007c64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c66:	81a3      	strhlt	r3, [r4, #12]
 8007c68:	bd10      	pop	{r4, pc}

08007c6a <__swrite>:
 8007c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6e:	461f      	mov	r7, r3
 8007c70:	898b      	ldrh	r3, [r1, #12]
 8007c72:	05db      	lsls	r3, r3, #23
 8007c74:	4605      	mov	r5, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	4616      	mov	r6, r2
 8007c7a:	d505      	bpl.n	8007c88 <__swrite+0x1e>
 8007c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c80:	2302      	movs	r3, #2
 8007c82:	2200      	movs	r2, #0
 8007c84:	f000 f898 	bl	8007db8 <_lseek_r>
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	4632      	mov	r2, r6
 8007c96:	463b      	mov	r3, r7
 8007c98:	4628      	mov	r0, r5
 8007c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	f000 b8af 	b.w	8007e00 <_write_r>

08007ca2 <__sseek>:
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007caa:	f000 f885 	bl	8007db8 <_lseek_r>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	bf15      	itete	ne
 8007cb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cbe:	81a3      	strheq	r3, [r4, #12]
 8007cc0:	bf18      	it	ne
 8007cc2:	81a3      	strhne	r3, [r4, #12]
 8007cc4:	bd10      	pop	{r4, pc}

08007cc6 <__sclose>:
 8007cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cca:	f000 b865 	b.w	8007d98 <_close_r>

08007cce <memset>:
 8007cce:	4402      	add	r2, r0
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d100      	bne.n	8007cd8 <memset+0xa>
 8007cd6:	4770      	bx	lr
 8007cd8:	f803 1b01 	strb.w	r1, [r3], #1
 8007cdc:	e7f9      	b.n	8007cd2 <memset+0x4>
	...

08007ce0 <strtok>:
 8007ce0:	4b16      	ldr	r3, [pc, #88]	@ (8007d3c <strtok+0x5c>)
 8007ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce6:	681f      	ldr	r7, [r3, #0]
 8007ce8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007cea:	4605      	mov	r5, r0
 8007cec:	460e      	mov	r6, r1
 8007cee:	b9ec      	cbnz	r4, 8007d2c <strtok+0x4c>
 8007cf0:	2050      	movs	r0, #80	@ 0x50
 8007cf2:	f000 f92d 	bl	8007f50 <malloc>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	6478      	str	r0, [r7, #68]	@ 0x44
 8007cfa:	b920      	cbnz	r0, 8007d06 <strtok+0x26>
 8007cfc:	4b10      	ldr	r3, [pc, #64]	@ (8007d40 <strtok+0x60>)
 8007cfe:	4811      	ldr	r0, [pc, #68]	@ (8007d44 <strtok+0x64>)
 8007d00:	215b      	movs	r1, #91	@ 0x5b
 8007d02:	f000 f8bd 	bl	8007e80 <__assert_func>
 8007d06:	e9c0 4400 	strd	r4, r4, [r0]
 8007d0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007d0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007d12:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007d16:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007d1a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007d1e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007d22:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007d26:	6184      	str	r4, [r0, #24]
 8007d28:	7704      	strb	r4, [r0, #28]
 8007d2a:	6244      	str	r4, [r0, #36]	@ 0x24
 8007d2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4628      	mov	r0, r5
 8007d32:	2301      	movs	r3, #1
 8007d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d38:	f000 b806 	b.w	8007d48 <__strtok_r>
 8007d3c:	200001ec 	.word	0x200001ec
 8007d40:	08008fd1 	.word	0x08008fd1
 8007d44:	08008fe8 	.word	0x08008fe8

08007d48 <__strtok_r>:
 8007d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	b908      	cbnz	r0, 8007d52 <__strtok_r+0xa>
 8007d4e:	6814      	ldr	r4, [r2, #0]
 8007d50:	b144      	cbz	r4, 8007d64 <__strtok_r+0x1c>
 8007d52:	4620      	mov	r0, r4
 8007d54:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007d58:	460f      	mov	r7, r1
 8007d5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007d5e:	b91e      	cbnz	r6, 8007d68 <__strtok_r+0x20>
 8007d60:	b965      	cbnz	r5, 8007d7c <__strtok_r+0x34>
 8007d62:	6015      	str	r5, [r2, #0]
 8007d64:	2000      	movs	r0, #0
 8007d66:	e005      	b.n	8007d74 <__strtok_r+0x2c>
 8007d68:	42b5      	cmp	r5, r6
 8007d6a:	d1f6      	bne.n	8007d5a <__strtok_r+0x12>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f0      	bne.n	8007d52 <__strtok_r+0xa>
 8007d70:	6014      	str	r4, [r2, #0]
 8007d72:	7003      	strb	r3, [r0, #0]
 8007d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d76:	461c      	mov	r4, r3
 8007d78:	e00c      	b.n	8007d94 <__strtok_r+0x4c>
 8007d7a:	b915      	cbnz	r5, 8007d82 <__strtok_r+0x3a>
 8007d7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d80:	460e      	mov	r6, r1
 8007d82:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007d86:	42ab      	cmp	r3, r5
 8007d88:	d1f7      	bne.n	8007d7a <__strtok_r+0x32>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0f3      	beq.n	8007d76 <__strtok_r+0x2e>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007d94:	6014      	str	r4, [r2, #0]
 8007d96:	e7ed      	b.n	8007d74 <__strtok_r+0x2c>

08007d98 <_close_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	4d06      	ldr	r5, [pc, #24]	@ (8007db4 <_close_r+0x1c>)
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4604      	mov	r4, r0
 8007da0:	4608      	mov	r0, r1
 8007da2:	602b      	str	r3, [r5, #0]
 8007da4:	f7f9 fcac 	bl	8001700 <_close>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d102      	bne.n	8007db2 <_close_r+0x1a>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	b103      	cbz	r3, 8007db2 <_close_r+0x1a>
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	200006cc 	.word	0x200006cc

08007db8 <_lseek_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d07      	ldr	r5, [pc, #28]	@ (8007dd8 <_lseek_r+0x20>)
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	602a      	str	r2, [r5, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f7f9 fcc1 	bl	800174e <_lseek>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d102      	bne.n	8007dd6 <_lseek_r+0x1e>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	b103      	cbz	r3, 8007dd6 <_lseek_r+0x1e>
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
 8007dd8:	200006cc 	.word	0x200006cc

08007ddc <_read_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d07      	ldr	r5, [pc, #28]	@ (8007dfc <_read_r+0x20>)
 8007de0:	4604      	mov	r4, r0
 8007de2:	4608      	mov	r0, r1
 8007de4:	4611      	mov	r1, r2
 8007de6:	2200      	movs	r2, #0
 8007de8:	602a      	str	r2, [r5, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	f7f9 fc4f 	bl	800168e <_read>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_read_r+0x1e>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_read_r+0x1e>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	200006cc 	.word	0x200006cc

08007e00 <_write_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4d07      	ldr	r5, [pc, #28]	@ (8007e20 <_write_r+0x20>)
 8007e04:	4604      	mov	r4, r0
 8007e06:	4608      	mov	r0, r1
 8007e08:	4611      	mov	r1, r2
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	602a      	str	r2, [r5, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f7f9 fc5a 	bl	80016c8 <_write>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d102      	bne.n	8007e1e <_write_r+0x1e>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b103      	cbz	r3, 8007e1e <_write_r+0x1e>
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	200006cc 	.word	0x200006cc

08007e24 <__errno>:
 8007e24:	4b01      	ldr	r3, [pc, #4]	@ (8007e2c <__errno+0x8>)
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	200001ec 	.word	0x200001ec

08007e30 <__libc_init_array>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	4d0d      	ldr	r5, [pc, #52]	@ (8007e68 <__libc_init_array+0x38>)
 8007e34:	4c0d      	ldr	r4, [pc, #52]	@ (8007e6c <__libc_init_array+0x3c>)
 8007e36:	1b64      	subs	r4, r4, r5
 8007e38:	10a4      	asrs	r4, r4, #2
 8007e3a:	2600      	movs	r6, #0
 8007e3c:	42a6      	cmp	r6, r4
 8007e3e:	d109      	bne.n	8007e54 <__libc_init_array+0x24>
 8007e40:	4d0b      	ldr	r5, [pc, #44]	@ (8007e70 <__libc_init_array+0x40>)
 8007e42:	4c0c      	ldr	r4, [pc, #48]	@ (8007e74 <__libc_init_array+0x44>)
 8007e44:	f000 fff0 	bl	8008e28 <_init>
 8007e48:	1b64      	subs	r4, r4, r5
 8007e4a:	10a4      	asrs	r4, r4, #2
 8007e4c:	2600      	movs	r6, #0
 8007e4e:	42a6      	cmp	r6, r4
 8007e50:	d105      	bne.n	8007e5e <__libc_init_array+0x2e>
 8007e52:	bd70      	pop	{r4, r5, r6, pc}
 8007e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e58:	4798      	blx	r3
 8007e5a:	3601      	adds	r6, #1
 8007e5c:	e7ee      	b.n	8007e3c <__libc_init_array+0xc>
 8007e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e62:	4798      	blx	r3
 8007e64:	3601      	adds	r6, #1
 8007e66:	e7f2      	b.n	8007e4e <__libc_init_array+0x1e>
 8007e68:	080090bc 	.word	0x080090bc
 8007e6c:	080090bc 	.word	0x080090bc
 8007e70:	080090bc 	.word	0x080090bc
 8007e74:	080090c0 	.word	0x080090c0

08007e78 <__retarget_lock_init_recursive>:
 8007e78:	4770      	bx	lr

08007e7a <__retarget_lock_acquire_recursive>:
 8007e7a:	4770      	bx	lr

08007e7c <__retarget_lock_release_recursive>:
 8007e7c:	4770      	bx	lr
	...

08007e80 <__assert_func>:
 8007e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e82:	4614      	mov	r4, r2
 8007e84:	461a      	mov	r2, r3
 8007e86:	4b09      	ldr	r3, [pc, #36]	@ (8007eac <__assert_func+0x2c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	68d8      	ldr	r0, [r3, #12]
 8007e8e:	b954      	cbnz	r4, 8007ea6 <__assert_func+0x26>
 8007e90:	4b07      	ldr	r3, [pc, #28]	@ (8007eb0 <__assert_func+0x30>)
 8007e92:	461c      	mov	r4, r3
 8007e94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e98:	9100      	str	r1, [sp, #0]
 8007e9a:	462b      	mov	r3, r5
 8007e9c:	4905      	ldr	r1, [pc, #20]	@ (8007eb4 <__assert_func+0x34>)
 8007e9e:	f000 fc9f 	bl	80087e0 <fiprintf>
 8007ea2:	f000 fce7 	bl	8008874 <abort>
 8007ea6:	4b04      	ldr	r3, [pc, #16]	@ (8007eb8 <__assert_func+0x38>)
 8007ea8:	e7f4      	b.n	8007e94 <__assert_func+0x14>
 8007eaa:	bf00      	nop
 8007eac:	200001ec 	.word	0x200001ec
 8007eb0:	0800907d 	.word	0x0800907d
 8007eb4:	0800904f 	.word	0x0800904f
 8007eb8:	08009042 	.word	0x08009042

08007ebc <_free_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	2900      	cmp	r1, #0
 8007ec2:	d041      	beq.n	8007f48 <_free_r+0x8c>
 8007ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec8:	1f0c      	subs	r4, r1, #4
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	bfb8      	it	lt
 8007ece:	18e4      	addlt	r4, r4, r3
 8007ed0:	f000 f8e8 	bl	80080a4 <__malloc_lock>
 8007ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f4c <_free_r+0x90>)
 8007ed6:	6813      	ldr	r3, [r2, #0]
 8007ed8:	b933      	cbnz	r3, 8007ee8 <_free_r+0x2c>
 8007eda:	6063      	str	r3, [r4, #4]
 8007edc:	6014      	str	r4, [r2, #0]
 8007ede:	4628      	mov	r0, r5
 8007ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ee4:	f000 b8e4 	b.w	80080b0 <__malloc_unlock>
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d908      	bls.n	8007efe <_free_r+0x42>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	1821      	adds	r1, r4, r0
 8007ef0:	428b      	cmp	r3, r1
 8007ef2:	bf01      	itttt	eq
 8007ef4:	6819      	ldreq	r1, [r3, #0]
 8007ef6:	685b      	ldreq	r3, [r3, #4]
 8007ef8:	1809      	addeq	r1, r1, r0
 8007efa:	6021      	streq	r1, [r4, #0]
 8007efc:	e7ed      	b.n	8007eda <_free_r+0x1e>
 8007efe:	461a      	mov	r2, r3
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	b10b      	cbz	r3, 8007f08 <_free_r+0x4c>
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d9fa      	bls.n	8007efe <_free_r+0x42>
 8007f08:	6811      	ldr	r1, [r2, #0]
 8007f0a:	1850      	adds	r0, r2, r1
 8007f0c:	42a0      	cmp	r0, r4
 8007f0e:	d10b      	bne.n	8007f28 <_free_r+0x6c>
 8007f10:	6820      	ldr	r0, [r4, #0]
 8007f12:	4401      	add	r1, r0
 8007f14:	1850      	adds	r0, r2, r1
 8007f16:	4283      	cmp	r3, r0
 8007f18:	6011      	str	r1, [r2, #0]
 8007f1a:	d1e0      	bne.n	8007ede <_free_r+0x22>
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	6053      	str	r3, [r2, #4]
 8007f22:	4408      	add	r0, r1
 8007f24:	6010      	str	r0, [r2, #0]
 8007f26:	e7da      	b.n	8007ede <_free_r+0x22>
 8007f28:	d902      	bls.n	8007f30 <_free_r+0x74>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	602b      	str	r3, [r5, #0]
 8007f2e:	e7d6      	b.n	8007ede <_free_r+0x22>
 8007f30:	6820      	ldr	r0, [r4, #0]
 8007f32:	1821      	adds	r1, r4, r0
 8007f34:	428b      	cmp	r3, r1
 8007f36:	bf04      	itt	eq
 8007f38:	6819      	ldreq	r1, [r3, #0]
 8007f3a:	685b      	ldreq	r3, [r3, #4]
 8007f3c:	6063      	str	r3, [r4, #4]
 8007f3e:	bf04      	itt	eq
 8007f40:	1809      	addeq	r1, r1, r0
 8007f42:	6021      	streq	r1, [r4, #0]
 8007f44:	6054      	str	r4, [r2, #4]
 8007f46:	e7ca      	b.n	8007ede <_free_r+0x22>
 8007f48:	bd38      	pop	{r3, r4, r5, pc}
 8007f4a:	bf00      	nop
 8007f4c:	200006d8 	.word	0x200006d8

08007f50 <malloc>:
 8007f50:	4b02      	ldr	r3, [pc, #8]	@ (8007f5c <malloc+0xc>)
 8007f52:	4601      	mov	r1, r0
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	f000 b825 	b.w	8007fa4 <_malloc_r>
 8007f5a:	bf00      	nop
 8007f5c:	200001ec 	.word	0x200001ec

08007f60 <sbrk_aligned>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	4e0f      	ldr	r6, [pc, #60]	@ (8007fa0 <sbrk_aligned+0x40>)
 8007f64:	460c      	mov	r4, r1
 8007f66:	6831      	ldr	r1, [r6, #0]
 8007f68:	4605      	mov	r5, r0
 8007f6a:	b911      	cbnz	r1, 8007f72 <sbrk_aligned+0x12>
 8007f6c:	f000 fc64 	bl	8008838 <_sbrk_r>
 8007f70:	6030      	str	r0, [r6, #0]
 8007f72:	4621      	mov	r1, r4
 8007f74:	4628      	mov	r0, r5
 8007f76:	f000 fc5f 	bl	8008838 <_sbrk_r>
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	d103      	bne.n	8007f86 <sbrk_aligned+0x26>
 8007f7e:	f04f 34ff 	mov.w	r4, #4294967295
 8007f82:	4620      	mov	r0, r4
 8007f84:	bd70      	pop	{r4, r5, r6, pc}
 8007f86:	1cc4      	adds	r4, r0, #3
 8007f88:	f024 0403 	bic.w	r4, r4, #3
 8007f8c:	42a0      	cmp	r0, r4
 8007f8e:	d0f8      	beq.n	8007f82 <sbrk_aligned+0x22>
 8007f90:	1a21      	subs	r1, r4, r0
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 fc50 	bl	8008838 <_sbrk_r>
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d1f2      	bne.n	8007f82 <sbrk_aligned+0x22>
 8007f9c:	e7ef      	b.n	8007f7e <sbrk_aligned+0x1e>
 8007f9e:	bf00      	nop
 8007fa0:	200006d4 	.word	0x200006d4

08007fa4 <_malloc_r>:
 8007fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa8:	1ccd      	adds	r5, r1, #3
 8007faa:	f025 0503 	bic.w	r5, r5, #3
 8007fae:	3508      	adds	r5, #8
 8007fb0:	2d0c      	cmp	r5, #12
 8007fb2:	bf38      	it	cc
 8007fb4:	250c      	movcc	r5, #12
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	4606      	mov	r6, r0
 8007fba:	db01      	blt.n	8007fc0 <_malloc_r+0x1c>
 8007fbc:	42a9      	cmp	r1, r5
 8007fbe:	d904      	bls.n	8007fca <_malloc_r+0x26>
 8007fc0:	230c      	movs	r3, #12
 8007fc2:	6033      	str	r3, [r6, #0]
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080a0 <_malloc_r+0xfc>
 8007fce:	f000 f869 	bl	80080a4 <__malloc_lock>
 8007fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fd6:	461c      	mov	r4, r3
 8007fd8:	bb44      	cbnz	r4, 800802c <_malloc_r+0x88>
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f7ff ffbf 	bl	8007f60 <sbrk_aligned>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	d158      	bne.n	800809a <_malloc_r+0xf6>
 8007fe8:	f8d8 4000 	ldr.w	r4, [r8]
 8007fec:	4627      	mov	r7, r4
 8007fee:	2f00      	cmp	r7, #0
 8007ff0:	d143      	bne.n	800807a <_malloc_r+0xd6>
 8007ff2:	2c00      	cmp	r4, #0
 8007ff4:	d04b      	beq.n	800808e <_malloc_r+0xea>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	4639      	mov	r1, r7
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	eb04 0903 	add.w	r9, r4, r3
 8008000:	f000 fc1a 	bl	8008838 <_sbrk_r>
 8008004:	4581      	cmp	r9, r0
 8008006:	d142      	bne.n	800808e <_malloc_r+0xea>
 8008008:	6821      	ldr	r1, [r4, #0]
 800800a:	1a6d      	subs	r5, r5, r1
 800800c:	4629      	mov	r1, r5
 800800e:	4630      	mov	r0, r6
 8008010:	f7ff ffa6 	bl	8007f60 <sbrk_aligned>
 8008014:	3001      	adds	r0, #1
 8008016:	d03a      	beq.n	800808e <_malloc_r+0xea>
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	442b      	add	r3, r5
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	f8d8 3000 	ldr.w	r3, [r8]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	bb62      	cbnz	r2, 8008080 <_malloc_r+0xdc>
 8008026:	f8c8 7000 	str.w	r7, [r8]
 800802a:	e00f      	b.n	800804c <_malloc_r+0xa8>
 800802c:	6822      	ldr	r2, [r4, #0]
 800802e:	1b52      	subs	r2, r2, r5
 8008030:	d420      	bmi.n	8008074 <_malloc_r+0xd0>
 8008032:	2a0b      	cmp	r2, #11
 8008034:	d917      	bls.n	8008066 <_malloc_r+0xc2>
 8008036:	1961      	adds	r1, r4, r5
 8008038:	42a3      	cmp	r3, r4
 800803a:	6025      	str	r5, [r4, #0]
 800803c:	bf18      	it	ne
 800803e:	6059      	strne	r1, [r3, #4]
 8008040:	6863      	ldr	r3, [r4, #4]
 8008042:	bf08      	it	eq
 8008044:	f8c8 1000 	streq.w	r1, [r8]
 8008048:	5162      	str	r2, [r4, r5]
 800804a:	604b      	str	r3, [r1, #4]
 800804c:	4630      	mov	r0, r6
 800804e:	f000 f82f 	bl	80080b0 <__malloc_unlock>
 8008052:	f104 000b 	add.w	r0, r4, #11
 8008056:	1d23      	adds	r3, r4, #4
 8008058:	f020 0007 	bic.w	r0, r0, #7
 800805c:	1ac2      	subs	r2, r0, r3
 800805e:	bf1c      	itt	ne
 8008060:	1a1b      	subne	r3, r3, r0
 8008062:	50a3      	strne	r3, [r4, r2]
 8008064:	e7af      	b.n	8007fc6 <_malloc_r+0x22>
 8008066:	6862      	ldr	r2, [r4, #4]
 8008068:	42a3      	cmp	r3, r4
 800806a:	bf0c      	ite	eq
 800806c:	f8c8 2000 	streq.w	r2, [r8]
 8008070:	605a      	strne	r2, [r3, #4]
 8008072:	e7eb      	b.n	800804c <_malloc_r+0xa8>
 8008074:	4623      	mov	r3, r4
 8008076:	6864      	ldr	r4, [r4, #4]
 8008078:	e7ae      	b.n	8007fd8 <_malloc_r+0x34>
 800807a:	463c      	mov	r4, r7
 800807c:	687f      	ldr	r7, [r7, #4]
 800807e:	e7b6      	b.n	8007fee <_malloc_r+0x4a>
 8008080:	461a      	mov	r2, r3
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	42a3      	cmp	r3, r4
 8008086:	d1fb      	bne.n	8008080 <_malloc_r+0xdc>
 8008088:	2300      	movs	r3, #0
 800808a:	6053      	str	r3, [r2, #4]
 800808c:	e7de      	b.n	800804c <_malloc_r+0xa8>
 800808e:	230c      	movs	r3, #12
 8008090:	6033      	str	r3, [r6, #0]
 8008092:	4630      	mov	r0, r6
 8008094:	f000 f80c 	bl	80080b0 <__malloc_unlock>
 8008098:	e794      	b.n	8007fc4 <_malloc_r+0x20>
 800809a:	6005      	str	r5, [r0, #0]
 800809c:	e7d6      	b.n	800804c <_malloc_r+0xa8>
 800809e:	bf00      	nop
 80080a0:	200006d8 	.word	0x200006d8

080080a4 <__malloc_lock>:
 80080a4:	4801      	ldr	r0, [pc, #4]	@ (80080ac <__malloc_lock+0x8>)
 80080a6:	f7ff bee8 	b.w	8007e7a <__retarget_lock_acquire_recursive>
 80080aa:	bf00      	nop
 80080ac:	200006d0 	.word	0x200006d0

080080b0 <__malloc_unlock>:
 80080b0:	4801      	ldr	r0, [pc, #4]	@ (80080b8 <__malloc_unlock+0x8>)
 80080b2:	f7ff bee3 	b.w	8007e7c <__retarget_lock_release_recursive>
 80080b6:	bf00      	nop
 80080b8:	200006d0 	.word	0x200006d0

080080bc <__ssputs_r>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	688e      	ldr	r6, [r1, #8]
 80080c2:	461f      	mov	r7, r3
 80080c4:	42be      	cmp	r6, r7
 80080c6:	680b      	ldr	r3, [r1, #0]
 80080c8:	4682      	mov	sl, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	4690      	mov	r8, r2
 80080ce:	d82d      	bhi.n	800812c <__ssputs_r+0x70>
 80080d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080d8:	d026      	beq.n	8008128 <__ssputs_r+0x6c>
 80080da:	6965      	ldr	r5, [r4, #20]
 80080dc:	6909      	ldr	r1, [r1, #16]
 80080de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080e2:	eba3 0901 	sub.w	r9, r3, r1
 80080e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080ea:	1c7b      	adds	r3, r7, #1
 80080ec:	444b      	add	r3, r9
 80080ee:	106d      	asrs	r5, r5, #1
 80080f0:	429d      	cmp	r5, r3
 80080f2:	bf38      	it	cc
 80080f4:	461d      	movcc	r5, r3
 80080f6:	0553      	lsls	r3, r2, #21
 80080f8:	d527      	bpl.n	800814a <__ssputs_r+0x8e>
 80080fa:	4629      	mov	r1, r5
 80080fc:	f7ff ff52 	bl	8007fa4 <_malloc_r>
 8008100:	4606      	mov	r6, r0
 8008102:	b360      	cbz	r0, 800815e <__ssputs_r+0xa2>
 8008104:	6921      	ldr	r1, [r4, #16]
 8008106:	464a      	mov	r2, r9
 8008108:	f000 fba6 	bl	8008858 <memcpy>
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008116:	81a3      	strh	r3, [r4, #12]
 8008118:	6126      	str	r6, [r4, #16]
 800811a:	6165      	str	r5, [r4, #20]
 800811c:	444e      	add	r6, r9
 800811e:	eba5 0509 	sub.w	r5, r5, r9
 8008122:	6026      	str	r6, [r4, #0]
 8008124:	60a5      	str	r5, [r4, #8]
 8008126:	463e      	mov	r6, r7
 8008128:	42be      	cmp	r6, r7
 800812a:	d900      	bls.n	800812e <__ssputs_r+0x72>
 800812c:	463e      	mov	r6, r7
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	4632      	mov	r2, r6
 8008132:	4641      	mov	r1, r8
 8008134:	f000 fb66 	bl	8008804 <memmove>
 8008138:	68a3      	ldr	r3, [r4, #8]
 800813a:	1b9b      	subs	r3, r3, r6
 800813c:	60a3      	str	r3, [r4, #8]
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	4433      	add	r3, r6
 8008142:	6023      	str	r3, [r4, #0]
 8008144:	2000      	movs	r0, #0
 8008146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814a:	462a      	mov	r2, r5
 800814c:	f000 fb99 	bl	8008882 <_realloc_r>
 8008150:	4606      	mov	r6, r0
 8008152:	2800      	cmp	r0, #0
 8008154:	d1e0      	bne.n	8008118 <__ssputs_r+0x5c>
 8008156:	6921      	ldr	r1, [r4, #16]
 8008158:	4650      	mov	r0, sl
 800815a:	f7ff feaf 	bl	8007ebc <_free_r>
 800815e:	230c      	movs	r3, #12
 8008160:	f8ca 3000 	str.w	r3, [sl]
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	e7e9      	b.n	8008146 <__ssputs_r+0x8a>
	...

08008174 <_svfiprintf_r>:
 8008174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	4698      	mov	r8, r3
 800817a:	898b      	ldrh	r3, [r1, #12]
 800817c:	061b      	lsls	r3, r3, #24
 800817e:	b09d      	sub	sp, #116	@ 0x74
 8008180:	4607      	mov	r7, r0
 8008182:	460d      	mov	r5, r1
 8008184:	4614      	mov	r4, r2
 8008186:	d510      	bpl.n	80081aa <_svfiprintf_r+0x36>
 8008188:	690b      	ldr	r3, [r1, #16]
 800818a:	b973      	cbnz	r3, 80081aa <_svfiprintf_r+0x36>
 800818c:	2140      	movs	r1, #64	@ 0x40
 800818e:	f7ff ff09 	bl	8007fa4 <_malloc_r>
 8008192:	6028      	str	r0, [r5, #0]
 8008194:	6128      	str	r0, [r5, #16]
 8008196:	b930      	cbnz	r0, 80081a6 <_svfiprintf_r+0x32>
 8008198:	230c      	movs	r3, #12
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	b01d      	add	sp, #116	@ 0x74
 80081a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a6:	2340      	movs	r3, #64	@ 0x40
 80081a8:	616b      	str	r3, [r5, #20]
 80081aa:	2300      	movs	r3, #0
 80081ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ae:	2320      	movs	r3, #32
 80081b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081b8:	2330      	movs	r3, #48	@ 0x30
 80081ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008358 <_svfiprintf_r+0x1e4>
 80081be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081c2:	f04f 0901 	mov.w	r9, #1
 80081c6:	4623      	mov	r3, r4
 80081c8:	469a      	mov	sl, r3
 80081ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ce:	b10a      	cbz	r2, 80081d4 <_svfiprintf_r+0x60>
 80081d0:	2a25      	cmp	r2, #37	@ 0x25
 80081d2:	d1f9      	bne.n	80081c8 <_svfiprintf_r+0x54>
 80081d4:	ebba 0b04 	subs.w	fp, sl, r4
 80081d8:	d00b      	beq.n	80081f2 <_svfiprintf_r+0x7e>
 80081da:	465b      	mov	r3, fp
 80081dc:	4622      	mov	r2, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	4638      	mov	r0, r7
 80081e2:	f7ff ff6b 	bl	80080bc <__ssputs_r>
 80081e6:	3001      	adds	r0, #1
 80081e8:	f000 80a7 	beq.w	800833a <_svfiprintf_r+0x1c6>
 80081ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081ee:	445a      	add	r2, fp
 80081f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80081f2:	f89a 3000 	ldrb.w	r3, [sl]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 809f 	beq.w	800833a <_svfiprintf_r+0x1c6>
 80081fc:	2300      	movs	r3, #0
 80081fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008206:	f10a 0a01 	add.w	sl, sl, #1
 800820a:	9304      	str	r3, [sp, #16]
 800820c:	9307      	str	r3, [sp, #28]
 800820e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008212:	931a      	str	r3, [sp, #104]	@ 0x68
 8008214:	4654      	mov	r4, sl
 8008216:	2205      	movs	r2, #5
 8008218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800821c:	484e      	ldr	r0, [pc, #312]	@ (8008358 <_svfiprintf_r+0x1e4>)
 800821e:	f7f8 f80f 	bl	8000240 <memchr>
 8008222:	9a04      	ldr	r2, [sp, #16]
 8008224:	b9d8      	cbnz	r0, 800825e <_svfiprintf_r+0xea>
 8008226:	06d0      	lsls	r0, r2, #27
 8008228:	bf44      	itt	mi
 800822a:	2320      	movmi	r3, #32
 800822c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008230:	0711      	lsls	r1, r2, #28
 8008232:	bf44      	itt	mi
 8008234:	232b      	movmi	r3, #43	@ 0x2b
 8008236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800823a:	f89a 3000 	ldrb.w	r3, [sl]
 800823e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008240:	d015      	beq.n	800826e <_svfiprintf_r+0xfa>
 8008242:	9a07      	ldr	r2, [sp, #28]
 8008244:	4654      	mov	r4, sl
 8008246:	2000      	movs	r0, #0
 8008248:	f04f 0c0a 	mov.w	ip, #10
 800824c:	4621      	mov	r1, r4
 800824e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008252:	3b30      	subs	r3, #48	@ 0x30
 8008254:	2b09      	cmp	r3, #9
 8008256:	d94b      	bls.n	80082f0 <_svfiprintf_r+0x17c>
 8008258:	b1b0      	cbz	r0, 8008288 <_svfiprintf_r+0x114>
 800825a:	9207      	str	r2, [sp, #28]
 800825c:	e014      	b.n	8008288 <_svfiprintf_r+0x114>
 800825e:	eba0 0308 	sub.w	r3, r0, r8
 8008262:	fa09 f303 	lsl.w	r3, r9, r3
 8008266:	4313      	orrs	r3, r2
 8008268:	9304      	str	r3, [sp, #16]
 800826a:	46a2      	mov	sl, r4
 800826c:	e7d2      	b.n	8008214 <_svfiprintf_r+0xa0>
 800826e:	9b03      	ldr	r3, [sp, #12]
 8008270:	1d19      	adds	r1, r3, #4
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	9103      	str	r1, [sp, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	bfbb      	ittet	lt
 800827a:	425b      	neglt	r3, r3
 800827c:	f042 0202 	orrlt.w	r2, r2, #2
 8008280:	9307      	strge	r3, [sp, #28]
 8008282:	9307      	strlt	r3, [sp, #28]
 8008284:	bfb8      	it	lt
 8008286:	9204      	strlt	r2, [sp, #16]
 8008288:	7823      	ldrb	r3, [r4, #0]
 800828a:	2b2e      	cmp	r3, #46	@ 0x2e
 800828c:	d10a      	bne.n	80082a4 <_svfiprintf_r+0x130>
 800828e:	7863      	ldrb	r3, [r4, #1]
 8008290:	2b2a      	cmp	r3, #42	@ 0x2a
 8008292:	d132      	bne.n	80082fa <_svfiprintf_r+0x186>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	1d1a      	adds	r2, r3, #4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	9203      	str	r2, [sp, #12]
 800829c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082a0:	3402      	adds	r4, #2
 80082a2:	9305      	str	r3, [sp, #20]
 80082a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008368 <_svfiprintf_r+0x1f4>
 80082a8:	7821      	ldrb	r1, [r4, #0]
 80082aa:	2203      	movs	r2, #3
 80082ac:	4650      	mov	r0, sl
 80082ae:	f7f7 ffc7 	bl	8000240 <memchr>
 80082b2:	b138      	cbz	r0, 80082c4 <_svfiprintf_r+0x150>
 80082b4:	9b04      	ldr	r3, [sp, #16]
 80082b6:	eba0 000a 	sub.w	r0, r0, sl
 80082ba:	2240      	movs	r2, #64	@ 0x40
 80082bc:	4082      	lsls	r2, r0
 80082be:	4313      	orrs	r3, r2
 80082c0:	3401      	adds	r4, #1
 80082c2:	9304      	str	r3, [sp, #16]
 80082c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c8:	4824      	ldr	r0, [pc, #144]	@ (800835c <_svfiprintf_r+0x1e8>)
 80082ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082ce:	2206      	movs	r2, #6
 80082d0:	f7f7 ffb6 	bl	8000240 <memchr>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d036      	beq.n	8008346 <_svfiprintf_r+0x1d2>
 80082d8:	4b21      	ldr	r3, [pc, #132]	@ (8008360 <_svfiprintf_r+0x1ec>)
 80082da:	bb1b      	cbnz	r3, 8008324 <_svfiprintf_r+0x1b0>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	3307      	adds	r3, #7
 80082e0:	f023 0307 	bic.w	r3, r3, #7
 80082e4:	3308      	adds	r3, #8
 80082e6:	9303      	str	r3, [sp, #12]
 80082e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ea:	4433      	add	r3, r6
 80082ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ee:	e76a      	b.n	80081c6 <_svfiprintf_r+0x52>
 80082f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80082f4:	460c      	mov	r4, r1
 80082f6:	2001      	movs	r0, #1
 80082f8:	e7a8      	b.n	800824c <_svfiprintf_r+0xd8>
 80082fa:	2300      	movs	r3, #0
 80082fc:	3401      	adds	r4, #1
 80082fe:	9305      	str	r3, [sp, #20]
 8008300:	4619      	mov	r1, r3
 8008302:	f04f 0c0a 	mov.w	ip, #10
 8008306:	4620      	mov	r0, r4
 8008308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800830c:	3a30      	subs	r2, #48	@ 0x30
 800830e:	2a09      	cmp	r2, #9
 8008310:	d903      	bls.n	800831a <_svfiprintf_r+0x1a6>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0c6      	beq.n	80082a4 <_svfiprintf_r+0x130>
 8008316:	9105      	str	r1, [sp, #20]
 8008318:	e7c4      	b.n	80082a4 <_svfiprintf_r+0x130>
 800831a:	fb0c 2101 	mla	r1, ip, r1, r2
 800831e:	4604      	mov	r4, r0
 8008320:	2301      	movs	r3, #1
 8008322:	e7f0      	b.n	8008306 <_svfiprintf_r+0x192>
 8008324:	ab03      	add	r3, sp, #12
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	462a      	mov	r2, r5
 800832a:	4b0e      	ldr	r3, [pc, #56]	@ (8008364 <_svfiprintf_r+0x1f0>)
 800832c:	a904      	add	r1, sp, #16
 800832e:	4638      	mov	r0, r7
 8008330:	f3af 8000 	nop.w
 8008334:	1c42      	adds	r2, r0, #1
 8008336:	4606      	mov	r6, r0
 8008338:	d1d6      	bne.n	80082e8 <_svfiprintf_r+0x174>
 800833a:	89ab      	ldrh	r3, [r5, #12]
 800833c:	065b      	lsls	r3, r3, #25
 800833e:	f53f af2d 	bmi.w	800819c <_svfiprintf_r+0x28>
 8008342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008344:	e72c      	b.n	80081a0 <_svfiprintf_r+0x2c>
 8008346:	ab03      	add	r3, sp, #12
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	462a      	mov	r2, r5
 800834c:	4b05      	ldr	r3, [pc, #20]	@ (8008364 <_svfiprintf_r+0x1f0>)
 800834e:	a904      	add	r1, sp, #16
 8008350:	4638      	mov	r0, r7
 8008352:	f000 f879 	bl	8008448 <_printf_i>
 8008356:	e7ed      	b.n	8008334 <_svfiprintf_r+0x1c0>
 8008358:	0800907e 	.word	0x0800907e
 800835c:	08009088 	.word	0x08009088
 8008360:	00000000 	.word	0x00000000
 8008364:	080080bd 	.word	0x080080bd
 8008368:	08009084 	.word	0x08009084

0800836c <_printf_common>:
 800836c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	4616      	mov	r6, r2
 8008372:	4698      	mov	r8, r3
 8008374:	688a      	ldr	r2, [r1, #8]
 8008376:	690b      	ldr	r3, [r1, #16]
 8008378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800837c:	4293      	cmp	r3, r2
 800837e:	bfb8      	it	lt
 8008380:	4613      	movlt	r3, r2
 8008382:	6033      	str	r3, [r6, #0]
 8008384:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008388:	4607      	mov	r7, r0
 800838a:	460c      	mov	r4, r1
 800838c:	b10a      	cbz	r2, 8008392 <_printf_common+0x26>
 800838e:	3301      	adds	r3, #1
 8008390:	6033      	str	r3, [r6, #0]
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	0699      	lsls	r1, r3, #26
 8008396:	bf42      	ittt	mi
 8008398:	6833      	ldrmi	r3, [r6, #0]
 800839a:	3302      	addmi	r3, #2
 800839c:	6033      	strmi	r3, [r6, #0]
 800839e:	6825      	ldr	r5, [r4, #0]
 80083a0:	f015 0506 	ands.w	r5, r5, #6
 80083a4:	d106      	bne.n	80083b4 <_printf_common+0x48>
 80083a6:	f104 0a19 	add.w	sl, r4, #25
 80083aa:	68e3      	ldr	r3, [r4, #12]
 80083ac:	6832      	ldr	r2, [r6, #0]
 80083ae:	1a9b      	subs	r3, r3, r2
 80083b0:	42ab      	cmp	r3, r5
 80083b2:	dc26      	bgt.n	8008402 <_printf_common+0x96>
 80083b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083b8:	6822      	ldr	r2, [r4, #0]
 80083ba:	3b00      	subs	r3, #0
 80083bc:	bf18      	it	ne
 80083be:	2301      	movne	r3, #1
 80083c0:	0692      	lsls	r2, r2, #26
 80083c2:	d42b      	bmi.n	800841c <_printf_common+0xb0>
 80083c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083c8:	4641      	mov	r1, r8
 80083ca:	4638      	mov	r0, r7
 80083cc:	47c8      	blx	r9
 80083ce:	3001      	adds	r0, #1
 80083d0:	d01e      	beq.n	8008410 <_printf_common+0xa4>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	6922      	ldr	r2, [r4, #16]
 80083d6:	f003 0306 	and.w	r3, r3, #6
 80083da:	2b04      	cmp	r3, #4
 80083dc:	bf02      	ittt	eq
 80083de:	68e5      	ldreq	r5, [r4, #12]
 80083e0:	6833      	ldreq	r3, [r6, #0]
 80083e2:	1aed      	subeq	r5, r5, r3
 80083e4:	68a3      	ldr	r3, [r4, #8]
 80083e6:	bf0c      	ite	eq
 80083e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083ec:	2500      	movne	r5, #0
 80083ee:	4293      	cmp	r3, r2
 80083f0:	bfc4      	itt	gt
 80083f2:	1a9b      	subgt	r3, r3, r2
 80083f4:	18ed      	addgt	r5, r5, r3
 80083f6:	2600      	movs	r6, #0
 80083f8:	341a      	adds	r4, #26
 80083fa:	42b5      	cmp	r5, r6
 80083fc:	d11a      	bne.n	8008434 <_printf_common+0xc8>
 80083fe:	2000      	movs	r0, #0
 8008400:	e008      	b.n	8008414 <_printf_common+0xa8>
 8008402:	2301      	movs	r3, #1
 8008404:	4652      	mov	r2, sl
 8008406:	4641      	mov	r1, r8
 8008408:	4638      	mov	r0, r7
 800840a:	47c8      	blx	r9
 800840c:	3001      	adds	r0, #1
 800840e:	d103      	bne.n	8008418 <_printf_common+0xac>
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008418:	3501      	adds	r5, #1
 800841a:	e7c6      	b.n	80083aa <_printf_common+0x3e>
 800841c:	18e1      	adds	r1, r4, r3
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	2030      	movs	r0, #48	@ 0x30
 8008422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008426:	4422      	add	r2, r4
 8008428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800842c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008430:	3302      	adds	r3, #2
 8008432:	e7c7      	b.n	80083c4 <_printf_common+0x58>
 8008434:	2301      	movs	r3, #1
 8008436:	4622      	mov	r2, r4
 8008438:	4641      	mov	r1, r8
 800843a:	4638      	mov	r0, r7
 800843c:	47c8      	blx	r9
 800843e:	3001      	adds	r0, #1
 8008440:	d0e6      	beq.n	8008410 <_printf_common+0xa4>
 8008442:	3601      	adds	r6, #1
 8008444:	e7d9      	b.n	80083fa <_printf_common+0x8e>
	...

08008448 <_printf_i>:
 8008448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800844c:	7e0f      	ldrb	r7, [r1, #24]
 800844e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008450:	2f78      	cmp	r7, #120	@ 0x78
 8008452:	4691      	mov	r9, r2
 8008454:	4680      	mov	r8, r0
 8008456:	460c      	mov	r4, r1
 8008458:	469a      	mov	sl, r3
 800845a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800845e:	d807      	bhi.n	8008470 <_printf_i+0x28>
 8008460:	2f62      	cmp	r7, #98	@ 0x62
 8008462:	d80a      	bhi.n	800847a <_printf_i+0x32>
 8008464:	2f00      	cmp	r7, #0
 8008466:	f000 80d2 	beq.w	800860e <_printf_i+0x1c6>
 800846a:	2f58      	cmp	r7, #88	@ 0x58
 800846c:	f000 80b9 	beq.w	80085e2 <_printf_i+0x19a>
 8008470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008478:	e03a      	b.n	80084f0 <_printf_i+0xa8>
 800847a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800847e:	2b15      	cmp	r3, #21
 8008480:	d8f6      	bhi.n	8008470 <_printf_i+0x28>
 8008482:	a101      	add	r1, pc, #4	@ (adr r1, 8008488 <_printf_i+0x40>)
 8008484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008488:	080084e1 	.word	0x080084e1
 800848c:	080084f5 	.word	0x080084f5
 8008490:	08008471 	.word	0x08008471
 8008494:	08008471 	.word	0x08008471
 8008498:	08008471 	.word	0x08008471
 800849c:	08008471 	.word	0x08008471
 80084a0:	080084f5 	.word	0x080084f5
 80084a4:	08008471 	.word	0x08008471
 80084a8:	08008471 	.word	0x08008471
 80084ac:	08008471 	.word	0x08008471
 80084b0:	08008471 	.word	0x08008471
 80084b4:	080085f5 	.word	0x080085f5
 80084b8:	0800851f 	.word	0x0800851f
 80084bc:	080085af 	.word	0x080085af
 80084c0:	08008471 	.word	0x08008471
 80084c4:	08008471 	.word	0x08008471
 80084c8:	08008617 	.word	0x08008617
 80084cc:	08008471 	.word	0x08008471
 80084d0:	0800851f 	.word	0x0800851f
 80084d4:	08008471 	.word	0x08008471
 80084d8:	08008471 	.word	0x08008471
 80084dc:	080085b7 	.word	0x080085b7
 80084e0:	6833      	ldr	r3, [r6, #0]
 80084e2:	1d1a      	adds	r2, r3, #4
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6032      	str	r2, [r6, #0]
 80084e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084f0:	2301      	movs	r3, #1
 80084f2:	e09d      	b.n	8008630 <_printf_i+0x1e8>
 80084f4:	6833      	ldr	r3, [r6, #0]
 80084f6:	6820      	ldr	r0, [r4, #0]
 80084f8:	1d19      	adds	r1, r3, #4
 80084fa:	6031      	str	r1, [r6, #0]
 80084fc:	0606      	lsls	r6, r0, #24
 80084fe:	d501      	bpl.n	8008504 <_printf_i+0xbc>
 8008500:	681d      	ldr	r5, [r3, #0]
 8008502:	e003      	b.n	800850c <_printf_i+0xc4>
 8008504:	0645      	lsls	r5, r0, #25
 8008506:	d5fb      	bpl.n	8008500 <_printf_i+0xb8>
 8008508:	f9b3 5000 	ldrsh.w	r5, [r3]
 800850c:	2d00      	cmp	r5, #0
 800850e:	da03      	bge.n	8008518 <_printf_i+0xd0>
 8008510:	232d      	movs	r3, #45	@ 0x2d
 8008512:	426d      	negs	r5, r5
 8008514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008518:	4859      	ldr	r0, [pc, #356]	@ (8008680 <_printf_i+0x238>)
 800851a:	230a      	movs	r3, #10
 800851c:	e011      	b.n	8008542 <_printf_i+0xfa>
 800851e:	6821      	ldr	r1, [r4, #0]
 8008520:	6833      	ldr	r3, [r6, #0]
 8008522:	0608      	lsls	r0, r1, #24
 8008524:	f853 5b04 	ldr.w	r5, [r3], #4
 8008528:	d402      	bmi.n	8008530 <_printf_i+0xe8>
 800852a:	0649      	lsls	r1, r1, #25
 800852c:	bf48      	it	mi
 800852e:	b2ad      	uxthmi	r5, r5
 8008530:	2f6f      	cmp	r7, #111	@ 0x6f
 8008532:	4853      	ldr	r0, [pc, #332]	@ (8008680 <_printf_i+0x238>)
 8008534:	6033      	str	r3, [r6, #0]
 8008536:	bf14      	ite	ne
 8008538:	230a      	movne	r3, #10
 800853a:	2308      	moveq	r3, #8
 800853c:	2100      	movs	r1, #0
 800853e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008542:	6866      	ldr	r6, [r4, #4]
 8008544:	60a6      	str	r6, [r4, #8]
 8008546:	2e00      	cmp	r6, #0
 8008548:	bfa2      	ittt	ge
 800854a:	6821      	ldrge	r1, [r4, #0]
 800854c:	f021 0104 	bicge.w	r1, r1, #4
 8008550:	6021      	strge	r1, [r4, #0]
 8008552:	b90d      	cbnz	r5, 8008558 <_printf_i+0x110>
 8008554:	2e00      	cmp	r6, #0
 8008556:	d04b      	beq.n	80085f0 <_printf_i+0x1a8>
 8008558:	4616      	mov	r6, r2
 800855a:	fbb5 f1f3 	udiv	r1, r5, r3
 800855e:	fb03 5711 	mls	r7, r3, r1, r5
 8008562:	5dc7      	ldrb	r7, [r0, r7]
 8008564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008568:	462f      	mov	r7, r5
 800856a:	42bb      	cmp	r3, r7
 800856c:	460d      	mov	r5, r1
 800856e:	d9f4      	bls.n	800855a <_printf_i+0x112>
 8008570:	2b08      	cmp	r3, #8
 8008572:	d10b      	bne.n	800858c <_printf_i+0x144>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	07df      	lsls	r7, r3, #31
 8008578:	d508      	bpl.n	800858c <_printf_i+0x144>
 800857a:	6923      	ldr	r3, [r4, #16]
 800857c:	6861      	ldr	r1, [r4, #4]
 800857e:	4299      	cmp	r1, r3
 8008580:	bfde      	ittt	le
 8008582:	2330      	movle	r3, #48	@ 0x30
 8008584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800858c:	1b92      	subs	r2, r2, r6
 800858e:	6122      	str	r2, [r4, #16]
 8008590:	f8cd a000 	str.w	sl, [sp]
 8008594:	464b      	mov	r3, r9
 8008596:	aa03      	add	r2, sp, #12
 8008598:	4621      	mov	r1, r4
 800859a:	4640      	mov	r0, r8
 800859c:	f7ff fee6 	bl	800836c <_printf_common>
 80085a0:	3001      	adds	r0, #1
 80085a2:	d14a      	bne.n	800863a <_printf_i+0x1f2>
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	b004      	add	sp, #16
 80085aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	f043 0320 	orr.w	r3, r3, #32
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	4833      	ldr	r0, [pc, #204]	@ (8008684 <_printf_i+0x23c>)
 80085b8:	2778      	movs	r7, #120	@ 0x78
 80085ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	6831      	ldr	r1, [r6, #0]
 80085c2:	061f      	lsls	r7, r3, #24
 80085c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80085c8:	d402      	bmi.n	80085d0 <_printf_i+0x188>
 80085ca:	065f      	lsls	r7, r3, #25
 80085cc:	bf48      	it	mi
 80085ce:	b2ad      	uxthmi	r5, r5
 80085d0:	6031      	str	r1, [r6, #0]
 80085d2:	07d9      	lsls	r1, r3, #31
 80085d4:	bf44      	itt	mi
 80085d6:	f043 0320 	orrmi.w	r3, r3, #32
 80085da:	6023      	strmi	r3, [r4, #0]
 80085dc:	b11d      	cbz	r5, 80085e6 <_printf_i+0x19e>
 80085de:	2310      	movs	r3, #16
 80085e0:	e7ac      	b.n	800853c <_printf_i+0xf4>
 80085e2:	4827      	ldr	r0, [pc, #156]	@ (8008680 <_printf_i+0x238>)
 80085e4:	e7e9      	b.n	80085ba <_printf_i+0x172>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	f023 0320 	bic.w	r3, r3, #32
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	e7f6      	b.n	80085de <_printf_i+0x196>
 80085f0:	4616      	mov	r6, r2
 80085f2:	e7bd      	b.n	8008570 <_printf_i+0x128>
 80085f4:	6833      	ldr	r3, [r6, #0]
 80085f6:	6825      	ldr	r5, [r4, #0]
 80085f8:	6961      	ldr	r1, [r4, #20]
 80085fa:	1d18      	adds	r0, r3, #4
 80085fc:	6030      	str	r0, [r6, #0]
 80085fe:	062e      	lsls	r6, r5, #24
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	d501      	bpl.n	8008608 <_printf_i+0x1c0>
 8008604:	6019      	str	r1, [r3, #0]
 8008606:	e002      	b.n	800860e <_printf_i+0x1c6>
 8008608:	0668      	lsls	r0, r5, #25
 800860a:	d5fb      	bpl.n	8008604 <_printf_i+0x1bc>
 800860c:	8019      	strh	r1, [r3, #0]
 800860e:	2300      	movs	r3, #0
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	4616      	mov	r6, r2
 8008614:	e7bc      	b.n	8008590 <_printf_i+0x148>
 8008616:	6833      	ldr	r3, [r6, #0]
 8008618:	1d1a      	adds	r2, r3, #4
 800861a:	6032      	str	r2, [r6, #0]
 800861c:	681e      	ldr	r6, [r3, #0]
 800861e:	6862      	ldr	r2, [r4, #4]
 8008620:	2100      	movs	r1, #0
 8008622:	4630      	mov	r0, r6
 8008624:	f7f7 fe0c 	bl	8000240 <memchr>
 8008628:	b108      	cbz	r0, 800862e <_printf_i+0x1e6>
 800862a:	1b80      	subs	r0, r0, r6
 800862c:	6060      	str	r0, [r4, #4]
 800862e:	6863      	ldr	r3, [r4, #4]
 8008630:	6123      	str	r3, [r4, #16]
 8008632:	2300      	movs	r3, #0
 8008634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008638:	e7aa      	b.n	8008590 <_printf_i+0x148>
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	4632      	mov	r2, r6
 800863e:	4649      	mov	r1, r9
 8008640:	4640      	mov	r0, r8
 8008642:	47d0      	blx	sl
 8008644:	3001      	adds	r0, #1
 8008646:	d0ad      	beq.n	80085a4 <_printf_i+0x15c>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	079b      	lsls	r3, r3, #30
 800864c:	d413      	bmi.n	8008676 <_printf_i+0x22e>
 800864e:	68e0      	ldr	r0, [r4, #12]
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	4298      	cmp	r0, r3
 8008654:	bfb8      	it	lt
 8008656:	4618      	movlt	r0, r3
 8008658:	e7a6      	b.n	80085a8 <_printf_i+0x160>
 800865a:	2301      	movs	r3, #1
 800865c:	4632      	mov	r2, r6
 800865e:	4649      	mov	r1, r9
 8008660:	4640      	mov	r0, r8
 8008662:	47d0      	blx	sl
 8008664:	3001      	adds	r0, #1
 8008666:	d09d      	beq.n	80085a4 <_printf_i+0x15c>
 8008668:	3501      	adds	r5, #1
 800866a:	68e3      	ldr	r3, [r4, #12]
 800866c:	9903      	ldr	r1, [sp, #12]
 800866e:	1a5b      	subs	r3, r3, r1
 8008670:	42ab      	cmp	r3, r5
 8008672:	dcf2      	bgt.n	800865a <_printf_i+0x212>
 8008674:	e7eb      	b.n	800864e <_printf_i+0x206>
 8008676:	2500      	movs	r5, #0
 8008678:	f104 0619 	add.w	r6, r4, #25
 800867c:	e7f5      	b.n	800866a <_printf_i+0x222>
 800867e:	bf00      	nop
 8008680:	0800908f 	.word	0x0800908f
 8008684:	080090a0 	.word	0x080090a0

08008688 <__sflush_r>:
 8008688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800868c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008690:	0716      	lsls	r6, r2, #28
 8008692:	4605      	mov	r5, r0
 8008694:	460c      	mov	r4, r1
 8008696:	d454      	bmi.n	8008742 <__sflush_r+0xba>
 8008698:	684b      	ldr	r3, [r1, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	dc02      	bgt.n	80086a4 <__sflush_r+0x1c>
 800869e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dd48      	ble.n	8008736 <__sflush_r+0xae>
 80086a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	d045      	beq.n	8008736 <__sflush_r+0xae>
 80086aa:	2300      	movs	r3, #0
 80086ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086b0:	682f      	ldr	r7, [r5, #0]
 80086b2:	6a21      	ldr	r1, [r4, #32]
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	d030      	beq.n	800871a <__sflush_r+0x92>
 80086b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	0759      	lsls	r1, r3, #29
 80086be:	d505      	bpl.n	80086cc <__sflush_r+0x44>
 80086c0:	6863      	ldr	r3, [r4, #4]
 80086c2:	1ad2      	subs	r2, r2, r3
 80086c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086c6:	b10b      	cbz	r3, 80086cc <__sflush_r+0x44>
 80086c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	2300      	movs	r3, #0
 80086ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086d0:	6a21      	ldr	r1, [r4, #32]
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b0      	blx	r6
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	d106      	bne.n	80086ea <__sflush_r+0x62>
 80086dc:	6829      	ldr	r1, [r5, #0]
 80086de:	291d      	cmp	r1, #29
 80086e0:	d82b      	bhi.n	800873a <__sflush_r+0xb2>
 80086e2:	4a2a      	ldr	r2, [pc, #168]	@ (800878c <__sflush_r+0x104>)
 80086e4:	410a      	asrs	r2, r1
 80086e6:	07d6      	lsls	r6, r2, #31
 80086e8:	d427      	bmi.n	800873a <__sflush_r+0xb2>
 80086ea:	2200      	movs	r2, #0
 80086ec:	6062      	str	r2, [r4, #4]
 80086ee:	04d9      	lsls	r1, r3, #19
 80086f0:	6922      	ldr	r2, [r4, #16]
 80086f2:	6022      	str	r2, [r4, #0]
 80086f4:	d504      	bpl.n	8008700 <__sflush_r+0x78>
 80086f6:	1c42      	adds	r2, r0, #1
 80086f8:	d101      	bne.n	80086fe <__sflush_r+0x76>
 80086fa:	682b      	ldr	r3, [r5, #0]
 80086fc:	b903      	cbnz	r3, 8008700 <__sflush_r+0x78>
 80086fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008702:	602f      	str	r7, [r5, #0]
 8008704:	b1b9      	cbz	r1, 8008736 <__sflush_r+0xae>
 8008706:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800870a:	4299      	cmp	r1, r3
 800870c:	d002      	beq.n	8008714 <__sflush_r+0x8c>
 800870e:	4628      	mov	r0, r5
 8008710:	f7ff fbd4 	bl	8007ebc <_free_r>
 8008714:	2300      	movs	r3, #0
 8008716:	6363      	str	r3, [r4, #52]	@ 0x34
 8008718:	e00d      	b.n	8008736 <__sflush_r+0xae>
 800871a:	2301      	movs	r3, #1
 800871c:	4628      	mov	r0, r5
 800871e:	47b0      	blx	r6
 8008720:	4602      	mov	r2, r0
 8008722:	1c50      	adds	r0, r2, #1
 8008724:	d1c9      	bne.n	80086ba <__sflush_r+0x32>
 8008726:	682b      	ldr	r3, [r5, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0c6      	beq.n	80086ba <__sflush_r+0x32>
 800872c:	2b1d      	cmp	r3, #29
 800872e:	d001      	beq.n	8008734 <__sflush_r+0xac>
 8008730:	2b16      	cmp	r3, #22
 8008732:	d11e      	bne.n	8008772 <__sflush_r+0xea>
 8008734:	602f      	str	r7, [r5, #0]
 8008736:	2000      	movs	r0, #0
 8008738:	e022      	b.n	8008780 <__sflush_r+0xf8>
 800873a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800873e:	b21b      	sxth	r3, r3
 8008740:	e01b      	b.n	800877a <__sflush_r+0xf2>
 8008742:	690f      	ldr	r7, [r1, #16]
 8008744:	2f00      	cmp	r7, #0
 8008746:	d0f6      	beq.n	8008736 <__sflush_r+0xae>
 8008748:	0793      	lsls	r3, r2, #30
 800874a:	680e      	ldr	r6, [r1, #0]
 800874c:	bf08      	it	eq
 800874e:	694b      	ldreq	r3, [r1, #20]
 8008750:	600f      	str	r7, [r1, #0]
 8008752:	bf18      	it	ne
 8008754:	2300      	movne	r3, #0
 8008756:	eba6 0807 	sub.w	r8, r6, r7
 800875a:	608b      	str	r3, [r1, #8]
 800875c:	f1b8 0f00 	cmp.w	r8, #0
 8008760:	dde9      	ble.n	8008736 <__sflush_r+0xae>
 8008762:	6a21      	ldr	r1, [r4, #32]
 8008764:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008766:	4643      	mov	r3, r8
 8008768:	463a      	mov	r2, r7
 800876a:	4628      	mov	r0, r5
 800876c:	47b0      	blx	r6
 800876e:	2800      	cmp	r0, #0
 8008770:	dc08      	bgt.n	8008784 <__sflush_r+0xfc>
 8008772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008784:	4407      	add	r7, r0
 8008786:	eba8 0800 	sub.w	r8, r8, r0
 800878a:	e7e7      	b.n	800875c <__sflush_r+0xd4>
 800878c:	dfbffffe 	.word	0xdfbffffe

08008790 <_fflush_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	690b      	ldr	r3, [r1, #16]
 8008794:	4605      	mov	r5, r0
 8008796:	460c      	mov	r4, r1
 8008798:	b913      	cbnz	r3, 80087a0 <_fflush_r+0x10>
 800879a:	2500      	movs	r5, #0
 800879c:	4628      	mov	r0, r5
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	b118      	cbz	r0, 80087aa <_fflush_r+0x1a>
 80087a2:	6a03      	ldr	r3, [r0, #32]
 80087a4:	b90b      	cbnz	r3, 80087aa <_fflush_r+0x1a>
 80087a6:	f7ff f9f9 	bl	8007b9c <__sinit>
 80087aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0f3      	beq.n	800879a <_fflush_r+0xa>
 80087b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087b4:	07d0      	lsls	r0, r2, #31
 80087b6:	d404      	bmi.n	80087c2 <_fflush_r+0x32>
 80087b8:	0599      	lsls	r1, r3, #22
 80087ba:	d402      	bmi.n	80087c2 <_fflush_r+0x32>
 80087bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087be:	f7ff fb5c 	bl	8007e7a <__retarget_lock_acquire_recursive>
 80087c2:	4628      	mov	r0, r5
 80087c4:	4621      	mov	r1, r4
 80087c6:	f7ff ff5f 	bl	8008688 <__sflush_r>
 80087ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087cc:	07da      	lsls	r2, r3, #31
 80087ce:	4605      	mov	r5, r0
 80087d0:	d4e4      	bmi.n	800879c <_fflush_r+0xc>
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	059b      	lsls	r3, r3, #22
 80087d6:	d4e1      	bmi.n	800879c <_fflush_r+0xc>
 80087d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087da:	f7ff fb4f 	bl	8007e7c <__retarget_lock_release_recursive>
 80087de:	e7dd      	b.n	800879c <_fflush_r+0xc>

080087e0 <fiprintf>:
 80087e0:	b40e      	push	{r1, r2, r3}
 80087e2:	b503      	push	{r0, r1, lr}
 80087e4:	4601      	mov	r1, r0
 80087e6:	ab03      	add	r3, sp, #12
 80087e8:	4805      	ldr	r0, [pc, #20]	@ (8008800 <fiprintf+0x20>)
 80087ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ee:	6800      	ldr	r0, [r0, #0]
 80087f0:	9301      	str	r3, [sp, #4]
 80087f2:	f000 f89d 	bl	8008930 <_vfiprintf_r>
 80087f6:	b002      	add	sp, #8
 80087f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087fc:	b003      	add	sp, #12
 80087fe:	4770      	bx	lr
 8008800:	200001ec 	.word	0x200001ec

08008804 <memmove>:
 8008804:	4288      	cmp	r0, r1
 8008806:	b510      	push	{r4, lr}
 8008808:	eb01 0402 	add.w	r4, r1, r2
 800880c:	d902      	bls.n	8008814 <memmove+0x10>
 800880e:	4284      	cmp	r4, r0
 8008810:	4623      	mov	r3, r4
 8008812:	d807      	bhi.n	8008824 <memmove+0x20>
 8008814:	1e43      	subs	r3, r0, #1
 8008816:	42a1      	cmp	r1, r4
 8008818:	d008      	beq.n	800882c <memmove+0x28>
 800881a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800881e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008822:	e7f8      	b.n	8008816 <memmove+0x12>
 8008824:	4402      	add	r2, r0
 8008826:	4601      	mov	r1, r0
 8008828:	428a      	cmp	r2, r1
 800882a:	d100      	bne.n	800882e <memmove+0x2a>
 800882c:	bd10      	pop	{r4, pc}
 800882e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008836:	e7f7      	b.n	8008828 <memmove+0x24>

08008838 <_sbrk_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d06      	ldr	r5, [pc, #24]	@ (8008854 <_sbrk_r+0x1c>)
 800883c:	2300      	movs	r3, #0
 800883e:	4604      	mov	r4, r0
 8008840:	4608      	mov	r0, r1
 8008842:	602b      	str	r3, [r5, #0]
 8008844:	f7f8 ff90 	bl	8001768 <_sbrk>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_sbrk_r+0x1a>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_sbrk_r+0x1a>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	200006cc 	.word	0x200006cc

08008858 <memcpy>:
 8008858:	440a      	add	r2, r1
 800885a:	4291      	cmp	r1, r2
 800885c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008860:	d100      	bne.n	8008864 <memcpy+0xc>
 8008862:	4770      	bx	lr
 8008864:	b510      	push	{r4, lr}
 8008866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800886a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800886e:	4291      	cmp	r1, r2
 8008870:	d1f9      	bne.n	8008866 <memcpy+0xe>
 8008872:	bd10      	pop	{r4, pc}

08008874 <abort>:
 8008874:	b508      	push	{r3, lr}
 8008876:	2006      	movs	r0, #6
 8008878:	f000 fa2e 	bl	8008cd8 <raise>
 800887c:	2001      	movs	r0, #1
 800887e:	f7f8 fefb 	bl	8001678 <_exit>

08008882 <_realloc_r>:
 8008882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008886:	4680      	mov	r8, r0
 8008888:	4615      	mov	r5, r2
 800888a:	460c      	mov	r4, r1
 800888c:	b921      	cbnz	r1, 8008898 <_realloc_r+0x16>
 800888e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008892:	4611      	mov	r1, r2
 8008894:	f7ff bb86 	b.w	8007fa4 <_malloc_r>
 8008898:	b92a      	cbnz	r2, 80088a6 <_realloc_r+0x24>
 800889a:	f7ff fb0f 	bl	8007ebc <_free_r>
 800889e:	2400      	movs	r4, #0
 80088a0:	4620      	mov	r0, r4
 80088a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a6:	f000 fa33 	bl	8008d10 <_malloc_usable_size_r>
 80088aa:	4285      	cmp	r5, r0
 80088ac:	4606      	mov	r6, r0
 80088ae:	d802      	bhi.n	80088b6 <_realloc_r+0x34>
 80088b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80088b4:	d8f4      	bhi.n	80088a0 <_realloc_r+0x1e>
 80088b6:	4629      	mov	r1, r5
 80088b8:	4640      	mov	r0, r8
 80088ba:	f7ff fb73 	bl	8007fa4 <_malloc_r>
 80088be:	4607      	mov	r7, r0
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d0ec      	beq.n	800889e <_realloc_r+0x1c>
 80088c4:	42b5      	cmp	r5, r6
 80088c6:	462a      	mov	r2, r5
 80088c8:	4621      	mov	r1, r4
 80088ca:	bf28      	it	cs
 80088cc:	4632      	movcs	r2, r6
 80088ce:	f7ff ffc3 	bl	8008858 <memcpy>
 80088d2:	4621      	mov	r1, r4
 80088d4:	4640      	mov	r0, r8
 80088d6:	f7ff faf1 	bl	8007ebc <_free_r>
 80088da:	463c      	mov	r4, r7
 80088dc:	e7e0      	b.n	80088a0 <_realloc_r+0x1e>

080088de <__sfputc_r>:
 80088de:	6893      	ldr	r3, [r2, #8]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	b410      	push	{r4}
 80088e6:	6093      	str	r3, [r2, #8]
 80088e8:	da08      	bge.n	80088fc <__sfputc_r+0x1e>
 80088ea:	6994      	ldr	r4, [r2, #24]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	db01      	blt.n	80088f4 <__sfputc_r+0x16>
 80088f0:	290a      	cmp	r1, #10
 80088f2:	d103      	bne.n	80088fc <__sfputc_r+0x1e>
 80088f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088f8:	f000 b932 	b.w	8008b60 <__swbuf_r>
 80088fc:	6813      	ldr	r3, [r2, #0]
 80088fe:	1c58      	adds	r0, r3, #1
 8008900:	6010      	str	r0, [r2, #0]
 8008902:	7019      	strb	r1, [r3, #0]
 8008904:	4608      	mov	r0, r1
 8008906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800890a:	4770      	bx	lr

0800890c <__sfputs_r>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	4606      	mov	r6, r0
 8008910:	460f      	mov	r7, r1
 8008912:	4614      	mov	r4, r2
 8008914:	18d5      	adds	r5, r2, r3
 8008916:	42ac      	cmp	r4, r5
 8008918:	d101      	bne.n	800891e <__sfputs_r+0x12>
 800891a:	2000      	movs	r0, #0
 800891c:	e007      	b.n	800892e <__sfputs_r+0x22>
 800891e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008922:	463a      	mov	r2, r7
 8008924:	4630      	mov	r0, r6
 8008926:	f7ff ffda 	bl	80088de <__sfputc_r>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	d1f3      	bne.n	8008916 <__sfputs_r+0xa>
 800892e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008930 <_vfiprintf_r>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	460d      	mov	r5, r1
 8008936:	b09d      	sub	sp, #116	@ 0x74
 8008938:	4614      	mov	r4, r2
 800893a:	4698      	mov	r8, r3
 800893c:	4606      	mov	r6, r0
 800893e:	b118      	cbz	r0, 8008948 <_vfiprintf_r+0x18>
 8008940:	6a03      	ldr	r3, [r0, #32]
 8008942:	b90b      	cbnz	r3, 8008948 <_vfiprintf_r+0x18>
 8008944:	f7ff f92a 	bl	8007b9c <__sinit>
 8008948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800894a:	07d9      	lsls	r1, r3, #31
 800894c:	d405      	bmi.n	800895a <_vfiprintf_r+0x2a>
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	059a      	lsls	r2, r3, #22
 8008952:	d402      	bmi.n	800895a <_vfiprintf_r+0x2a>
 8008954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008956:	f7ff fa90 	bl	8007e7a <__retarget_lock_acquire_recursive>
 800895a:	89ab      	ldrh	r3, [r5, #12]
 800895c:	071b      	lsls	r3, r3, #28
 800895e:	d501      	bpl.n	8008964 <_vfiprintf_r+0x34>
 8008960:	692b      	ldr	r3, [r5, #16]
 8008962:	b99b      	cbnz	r3, 800898c <_vfiprintf_r+0x5c>
 8008964:	4629      	mov	r1, r5
 8008966:	4630      	mov	r0, r6
 8008968:	f000 f938 	bl	8008bdc <__swsetup_r>
 800896c:	b170      	cbz	r0, 800898c <_vfiprintf_r+0x5c>
 800896e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008970:	07dc      	lsls	r4, r3, #31
 8008972:	d504      	bpl.n	800897e <_vfiprintf_r+0x4e>
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	b01d      	add	sp, #116	@ 0x74
 800897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	0598      	lsls	r0, r3, #22
 8008982:	d4f7      	bmi.n	8008974 <_vfiprintf_r+0x44>
 8008984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008986:	f7ff fa79 	bl	8007e7c <__retarget_lock_release_recursive>
 800898a:	e7f3      	b.n	8008974 <_vfiprintf_r+0x44>
 800898c:	2300      	movs	r3, #0
 800898e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008990:	2320      	movs	r3, #32
 8008992:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008996:	f8cd 800c 	str.w	r8, [sp, #12]
 800899a:	2330      	movs	r3, #48	@ 0x30
 800899c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b4c <_vfiprintf_r+0x21c>
 80089a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089a4:	f04f 0901 	mov.w	r9, #1
 80089a8:	4623      	mov	r3, r4
 80089aa:	469a      	mov	sl, r3
 80089ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b0:	b10a      	cbz	r2, 80089b6 <_vfiprintf_r+0x86>
 80089b2:	2a25      	cmp	r2, #37	@ 0x25
 80089b4:	d1f9      	bne.n	80089aa <_vfiprintf_r+0x7a>
 80089b6:	ebba 0b04 	subs.w	fp, sl, r4
 80089ba:	d00b      	beq.n	80089d4 <_vfiprintf_r+0xa4>
 80089bc:	465b      	mov	r3, fp
 80089be:	4622      	mov	r2, r4
 80089c0:	4629      	mov	r1, r5
 80089c2:	4630      	mov	r0, r6
 80089c4:	f7ff ffa2 	bl	800890c <__sfputs_r>
 80089c8:	3001      	adds	r0, #1
 80089ca:	f000 80a7 	beq.w	8008b1c <_vfiprintf_r+0x1ec>
 80089ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089d0:	445a      	add	r2, fp
 80089d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80089d4:	f89a 3000 	ldrb.w	r3, [sl]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 809f 	beq.w	8008b1c <_vfiprintf_r+0x1ec>
 80089de:	2300      	movs	r3, #0
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089e8:	f10a 0a01 	add.w	sl, sl, #1
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	9307      	str	r3, [sp, #28]
 80089f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80089f6:	4654      	mov	r4, sl
 80089f8:	2205      	movs	r2, #5
 80089fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089fe:	4853      	ldr	r0, [pc, #332]	@ (8008b4c <_vfiprintf_r+0x21c>)
 8008a00:	f7f7 fc1e 	bl	8000240 <memchr>
 8008a04:	9a04      	ldr	r2, [sp, #16]
 8008a06:	b9d8      	cbnz	r0, 8008a40 <_vfiprintf_r+0x110>
 8008a08:	06d1      	lsls	r1, r2, #27
 8008a0a:	bf44      	itt	mi
 8008a0c:	2320      	movmi	r3, #32
 8008a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a12:	0713      	lsls	r3, r2, #28
 8008a14:	bf44      	itt	mi
 8008a16:	232b      	movmi	r3, #43	@ 0x2b
 8008a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a20:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a22:	d015      	beq.n	8008a50 <_vfiprintf_r+0x120>
 8008a24:	9a07      	ldr	r2, [sp, #28]
 8008a26:	4654      	mov	r4, sl
 8008a28:	2000      	movs	r0, #0
 8008a2a:	f04f 0c0a 	mov.w	ip, #10
 8008a2e:	4621      	mov	r1, r4
 8008a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a34:	3b30      	subs	r3, #48	@ 0x30
 8008a36:	2b09      	cmp	r3, #9
 8008a38:	d94b      	bls.n	8008ad2 <_vfiprintf_r+0x1a2>
 8008a3a:	b1b0      	cbz	r0, 8008a6a <_vfiprintf_r+0x13a>
 8008a3c:	9207      	str	r2, [sp, #28]
 8008a3e:	e014      	b.n	8008a6a <_vfiprintf_r+0x13a>
 8008a40:	eba0 0308 	sub.w	r3, r0, r8
 8008a44:	fa09 f303 	lsl.w	r3, r9, r3
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	46a2      	mov	sl, r4
 8008a4e:	e7d2      	b.n	80089f6 <_vfiprintf_r+0xc6>
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	1d19      	adds	r1, r3, #4
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	9103      	str	r1, [sp, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bfbb      	ittet	lt
 8008a5c:	425b      	neglt	r3, r3
 8008a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008a62:	9307      	strge	r3, [sp, #28]
 8008a64:	9307      	strlt	r3, [sp, #28]
 8008a66:	bfb8      	it	lt
 8008a68:	9204      	strlt	r2, [sp, #16]
 8008a6a:	7823      	ldrb	r3, [r4, #0]
 8008a6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a6e:	d10a      	bne.n	8008a86 <_vfiprintf_r+0x156>
 8008a70:	7863      	ldrb	r3, [r4, #1]
 8008a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a74:	d132      	bne.n	8008adc <_vfiprintf_r+0x1ac>
 8008a76:	9b03      	ldr	r3, [sp, #12]
 8008a78:	1d1a      	adds	r2, r3, #4
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	9203      	str	r2, [sp, #12]
 8008a7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a82:	3402      	adds	r4, #2
 8008a84:	9305      	str	r3, [sp, #20]
 8008a86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b5c <_vfiprintf_r+0x22c>
 8008a8a:	7821      	ldrb	r1, [r4, #0]
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	4650      	mov	r0, sl
 8008a90:	f7f7 fbd6 	bl	8000240 <memchr>
 8008a94:	b138      	cbz	r0, 8008aa6 <_vfiprintf_r+0x176>
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	eba0 000a 	sub.w	r0, r0, sl
 8008a9c:	2240      	movs	r2, #64	@ 0x40
 8008a9e:	4082      	lsls	r2, r0
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	3401      	adds	r4, #1
 8008aa4:	9304      	str	r3, [sp, #16]
 8008aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aaa:	4829      	ldr	r0, [pc, #164]	@ (8008b50 <_vfiprintf_r+0x220>)
 8008aac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ab0:	2206      	movs	r2, #6
 8008ab2:	f7f7 fbc5 	bl	8000240 <memchr>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d03f      	beq.n	8008b3a <_vfiprintf_r+0x20a>
 8008aba:	4b26      	ldr	r3, [pc, #152]	@ (8008b54 <_vfiprintf_r+0x224>)
 8008abc:	bb1b      	cbnz	r3, 8008b06 <_vfiprintf_r+0x1d6>
 8008abe:	9b03      	ldr	r3, [sp, #12]
 8008ac0:	3307      	adds	r3, #7
 8008ac2:	f023 0307 	bic.w	r3, r3, #7
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	9303      	str	r3, [sp, #12]
 8008aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008acc:	443b      	add	r3, r7
 8008ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ad0:	e76a      	b.n	80089a8 <_vfiprintf_r+0x78>
 8008ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	2001      	movs	r0, #1
 8008ada:	e7a8      	b.n	8008a2e <_vfiprintf_r+0xfe>
 8008adc:	2300      	movs	r3, #0
 8008ade:	3401      	adds	r4, #1
 8008ae0:	9305      	str	r3, [sp, #20]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	f04f 0c0a 	mov.w	ip, #10
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aee:	3a30      	subs	r2, #48	@ 0x30
 8008af0:	2a09      	cmp	r2, #9
 8008af2:	d903      	bls.n	8008afc <_vfiprintf_r+0x1cc>
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0c6      	beq.n	8008a86 <_vfiprintf_r+0x156>
 8008af8:	9105      	str	r1, [sp, #20]
 8008afa:	e7c4      	b.n	8008a86 <_vfiprintf_r+0x156>
 8008afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b00:	4604      	mov	r4, r0
 8008b02:	2301      	movs	r3, #1
 8008b04:	e7f0      	b.n	8008ae8 <_vfiprintf_r+0x1b8>
 8008b06:	ab03      	add	r3, sp, #12
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	462a      	mov	r2, r5
 8008b0c:	4b12      	ldr	r3, [pc, #72]	@ (8008b58 <_vfiprintf_r+0x228>)
 8008b0e:	a904      	add	r1, sp, #16
 8008b10:	4630      	mov	r0, r6
 8008b12:	f3af 8000 	nop.w
 8008b16:	4607      	mov	r7, r0
 8008b18:	1c78      	adds	r0, r7, #1
 8008b1a:	d1d6      	bne.n	8008aca <_vfiprintf_r+0x19a>
 8008b1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b1e:	07d9      	lsls	r1, r3, #31
 8008b20:	d405      	bmi.n	8008b2e <_vfiprintf_r+0x1fe>
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	059a      	lsls	r2, r3, #22
 8008b26:	d402      	bmi.n	8008b2e <_vfiprintf_r+0x1fe>
 8008b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b2a:	f7ff f9a7 	bl	8007e7c <__retarget_lock_release_recursive>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	065b      	lsls	r3, r3, #25
 8008b32:	f53f af1f 	bmi.w	8008974 <_vfiprintf_r+0x44>
 8008b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b38:	e71e      	b.n	8008978 <_vfiprintf_r+0x48>
 8008b3a:	ab03      	add	r3, sp, #12
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	462a      	mov	r2, r5
 8008b40:	4b05      	ldr	r3, [pc, #20]	@ (8008b58 <_vfiprintf_r+0x228>)
 8008b42:	a904      	add	r1, sp, #16
 8008b44:	4630      	mov	r0, r6
 8008b46:	f7ff fc7f 	bl	8008448 <_printf_i>
 8008b4a:	e7e4      	b.n	8008b16 <_vfiprintf_r+0x1e6>
 8008b4c:	0800907e 	.word	0x0800907e
 8008b50:	08009088 	.word	0x08009088
 8008b54:	00000000 	.word	0x00000000
 8008b58:	0800890d 	.word	0x0800890d
 8008b5c:	08009084 	.word	0x08009084

08008b60 <__swbuf_r>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	460e      	mov	r6, r1
 8008b64:	4614      	mov	r4, r2
 8008b66:	4605      	mov	r5, r0
 8008b68:	b118      	cbz	r0, 8008b72 <__swbuf_r+0x12>
 8008b6a:	6a03      	ldr	r3, [r0, #32]
 8008b6c:	b90b      	cbnz	r3, 8008b72 <__swbuf_r+0x12>
 8008b6e:	f7ff f815 	bl	8007b9c <__sinit>
 8008b72:	69a3      	ldr	r3, [r4, #24]
 8008b74:	60a3      	str	r3, [r4, #8]
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	071a      	lsls	r2, r3, #28
 8008b7a:	d501      	bpl.n	8008b80 <__swbuf_r+0x20>
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	b943      	cbnz	r3, 8008b92 <__swbuf_r+0x32>
 8008b80:	4621      	mov	r1, r4
 8008b82:	4628      	mov	r0, r5
 8008b84:	f000 f82a 	bl	8008bdc <__swsetup_r>
 8008b88:	b118      	cbz	r0, 8008b92 <__swbuf_r+0x32>
 8008b8a:	f04f 37ff 	mov.w	r7, #4294967295
 8008b8e:	4638      	mov	r0, r7
 8008b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	6922      	ldr	r2, [r4, #16]
 8008b96:	1a98      	subs	r0, r3, r2
 8008b98:	6963      	ldr	r3, [r4, #20]
 8008b9a:	b2f6      	uxtb	r6, r6
 8008b9c:	4283      	cmp	r3, r0
 8008b9e:	4637      	mov	r7, r6
 8008ba0:	dc05      	bgt.n	8008bae <__swbuf_r+0x4e>
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	f7ff fdf3 	bl	8008790 <_fflush_r>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d1ed      	bne.n	8008b8a <__swbuf_r+0x2a>
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	60a3      	str	r3, [r4, #8]
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	6022      	str	r2, [r4, #0]
 8008bba:	701e      	strb	r6, [r3, #0]
 8008bbc:	6962      	ldr	r2, [r4, #20]
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d004      	beq.n	8008bce <__swbuf_r+0x6e>
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	07db      	lsls	r3, r3, #31
 8008bc8:	d5e1      	bpl.n	8008b8e <__swbuf_r+0x2e>
 8008bca:	2e0a      	cmp	r6, #10
 8008bcc:	d1df      	bne.n	8008b8e <__swbuf_r+0x2e>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	f7ff fddd 	bl	8008790 <_fflush_r>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d0d9      	beq.n	8008b8e <__swbuf_r+0x2e>
 8008bda:	e7d6      	b.n	8008b8a <__swbuf_r+0x2a>

08008bdc <__swsetup_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4b29      	ldr	r3, [pc, #164]	@ (8008c84 <__swsetup_r+0xa8>)
 8008be0:	4605      	mov	r5, r0
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	460c      	mov	r4, r1
 8008be6:	b118      	cbz	r0, 8008bf0 <__swsetup_r+0x14>
 8008be8:	6a03      	ldr	r3, [r0, #32]
 8008bea:	b90b      	cbnz	r3, 8008bf0 <__swsetup_r+0x14>
 8008bec:	f7fe ffd6 	bl	8007b9c <__sinit>
 8008bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf4:	0719      	lsls	r1, r3, #28
 8008bf6:	d422      	bmi.n	8008c3e <__swsetup_r+0x62>
 8008bf8:	06da      	lsls	r2, r3, #27
 8008bfa:	d407      	bmi.n	8008c0c <__swsetup_r+0x30>
 8008bfc:	2209      	movs	r2, #9
 8008bfe:	602a      	str	r2, [r5, #0]
 8008c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0a:	e033      	b.n	8008c74 <__swsetup_r+0x98>
 8008c0c:	0758      	lsls	r0, r3, #29
 8008c0e:	d512      	bpl.n	8008c36 <__swsetup_r+0x5a>
 8008c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c12:	b141      	cbz	r1, 8008c26 <__swsetup_r+0x4a>
 8008c14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c18:	4299      	cmp	r1, r3
 8008c1a:	d002      	beq.n	8008c22 <__swsetup_r+0x46>
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f7ff f94d 	bl	8007ebc <_free_r>
 8008c22:	2300      	movs	r3, #0
 8008c24:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c2c:	81a3      	strh	r3, [r4, #12]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	6063      	str	r3, [r4, #4]
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	f043 0308 	orr.w	r3, r3, #8
 8008c3c:	81a3      	strh	r3, [r4, #12]
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	b94b      	cbnz	r3, 8008c56 <__swsetup_r+0x7a>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c4c:	d003      	beq.n	8008c56 <__swsetup_r+0x7a>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f000 f88b 	bl	8008d6c <__smakebuf_r>
 8008c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c5a:	f013 0201 	ands.w	r2, r3, #1
 8008c5e:	d00a      	beq.n	8008c76 <__swsetup_r+0x9a>
 8008c60:	2200      	movs	r2, #0
 8008c62:	60a2      	str	r2, [r4, #8]
 8008c64:	6962      	ldr	r2, [r4, #20]
 8008c66:	4252      	negs	r2, r2
 8008c68:	61a2      	str	r2, [r4, #24]
 8008c6a:	6922      	ldr	r2, [r4, #16]
 8008c6c:	b942      	cbnz	r2, 8008c80 <__swsetup_r+0xa4>
 8008c6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c72:	d1c5      	bne.n	8008c00 <__swsetup_r+0x24>
 8008c74:	bd38      	pop	{r3, r4, r5, pc}
 8008c76:	0799      	lsls	r1, r3, #30
 8008c78:	bf58      	it	pl
 8008c7a:	6962      	ldrpl	r2, [r4, #20]
 8008c7c:	60a2      	str	r2, [r4, #8]
 8008c7e:	e7f4      	b.n	8008c6a <__swsetup_r+0x8e>
 8008c80:	2000      	movs	r0, #0
 8008c82:	e7f7      	b.n	8008c74 <__swsetup_r+0x98>
 8008c84:	200001ec 	.word	0x200001ec

08008c88 <_raise_r>:
 8008c88:	291f      	cmp	r1, #31
 8008c8a:	b538      	push	{r3, r4, r5, lr}
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	d904      	bls.n	8008c9c <_raise_r+0x14>
 8008c92:	2316      	movs	r3, #22
 8008c94:	6003      	str	r3, [r0, #0]
 8008c96:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c9e:	b112      	cbz	r2, 8008ca6 <_raise_r+0x1e>
 8008ca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ca4:	b94b      	cbnz	r3, 8008cba <_raise_r+0x32>
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f000 f830 	bl	8008d0c <_getpid_r>
 8008cac:	4622      	mov	r2, r4
 8008cae:	4601      	mov	r1, r0
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb6:	f000 b817 	b.w	8008ce8 <_kill_r>
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d00a      	beq.n	8008cd4 <_raise_r+0x4c>
 8008cbe:	1c59      	adds	r1, r3, #1
 8008cc0:	d103      	bne.n	8008cca <_raise_r+0x42>
 8008cc2:	2316      	movs	r3, #22
 8008cc4:	6003      	str	r3, [r0, #0]
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	e7e7      	b.n	8008c9a <_raise_r+0x12>
 8008cca:	2100      	movs	r1, #0
 8008ccc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	4798      	blx	r3
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	e7e0      	b.n	8008c9a <_raise_r+0x12>

08008cd8 <raise>:
 8008cd8:	4b02      	ldr	r3, [pc, #8]	@ (8008ce4 <raise+0xc>)
 8008cda:	4601      	mov	r1, r0
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	f7ff bfd3 	b.w	8008c88 <_raise_r>
 8008ce2:	bf00      	nop
 8008ce4:	200001ec 	.word	0x200001ec

08008ce8 <_kill_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d07      	ldr	r5, [pc, #28]	@ (8008d08 <_kill_r+0x20>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	602b      	str	r3, [r5, #0]
 8008cf6:	f7f8 fcaf 	bl	8001658 <_kill>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	d102      	bne.n	8008d04 <_kill_r+0x1c>
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	b103      	cbz	r3, 8008d04 <_kill_r+0x1c>
 8008d02:	6023      	str	r3, [r4, #0]
 8008d04:	bd38      	pop	{r3, r4, r5, pc}
 8008d06:	bf00      	nop
 8008d08:	200006cc 	.word	0x200006cc

08008d0c <_getpid_r>:
 8008d0c:	f7f8 bc9c 	b.w	8001648 <_getpid>

08008d10 <_malloc_usable_size_r>:
 8008d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d14:	1f18      	subs	r0, r3, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bfbc      	itt	lt
 8008d1a:	580b      	ldrlt	r3, [r1, r0]
 8008d1c:	18c0      	addlt	r0, r0, r3
 8008d1e:	4770      	bx	lr

08008d20 <__swhatbuf_r>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	460c      	mov	r4, r1
 8008d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d28:	2900      	cmp	r1, #0
 8008d2a:	b096      	sub	sp, #88	@ 0x58
 8008d2c:	4615      	mov	r5, r2
 8008d2e:	461e      	mov	r6, r3
 8008d30:	da0d      	bge.n	8008d4e <__swhatbuf_r+0x2e>
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d38:	f04f 0100 	mov.w	r1, #0
 8008d3c:	bf14      	ite	ne
 8008d3e:	2340      	movne	r3, #64	@ 0x40
 8008d40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d44:	2000      	movs	r0, #0
 8008d46:	6031      	str	r1, [r6, #0]
 8008d48:	602b      	str	r3, [r5, #0]
 8008d4a:	b016      	add	sp, #88	@ 0x58
 8008d4c:	bd70      	pop	{r4, r5, r6, pc}
 8008d4e:	466a      	mov	r2, sp
 8008d50:	f000 f848 	bl	8008de4 <_fstat_r>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	dbec      	blt.n	8008d32 <__swhatbuf_r+0x12>
 8008d58:	9901      	ldr	r1, [sp, #4]
 8008d5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d62:	4259      	negs	r1, r3
 8008d64:	4159      	adcs	r1, r3
 8008d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d6a:	e7eb      	b.n	8008d44 <__swhatbuf_r+0x24>

08008d6c <__smakebuf_r>:
 8008d6c:	898b      	ldrh	r3, [r1, #12]
 8008d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d70:	079d      	lsls	r5, r3, #30
 8008d72:	4606      	mov	r6, r0
 8008d74:	460c      	mov	r4, r1
 8008d76:	d507      	bpl.n	8008d88 <__smakebuf_r+0x1c>
 8008d78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	6123      	str	r3, [r4, #16]
 8008d80:	2301      	movs	r3, #1
 8008d82:	6163      	str	r3, [r4, #20]
 8008d84:	b003      	add	sp, #12
 8008d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d88:	ab01      	add	r3, sp, #4
 8008d8a:	466a      	mov	r2, sp
 8008d8c:	f7ff ffc8 	bl	8008d20 <__swhatbuf_r>
 8008d90:	9f00      	ldr	r7, [sp, #0]
 8008d92:	4605      	mov	r5, r0
 8008d94:	4639      	mov	r1, r7
 8008d96:	4630      	mov	r0, r6
 8008d98:	f7ff f904 	bl	8007fa4 <_malloc_r>
 8008d9c:	b948      	cbnz	r0, 8008db2 <__smakebuf_r+0x46>
 8008d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da2:	059a      	lsls	r2, r3, #22
 8008da4:	d4ee      	bmi.n	8008d84 <__smakebuf_r+0x18>
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	f043 0302 	orr.w	r3, r3, #2
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	e7e2      	b.n	8008d78 <__smakebuf_r+0xc>
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	6020      	str	r0, [r4, #0]
 8008db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dba:	81a3      	strh	r3, [r4, #12]
 8008dbc:	9b01      	ldr	r3, [sp, #4]
 8008dbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008dc2:	b15b      	cbz	r3, 8008ddc <__smakebuf_r+0x70>
 8008dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f000 f81d 	bl	8008e08 <_isatty_r>
 8008dce:	b128      	cbz	r0, 8008ddc <__smakebuf_r+0x70>
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	f023 0303 	bic.w	r3, r3, #3
 8008dd6:	f043 0301 	orr.w	r3, r3, #1
 8008dda:	81a3      	strh	r3, [r4, #12]
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	431d      	orrs	r5, r3
 8008de0:	81a5      	strh	r5, [r4, #12]
 8008de2:	e7cf      	b.n	8008d84 <__smakebuf_r+0x18>

08008de4 <_fstat_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d07      	ldr	r5, [pc, #28]	@ (8008e04 <_fstat_r+0x20>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	4611      	mov	r1, r2
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	f7f8 fc91 	bl	8001718 <_fstat>
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d102      	bne.n	8008e00 <_fstat_r+0x1c>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b103      	cbz	r3, 8008e00 <_fstat_r+0x1c>
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	bd38      	pop	{r3, r4, r5, pc}
 8008e02:	bf00      	nop
 8008e04:	200006cc 	.word	0x200006cc

08008e08 <_isatty_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4d06      	ldr	r5, [pc, #24]	@ (8008e24 <_isatty_r+0x1c>)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4604      	mov	r4, r0
 8008e10:	4608      	mov	r0, r1
 8008e12:	602b      	str	r3, [r5, #0]
 8008e14:	f7f8 fc90 	bl	8001738 <_isatty>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_isatty_r+0x1a>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_isatty_r+0x1a>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	200006cc 	.word	0x200006cc

08008e28 <_init>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr

08008e34 <_fini>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	bf00      	nop
 8008e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e3a:	bc08      	pop	{r3}
 8008e3c:	469e      	mov	lr, r3
 8008e3e:	4770      	bx	lr
