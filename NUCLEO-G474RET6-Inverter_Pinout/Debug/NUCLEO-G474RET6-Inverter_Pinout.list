
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095e8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080097c8  080097c8  0000a7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a58  08009a58  0000b24c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a58  08009a58  0000aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a60  08009a60  0000b24c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a60  08009a60  0000aa60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a64  08009a64  0000aa64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08009a68  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  2000024c  08009cb4  0000b24c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08009cb4  0000b6ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b24c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019250  00000000  00000000  0000b27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef2  00000000  00000000  000244cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  000273c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e7  00000000  00000000  00028978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029715  00000000  00000000  00029a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019007  00000000  00000000  00053174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001146a8  00000000  00000000  0006c17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180823  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006968  00000000  00000000  00180868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  001871d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000024c 	.word	0x2000024c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080097b0 	.word	0x080097b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000250 	.word	0x20000250
 800021c:	080097b0 	.word	0x080097b0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b09e      	sub	sp, #120	@ 0x78
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	673b      	str	r3, [r7, #112]	@ 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 fa14 	bl	8001a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f9b7 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fc85 	bl	8000ef4 <MX_GPIO_Init>
  MX_ADC2_Init();
 80005ea:	f000 fa75 	bl	8000ad8 <MX_ADC2_Init>
  MX_ADC1_Init();
 80005ee:	f000 f9fb 	bl	80009e8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005f2:	f000 fad7 	bl	8000ba4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005f6:	f000 fb99 	bl	8000d2c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 fbe3 	bl	8000dc4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005fe:	f000 fc2d 	bl	8000e5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//void Shell_Init(void){
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2224      	movs	r2, #36	@ 0x24
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f008 f824 	bl	8008656 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 800060e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000612:	2240      	movs	r2, #64	@ 0x40
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f008 f81d 	bl	8008656 <memset>
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 800061c:	4bb3      	ldr	r3, [pc, #716]	@ (80008ec <main+0x31c>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000622:	2240      	movs	r2, #64	@ 0x40
 8000624:	2100      	movs	r1, #0
 8000626:	48b2      	ldr	r0, [pc, #712]	@ (80008f0 <main+0x320>)
 8000628:	f008 f815 	bl	8008656 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800062c:	2201      	movs	r2, #1
 800062e:	49af      	ldr	r1, [pc, #700]	@ (80008ec <main+0x31c>)
 8000630:	48b0      	ldr	r0, [pc, #704]	@ (80008f4 <main+0x324>)
 8000632:	f005 fdf3 	bl	800621c <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f001 fa1e 	bl	8001a78 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	2266      	movs	r2, #102	@ 0x66
 8000642:	49ad      	ldr	r1, [pc, #692]	@ (80008f8 <main+0x328>)
 8000644:	48ab      	ldr	r0, [pc, #684]	@ (80008f4 <main+0x324>)
 8000646:	f005 fd5b 	bl	8006100 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	2218      	movs	r2, #24
 8000650:	49aa      	ldr	r1, [pc, #680]	@ (80008fc <main+0x32c>)
 8000652:	48a8      	ldr	r0, [pc, #672]	@ (80008f4 <main+0x324>)
 8000654:	f005 fd54 	bl	8006100 <HAL_UART_Transmit>
//}

/**
 * @brief : Init TIM PWM complémentaire
 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000658:	2100      	movs	r1, #0
 800065a:	48a9      	ldr	r0, [pc, #676]	@ (8000900 <main+0x330>)
 800065c:	f004 f820 	bl	80046a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000660:	2104      	movs	r1, #4
 8000662:	48a7      	ldr	r0, [pc, #668]	@ (8000900 <main+0x330>)
 8000664:	f004 f81c 	bl	80046a0 <HAL_TIM_PWM_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000668:	2100      	movs	r1, #0
 800066a:	48a5      	ldr	r0, [pc, #660]	@ (8000900 <main+0x330>)
 800066c:	f005 fa8e 	bl	8005b8c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000670:	2104      	movs	r1, #4
 8000672:	48a3      	ldr	r0, [pc, #652]	@ (8000900 <main+0x330>)
 8000674:	f005 fa8a 	bl	8005b8c <HAL_TIMEx_PWMN_Start>
  while (1)
  {
	  /**
	   * @brief Vérifie que le caractère a été reçu : uartRxReceived mis à 1
	   */
	  	  if(uartRxReceived)
 8000678:	4ba2      	ldr	r3, [pc, #648]	@ (8000904 <main+0x334>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d058      	beq.n	8000732 <main+0x162>
	  	  {
	  		  /**
	  		   * @brief Echo du caractère sur la console
	  		   */
	  		  switch(uartRxBuffer[0]){
 8000680:	4b9a      	ldr	r3, [pc, #616]	@ (80008ec <main+0x31c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b0d      	cmp	r3, #13
 8000686:	d002      	beq.n	800068e <main+0xbe>
 8000688:	2b7f      	cmp	r3, #127	@ 0x7f
 800068a:	d02f      	beq.n	80006ec <main+0x11c>
 800068c:	e03e      	b.n	800070c <main+0x13c>
	  		  // Nouvelle ligne, instruction à traiter
	  		  case ASCII_CR:
	  			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	2203      	movs	r2, #3
 8000694:	499c      	ldr	r1, [pc, #624]	@ (8000908 <main+0x338>)
 8000696:	4897      	ldr	r0, [pc, #604]	@ (80008f4 <main+0x324>)
 8000698:	f005 fd32 	bl	8006100 <HAL_UART_Transmit>
	  			  cmdBuffer[idx_cmd] = '\0';
 800069c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80006a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006a2:	4413      	add	r3, r2
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
	  			  argc = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	673b      	str	r3, [r7, #112]	@ 0x70
	  			  token = strtok(cmdBuffer, " ");
 80006ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006b0:	4996      	ldr	r1, [pc, #600]	@ (800090c <main+0x33c>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 ffd8 	bl	8008668 <strtok>
 80006b8:	4603      	mov	r3, r0
 80006ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  			  while(token!=NULL){
 80006bc:	e00e      	b.n	80006dc <main+0x10c>
	  				  argv[argc++] = token;
 80006be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	673a      	str	r2, [r7, #112]	@ 0x70
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	3378      	adds	r3, #120	@ 0x78
 80006c8:	443b      	add	r3, r7
 80006ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80006cc:	f843 2c74 	str.w	r2, [r3, #-116]
	  				  token = strtok(NULL, " ");
 80006d0:	498e      	ldr	r1, [pc, #568]	@ (800090c <main+0x33c>)
 80006d2:	2000      	movs	r0, #0
 80006d4:	f007 ffc8 	bl	8008668 <strtok>
 80006d8:	4603      	mov	r3, r0
 80006da:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  			  while(token!=NULL){
 80006dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1ed      	bne.n	80006be <main+0xee>
	  			  }

	  			  idx_cmd = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	677b      	str	r3, [r7, #116]	@ 0x74
	  			  newCmdReady = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	66bb      	str	r3, [r7, #104]	@ 0x68
	  			  break;
 80006ea:	e01f      	b.n	800072c <main+0x15c>
	  		  // Suppression du dernier caractère
	  		  case ASCII_DEL:
	  			  cmdBuffer[idx_cmd--] = '\0';
 80006ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006ee:	1e5a      	subs	r2, r3, #1
 80006f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80006f2:	3378      	adds	r3, #120	@ 0x78
 80006f4:	443b      	add	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2201      	movs	r2, #1
 8000702:	497a      	ldr	r1, [pc, #488]	@ (80008ec <main+0x31c>)
 8000704:	487b      	ldr	r0, [pc, #492]	@ (80008f4 <main+0x324>)
 8000706:	f005 fcfb 	bl	8006100 <HAL_UART_Transmit>
	  			  break;
 800070a:	e00f      	b.n	800072c <main+0x15c>
	  	      // Nouveau caractère
	  		  default:
	  			  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800070c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	677a      	str	r2, [r7, #116]	@ 0x74
 8000712:	4a76      	ldr	r2, [pc, #472]	@ (80008ec <main+0x31c>)
 8000714:	7812      	ldrb	r2, [r2, #0]
 8000716:	3378      	adds	r3, #120	@ 0x78
 8000718:	443b      	add	r3, r7
 800071a:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	2201      	movs	r2, #1
 8000724:	4971      	ldr	r1, [pc, #452]	@ (80008ec <main+0x31c>)
 8000726:	4873      	ldr	r0, [pc, #460]	@ (80008f4 <main+0x324>)
 8000728:	f005 fcea 	bl	8006100 <HAL_UART_Transmit>
	  		  }
	  		  uartRxReceived = 0;
 800072c:	4b75      	ldr	r3, [pc, #468]	@ (8000904 <main+0x334>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(newCmdReady){
 8000732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000734:	2b00      	cmp	r3, #0
 8000736:	f000 80b5 	beq.w	80008a4 <main+0x2d4>
	  		  if(strcmp(argv[0],"set")==0){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4974      	ldr	r1, [pc, #464]	@ (8000910 <main+0x340>)
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fd6e 	bl	8000220 <strcmp>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d12d      	bne.n	80007a6 <main+0x1d6>
	  			  if(strcmp(argv[1],"PA5")==0){
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	4971      	ldr	r1, [pc, #452]	@ (8000914 <main+0x344>)
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd66 	bl	8000220 <strcmp>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d11d      	bne.n	8000796 <main+0x1c6>
	  				  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4618      	mov	r0, r3
 800075e:	f007 fdcd 	bl	80082fc <atoi>
 8000762:	4603      	mov	r3, r0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	2120      	movs	r1, #32
 800076a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076e:	f002 fdc7 	bl	8003300 <HAL_GPIO_WritePin>
	  				  sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	4618      	mov	r0, r3
 8000776:	f007 fdc1 	bl	80082fc <atoi>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	4966      	ldr	r1, [pc, #408]	@ (8000918 <main+0x348>)
 8000780:	485b      	ldr	r0, [pc, #364]	@ (80008f0 <main+0x320>)
 8000782:	f007 ff05 	bl	8008590 <siprintf>
	  				  HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	2220      	movs	r2, #32
 800078c:	4958      	ldr	r1, [pc, #352]	@ (80008f0 <main+0x320>)
 800078e:	4859      	ldr	r0, [pc, #356]	@ (80008f4 <main+0x324>)
 8000790:	f005 fcb6 	bl	8006100 <HAL_UART_Transmit>
 8000794:	e07d      	b.n	8000892 <main+0x2c2>
	  			  }
	  			  else{
	  				  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	2214      	movs	r2, #20
 800079c:	495f      	ldr	r1, [pc, #380]	@ (800091c <main+0x34c>)
 800079e:	4855      	ldr	r0, [pc, #340]	@ (80008f4 <main+0x324>)
 80007a0:	f005 fcae 	bl	8006100 <HAL_UART_Transmit>
 80007a4:	e075      	b.n	8000892 <main+0x2c2>
	  			  }
	  		  }
	  		  else if(strcmp(argv[0],"pinout")==0)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	495d      	ldr	r1, [pc, #372]	@ (8000920 <main+0x350>)
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fd38 	bl	8000220 <strcmp>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d107      	bne.n	80007c6 <main+0x1f6>
	  		  {
	  			  HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	228b      	movs	r2, #139	@ 0x8b
 80007bc:	4959      	ldr	r1, [pc, #356]	@ (8000924 <main+0x354>)
 80007be:	484d      	ldr	r0, [pc, #308]	@ (80008f4 <main+0x324>)
 80007c0:	f005 fc9e 	bl	8006100 <HAL_UART_Transmit>
 80007c4:	e065      	b.n	8000892 <main+0x2c2>
	  		  }
	  		  else if(strcmp(argv[0],"help")==0)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4957      	ldr	r1, [pc, #348]	@ (8000928 <main+0x358>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd28 	bl	8000220 <strcmp>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d107      	bne.n	80007e6 <main+0x216>
	  		  {
	  			  HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	22a1      	movs	r2, #161	@ 0xa1
 80007dc:	4953      	ldr	r1, [pc, #332]	@ (800092c <main+0x35c>)
 80007de:	4845      	ldr	r0, [pc, #276]	@ (80008f4 <main+0x324>)
 80007e0:	f005 fc8e 	bl	8006100 <HAL_UART_Transmit>
 80007e4:	e055      	b.n	8000892 <main+0x2c2>
	  		  }
	  		  else if(strcmp(argv[0],"powerOn")==0)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4951      	ldr	r1, [pc, #324]	@ (8000930 <main+0x360>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fd18 	bl	8000220 <strcmp>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d107      	bne.n	8000806 <main+0x236>
	  		  {
	  			  HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	220b      	movs	r2, #11
 80007fc:	494d      	ldr	r1, [pc, #308]	@ (8000934 <main+0x364>)
 80007fe:	483d      	ldr	r0, [pc, #244]	@ (80008f4 <main+0x324>)
 8000800:	f005 fc7e 	bl	8006100 <HAL_UART_Transmit>
 8000804:	e045      	b.n	8000892 <main+0x2c2>
	  		  }
	  		  else if(strcmp(argv[0],"powerOff")==0)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	494b      	ldr	r1, [pc, #300]	@ (8000938 <main+0x368>)
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fd08 	bl	8000220 <strcmp>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d107      	bne.n	8000826 <main+0x256>
	  		  {
	  			  HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	220c      	movs	r2, #12
 800081c:	4947      	ldr	r1, [pc, #284]	@ (800093c <main+0x36c>)
 800081e:	4835      	ldr	r0, [pc, #212]	@ (80008f4 <main+0x324>)
 8000820:	f005 fc6e 	bl	8006100 <HAL_UART_Transmit>
 8000824:	e035      	b.n	8000892 <main+0x2c2>
	  		  }
	  		  else if(strcmp(argv[0],"get")==0)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4945      	ldr	r1, [pc, #276]	@ (8000940 <main+0x370>)
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fcf8 	bl	8000220 <strcmp>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d107      	bne.n	8000846 <main+0x276>
	  		  {
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	2214      	movs	r2, #20
 800083c:	4937      	ldr	r1, [pc, #220]	@ (800091c <main+0x34c>)
 800083e:	482d      	ldr	r0, [pc, #180]	@ (80008f4 <main+0x324>)
 8000840:	f005 fc5e 	bl	8006100 <HAL_UART_Transmit>
 8000844:	e025      	b.n	8000892 <main+0x2c2>
	  		  /**
	  		   * @brief : Speed control
	  		   * Entrer speed XXXX dans le terminal
	  		   * XXXX est converti en rapport cyclique
	  		   */
	  		  else if(strcmp(argv[0],"speed")==0){
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	493e      	ldr	r1, [pc, #248]	@ (8000944 <main+0x374>)
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fce8 	bl	8000220 <strcmp>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d116      	bne.n	8000884 <main+0x2b4>
	  			  {
	  				  speed = 8499;
	  			  }
	  			  sprintf(uartTxBuffer,"Speed : %d\r\n", speed);
	  			  alpha = 100*speed/8499;*/
	  			  alpha = atoi(argv[1]);
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	4618      	mov	r0, r3
 800085a:	f007 fd4f 	bl	80082fc <atoi>
 800085e:	4603      	mov	r3, r0
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b39      	ldr	r3, [pc, #228]	@ (8000948 <main+0x378>)
 8000864:	701a      	strb	r2, [r3, #0]
	  			  sprintf(uartTxBuffer,"Speed : %d '%'\r\n", alpha);
 8000866:	4b38      	ldr	r3, [pc, #224]	@ (8000948 <main+0x378>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	4937      	ldr	r1, [pc, #220]	@ (800094c <main+0x37c>)
 800086e:	4820      	ldr	r0, [pc, #128]	@ (80008f0 <main+0x320>)
 8000870:	f007 fe8e 	bl	8008590 <siprintf>
	  			  HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	2240      	movs	r2, #64	@ 0x40
 800087a:	491d      	ldr	r1, [pc, #116]	@ (80008f0 <main+0x320>)
 800087c:	481d      	ldr	r0, [pc, #116]	@ (80008f4 <main+0x324>)
 800087e:	f005 fc3f 	bl	8006100 <HAL_UART_Transmit>
 8000882:	e006      	b.n	8000892 <main+0x2c2>
	  		  }
	  		  else{
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	2214      	movs	r2, #20
 800088a:	4924      	ldr	r1, [pc, #144]	@ (800091c <main+0x34c>)
 800088c:	4819      	ldr	r0, [pc, #100]	@ (80008f4 <main+0x324>)
 800088e:	f005 fc37 	bl	8006100 <HAL_UART_Transmit>
	  		  }
	  			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	2218      	movs	r2, #24
 8000898:	4918      	ldr	r1, [pc, #96]	@ (80008fc <main+0x32c>)
 800089a:	4816      	ldr	r0, [pc, #88]	@ (80008f4 <main+0x324>)
 800089c:	f005 fc30 	bl	8006100 <HAL_UART_Transmit>
	  			  newCmdReady = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	66bb      	str	r3, [r7, #104]	@ 0x68
	  	  }

	  	  /**
	  	   * @brief : Comparaison PWM
	  	   */
	  	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 8499*alpha/100);
 80008a4:	4b28      	ldr	r3, [pc, #160]	@ (8000948 <main+0x378>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	f242 1333 	movw	r3, #8499	@ 0x2133
 80008ae:	fb02 f303 	mul.w	r3, r2, r3
 80008b2:	4a27      	ldr	r2, [pc, #156]	@ (8000950 <main+0x380>)
 80008b4:	fb82 1203 	smull	r1, r2, r2, r3
 80008b8:	1152      	asrs	r2, r2, #5
 80008ba:	17db      	asrs	r3, r3, #31
 80008bc:	1ad2      	subs	r2, r2, r3
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <main+0x330>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	635a      	str	r2, [r3, #52]	@ 0x34
	  	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 8499-(8499*alpha/100));
 80008c4:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <main+0x378>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	f242 1333 	movw	r3, #8499	@ 0x2133
 80008ce:	fb02 f303 	mul.w	r3, r2, r3
 80008d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000950 <main+0x380>)
 80008d4:	fb82 1203 	smull	r1, r2, r2, r3
 80008d8:	1152      	asrs	r2, r2, #5
 80008da:	17db      	asrs	r3, r3, #31
 80008dc:	1a9b      	subs	r3, r3, r2
 80008de:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80008e2:	3333      	adds	r3, #51	@ 0x33
 80008e4:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <main+0x330>)
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	6393      	str	r3, [r2, #56]	@ 0x38
	  	  if(uartRxReceived)
 80008ea:	e6c5      	b.n	8000678 <main+0xa8>
 80008ec:	20000504 	.word	0x20000504
 80008f0:	20000508 	.word	0x20000508
 80008f4:	200003d8 	.word	0x200003d8
 80008f8:	20000018 	.word	0x20000018
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000340 	.word	0x20000340
 8000904:	20000500 	.word	0x20000500
 8000908:	20000080 	.word	0x20000080
 800090c:	080097c8 	.word	0x080097c8
 8000910:	080097cc 	.word	0x080097cc
 8000914:	080097d0 	.word	0x080097d0
 8000918:	080097d4 	.word	0x080097d4
 800091c:	20000084 	.word	0x20000084
 8000920:	080097f0 	.word	0x080097f0
 8000924:	2000013c 	.word	0x2000013c
 8000928:	080097f8 	.word	0x080097f8
 800092c:	20000098 	.word	0x20000098
 8000930:	08009800 	.word	0x08009800
 8000934:	200001c8 	.word	0x200001c8
 8000938:	08009808 	.word	0x08009808
 800093c:	200001d4 	.word	0x200001d4
 8000940:	08009814 	.word	0x08009814
 8000944:	08009818 	.word	0x08009818
 8000948:	200001e0 	.word	0x200001e0
 800094c:	08009820 	.word	0x08009820
 8000950:	51eb851f 	.word	0x51eb851f

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b094      	sub	sp, #80	@ 0x50
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	2238      	movs	r2, #56	@ 0x38
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f007 fe77 	bl	8008656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000976:	2000      	movs	r0, #0
 8000978:	f002 fcfe 	bl	8003378 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097c:	2301      	movs	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000980:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000984:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000986:	2302      	movs	r3, #2
 8000988:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098a:	2303      	movs	r3, #3
 800098c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800098e:	2306      	movs	r3, #6
 8000990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000992:	2355      	movs	r3, #85	@ 0x55
 8000994:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000996:	2302      	movs	r3, #2
 8000998:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800099a:	2302      	movs	r3, #2
 800099c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800099e:	2302      	movs	r3, #2
 80009a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 fd9a 	bl	80034e0 <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80009b2:	f000 fb57 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	230f      	movs	r3, #15
 80009b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ba:	2303      	movs	r3, #3
 80009bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2104      	movs	r1, #4
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 f898 	bl	8003b04 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009da:	f000 fb43 	bl	8001064 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	@ 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	@ 0x30
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2220      	movs	r2, #32
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f007 fe28 	bl	8008656 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a06:	4b32      	ldr	r3, [pc, #200]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a0e:	4b30      	ldr	r3, [pc, #192]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a10:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a28:	4b29      	ldr	r3, [pc, #164]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a30:	2204      	movs	r2, #4
 8000a32:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a34:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000a40:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a46:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a70:	4817      	ldr	r0, [pc, #92]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a72:	f001 f9f9 	bl	8001e68 <HAL_ADC_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a7c:	f000 faf2 	bl	8001064 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a8c:	f002 f80e 	bl	8002aac <HAL_ADCEx_MultiModeConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a96:	f000 fae5 	bl	8001064 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_ADC1_Init+0xec>)
 8000a9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aa6:	237f      	movs	r3, #127	@ 0x7f
 8000aa8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000ab8:	f001 fb92 	bl	80021e0 <HAL_ADC_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ac2:	f000 facf 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	@ 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000268 	.word	0x20000268
 8000ad4:	21800100 	.word	0x21800100

08000ad8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f007 fdb6 	bl	8008656 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000aea:	4b2b      	ldr	r3, [pc, #172]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000aec:	4a2b      	ldr	r2, [pc, #172]	@ (8000b9c <MX_ADC2_Init+0xc4>)
 8000aee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000af0:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000af2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000af6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000af8:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000afe:	4b26      	ldr	r3, [pc, #152]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b04:	4b24      	ldr	r3, [pc, #144]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b0a:	4b23      	ldr	r3, [pc, #140]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b10:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b16:	4b20      	ldr	r3, [pc, #128]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b30:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b52:	4811      	ldr	r0, [pc, #68]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b54:	f001 f988 	bl	8001e68 <HAL_ADC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000b5e:	f000 fa81 	bl	8001064 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_ADC2_Init+0xc8>)
 8000b64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b66:	2306      	movs	r3, #6
 8000b68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b6e:	237f      	movs	r3, #127	@ 0x7f
 8000b70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b72:	2304      	movs	r3, #4
 8000b74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	@ (8000b98 <MX_ADC2_Init+0xc0>)
 8000b80:	f001 fb2e 	bl	80021e0 <HAL_ADC_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000b8a:	f000 fa6b 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	3720      	adds	r7, #32
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200002d4 	.word	0x200002d4
 8000b9c:	50000100 	.word	0x50000100
 8000ba0:	19200040 	.word	0x19200040

08000ba4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09c      	sub	sp, #112	@ 0x70
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2234      	movs	r2, #52	@ 0x34
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f007 fd39 	bl	8008656 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be4:	4b4f      	ldr	r3, [pc, #316]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000be6:	4a50      	ldr	r2, [pc, #320]	@ (8000d28 <MX_TIM1_Init+0x184>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bea:	4b4e      	ldr	r3, [pc, #312]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8000bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000bf8:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000bfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b49      	ldr	r3, [pc, #292]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c04:	4b47      	ldr	r3, [pc, #284]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b46      	ldr	r3, [pc, #280]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c10:	4844      	ldr	r0, [pc, #272]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000c12:	f003 fc13 	bl	800443c <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c1c:	f000 fa22 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c24:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	483d      	ldr	r0, [pc, #244]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000c2e:	f004 f8ad 	bl	8004d8c <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c38:	f000 fa14 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c3c:	4839      	ldr	r0, [pc, #228]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000c3e:	f003 fccd 	bl	80045dc <HAL_TIM_PWM_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c48:	f000 fa0c 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4831      	ldr	r0, [pc, #196]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000c60:	f005 f856 	bl	8005d10 <HAL_TIMEx_MasterConfigSynchronization>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c6a:	f000 f9fb 	bl	8001064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6e:	2360      	movs	r3, #96	@ 0x60
 8000c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4250;
 8000c72:	f241 039a 	movw	r3, #4250	@ 0x109a
 8000c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c90:	2200      	movs	r2, #0
 8000c92:	4619      	mov	r1, r3
 8000c94:	4823      	ldr	r0, [pc, #140]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000c96:	f003 ff65 	bl	8004b64 <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000ca0:	f000 f9e0 	bl	8001064 <Error_Handler>
  }
  sConfigOC.Pulse = 4249;
 8000ca4:	f241 0399 	movw	r3, #4249	@ 0x1099
 8000ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000caa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	481c      	ldr	r0, [pc, #112]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000cb4:	f003 ff56 	bl	8004b64 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000cbe:	f000 f9d1 	bl	8001064 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8000cc2:	4818      	ldr	r0, [pc, #96]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000cc4:	f005 f94e 	bl	8005f64 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 160;
 8000cd4:	23a0      	movs	r3, #160	@ 0xa0
 8000cd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000d06:	f005 f899 	bl	8005e3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000d10:	f000 f9a8 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <MX_TIM1_Init+0x180>)
 8000d16:	f000 fb8f 	bl	8001438 <HAL_TIM_MspPostInit>

}
 8000d1a:	bf00      	nop
 8000d1c:	3770      	adds	r7, #112	@ 0x70
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000340 	.word	0x20000340
 8000d28:	40012c00 	.word	0x40012c00

08000d2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <MX_TIM3_Init+0x90>)
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <MX_TIM3_Init+0x94>)
 8000d4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_TIM3_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <MX_TIM3_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <MX_TIM3_Init+0x90>)
 8000d5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_TIM3_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_TIM3_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_TIM3_Init+0x90>)
 8000d88:	f004 fe51 	bl	8005a2e <HAL_TIMEx_HallSensor_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000d92:	f000 f967 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000d96:	2350      	movs	r3, #80	@ 0x50
 8000d98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_TIM3_Init+0x90>)
 8000da4:	f004 ffb4 	bl	8005d10 <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000dae:	f000 f959 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3720      	adds	r7, #32
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000038c 	.word	0x2000038c
 8000dc0:	40000400 	.word	0x40000400

08000dc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dca:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <MX_USART2_UART_Init+0x94>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dce:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0c:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e0e:	f005 f927 	bl	8006060 <HAL_UART_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e18:	f000 f924 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e20:	f007 f9a1 	bl	8008166 <HAL_UARTEx_SetTxFifoThreshold>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2a:	f000 f91b 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e32:	f007 f9d6 	bl	80081e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f000 f912 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <MX_USART2_UART_Init+0x90>)
 8000e42:	f007 f957 	bl	80080f4 <HAL_UARTEx_DisableFifoMode>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f000 f90a 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200003d8 	.word	0x200003d8
 8000e58:	40004400 	.word	0x40004400

08000e5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e62:	4a23      	ldr	r2, [pc, #140]	@ (8000ef0 <MX_USART3_UART_Init+0x94>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e66:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e92:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e98:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea4:	4811      	ldr	r0, [pc, #68]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000ea6:	f005 f8db 	bl	8006060 <HAL_UART_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000eb0:	f000 f8d8 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000eb8:	f007 f955 	bl	8008166 <HAL_UARTEx_SetTxFifoThreshold>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ec2:	f000 f8cf 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4808      	ldr	r0, [pc, #32]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000eca:	f007 f98a 	bl	80081e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed4:	f000 f8c6 	bl	8001064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000eda:	f007 f90b 	bl	80080f4 <HAL_UARTEx_DisableFifoMode>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee4:	f000 f8be 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000046c 	.word	0x2000046c
 8000ef0:	40004800 	.word	0x40004800

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	@ 0x28
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	4a3e      	ldr	r2, [pc, #248]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f16:	4b3c      	ldr	r3, [pc, #240]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f22:	4b39      	ldr	r3, [pc, #228]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	4a38      	ldr	r2, [pc, #224]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2e:	4b36      	ldr	r3, [pc, #216]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	f003 0320 	and.w	r3, r3, #32
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	4a32      	ldr	r2, [pc, #200]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f46:	4b30      	ldr	r3, [pc, #192]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	4a2c      	ldr	r2, [pc, #176]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a26      	ldr	r2, [pc, #152]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <MX_GPIO_Init+0x114>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8a:	f002 f9b9 	bl	8003300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2104      	movs	r1, #4
 8000f92:	481e      	ldr	r0, [pc, #120]	@ (800100c <MX_GPIO_Init+0x118>)
 8000f94:	f002 f9b4 	bl	8003300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000f98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	4818      	ldr	r0, [pc, #96]	@ (8001010 <MX_GPIO_Init+0x11c>)
 8000fb0:	f002 f824 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f002 f815 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4808      	ldr	r0, [pc, #32]	@ (800100c <MX_GPIO_Init+0x118>)
 8000fea:	f002 f807 	bl	8002ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2028      	movs	r0, #40	@ 0x28
 8000ff4:	f001 ff1a 	bl	8002e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff8:	2028      	movs	r0, #40	@ 0x28
 8000ffa:	f001 ff31 	bl	8002e60 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	@ 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	48000c00 	.word	0x48000c00
 8001010:	48000800 	.word	0x48000800

08001014 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <HAL_UART_RxCpltCallback+0x20>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001022:	2201      	movs	r2, #1
 8001024:	4904      	ldr	r1, [pc, #16]	@ (8001038 <HAL_UART_RxCpltCallback+0x24>)
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <HAL_UART_RxCpltCallback+0x28>)
 8001028:	f005 f8f8 	bl	800621c <HAL_UART_Receive_IT>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000500 	.word	0x20000500
 8001038:	20000504 	.word	0x20000504
 800103c:	200003d8 	.word	0x200003d8

08001040 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001052:	f000 fcf3 	bl	8001a3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40001000 	.word	0x40001000

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <Error_Handler+0x8>

08001070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <HAL_MspInit+0x44>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <HAL_MspInit+0x44>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6613      	str	r3, [r2, #96]	@ 0x60
 8001082:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <HAL_MspInit+0x44>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <HAL_MspInit+0x44>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001092:	4a08      	ldr	r2, [pc, #32]	@ (80010b4 <HAL_MspInit+0x44>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001098:	6593      	str	r3, [r2, #88]	@ 0x58
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_MspInit+0x44>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010a6:	f002 fa0b 	bl	80034c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0a4      	sub	sp, #144	@ 0x90
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010d4:	2254      	movs	r2, #84	@ 0x54
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f007 fabc 	bl	8008656 <memset>
  if(hadc->Instance==ADC1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e6:	d174      	bne.n	80011d2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 ff51 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001104:	f7ff ffae 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001108:	4b63      	ldr	r3, [pc, #396]	@ (8001298 <HAL_ADC_MspInit+0x1e0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a62      	ldr	r2, [pc, #392]	@ (8001298 <HAL_ADC_MspInit+0x1e0>)
 8001110:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001112:	4b61      	ldr	r3, [pc, #388]	@ (8001298 <HAL_ADC_MspInit+0x1e0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10b      	bne.n	8001132 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800111a:	4b60      	ldr	r3, [pc, #384]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a5f      	ldr	r2, [pc, #380]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001120:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b5d      	ldr	r3, [pc, #372]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b5a      	ldr	r3, [pc, #360]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a59      	ldr	r2, [pc, #356]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b57      	ldr	r3, [pc, #348]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	623b      	str	r3, [r7, #32]
 8001148:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b54      	ldr	r3, [pc, #336]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a53      	ldr	r2, [pc, #332]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b51      	ldr	r3, [pc, #324]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b4e      	ldr	r3, [pc, #312]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a4d      	ldr	r2, [pc, #308]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b4b      	ldr	r3, [pc, #300]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800117a:	2304      	movs	r3, #4
 800117c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800118e:	4619      	mov	r1, r3
 8001190:	4843      	ldr	r0, [pc, #268]	@ (80012a0 <HAL_ADC_MspInit+0x1e8>)
 8001192:	f001 ff33 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001196:	2302      	movs	r3, #2
 8001198:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f001 ff24 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011b4:	2303      	movs	r3, #3
 80011b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b8:	2303      	movs	r3, #3
 80011ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011c8:	4619      	mov	r1, r3
 80011ca:	4836      	ldr	r0, [pc, #216]	@ (80012a4 <HAL_ADC_MspInit+0x1ec>)
 80011cc:	f001 ff16 	bl	8002ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011d0:	e05e      	b.n	8001290 <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a34      	ldr	r2, [pc, #208]	@ (80012a8 <HAL_ADC_MspInit+0x1f0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d159      	bne.n	8001290 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fed7 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80011f8:	f7ff ff34 	bl	8001064 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011fc:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <HAL_ADC_MspInit+0x1e0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	4a25      	ldr	r2, [pc, #148]	@ (8001298 <HAL_ADC_MspInit+0x1e0>)
 8001204:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001206:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <HAL_ADC_MspInit+0x1e0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10b      	bne.n	8001226 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800120e:	4b23      	ldr	r3, [pc, #140]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	4a22      	ldr	r2, [pc, #136]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001214:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121a:	4b20      	ldr	r3, [pc, #128]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	4a1c      	ldr	r2, [pc, #112]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001232:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b17      	ldr	r3, [pc, #92]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a16      	ldr	r2, [pc, #88]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <HAL_ADC_MspInit+0x1e4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8001256:	230b      	movs	r3, #11
 8001258:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125a:	2303      	movs	r3, #3
 800125c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <HAL_ADC_MspInit+0x1e8>)
 800126e:	f001 fec5 	bl	8002ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001272:	2301      	movs	r3, #1
 8001274:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128c:	f001 feb6 	bl	8002ffc <HAL_GPIO_Init>
}
 8001290:	bf00      	nop
 8001292:	3790      	adds	r7, #144	@ 0x90
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000548 	.word	0x20000548
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000800 	.word	0x48000800
 80012a4:	48000400 	.word	0x48000400
 80012a8:	50000100 	.word	0x50000100

080012ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a28      	ldr	r2, [pc, #160]	@ (800136c <HAL_TIM_Base_MspInit+0xc0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d149      	bne.n	8001362 <HAL_TIM_Base_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ce:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <HAL_TIM_Base_MspInit+0xc4>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d2:	4a27      	ldr	r2, [pc, #156]	@ (8001370 <HAL_TIM_Base_MspInit+0xc4>)
 80012d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012da:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <HAL_TIM_Base_MspInit+0xc4>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <HAL_TIM_Base_MspInit+0xc4>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	4a21      	ldr	r2, [pc, #132]	@ (8001370 <HAL_TIM_Base_MspInit+0xc4>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001370 <HAL_TIM_Base_MspInit+0xc4>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 80012fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001310:	2306      	movs	r3, #6
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800131e:	f001 fe6d 	bl	8002ffc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2018      	movs	r0, #24
 8001328:	f001 fd80 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800132c:	2018      	movs	r0, #24
 800132e:	f001 fd97 	bl	8002e60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	2019      	movs	r0, #25
 8001338:	f001 fd78 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800133c:	2019      	movs	r0, #25
 800133e:	f001 fd8f 	bl	8002e60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	201a      	movs	r0, #26
 8001348:	f001 fd70 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800134c:	201a      	movs	r0, #26
 800134e:	f001 fd87 	bl	8002e60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	201b      	movs	r0, #27
 8001358:	f001 fd68 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800135c:	201b      	movs	r0, #27
 800135e:	f001 fd7f 	bl	8002e60 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	@ 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40012c00 	.word	0x40012c00
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a26      	ldr	r2, [pc, #152]	@ (800142c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d145      	bne.n	8001422 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139a:	4a25      	ldr	r2, [pc, #148]	@ (8001430 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a2:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001430 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	4a19      	ldr	r2, [pc, #100]	@ (8001430 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80013de:	2350      	movs	r3, #80	@ 0x50
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ee:	2302      	movs	r3, #2
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013fc:	f001 fdfe 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001412:	2302      	movs	r3, #2
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	@ (8001434 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800141e:	f001 fded 	bl	8002ffc <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	@ 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40000400 	.word	0x40000400
 8001430:	40021000 	.word	0x40021000
 8001434:	48000800 	.word	0x48000800

08001438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a29      	ldr	r2, [pc, #164]	@ (80014fc <HAL_TIM_MspPostInit+0xc4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d14b      	bne.n	80014f2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <HAL_TIM_MspPostInit+0xc8>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	4a28      	ldr	r2, [pc, #160]	@ (8001500 <HAL_TIM_MspPostInit+0xc8>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001466:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <HAL_TIM_MspPostInit+0xc8>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b23      	ldr	r3, [pc, #140]	@ (8001500 <HAL_TIM_MspPostInit+0xc8>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	4a22      	ldr	r2, [pc, #136]	@ (8001500 <HAL_TIM_MspPostInit+0xc8>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <HAL_TIM_MspPostInit+0xc8>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800148a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800149c:	2306      	movs	r3, #6
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4817      	ldr	r0, [pc, #92]	@ (8001504 <HAL_TIM_MspPostInit+0xcc>)
 80014a8:	f001 fda8 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80014ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80014be:	2304      	movs	r3, #4
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	480e      	ldr	r0, [pc, #56]	@ (8001504 <HAL_TIM_MspPostInit+0xcc>)
 80014ca:	f001 fd97 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 80014ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014e0:	2306      	movs	r3, #6
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ee:	f001 fd85 	bl	8002ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	@ 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40012c00 	.word	0x40012c00
 8001500:	40021000 	.word	0x40021000
 8001504:	48000400 	.word	0x48000400

08001508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0a0      	sub	sp, #128	@ 0x80
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	2254      	movs	r2, #84	@ 0x54
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f007 f894 	bl	8008656 <memset>
  if(huart->Instance==USART2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a41      	ldr	r2, [pc, #260]	@ (8001638 <HAL_UART_MspInit+0x130>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d13f      	bne.n	80015b8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001538:	2302      	movs	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fd2b 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001550:	f7ff fd88 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001554:	4b39      	ldr	r3, [pc, #228]	@ (800163c <HAL_UART_MspInit+0x134>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	4a38      	ldr	r2, [pc, #224]	@ (800163c <HAL_UART_MspInit+0x134>)
 800155a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001560:	4b36      	ldr	r3, [pc, #216]	@ (800163c <HAL_UART_MspInit+0x134>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b33      	ldr	r3, [pc, #204]	@ (800163c <HAL_UART_MspInit+0x134>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	4a32      	ldr	r2, [pc, #200]	@ (800163c <HAL_UART_MspInit+0x134>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001578:	4b30      	ldr	r3, [pc, #192]	@ (800163c <HAL_UART_MspInit+0x134>)
 800157a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001584:	230c      	movs	r3, #12
 8001586:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001594:	2307      	movs	r3, #7
 8001596:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800159c:	4619      	mov	r1, r3
 800159e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a2:	f001 fd2b 	bl	8002ffc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2026      	movs	r0, #38	@ 0x26
 80015ac:	f001 fc3e 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015b0:	2026      	movs	r0, #38	@ 0x26
 80015b2:	f001 fc55 	bl	8002e60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015b6:	e03b      	b.n	8001630 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a20      	ldr	r2, [pc, #128]	@ (8001640 <HAL_UART_MspInit+0x138>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d136      	bne.n	8001630 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015c2:	2304      	movs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ca:	f107 0318 	add.w	r3, r7, #24
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fce6 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80015da:	f7ff fd43 	bl	8001064 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015de:	4b17      	ldr	r3, [pc, #92]	@ (800163c <HAL_UART_MspInit+0x134>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e2:	4a16      	ldr	r2, [pc, #88]	@ (800163c <HAL_UART_MspInit+0x134>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <HAL_UART_MspInit+0x134>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_UART_MspInit+0x134>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a10      	ldr	r2, [pc, #64]	@ (800163c <HAL_UART_MspInit+0x134>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <HAL_UART_MspInit+0x134>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800160e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001612:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001620:	2307      	movs	r3, #7
 8001622:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001624:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	@ (8001644 <HAL_UART_MspInit+0x13c>)
 800162c:	f001 fce6 	bl	8002ffc <HAL_GPIO_Init>
}
 8001630:	bf00      	nop
 8001632:	3780      	adds	r7, #128	@ 0x80
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40004400 	.word	0x40004400
 800163c:	40021000 	.word	0x40021000
 8001640:	40004800 	.word	0x40004800
 8001644:	48000800 	.word	0x48000800

08001648 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	@ 0x30
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001658:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <HAL_InitTick+0xc4>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165c:	4a2b      	ldr	r2, [pc, #172]	@ (800170c <HAL_InitTick+0xc4>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	6593      	str	r3, [r2, #88]	@ 0x58
 8001664:	4b29      	ldr	r3, [pc, #164]	@ (800170c <HAL_InitTick+0xc4>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001670:	f107 020c 	add.w	r2, r7, #12
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fc18 	bl	8003eb0 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001680:	f002 fbea 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8001684:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001688:	4a21      	ldr	r2, [pc, #132]	@ (8001710 <HAL_InitTick+0xc8>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0c9b      	lsrs	r3, r3, #18
 8001690:	3b01      	subs	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001694:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <HAL_InitTick+0xcc>)
 8001696:	4a20      	ldr	r2, [pc, #128]	@ (8001718 <HAL_InitTick+0xd0>)
 8001698:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800169a:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <HAL_InitTick+0xcc>)
 800169c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001714 <HAL_InitTick+0xcc>)
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <HAL_InitTick+0xcc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_InitTick+0xcc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80016b4:	4817      	ldr	r0, [pc, #92]	@ (8001714 <HAL_InitTick+0xcc>)
 80016b6:	f002 fec1 	bl	800443c <HAL_TIM_Base_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80016c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11b      	bne.n	8001700 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016c8:	4812      	ldr	r0, [pc, #72]	@ (8001714 <HAL_InitTick+0xcc>)
 80016ca:	f002 ff0f 	bl	80044ec <HAL_TIM_Base_Start_IT>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016dc:	2036      	movs	r0, #54	@ 0x36
 80016de:	f001 fbbf 	bl	8002e60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d808      	bhi.n	80016fa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	2036      	movs	r0, #54	@ 0x36
 80016ee:	f001 fb9d 	bl	8002e2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f2:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_InitTick+0xd4>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e002      	b.n	8001700 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001700:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001704:	4618      	mov	r0, r3
 8001706:	3730      	adds	r7, #48	@ 0x30
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000
 8001710:	431bde83 	.word	0x431bde83
 8001714:	2000054c 	.word	0x2000054c
 8001718:	40001000 	.word	0x40001000
 800171c:	200001e8 	.word	0x200001e8

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <NMI_Handler+0x4>

08001728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <MemManage_Handler+0x4>

08001738 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <UsageFault_Handler+0x4>

08001748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001786:	f003 f89d 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000340 	.word	0x20000340

08001794 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800179a:	f003 f893 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000340 	.word	0x20000340

080017a8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80017ae:	f003 f889 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000340 	.word	0x20000340

080017bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <TIM1_CC_IRQHandler+0x10>)
 80017c2:	f003 f87f 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000340 	.word	0x20000340

080017d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <USART2_IRQHandler+0x10>)
 80017d6:	f004 fd6d 	bl	80062b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200003d8 	.word	0x200003d8

080017e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80017e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017ec:	f001 fda0 	bl	8003330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <TIM6_DAC_IRQHandler+0x10>)
 80017fa:	f003 f863 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000054c 	.word	0x2000054c

08001808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return 1;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_kill>:

int _kill(int pid, int sig)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001822:	f006 ffc3 	bl	80087ac <__errno>
 8001826:	4603      	mov	r3, r0
 8001828:	2216      	movs	r2, #22
 800182a:	601a      	str	r2, [r3, #0]
  return -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_exit>:

void _exit (int status)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffe7 	bl	8001818 <_kill>
  while (1) {}    /* Make sure we hang here */
 800184a:	bf00      	nop
 800184c:	e7fd      	b.n	800184a <_exit+0x12>

0800184e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e00a      	b.n	8001876 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001860:	f3af 8000 	nop.w
 8001864:	4601      	mov	r1, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	60ba      	str	r2, [r7, #8]
 800186c:	b2ca      	uxtb	r2, r1
 800186e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	dbf0      	blt.n	8001860 <_read+0x12>
  }

  return len;
 800187e:	687b      	ldr	r3, [r7, #4]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e009      	b.n	80018ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	60ba      	str	r2, [r7, #8]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	dbf1      	blt.n	800189a <_write+0x12>
  }
  return len;
 80018b6:	687b      	ldr	r3, [r7, #4]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_close>:

int _close(int file)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e8:	605a      	str	r2, [r3, #4]
  return 0;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_isatty>:

int _isatty(int file)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f006 ff28 	bl	80087ac <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	@ (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20020000 	.word	0x20020000
 8001988:	00000400 	.word	0x00000400
 800198c:	20000598 	.word	0x20000598
 8001990:	200006f0 	.word	0x200006f0

08001994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <SystemInit+0x20>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <SystemInit+0x20>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b8:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019be:	490e      	ldr	r1, [pc, #56]	@ (80019f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c0:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <LoopForever+0xe>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d4:	4c0b      	ldr	r4, [pc, #44]	@ (8001a04 <LoopForever+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019e2:	f7ff ffd7 	bl	8001994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e6:	f006 fee7 	bl	80087b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ea:	f7fe fdf1 	bl	80005d0 <main>

080019ee <LoopForever>:

LoopForever:
    b LoopForever
 80019ee:	e7fe      	b.n	80019ee <LoopForever>
  ldr   r0, =_estack
 80019f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80019fc:	08009a68 	.word	0x08009a68
  ldr r2, =_sbss
 8001a00:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8001a04:	200006ec 	.word	0x200006ec

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>

08001a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f001 f9fe 	bl	8002e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f7ff fe14 	bl	8001648 <HAL_InitTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	e001      	b.n	8001a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a2c:	f7ff fb20 	bl	8001070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a30:	79fb      	ldrb	r3, [r7, #7]

}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_IncTick+0x1c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_IncTick+0x20>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a03      	ldr	r2, [pc, #12]	@ (8001a58 <HAL_IncTick+0x1c>)
 8001a4c:	6013      	str	r3, [r2, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	2000059c 	.word	0x2000059c
 8001a5c:	200001ec 	.word	0x200001ec

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000059c 	.word	0x2000059c

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d004      	beq.n	8001a9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_Delay+0x40>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9c:	bf00      	nop
 8001a9e:	f7ff ffdf 	bl	8001a60 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d8f7      	bhi.n	8001a9e <HAL_Delay+0x26>
  {
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200001ec 	.word	0x200001ec

08001abc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3360      	adds	r3, #96	@ 0x60
 8001b36:	461a      	mov	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <LL_ADC_SetOffset+0x44>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	4313      	orrs	r3, r2
 8001b54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	03fff000 	.word	0x03fff000

08001b6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3360      	adds	r3, #96	@ 0x60
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3360      	adds	r3, #96	@ 0x60
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b087      	sub	sp, #28
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3360      	adds	r3, #96	@ 0x60
 8001bde:	461a      	mov	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3360      	adds	r3, #96	@ 0x60
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	615a      	str	r2, [r3, #20]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3330      	adds	r3, #48	@ 0x30
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	4413      	add	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	211f      	movs	r1, #31
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	f003 011f 	and.w	r1, r3, #31
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cac:	bf00      	nop
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3314      	adds	r3, #20
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	0e5b      	lsrs	r3, r3, #25
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	4413      	add	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	0d1b      	lsrs	r3, r3, #20
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2107      	movs	r1, #7
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	401a      	ands	r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	0d1b      	lsrs	r3, r3, #20
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0318 	and.w	r3, r3, #24
 8001d32:	4908      	ldr	r1, [pc, #32]	@ (8001d54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d34:	40d9      	lsrs	r1, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	400b      	ands	r3, r1
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	0007ffff 	.word	0x0007ffff

08001d58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6093      	str	r3, [r2, #8]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d90:	d101      	bne.n	8001d96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001db4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001db8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001de0:	d101      	bne.n	8001de6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <LL_ADC_IsEnabled+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_ADC_IsEnabled+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d101      	bne.n	8001e58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b089      	sub	sp, #36	@ 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e1a9      	b.n	80021d6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff f911 	bl	80010b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff67 	bl	8001d7c <LL_ADC_IsDeepPowerDownEnabled>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff4d 	bl	8001d58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff82 	bl	8001dcc <LL_ADC_IsInternalRegulatorEnabled>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d115      	bne.n	8001efa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff66 	bl	8001da4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed8:	4b9c      	ldr	r3, [pc, #624]	@ (800214c <HAL_ADC_Init+0x2e4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	4a9c      	ldr	r2, [pc, #624]	@ (8002150 <HAL_ADC_Init+0x2e8>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eec:	e002      	b.n	8001ef4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f9      	bne.n	8001eee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff64 	bl	8001dcc <LL_ADC_IsInternalRegulatorEnabled>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0e:	f043 0210 	orr.w	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1a:	f043 0201 	orr.w	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff75 	bl	8001e1a <LL_ADC_REG_IsConversionOngoing>
 8001f30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 8142 	bne.w	80021c4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 813e 	bne.w	80021c4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f50:	f043 0202 	orr.w	r2, r3, #2
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff49 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d141      	bne.n	8001fec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f70:	d004      	beq.n	8001f7c <HAL_ADC_Init+0x114>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a77      	ldr	r2, [pc, #476]	@ (8002154 <HAL_ADC_Init+0x2ec>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10f      	bne.n	8001f9c <HAL_ADC_Init+0x134>
 8001f7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001f80:	f7ff ff38 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f84:	4604      	mov	r4, r0
 8001f86:	4873      	ldr	r0, [pc, #460]	@ (8002154 <HAL_ADC_Init+0x2ec>)
 8001f88:	f7ff ff34 	bl	8001df4 <LL_ADC_IsEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4323      	orrs	r3, r4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e012      	b.n	8001fc2 <HAL_ADC_Init+0x15a>
 8001f9c:	486e      	ldr	r0, [pc, #440]	@ (8002158 <HAL_ADC_Init+0x2f0>)
 8001f9e:	f7ff ff29 	bl	8001df4 <LL_ADC_IsEnabled>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	486d      	ldr	r0, [pc, #436]	@ (800215c <HAL_ADC_Init+0x2f4>)
 8001fa6:	f7ff ff25 	bl	8001df4 <LL_ADC_IsEnabled>
 8001faa:	4603      	mov	r3, r0
 8001fac:	431c      	orrs	r4, r3
 8001fae:	486c      	ldr	r0, [pc, #432]	@ (8002160 <HAL_ADC_Init+0x2f8>)
 8001fb0:	f7ff ff20 	bl	8001df4 <LL_ADC_IsEnabled>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bf0c      	ite	eq
 8001fbc:	2301      	moveq	r3, #1
 8001fbe:	2300      	movne	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fce:	d004      	beq.n	8001fda <HAL_ADC_Init+0x172>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8002154 <HAL_ADC_Init+0x2ec>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Init+0x176>
 8001fda:	4a62      	ldr	r2, [pc, #392]	@ (8002164 <HAL_ADC_Init+0x2fc>)
 8001fdc:	e000      	b.n	8001fe0 <HAL_ADC_Init+0x178>
 8001fde:	4a62      	ldr	r2, [pc, #392]	@ (8002168 <HAL_ADC_Init+0x300>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f7ff fd68 	bl	8001abc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7f5b      	ldrb	r3, [r3, #29]
 8001ff0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ffc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002002:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800200a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002016:	2b01      	cmp	r3, #1
 8002018:	d106      	bne.n	8002028 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	045b      	lsls	r3, r3, #17
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d009      	beq.n	8002044 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	4b48      	ldr	r3, [pc, #288]	@ (800216c <HAL_ADC_Init+0x304>)
 800204c:	4013      	ands	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	430b      	orrs	r3, r1
 8002056:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fee4 	bl	8001e40 <LL_ADC_INJ_IsConversionOngoing>
 8002078:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d17f      	bne.n	8002180 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d17c      	bne.n	8002180 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800208a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002092:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020a2:	f023 0302 	bic.w	r3, r3, #2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d017      	beq.n	80020e8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80020c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80020d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6911      	ldr	r1, [r2, #16]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80020e6:	e013      	b.n	8002110 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002108:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800210c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002116:	2b01      	cmp	r3, #1
 8002118:	d12a      	bne.n	8002170 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002130:	4311      	orrs	r1, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002136:	4311      	orrs	r1, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800213c:	430a      	orrs	r2, r1
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	611a      	str	r2, [r3, #16]
 800214a:	e019      	b.n	8002180 <HAL_ADC_Init+0x318>
 800214c:	200001e4 	.word	0x200001e4
 8002150:	053e2d63 	.word	0x053e2d63
 8002154:	50000100 	.word	0x50000100
 8002158:	50000400 	.word	0x50000400
 800215c:	50000500 	.word	0x50000500
 8002160:	50000600 	.word	0x50000600
 8002164:	50000300 	.word	0x50000300
 8002168:	50000700 	.word	0x50000700
 800216c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10c      	bne.n	80021a2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f023 010f 	bic.w	r1, r3, #15
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	1e5a      	subs	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	631a      	str	r2, [r3, #48]	@ 0x30
 80021a0:	e007      	b.n	80021b2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 020f 	bic.w	r2, r2, #15
 80021b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021c2:	e007      	b.n	80021d4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c8:	f043 0210 	orr.w	r2, r3, #16
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	@ 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	bf00      	nop

080021e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0b6      	sub	sp, #216	@ 0xd8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d102      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x24>
 80021fe:	2302      	movs	r3, #2
 8002200:	f000 bc13 	b.w	8002a2a <HAL_ADC_ConfigChannel+0x84a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fe02 	bl	8001e1a <LL_ADC_REG_IsConversionOngoing>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	f040 83f3 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	f7ff fd18 	bl	8001c60 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fdf0 	bl	8001e1a <LL_ADC_REG_IsConversionOngoing>
 800223a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fdfc 	bl	8001e40 <LL_ADC_INJ_IsConversionOngoing>
 8002248:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800224c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 81d9 	bne.w	8002608 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002256:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 81d4 	bne.w	8002608 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002268:	d10f      	bne.n	800228a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	4619      	mov	r1, r3
 8002276:	f7ff fd1f 	bl	8001cb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fcd9 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonConfig>
 8002288:	e00e      	b.n	80022a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	461a      	mov	r2, r3
 8002298:	f7ff fd0e 	bl	8001cb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fcc9 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	08db      	lsrs	r3, r3, #3
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d022      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6919      	ldr	r1, [r3, #16]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022da:	f7ff fc23 	bl	8001b24 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6919      	ldr	r1, [r3, #16]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f7ff fc6f 	bl	8001bce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d102      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x126>
 8002300:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002304:	e000      	b.n	8002308 <HAL_ADC_ConfigChannel+0x128>
 8002306:	2300      	movs	r3, #0
 8002308:	461a      	mov	r2, r3
 800230a:	f7ff fc7b 	bl	8001c04 <LL_ADC_SetOffsetSaturation>
 800230e:	e17b      	b.n	8002608 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fc28 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10a      	bne.n	800233c <HAL_ADC_ConfigChannel+0x15c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fc1d 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	f003 021f 	and.w	r2, r3, #31
 800233a:	e01e      	b.n	800237a <HAL_ADC_ConfigChannel+0x19a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fc12 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800235a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800235e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800236a:	2320      	movs	r3, #32
 800236c:	e004      	b.n	8002378 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800236e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x1b2>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0e9b      	lsrs	r3, r3, #26
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	e018      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x1e4>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80023a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80023ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80023b6:	2320      	movs	r3, #32
 80023b8:	e004      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80023ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d106      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fbe1 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fbc5 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x222>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fbba 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	0e9b      	lsrs	r3, r3, #26
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	e01e      	b.n	8002440 <HAL_ADC_ConfigChannel+0x260>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fbaf 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002428:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e004      	b.n	800243e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002434:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x278>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	e018      	b.n	800248a <HAL_ADC_ConfigChannel+0x2aa>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800246c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002470:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002474:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800247c:	2320      	movs	r3, #32
 800247e:	e004      	b.n	800248a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002480:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800248a:	429a      	cmp	r2, r3
 800248c:	d106      	bne.n	800249c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	2101      	movs	r1, #1
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fb7e 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2102      	movs	r1, #2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fb62 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x2e8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2102      	movs	r1, #2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fb57 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	f003 021f 	and.w	r2, r3, #31
 80024c6:	e01e      	b.n	8002506 <HAL_ADC_ConfigChannel+0x326>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2102      	movs	r1, #2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fb4c 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80024e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80024ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e004      	b.n	8002504 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80024fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <HAL_ADC_ConfigChannel+0x33e>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	0e9b      	lsrs	r3, r3, #26
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	e016      	b.n	800254c <HAL_ADC_ConfigChannel+0x36c>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002530:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002532:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002536:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800253e:	2320      	movs	r3, #32
 8002540:	e004      	b.n	800254c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002542:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800254c:	429a      	cmp	r2, r3
 800254e:	d106      	bne.n	800255e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	2102      	movs	r1, #2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fb1d 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2103      	movs	r1, #3
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb01 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <HAL_ADC_ConfigChannel+0x3aa>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2103      	movs	r1, #3
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff faf6 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	0e9b      	lsrs	r3, r3, #26
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	e017      	b.n	80025ba <HAL_ADC_ConfigChannel+0x3da>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2103      	movs	r1, #3
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff faeb 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80025a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80025a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e003      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d105      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x3f2>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	0e9b      	lsrs	r3, r3, #26
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	e011      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x416>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80025e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80025e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80025ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d106      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	2103      	movs	r1, #3
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fac8 	bl	8001b98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fbf1 	bl	8001df4 <LL_ADC_IsEnabled>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 813d 	bne.w	8002894 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	461a      	mov	r2, r3
 8002628:	f7ff fb72 	bl	8001d10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4aa2      	ldr	r2, [pc, #648]	@ (80028bc <HAL_ADC_ConfigChannel+0x6dc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	f040 812e 	bne.w	8002894 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x480>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	3301      	adds	r3, #1
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2b09      	cmp	r3, #9
 8002656:	bf94      	ite	ls
 8002658:	2301      	movls	r3, #1
 800265a:	2300      	movhi	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e019      	b.n	8002694 <HAL_ADC_ConfigChannel+0x4b4>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800266e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002670:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e003      	b.n	8002684 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800267c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	3301      	adds	r3, #1
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2b09      	cmp	r3, #9
 800268c:	bf94      	ite	ls
 800268e:	2301      	movls	r3, #1
 8002690:	2300      	movhi	r3, #0
 8002692:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002694:	2b00      	cmp	r3, #0
 8002696:	d079      	beq.n	800278c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x4d4>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	3301      	adds	r3, #1
 80026ac:	069b      	lsls	r3, r3, #26
 80026ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026b2:	e015      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x500>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80026c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80026c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	e003      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80026d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	069b      	lsls	r3, r3, #26
 80026dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x520>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	3301      	adds	r3, #1
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	e017      	b.n	8002730 <HAL_ADC_ConfigChannel+0x550>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800270e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002710:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002718:	2320      	movs	r3, #32
 800271a:	e003      	b.n	8002724 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800271c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	ea42 0103 	orr.w	r1, r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10a      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x576>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0e9b      	lsrs	r3, r3, #26
 8002746:	3301      	adds	r3, #1
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	051b      	lsls	r3, r3, #20
 8002754:	e018      	b.n	8002788 <HAL_ADC_ConfigChannel+0x5a8>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002788:	430b      	orrs	r3, r1
 800278a:	e07e      	b.n	800288a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x5c8>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	3301      	adds	r3, #1
 80027a0:	069b      	lsls	r3, r3, #26
 80027a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a6:	e015      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x5f4>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80027ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e003      	b.n	80027cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80027c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	069b      	lsls	r3, r3, #26
 80027d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d109      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x614>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	3301      	adds	r3, #1
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	e017      	b.n	8002824 <HAL_ADC_ConfigChannel+0x644>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	61fb      	str	r3, [r7, #28]
  return result;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	ea42 0103 	orr.w	r1, r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10d      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x670>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	3301      	adds	r3, #1
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	3b1e      	subs	r3, #30
 8002848:	051b      	lsls	r3, r3, #20
 800284a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800284e:	e01b      	b.n	8002888 <HAL_ADC_ConfigChannel+0x6a8>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	613b      	str	r3, [r7, #16]
  return result;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002868:	2320      	movs	r3, #32
 800286a:	e003      	b.n	8002874 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	3301      	adds	r3, #1
 8002876:	f003 021f 	and.w	r2, r3, #31
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	3b1e      	subs	r3, #30
 8002882:	051b      	lsls	r3, r3, #20
 8002884:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002888:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800288e:	4619      	mov	r1, r3
 8002890:	f7ff fa12 	bl	8001cb8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80be 	beq.w	8002a1e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028aa:	d004      	beq.n	80028b6 <HAL_ADC_ConfigChannel+0x6d6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d10a      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x6ec>
 80028b6:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80028b8:	e009      	b.n	80028ce <HAL_ADC_ConfigChannel+0x6ee>
 80028ba:	bf00      	nop
 80028bc:	407f0000 	.word	0x407f0000
 80028c0:	80080000 	.word	0x80080000
 80028c4:	50000100 	.word	0x50000100
 80028c8:	50000300 	.word	0x50000300
 80028cc:	4b59      	ldr	r3, [pc, #356]	@ (8002a34 <HAL_ADC_ConfigChannel+0x854>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f91a 	bl	8001b08 <LL_ADC_GetCommonPathInternalCh>
 80028d4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a56      	ldr	r2, [pc, #344]	@ (8002a38 <HAL_ADC_ConfigChannel+0x858>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_ADC_ConfigChannel+0x70c>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a55      	ldr	r2, [pc, #340]	@ (8002a3c <HAL_ADC_ConfigChannel+0x85c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d13a      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d134      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002900:	d005      	beq.n	800290e <HAL_ADC_ConfigChannel+0x72e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a4e      	ldr	r2, [pc, #312]	@ (8002a40 <HAL_ADC_ConfigChannel+0x860>)
 8002908:	4293      	cmp	r3, r2
 800290a:	f040 8085 	bne.w	8002a18 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002916:	d004      	beq.n	8002922 <HAL_ADC_ConfigChannel+0x742>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a49      	ldr	r2, [pc, #292]	@ (8002a44 <HAL_ADC_ConfigChannel+0x864>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x746>
 8002922:	4a49      	ldr	r2, [pc, #292]	@ (8002a48 <HAL_ADC_ConfigChannel+0x868>)
 8002924:	e000      	b.n	8002928 <HAL_ADC_ConfigChannel+0x748>
 8002926:	4a43      	ldr	r2, [pc, #268]	@ (8002a34 <HAL_ADC_ConfigChannel+0x854>)
 8002928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800292c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f7ff f8d5 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002938:	4b44      	ldr	r3, [pc, #272]	@ (8002a4c <HAL_ADC_ConfigChannel+0x86c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	4a44      	ldr	r2, [pc, #272]	@ (8002a50 <HAL_ADC_ConfigChannel+0x870>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002952:	e002      	b.n	800295a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3b01      	subs	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f9      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002960:	e05a      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a3b      	ldr	r2, [pc, #236]	@ (8002a54 <HAL_ADC_ConfigChannel+0x874>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d125      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800296c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002970:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11f      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a31      	ldr	r2, [pc, #196]	@ (8002a44 <HAL_ADC_ConfigChannel+0x864>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d104      	bne.n	800298c <HAL_ADC_ConfigChannel+0x7ac>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a34      	ldr	r2, [pc, #208]	@ (8002a58 <HAL_ADC_ConfigChannel+0x878>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d047      	beq.n	8002a1c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002994:	d004      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x7c0>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2a      	ldr	r2, [pc, #168]	@ (8002a44 <HAL_ADC_ConfigChannel+0x864>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x7c4>
 80029a0:	4a29      	ldr	r2, [pc, #164]	@ (8002a48 <HAL_ADC_ConfigChannel+0x868>)
 80029a2:	e000      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x7c6>
 80029a4:	4a23      	ldr	r2, [pc, #140]	@ (8002a34 <HAL_ADC_ConfigChannel+0x854>)
 80029a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f7ff f896 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029b6:	e031      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a27      	ldr	r2, [pc, #156]	@ (8002a5c <HAL_ADC_ConfigChannel+0x87c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d12d      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d127      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <HAL_ADC_ConfigChannel+0x864>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d022      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029e0:	d004      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x80c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a17      	ldr	r2, [pc, #92]	@ (8002a44 <HAL_ADC_ConfigChannel+0x864>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x810>
 80029ec:	4a16      	ldr	r2, [pc, #88]	@ (8002a48 <HAL_ADC_ConfigChannel+0x868>)
 80029ee:	e000      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x812>
 80029f0:	4a10      	ldr	r2, [pc, #64]	@ (8002a34 <HAL_ADC_ConfigChannel+0x854>)
 80029f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7ff f870 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
 8002a02:	e00c      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a16:	e002      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a18:	bf00      	nop
 8002a1a:	e000      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a26:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	37d8      	adds	r7, #216	@ 0xd8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	50000700 	.word	0x50000700
 8002a38:	c3210000 	.word	0xc3210000
 8002a3c:	90c00010 	.word	0x90c00010
 8002a40:	50000600 	.word	0x50000600
 8002a44:	50000100 	.word	0x50000100
 8002a48:	50000300 	.word	0x50000300
 8002a4c:	200001e4 	.word	0x200001e4
 8002a50:	053e2d63 	.word	0x053e2d63
 8002a54:	c7520000 	.word	0xc7520000
 8002a58:	50000500 	.word	0x50000500
 8002a5c:	cb840000 	.word	0xcb840000

08002a60 <LL_ADC_IsEnabled>:
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <LL_ADC_IsEnabled+0x18>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <LL_ADC_IsEnabled+0x1a>
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d101      	bne.n	8002a9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b0a1      	sub	sp, #132	@ 0x84
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0e7      	b.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ae2:	d102      	bne.n	8002aea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	e009      	b.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d102      	bne.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002af4:	4b6d      	ldr	r3, [pc, #436]	@ (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	e001      	b.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0be      	b.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ffb1 	bl	8002a86 <LL_ADC_REG_IsConversionOngoing>
 8002b24:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff ffab 	bl	8002a86 <LL_ADC_REG_IsConversionOngoing>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 80a0 	bne.w	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 809c 	bne.w	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b48:	d004      	beq.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a55      	ldr	r2, [pc, #340]	@ (8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d101      	bne.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b54:	4b56      	ldr	r3, [pc, #344]	@ (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002b56:	e000      	b.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b58:	4b56      	ldr	r3, [pc, #344]	@ (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002b5a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d04b      	beq.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b76:	035b      	lsls	r3, r3, #13
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b88:	d004      	beq.n	8002b94 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a45      	ldr	r2, [pc, #276]	@ (8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10f      	bne.n	8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002b94:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b98:	f7ff ff62 	bl	8002a60 <LL_ADC_IsEnabled>
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	4841      	ldr	r0, [pc, #260]	@ (8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ba0:	f7ff ff5e 	bl	8002a60 <LL_ADC_IsEnabled>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4323      	orrs	r3, r4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e012      	b.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002bb4:	483c      	ldr	r0, [pc, #240]	@ (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bb6:	f7ff ff53 	bl	8002a60 <LL_ADC_IsEnabled>
 8002bba:	4604      	mov	r4, r0
 8002bbc:	483b      	ldr	r0, [pc, #236]	@ (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bbe:	f7ff ff4f 	bl	8002a60 <LL_ADC_IsEnabled>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	431c      	orrs	r4, r3
 8002bc6:	483c      	ldr	r0, [pc, #240]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002bc8:	f7ff ff4a 	bl	8002a60 <LL_ADC_IsEnabled>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4323      	orrs	r3, r4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d056      	beq.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002be6:	f023 030f 	bic.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	6811      	ldr	r1, [r2, #0]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	6892      	ldr	r2, [r2, #8]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bfa:	e047      	b.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c10:	d004      	beq.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a23      	ldr	r2, [pc, #140]	@ (8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10f      	bne.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002c1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c20:	f7ff ff1e 	bl	8002a60 <LL_ADC_IsEnabled>
 8002c24:	4604      	mov	r4, r0
 8002c26:	481f      	ldr	r0, [pc, #124]	@ (8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c28:	f7ff ff1a 	bl	8002a60 <LL_ADC_IsEnabled>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4323      	orrs	r3, r4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e012      	b.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002c3c:	481a      	ldr	r0, [pc, #104]	@ (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c3e:	f7ff ff0f 	bl	8002a60 <LL_ADC_IsEnabled>
 8002c42:	4604      	mov	r4, r0
 8002c44:	4819      	ldr	r0, [pc, #100]	@ (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c46:	f7ff ff0b 	bl	8002a60 <LL_ADC_IsEnabled>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	431c      	orrs	r4, r3
 8002c4e:	481a      	ldr	r0, [pc, #104]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c50:	f7ff ff06 	bl	8002a60 <LL_ADC_IsEnabled>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4323      	orrs	r3, r4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c6e:	f023 030f 	bic.w	r3, r3, #15
 8002c72:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002c74:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c76:	e009      	b.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002c8a:	e000      	b.n	8002c8e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3784      	adds	r7, #132	@ 0x84
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd90      	pop	{r4, r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	50000100 	.word	0x50000100
 8002ca8:	50000400 	.word	0x50000400
 8002cac:	50000500 	.word	0x50000500
 8002cb0:	50000300 	.word	0x50000300
 8002cb4:	50000700 	.word	0x50000700
 8002cb8:	50000600 	.word	0x50000600

08002cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cee:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	60d3      	str	r3, [r2, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0307 	and.w	r3, r3, #7
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4907      	ldr	r1, [pc, #28]	@ (8002d58 <__NVIC_EnableIRQ+0x38>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	@ (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	@ (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	@ 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	@ 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff4c 	bl	8002cbc <__NVIC_SetPriorityGrouping>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3a:	f7ff ff63 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002e3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	6978      	ldr	r0, [r7, #20]
 8002e46:	f7ff ffb3 	bl	8002db0 <NVIC_EncodePriority>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff82 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff56 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d005      	beq.n	8002ea0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2204      	movs	r2, #4
 8002e98:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
 8002e9e:	e037      	b.n	8002f10 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 020e 	bic.w	r2, r2, #14
 8002eae:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ebe:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002eec:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00c      	beq.n	8002f10 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f04:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f0e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d00d      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	e047      	b.n	8002ff2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 020e 	bic.w	r2, r2, #14
 8002f70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	f003 021f 	and.w	r2, r3, #31
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002fd0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
    }
  }
  return status;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800300a:	e15a      	b.n	80032c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 814c 	beq.w	80032bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d005      	beq.n	800303c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003038:	2b02      	cmp	r3, #2
 800303a:	d130      	bne.n	800309e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003072:	2201      	movs	r2, #1
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 0201 	and.w	r2, r3, #1
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d017      	beq.n	80030da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d123      	bne.n	800312e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	08da      	lsrs	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3208      	adds	r2, #8
 80030ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	08da      	lsrs	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3208      	adds	r2, #8
 8003128:	6939      	ldr	r1, [r7, #16]
 800312a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2203      	movs	r2, #3
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 0203 	and.w	r2, r3, #3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80a6 	beq.w	80032bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003170:	4b5b      	ldr	r3, [pc, #364]	@ (80032e0 <HAL_GPIO_Init+0x2e4>)
 8003172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003174:	4a5a      	ldr	r2, [pc, #360]	@ (80032e0 <HAL_GPIO_Init+0x2e4>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6613      	str	r3, [r2, #96]	@ 0x60
 800317c:	4b58      	ldr	r3, [pc, #352]	@ (80032e0 <HAL_GPIO_Init+0x2e4>)
 800317e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003188:	4a56      	ldr	r2, [pc, #344]	@ (80032e4 <HAL_GPIO_Init+0x2e8>)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	3302      	adds	r3, #2
 8003190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	220f      	movs	r2, #15
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031b2:	d01f      	beq.n	80031f4 <HAL_GPIO_Init+0x1f8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a4c      	ldr	r2, [pc, #304]	@ (80032e8 <HAL_GPIO_Init+0x2ec>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d019      	beq.n	80031f0 <HAL_GPIO_Init+0x1f4>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a4b      	ldr	r2, [pc, #300]	@ (80032ec <HAL_GPIO_Init+0x2f0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <HAL_GPIO_Init+0x1f0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a4a      	ldr	r2, [pc, #296]	@ (80032f0 <HAL_GPIO_Init+0x2f4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00d      	beq.n	80031e8 <HAL_GPIO_Init+0x1ec>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a49      	ldr	r2, [pc, #292]	@ (80032f4 <HAL_GPIO_Init+0x2f8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <HAL_GPIO_Init+0x1e8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a48      	ldr	r2, [pc, #288]	@ (80032f8 <HAL_GPIO_Init+0x2fc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_GPIO_Init+0x1e4>
 80031dc:	2305      	movs	r3, #5
 80031de:	e00a      	b.n	80031f6 <HAL_GPIO_Init+0x1fa>
 80031e0:	2306      	movs	r3, #6
 80031e2:	e008      	b.n	80031f6 <HAL_GPIO_Init+0x1fa>
 80031e4:	2304      	movs	r3, #4
 80031e6:	e006      	b.n	80031f6 <HAL_GPIO_Init+0x1fa>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e004      	b.n	80031f6 <HAL_GPIO_Init+0x1fa>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e002      	b.n	80031f6 <HAL_GPIO_Init+0x1fa>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_GPIO_Init+0x1fa>
 80031f4:	2300      	movs	r3, #0
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	f002 0203 	and.w	r2, r2, #3
 80031fc:	0092      	lsls	r2, r2, #2
 80031fe:	4093      	lsls	r3, r2
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003206:	4937      	ldr	r1, [pc, #220]	@ (80032e4 <HAL_GPIO_Init+0x2e8>)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	3302      	adds	r3, #2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003214:	4b39      	ldr	r3, [pc, #228]	@ (80032fc <HAL_GPIO_Init+0x300>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	43db      	mvns	r3, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003238:	4a30      	ldr	r2, [pc, #192]	@ (80032fc <HAL_GPIO_Init+0x300>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800323e:	4b2f      	ldr	r3, [pc, #188]	@ (80032fc <HAL_GPIO_Init+0x300>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	43db      	mvns	r3, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003262:	4a26      	ldr	r2, [pc, #152]	@ (80032fc <HAL_GPIO_Init+0x300>)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003268:	4b24      	ldr	r3, [pc, #144]	@ (80032fc <HAL_GPIO_Init+0x300>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	43db      	mvns	r3, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800328c:	4a1b      	ldr	r2, [pc, #108]	@ (80032fc <HAL_GPIO_Init+0x300>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003292:	4b1a      	ldr	r3, [pc, #104]	@ (80032fc <HAL_GPIO_Init+0x300>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	43db      	mvns	r3, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032b6:	4a11      	ldr	r2, [pc, #68]	@ (80032fc <HAL_GPIO_Init+0x300>)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f47f ae9d 	bne.w	800300c <HAL_GPIO_Init+0x10>
  }
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40010000 	.word	0x40010000
 80032e8:	48000400 	.word	0x48000400
 80032ec:	48000800 	.word	0x48000800
 80032f0:	48000c00 	.word	0x48000c00
 80032f4:	48001000 	.word	0x48001000
 80032f8:	48001400 	.word	0x48001400
 80032fc:	40010400 	.word	0x40010400

08003300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
 800330c:	4613      	mov	r3, r2
 800330e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003310:	787b      	ldrb	r3, [r7, #1]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003316:	887a      	ldrh	r2, [r7, #2]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800331c:	e002      	b.n	8003324 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800333a:	4b08      	ldr	r3, [pc, #32]	@ (800335c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003346:	4a05      	ldr	r2, [pc, #20]	@ (800335c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f806 	bl	8003360 <HAL_GPIO_EXTI_Callback>
  }
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40010400 	.word	0x40010400

08003360 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d141      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003386:	4b4b      	ldr	r3, [pc, #300]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003392:	d131      	bne.n	80033f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003394:	4b47      	ldr	r3, [pc, #284]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800339a:	4a46      	ldr	r2, [pc, #280]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033a4:	4b43      	ldr	r3, [pc, #268]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033ac:	4a41      	ldr	r2, [pc, #260]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033b4:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2232      	movs	r2, #50	@ 0x32
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	4a3f      	ldr	r2, [pc, #252]	@ (80034bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	0c9b      	lsrs	r3, r3, #18
 80033c6:	3301      	adds	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ca:	e002      	b.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d2:	4b38      	ldr	r3, [pc, #224]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033de:	d102      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f2      	bne.n	80033cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033e6:	4b33      	ldr	r3, [pc, #204]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f2:	d158      	bne.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e057      	b.n	80034a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f8:	4b2e      	ldr	r3, [pc, #184]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033fe:	4a2d      	ldr	r2, [pc, #180]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003404:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003408:	e04d      	b.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003410:	d141      	bne.n	8003496 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003412:	4b28      	ldr	r3, [pc, #160]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341e:	d131      	bne.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003420:	4b24      	ldr	r3, [pc, #144]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003426:	4a23      	ldr	r2, [pc, #140]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003430:	4b20      	ldr	r3, [pc, #128]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003438:	4a1e      	ldr	r2, [pc, #120]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800343e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003440:	4b1d      	ldr	r3, [pc, #116]	@ (80034b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2232      	movs	r2, #50	@ 0x32
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	4a1c      	ldr	r2, [pc, #112]	@ (80034bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	0c9b      	lsrs	r3, r3, #18
 8003452:	3301      	adds	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003456:	e002      	b.n	800345e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3b01      	subs	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800345e:	4b15      	ldr	r3, [pc, #84]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346a:	d102      	bne.n	8003472 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f2      	bne.n	8003458 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003472:	4b10      	ldr	r3, [pc, #64]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800347a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347e:	d112      	bne.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e011      	b.n	80034a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003484:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800348a:	4a0a      	ldr	r2, [pc, #40]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003490:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003494:	e007      	b.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003496:	4b07      	ldr	r3, [pc, #28]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800349e:	4a05      	ldr	r2, [pc, #20]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40007000 	.word	0x40007000
 80034b8:	200001e4 	.word	0x200001e4
 80034bc:	431bde83 	.word	0x431bde83

080034c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034ce:	6093      	str	r3, [r2, #8]
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40007000 	.word	0x40007000

080034e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e2fe      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d075      	beq.n	80035ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fe:	4b97      	ldr	r3, [pc, #604]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003508:	4b94      	ldr	r3, [pc, #592]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b0c      	cmp	r3, #12
 8003516:	d102      	bne.n	800351e <HAL_RCC_OscConfig+0x3e>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d002      	beq.n	8003524 <HAL_RCC_OscConfig+0x44>
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d10b      	bne.n	800353c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	4b8d      	ldr	r3, [pc, #564]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d05b      	beq.n	80035e8 <HAL_RCC_OscConfig+0x108>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d157      	bne.n	80035e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e2d9      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003544:	d106      	bne.n	8003554 <HAL_RCC_OscConfig+0x74>
 8003546:	4b85      	ldr	r3, [pc, #532]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a84      	ldr	r2, [pc, #528]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e01d      	b.n	8003590 <HAL_RCC_OscConfig+0xb0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x98>
 800355e:	4b7f      	ldr	r3, [pc, #508]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a7e      	ldr	r2, [pc, #504]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b7c      	ldr	r3, [pc, #496]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7b      	ldr	r2, [pc, #492]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e00b      	b.n	8003590 <HAL_RCC_OscConfig+0xb0>
 8003578:	4b78      	ldr	r3, [pc, #480]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a77      	ldr	r2, [pc, #476]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 800357e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b75      	ldr	r3, [pc, #468]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a74      	ldr	r2, [pc, #464]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 800358a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe fa62 	bl	8001a60 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe fa5e 	bl	8001a60 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e29e      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b2:	4b6a      	ldr	r3, [pc, #424]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0xc0>
 80035be:	e014      	b.n	80035ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe fa4e 	bl	8001a60 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe fa4a 	bl	8001a60 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	@ 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e28a      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035da:	4b60      	ldr	r3, [pc, #384]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0xe8>
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d075      	beq.n	80036e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f6:	4b59      	ldr	r3, [pc, #356]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003600:	4b56      	ldr	r3, [pc, #344]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	d102      	bne.n	8003616 <HAL_RCC_OscConfig+0x136>
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d002      	beq.n	800361c <HAL_RCC_OscConfig+0x13c>
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b04      	cmp	r3, #4
 800361a:	d11f      	bne.n	800365c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800361c:	4b4f      	ldr	r3, [pc, #316]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_OscConfig+0x154>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e25d      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b49      	ldr	r3, [pc, #292]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	061b      	lsls	r3, r3, #24
 8003642:	4946      	ldr	r1, [pc, #280]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003648:	4b45      	ldr	r3, [pc, #276]	@ (8003760 <HAL_RCC_OscConfig+0x280>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd fffb 	bl	8001648 <HAL_InitTick>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d043      	beq.n	80036e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e249      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d023      	beq.n	80036ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003664:	4b3d      	ldr	r3, [pc, #244]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a3c      	ldr	r2, [pc, #240]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 800366a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800366e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe f9f6 	bl	8001a60 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003678:	f7fe f9f2 	bl	8001a60 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e232      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368a:	4b34      	ldr	r3, [pc, #208]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003696:	4b31      	ldr	r3, [pc, #196]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	061b      	lsls	r3, r3, #24
 80036a4:	492d      	ldr	r1, [pc, #180]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
 80036aa:	e01a      	b.n	80036e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ac:	4b2b      	ldr	r3, [pc, #172]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2a      	ldr	r2, [pc, #168]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 80036b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe f9d2 	bl	8001a60 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c0:	f7fe f9ce 	bl	8001a60 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e20e      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d2:	4b22      	ldr	r3, [pc, #136]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x1e0>
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d041      	beq.n	8003772 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01c      	beq.n	8003730 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f6:	4b19      	ldr	r3, [pc, #100]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 80036f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036fc:	4a17      	ldr	r2, [pc, #92]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fe f9ab 	bl	8001a60 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370e:	f7fe f9a7 	bl	8001a60 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e1e7      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003720:	4b0e      	ldr	r3, [pc, #56]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0ef      	beq.n	800370e <HAL_RCC_OscConfig+0x22e>
 800372e:	e020      	b.n	8003772 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003730:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003736:	4a09      	ldr	r2, [pc, #36]	@ (800375c <HAL_RCC_OscConfig+0x27c>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003740:	f7fe f98e 	bl	8001a60 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003746:	e00d      	b.n	8003764 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003748:	f7fe f98a 	bl	8001a60 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d906      	bls.n	8003764 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1ca      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	200001e8 	.word	0x200001e8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003764:	4b8c      	ldr	r3, [pc, #560]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1ea      	bne.n	8003748 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80a6 	beq.w	80038cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003784:	4b84      	ldr	r3, [pc, #528]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_OscConfig+0x2b4>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x2b6>
 8003794:	2300      	movs	r3, #0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00d      	beq.n	80037b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	4b7f      	ldr	r3, [pc, #508]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379e:	4a7e      	ldr	r2, [pc, #504]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80037a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037b2:	2301      	movs	r3, #1
 80037b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b6:	4b79      	ldr	r3, [pc, #484]	@ (800399c <HAL_RCC_OscConfig+0x4bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d118      	bne.n	80037f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037c2:	4b76      	ldr	r3, [pc, #472]	@ (800399c <HAL_RCC_OscConfig+0x4bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a75      	ldr	r2, [pc, #468]	@ (800399c <HAL_RCC_OscConfig+0x4bc>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ce:	f7fe f947 	bl	8001a60 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d6:	f7fe f943 	bl	8001a60 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e183      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e8:	4b6c      	ldr	r3, [pc, #432]	@ (800399c <HAL_RCC_OscConfig+0x4bc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d108      	bne.n	800380e <HAL_RCC_OscConfig+0x32e>
 80037fc:	4b66      	ldr	r3, [pc, #408]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003802:	4a65      	ldr	r2, [pc, #404]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800380c:	e024      	b.n	8003858 <HAL_RCC_OscConfig+0x378>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b05      	cmp	r3, #5
 8003814:	d110      	bne.n	8003838 <HAL_RCC_OscConfig+0x358>
 8003816:	4b60      	ldr	r3, [pc, #384]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381c:	4a5e      	ldr	r2, [pc, #376]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 800381e:	f043 0304 	orr.w	r3, r3, #4
 8003822:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003826:	4b5c      	ldr	r3, [pc, #368]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382c:	4a5a      	ldr	r2, [pc, #360]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003836:	e00f      	b.n	8003858 <HAL_RCC_OscConfig+0x378>
 8003838:	4b57      	ldr	r3, [pc, #348]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383e:	4a56      	ldr	r2, [pc, #344]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003848:	4b53      	ldr	r3, [pc, #332]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	4a52      	ldr	r2, [pc, #328]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d016      	beq.n	800388e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fe f8fe 	bl	8001a60 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003866:	e00a      	b.n	800387e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fe f8fa 	bl	8001a60 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e138      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387e:	4b46      	ldr	r3, [pc, #280]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ed      	beq.n	8003868 <HAL_RCC_OscConfig+0x388>
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fe f8e7 	bl	8001a60 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fe f8e3 	bl	8001a60 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e121      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1ed      	bne.n	8003896 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c0:	4b35      	ldr	r3, [pc, #212]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c4:	4a34      	ldr	r2, [pc, #208]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d03c      	beq.n	8003952 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01c      	beq.n	800391a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 80038e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fe f8b6 	bl	8001a60 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038f8:	f7fe f8b2 	bl	8001a60 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e0f2      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800390a:	4b23      	ldr	r3, [pc, #140]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 800390c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ef      	beq.n	80038f8 <HAL_RCC_OscConfig+0x418>
 8003918:	e01b      	b.n	8003952 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800391a:	4b1f      	ldr	r3, [pc, #124]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 800391c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003920:	4a1d      	ldr	r2, [pc, #116]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fe f899 	bl	8001a60 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003932:	f7fe f895 	bl	8001a60 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0d5      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003944:	4b14      	ldr	r3, [pc, #80]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ef      	bne.n	8003932 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80c9 	beq.w	8003aee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800395c:	4b0e      	ldr	r3, [pc, #56]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b0c      	cmp	r3, #12
 8003966:	f000 8083 	beq.w	8003a70 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d15e      	bne.n	8003a30 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003972:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a08      	ldr	r2, [pc, #32]	@ (8003998 <HAL_RCC_OscConfig+0x4b8>)
 8003978:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800397c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7fe f86f 	bl	8001a60 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003984:	e00c      	b.n	80039a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003986:	f7fe f86b 	bl	8001a60 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d905      	bls.n	80039a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0ab      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
 8003998:	40021000 	.word	0x40021000
 800399c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a0:	4b55      	ldr	r3, [pc, #340]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1ec      	bne.n	8003986 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ac:	4b52      	ldr	r3, [pc, #328]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	4b52      	ldr	r3, [pc, #328]	@ (8003afc <HAL_RCC_OscConfig+0x61c>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6a11      	ldr	r1, [r2, #32]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039bc:	3a01      	subs	r2, #1
 80039be:	0112      	lsls	r2, r2, #4
 80039c0:	4311      	orrs	r1, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80039c6:	0212      	lsls	r2, r2, #8
 80039c8:	4311      	orrs	r1, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039ce:	0852      	lsrs	r2, r2, #1
 80039d0:	3a01      	subs	r2, #1
 80039d2:	0552      	lsls	r2, r2, #21
 80039d4:	4311      	orrs	r1, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039da:	0852      	lsrs	r2, r2, #1
 80039dc:	3a01      	subs	r2, #1
 80039de:	0652      	lsls	r2, r2, #25
 80039e0:	4311      	orrs	r1, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039e6:	06d2      	lsls	r2, r2, #27
 80039e8:	430a      	orrs	r2, r1
 80039ea:	4943      	ldr	r1, [pc, #268]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f0:	4b41      	ldr	r3, [pc, #260]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a40      	ldr	r2, [pc, #256]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 80039f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039fc:	4b3e      	ldr	r3, [pc, #248]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a3d      	ldr	r2, [pc, #244]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe f82a 	bl	8001a60 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe f826 	bl	8001a60 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e066      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a22:	4b35      	ldr	r3, [pc, #212]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x530>
 8003a2e:	e05e      	b.n	8003aee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a30:	4b31      	ldr	r3, [pc, #196]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a30      	ldr	r2, [pc, #192]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 8003a36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe f810 	bl	8001a60 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fe f80c 	bl	8001a60 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e04c      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a56:	4b28      	ldr	r3, [pc, #160]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a62:	4b25      	ldr	r3, [pc, #148]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	4924      	ldr	r1, [pc, #144]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 8003a68:	4b25      	ldr	r3, [pc, #148]	@ (8003b00 <HAL_RCC_OscConfig+0x620>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60cb      	str	r3, [r1, #12]
 8003a6e:	e03e      	b.n	8003aee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e039      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <HAL_RCC_OscConfig+0x618>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f003 0203 	and.w	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d12c      	bne.n	8003aea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d123      	bne.n	8003aea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d11b      	bne.n	8003aea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d113      	bne.n	8003aea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d109      	bne.n	8003aea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	019f800c 	.word	0x019f800c
 8003b00:	feeefffc 	.word	0xfeeefffc

08003b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e11e      	b.n	8003d5a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b91      	ldr	r3, [pc, #580]	@ (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d910      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b8e      	ldr	r3, [pc, #568]	@ (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 020f 	bic.w	r2, r3, #15
 8003b32:	498c      	ldr	r1, [pc, #560]	@ (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b8a      	ldr	r3, [pc, #552]	@ (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e106      	b.n	8003d5a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d073      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d129      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b60:	4b81      	ldr	r3, [pc, #516]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0f4      	b.n	8003d5a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b70:	f000 f9d0 	bl	8003f14 <RCC_GetSysClockFreqFromPLLSource>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4a7c      	ldr	r2, [pc, #496]	@ (8003d6c <HAL_RCC_ClockConfig+0x268>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d93f      	bls.n	8003bfe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b7e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d033      	beq.n	8003bfe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d12f      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b9e:	4b72      	ldr	r3, [pc, #456]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ba6:	4a70      	ldr	r2, [pc, #448]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bae:	2380      	movs	r3, #128	@ 0x80
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e024      	b.n	8003bfe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d107      	bne.n	8003bcc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0c6      	b.n	8003d5a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bcc:	4b66      	ldr	r3, [pc, #408]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0be      	b.n	8003d5a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bdc:	f000 f8ce 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4a61      	ldr	r2, [pc, #388]	@ (8003d6c <HAL_RCC_ClockConfig+0x268>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d909      	bls.n	8003bfe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bea:	4b5f      	ldr	r3, [pc, #380]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bf2:	4a5d      	ldr	r2, [pc, #372]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bfa:	2380      	movs	r3, #128	@ 0x80
 8003bfc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4957      	ldr	r1, [pc, #348]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fd ff26 	bl	8001a60 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7fd ff22 	bl	8001a60 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e095      	b.n	8003d5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 020c 	and.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1eb      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d023      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c58:	4b43      	ldr	r3, [pc, #268]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a42      	ldr	r2, [pc, #264]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003c5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c62:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c70:	4b3d      	ldr	r3, [pc, #244]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c78:	4a3b      	ldr	r2, [pc, #236]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003c7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b39      	ldr	r3, [pc, #228]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4936      	ldr	r1, [pc, #216]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b80      	cmp	r3, #128	@ 0x80
 8003c98:	d105      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c9a:	4b33      	ldr	r3, [pc, #204]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	4a32      	ldr	r2, [pc, #200]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003ca0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ca4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d21d      	bcs.n	8003cf0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 020f 	bic.w	r2, r3, #15
 8003cbc:	4929      	ldr	r1, [pc, #164]	@ (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cc4:	f7fd fecc 	bl	8001a60 <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fd fec8 	bl	8001a60 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e03b      	b.n	8003d5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b20      	ldr	r3, [pc, #128]	@ (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d1ed      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4917      	ldr	r1, [pc, #92]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d1a:	4b13      	ldr	r3, [pc, #76]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	490f      	ldr	r1, [pc, #60]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d2e:	f000 f825 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8003d32:	4602      	mov	r2, r0
 8003d34:	4b0c      	ldr	r3, [pc, #48]	@ (8003d68 <HAL_RCC_ClockConfig+0x264>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	490c      	ldr	r1, [pc, #48]	@ (8003d70 <HAL_RCC_ClockConfig+0x26c>)
 8003d40:	5ccb      	ldrb	r3, [r1, r3]
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d74 <HAL_RCC_ClockConfig+0x270>)
 8003d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <HAL_RCC_ClockConfig+0x274>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fd fc78 	bl	8001648 <HAL_InitTick>
 8003d58:	4603      	mov	r3, r0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40022000 	.word	0x40022000
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	04c4b400 	.word	0x04c4b400
 8003d70:	08009834 	.word	0x08009834
 8003d74:	200001e4 	.word	0x200001e4
 8003d78:	200001e8 	.word	0x200001e8

08003d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d82:	4b2c      	ldr	r3, [pc, #176]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d102      	bne.n	8003d94 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e047      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d94:	4b27      	ldr	r3, [pc, #156]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d102      	bne.n	8003da6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003da0:	4b26      	ldr	r3, [pc, #152]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	e03e      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003da6:	4b23      	ldr	r3, [pc, #140]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b0c      	cmp	r3, #12
 8003db0:	d136      	bne.n	8003e20 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003db2:	4b20      	ldr	r3, [pc, #128]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d10c      	bne.n	8003dea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	4a16      	ldr	r2, [pc, #88]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dda:	68d2      	ldr	r2, [r2, #12]
 8003ddc:	0a12      	lsrs	r2, r2, #8
 8003dde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	617b      	str	r3, [r7, #20]
      break;
 8003de8:	e00c      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dea:	4a13      	ldr	r2, [pc, #76]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	4a10      	ldr	r2, [pc, #64]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	0a12      	lsrs	r2, r2, #8
 8003df8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dfc:	fb02 f303 	mul.w	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]
      break;
 8003e02:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e04:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	0e5b      	lsrs	r3, r3, #25
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	e001      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e24:	693b      	ldr	r3, [r7, #16]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	00f42400 	.word	0x00f42400
 8003e3c:	016e3600 	.word	0x016e3600

08003e40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e44:	4b03      	ldr	r3, [pc, #12]	@ (8003e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	200001e4 	.word	0x200001e4

08003e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e5c:	f7ff fff0 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4904      	ldr	r1, [pc, #16]	@ (8003e80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	08009844 	.word	0x08009844

08003e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e88:	f7ff ffda 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0adb      	lsrs	r3, r3, #11
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4904      	ldr	r1, [pc, #16]	@ (8003eac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	08009844 	.word	0x08009844

08003eb0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	220f      	movs	r2, #15
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ec0:	4b12      	ldr	r3, [pc, #72]	@ (8003f0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0203 	and.w	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f0c <HAL_RCC_GetClockConfig+0x5c>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ee4:	4b09      	ldr	r3, [pc, #36]	@ (8003f0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	08db      	lsrs	r3, r3, #3
 8003eea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ef2:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <HAL_RCC_GetClockConfig+0x60>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	601a      	str	r2, [r3, #0]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40022000 	.word	0x40022000

08003f14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f24:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	3301      	adds	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d10c      	bne.n	8003f52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f38:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	4a14      	ldr	r2, [pc, #80]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f42:	68d2      	ldr	r2, [r2, #12]
 8003f44:	0a12      	lsrs	r2, r2, #8
 8003f46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	617b      	str	r3, [r7, #20]
    break;
 8003f50:	e00c      	b.n	8003f6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f52:	4a12      	ldr	r2, [pc, #72]	@ (8003f9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	0a12      	lsrs	r2, r2, #8
 8003f60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]
    break;
 8003f6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f6c:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0e5b      	lsrs	r3, r3, #25
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	3301      	adds	r3, #1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f86:	687b      	ldr	r3, [r7, #4]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40021000 	.word	0x40021000
 8003f98:	016e3600 	.word	0x016e3600
 8003f9c:	00f42400 	.word	0x00f42400

08003fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fa8:	2300      	movs	r3, #0
 8003faa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fac:	2300      	movs	r3, #0
 8003fae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8098 	beq.w	80040ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc2:	4b43      	ldr	r3, [pc, #268]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10d      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	4b40      	ldr	r3, [pc, #256]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fda:	4b3d      	ldr	r3, [pc, #244]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fea:	4b3a      	ldr	r3, [pc, #232]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a39      	ldr	r2, [pc, #228]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff6:	f7fd fd33 	bl	8001a60 <HAL_GetTick>
 8003ffa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ffc:	e009      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffe:	f7fd fd2f 	bl	8001a60 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d902      	bls.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	74fb      	strb	r3, [r7, #19]
        break;
 8004010:	e005      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004012:	4b30      	ldr	r3, [pc, #192]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ef      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800401e:	7cfb      	ldrb	r3, [r7, #19]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d159      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004024:	4b2a      	ldr	r3, [pc, #168]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800402e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01e      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	d019      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004040:	4b23      	ldr	r3, [pc, #140]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800404c:	4b20      	ldr	r3, [pc, #128]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004052:	4a1f      	ldr	r2, [pc, #124]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800405c:	4b1c      	ldr	r3, [pc, #112]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004062:	4a1b      	ldr	r2, [pc, #108]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800406c:	4a18      	ldr	r2, [pc, #96]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7fd fcef 	bl	8001a60 <HAL_GetTick>
 8004082:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004084:	e00b      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004086:	f7fd fceb 	bl	8001a60 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004094:	4293      	cmp	r3, r2
 8004096:	d902      	bls.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	74fb      	strb	r3, [r7, #19]
            break;
 800409c:	e006      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409e:	4b0c      	ldr	r3, [pc, #48]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0ec      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10b      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b2:	4b07      	ldr	r3, [pc, #28]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c0:	4903      	ldr	r1, [pc, #12]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040c8:	e008      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	74bb      	strb	r3, [r7, #18]
 80040ce:	e005      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040dc:	7c7b      	ldrb	r3, [r7, #17]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d105      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e2:	4ba7      	ldr	r3, [pc, #668]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	4aa6      	ldr	r2, [pc, #664]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040fa:	4ba1      	ldr	r3, [pc, #644]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004100:	f023 0203 	bic.w	r2, r3, #3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	499d      	ldr	r1, [pc, #628]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800411c:	4b98      	ldr	r3, [pc, #608]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004122:	f023 020c 	bic.w	r2, r3, #12
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4995      	ldr	r1, [pc, #596]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800413e:	4b90      	ldr	r3, [pc, #576]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004144:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	498c      	ldr	r1, [pc, #560]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004160:	4b87      	ldr	r3, [pc, #540]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	4984      	ldr	r1, [pc, #528]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004182:	4b7f      	ldr	r3, [pc, #508]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004188:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	497b      	ldr	r1, [pc, #492]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041a4:	4b76      	ldr	r3, [pc, #472]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	4973      	ldr	r1, [pc, #460]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	496a      	ldr	r1, [pc, #424]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041e8:	4b65      	ldr	r3, [pc, #404]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4962      	ldr	r1, [pc, #392]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800420a:	4b5d      	ldr	r3, [pc, #372]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004210:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	4959      	ldr	r1, [pc, #356]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800422c:	4b54      	ldr	r3, [pc, #336]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	4951      	ldr	r1, [pc, #324]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800424e:	4b4c      	ldr	r3, [pc, #304]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004254:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	4948      	ldr	r1, [pc, #288]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004270:	4b43      	ldr	r3, [pc, #268]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	4940      	ldr	r1, [pc, #256]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428e:	d105      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004290:	4b3b      	ldr	r3, [pc, #236]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a3a      	ldr	r2, [pc, #232]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800429a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042a8:	4b35      	ldr	r3, [pc, #212]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b6:	4932      	ldr	r1, [pc, #200]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c6:	d105      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042d2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042e0:	4b27      	ldr	r3, [pc, #156]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ee:	4924      	ldr	r1, [pc, #144]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042fe:	d105      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004300:	4b1f      	ldr	r3, [pc, #124]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a1e      	ldr	r2, [pc, #120]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800430a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d015      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004318:	4b19      	ldr	r3, [pc, #100]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004326:	4916      	ldr	r1, [pc, #88]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004336:	d105      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004338:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4a10      	ldr	r2, [pc, #64]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004342:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d019      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004350:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	4908      	ldr	r1, [pc, #32]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800436e:	d109      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004370:	4b03      	ldr	r3, [pc, #12]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a02      	ldr	r2, [pc, #8]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800437a:	60d3      	str	r3, [r2, #12]
 800437c:	e002      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d015      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004390:	4b29      	ldr	r3, [pc, #164]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	4926      	ldr	r1, [pc, #152]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ae:	d105      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043b0:	4b21      	ldr	r3, [pc, #132]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a20      	ldr	r2, [pc, #128]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d015      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d6:	4918      	ldr	r1, [pc, #96]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e6:	d105      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043e8:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a12      	ldr	r2, [pc, #72]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d015      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004400:	4b0d      	ldr	r3, [pc, #52]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004402:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004406:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	490a      	ldr	r1, [pc, #40]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800441e:	d105      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4a04      	ldr	r2, [pc, #16]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800442a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800442c:	7cbb      	ldrb	r3, [r7, #18]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000

0800443c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e049      	b.n	80044e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc ff22 	bl	80012ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f000 fdc4 	bl	8005008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d001      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e054      	b.n	80045ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a26      	ldr	r2, [pc, #152]	@ (80045bc <HAL_TIM_Base_Start_IT+0xd0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d022      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452e:	d01d      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a22      	ldr	r2, [pc, #136]	@ (80045c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d018      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a21      	ldr	r2, [pc, #132]	@ (80045c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1f      	ldr	r2, [pc, #124]	@ (80045c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1e      	ldr	r2, [pc, #120]	@ (80045cc <HAL_TIM_Base_Start_IT+0xe0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1b      	ldr	r2, [pc, #108]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d115      	bne.n	8004598 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	4b19      	ldr	r3, [pc, #100]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xec>)
 8004574:	4013      	ands	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b06      	cmp	r3, #6
 800457c:	d015      	beq.n	80045aa <HAL_TIM_Base_Start_IT+0xbe>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004584:	d011      	beq.n	80045aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0201 	orr.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004596:	e008      	b.n	80045aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e000      	b.n	80045ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800
 80045c8:	40000c00 	.word	0x40000c00
 80045cc:	40013400 	.word	0x40013400
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40015000 	.word	0x40015000
 80045d8:	00010007 	.word	0x00010007

080045dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e049      	b.n	8004682 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f841 	bl	800468a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f000 fcf4 	bl	8005008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_TIM_PWM_Start+0x24>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e03c      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d109      	bne.n	80046de <HAL_TIM_PWM_Start+0x3e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	e02f      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d109      	bne.n	80046f8 <HAL_TIM_PWM_Start+0x58>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e022      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d109      	bne.n	8004712 <HAL_TIM_PWM_Start+0x72>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	e015      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b10      	cmp	r3, #16
 8004716:	d109      	bne.n	800472c <HAL_TIM_PWM_Start+0x8c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e008      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0a6      	b.n	8004894 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0xb6>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004754:	e023      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d104      	bne.n	8004766 <HAL_TIM_PWM_Start+0xc6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004764:	e01b      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start+0xd6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004774:	e013      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d104      	bne.n	8004786 <HAL_TIM_PWM_Start+0xe6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004784:	e00b      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b10      	cmp	r3, #16
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Start+0xf6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004794:	e003      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 f91c 	bl	80059e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a3a      	ldr	r2, [pc, #232]	@ (800489c <HAL_TIM_PWM_Start+0x1fc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d018      	beq.n	80047e8 <HAL_TIM_PWM_Start+0x148>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a39      	ldr	r2, [pc, #228]	@ (80048a0 <HAL_TIM_PWM_Start+0x200>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_TIM_PWM_Start+0x148>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a37      	ldr	r2, [pc, #220]	@ (80048a4 <HAL_TIM_PWM_Start+0x204>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00e      	beq.n	80047e8 <HAL_TIM_PWM_Start+0x148>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a36      	ldr	r2, [pc, #216]	@ (80048a8 <HAL_TIM_PWM_Start+0x208>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d009      	beq.n	80047e8 <HAL_TIM_PWM_Start+0x148>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a34      	ldr	r2, [pc, #208]	@ (80048ac <HAL_TIM_PWM_Start+0x20c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_TIM_PWM_Start+0x148>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a33      	ldr	r2, [pc, #204]	@ (80048b0 <HAL_TIM_PWM_Start+0x210>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <HAL_TIM_PWM_Start+0x14c>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <HAL_TIM_PWM_Start+0x14e>
 80047ec:	2300      	movs	r3, #0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004800:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a25      	ldr	r2, [pc, #148]	@ (800489c <HAL_TIM_PWM_Start+0x1fc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d022      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004814:	d01d      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a26      	ldr	r2, [pc, #152]	@ (80048b4 <HAL_TIM_PWM_Start+0x214>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a24      	ldr	r2, [pc, #144]	@ (80048b8 <HAL_TIM_PWM_Start+0x218>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a23      	ldr	r2, [pc, #140]	@ (80048bc <HAL_TIM_PWM_Start+0x21c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a19      	ldr	r2, [pc, #100]	@ (80048a0 <HAL_TIM_PWM_Start+0x200>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a18      	ldr	r2, [pc, #96]	@ (80048a4 <HAL_TIM_PWM_Start+0x204>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a18      	ldr	r2, [pc, #96]	@ (80048b0 <HAL_TIM_PWM_Start+0x210>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d115      	bne.n	800487e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	4b19      	ldr	r3, [pc, #100]	@ (80048c0 <HAL_TIM_PWM_Start+0x220>)
 800485a:	4013      	ands	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b06      	cmp	r3, #6
 8004862:	d015      	beq.n	8004890 <HAL_TIM_PWM_Start+0x1f0>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486a:	d011      	beq.n	8004890 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	e008      	b.n	8004890 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e000      	b.n	8004892 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40013400 	.word	0x40013400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800
 80048b0:	40015000 	.word	0x40015000
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	00010007 	.word	0x00010007

080048c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d020      	beq.n	8004928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01b      	beq.n	8004928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0202 	mvn.w	r2, #2
 80048f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fb5c 	bl	8004fcc <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fb4e 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fb5f 	bl	8004fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d020      	beq.n	8004974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0204 	mvn.w	r2, #4
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fb36 	bl	8004fcc <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fb28 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb39 	bl	8004fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d020      	beq.n	80049c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01b      	beq.n	80049c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0208 	mvn.w	r2, #8
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2204      	movs	r2, #4
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fb10 	bl	8004fcc <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fb02 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fb13 	bl	8004fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d020      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0210 	mvn.w	r2, #16
 80049dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2208      	movs	r2, #8
 80049e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 faea 	bl	8004fcc <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fadc 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 faed 	bl	8004fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0201 	mvn.w	r2, #1
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc fb08 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 faa0 	bl	8005f9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f001 fa98 	bl	8005fb2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 faa7 	bl	8004ff4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00c      	beq.n	8004aca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f06f 0220 	mvn.w	r2, #32
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f001 fa60 	bl	8005f8a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00c      	beq.n	8004aee <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f001 fa6c 	bl	8005fc6 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00c      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f001 fa64 	bl	8005fda <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00c      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f001 fa5c 	bl	8005fee <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00c      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f001 fa54 	bl	8006002 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e0ff      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b14      	cmp	r3, #20
 8004b8e:	f200 80f0 	bhi.w	8004d72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b92:	a201      	add	r2, pc, #4	@ (adr r2, 8004b98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004d73 	.word	0x08004d73
 8004ba0:	08004d73 	.word	0x08004d73
 8004ba4:	08004d73 	.word	0x08004d73
 8004ba8:	08004c2d 	.word	0x08004c2d
 8004bac:	08004d73 	.word	0x08004d73
 8004bb0:	08004d73 	.word	0x08004d73
 8004bb4:	08004d73 	.word	0x08004d73
 8004bb8:	08004c6f 	.word	0x08004c6f
 8004bbc:	08004d73 	.word	0x08004d73
 8004bc0:	08004d73 	.word	0x08004d73
 8004bc4:	08004d73 	.word	0x08004d73
 8004bc8:	08004caf 	.word	0x08004caf
 8004bcc:	08004d73 	.word	0x08004d73
 8004bd0:	08004d73 	.word	0x08004d73
 8004bd4:	08004d73 	.word	0x08004d73
 8004bd8:	08004cf1 	.word	0x08004cf1
 8004bdc:	08004d73 	.word	0x08004d73
 8004be0:	08004d73 	.word	0x08004d73
 8004be4:	08004d73 	.word	0x08004d73
 8004be8:	08004d31 	.word	0x08004d31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fabc 	bl	8005170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0208 	orr.w	r2, r2, #8
 8004c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0204 	bic.w	r2, r2, #4
 8004c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6999      	ldr	r1, [r3, #24]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	619a      	str	r2, [r3, #24]
      break;
 8004c2a:	e0a5      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fb36 	bl	80052a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6999      	ldr	r1, [r3, #24]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	021a      	lsls	r2, r3, #8
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	619a      	str	r2, [r3, #24]
      break;
 8004c6c:	e084      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fba9 	bl	80053cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0208 	orr.w	r2, r2, #8
 8004c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0204 	bic.w	r2, r2, #4
 8004c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69d9      	ldr	r1, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	61da      	str	r2, [r3, #28]
      break;
 8004cac:	e064      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fc1b 	bl	80054f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69d9      	ldr	r1, [r3, #28]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	021a      	lsls	r2, r3, #8
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	61da      	str	r2, [r3, #28]
      break;
 8004cee:	e043      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fc8e 	bl	8005618 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0208 	orr.w	r2, r2, #8
 8004d0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0204 	bic.w	r2, r2, #4
 8004d1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004d2e:	e023      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fcd8 	bl	80056ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d5a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	021a      	lsls	r2, r3, #8
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004d70:	e002      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
      break;
 8004d76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop

08004d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e0f6      	b.n	8004f96 <HAL_TIM_ConfigClockSource+0x20a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004dc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a6f      	ldr	r2, [pc, #444]	@ (8004fa0 <HAL_TIM_ConfigClockSource+0x214>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	f000 80c1 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004de8:	4a6d      	ldr	r2, [pc, #436]	@ (8004fa0 <HAL_TIM_ConfigClockSource+0x214>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	f200 80c6 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004df0:	4a6c      	ldr	r2, [pc, #432]	@ (8004fa4 <HAL_TIM_ConfigClockSource+0x218>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	f000 80b9 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004df8:	4a6a      	ldr	r2, [pc, #424]	@ (8004fa4 <HAL_TIM_ConfigClockSource+0x218>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	f200 80be 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e00:	4a69      	ldr	r2, [pc, #420]	@ (8004fa8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	f000 80b1 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e08:	4a67      	ldr	r2, [pc, #412]	@ (8004fa8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	f200 80b6 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e10:	4a66      	ldr	r2, [pc, #408]	@ (8004fac <HAL_TIM_ConfigClockSource+0x220>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	f000 80a9 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e18:	4a64      	ldr	r2, [pc, #400]	@ (8004fac <HAL_TIM_ConfigClockSource+0x220>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	f200 80ae 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e20:	4a63      	ldr	r2, [pc, #396]	@ (8004fb0 <HAL_TIM_ConfigClockSource+0x224>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	f000 80a1 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e28:	4a61      	ldr	r2, [pc, #388]	@ (8004fb0 <HAL_TIM_ConfigClockSource+0x224>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	f200 80a6 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e30:	4a60      	ldr	r2, [pc, #384]	@ (8004fb4 <HAL_TIM_ConfigClockSource+0x228>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	f000 8099 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e38:	4a5e      	ldr	r2, [pc, #376]	@ (8004fb4 <HAL_TIM_ConfigClockSource+0x228>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	f200 809e 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004e44:	f000 8091 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004e4c:	f200 8096 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e54:	f000 8089 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e5c:	f200 808e 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e64:	d03e      	beq.n	8004ee4 <HAL_TIM_ConfigClockSource+0x158>
 8004e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e6a:	f200 8087 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e72:	f000 8086 	beq.w	8004f82 <HAL_TIM_ConfigClockSource+0x1f6>
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7a:	d87f      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e7c:	2b70      	cmp	r3, #112	@ 0x70
 8004e7e:	d01a      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x12a>
 8004e80:	2b70      	cmp	r3, #112	@ 0x70
 8004e82:	d87b      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e84:	2b60      	cmp	r3, #96	@ 0x60
 8004e86:	d050      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x19e>
 8004e88:	2b60      	cmp	r3, #96	@ 0x60
 8004e8a:	d877      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e8c:	2b50      	cmp	r3, #80	@ 0x50
 8004e8e:	d03c      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x17e>
 8004e90:	2b50      	cmp	r3, #80	@ 0x50
 8004e92:	d873      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	d058      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x1be>
 8004e98:	2b40      	cmp	r3, #64	@ 0x40
 8004e9a:	d86f      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e9c:	2b30      	cmp	r3, #48	@ 0x30
 8004e9e:	d064      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004ea0:	2b30      	cmp	r3, #48	@ 0x30
 8004ea2:	d86b      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d060      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d867      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d05c      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d05a      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004eb4:	e062      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ec6:	f000 fd6d 	bl	80059a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	609a      	str	r2, [r3, #8]
      break;
 8004ee2:	e04f      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ef4:	f000 fd56 	bl	80059a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f06:	609a      	str	r2, [r3, #8]
      break;
 8004f08:	e03c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 fcc8 	bl	80058ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2150      	movs	r1, #80	@ 0x50
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fd21 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f28:	e02c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f36:	461a      	mov	r2, r3
 8004f38:	f000 fce7 	bl	800590a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2160      	movs	r1, #96	@ 0x60
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fd11 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f48:	e01c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	461a      	mov	r2, r3
 8004f58:	f000 fca8 	bl	80058ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2140      	movs	r1, #64	@ 0x40
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fd01 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f68:	e00c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f000 fcf8 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f7a:	e003      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f80:	e000      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	00100070 	.word	0x00100070
 8004fa4:	00100060 	.word	0x00100060
 8004fa8:	00100050 	.word	0x00100050
 8004fac:	00100040 	.word	0x00100040
 8004fb0:	00100030 	.word	0x00100030
 8004fb4:	00100020 	.word	0x00100020

08004fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a4c      	ldr	r2, [pc, #304]	@ (800514c <TIM_Base_SetConfig+0x144>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d017      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005026:	d013      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a49      	ldr	r2, [pc, #292]	@ (8005150 <TIM_Base_SetConfig+0x148>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00f      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a48      	ldr	r2, [pc, #288]	@ (8005154 <TIM_Base_SetConfig+0x14c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00b      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a47      	ldr	r2, [pc, #284]	@ (8005158 <TIM_Base_SetConfig+0x150>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d007      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a46      	ldr	r2, [pc, #280]	@ (800515c <TIM_Base_SetConfig+0x154>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a45      	ldr	r2, [pc, #276]	@ (8005160 <TIM_Base_SetConfig+0x158>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d108      	bne.n	8005062 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a39      	ldr	r2, [pc, #228]	@ (800514c <TIM_Base_SetConfig+0x144>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d023      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005070:	d01f      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a36      	ldr	r2, [pc, #216]	@ (8005150 <TIM_Base_SetConfig+0x148>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01b      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a35      	ldr	r2, [pc, #212]	@ (8005154 <TIM_Base_SetConfig+0x14c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d017      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a34      	ldr	r2, [pc, #208]	@ (8005158 <TIM_Base_SetConfig+0x150>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a33      	ldr	r2, [pc, #204]	@ (800515c <TIM_Base_SetConfig+0x154>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00f      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a33      	ldr	r2, [pc, #204]	@ (8005164 <TIM_Base_SetConfig+0x15c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00b      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a32      	ldr	r2, [pc, #200]	@ (8005168 <TIM_Base_SetConfig+0x160>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a31      	ldr	r2, [pc, #196]	@ (800516c <TIM_Base_SetConfig+0x164>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005160 <TIM_Base_SetConfig+0x158>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d108      	bne.n	80050c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a18      	ldr	r2, [pc, #96]	@ (800514c <TIM_Base_SetConfig+0x144>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <TIM_Base_SetConfig+0x110>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a1a      	ldr	r2, [pc, #104]	@ (800515c <TIM_Base_SetConfig+0x154>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00f      	beq.n	8005118 <TIM_Base_SetConfig+0x110>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005164 <TIM_Base_SetConfig+0x15c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00b      	beq.n	8005118 <TIM_Base_SetConfig+0x110>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a19      	ldr	r2, [pc, #100]	@ (8005168 <TIM_Base_SetConfig+0x160>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <TIM_Base_SetConfig+0x110>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a18      	ldr	r2, [pc, #96]	@ (800516c <TIM_Base_SetConfig+0x164>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_Base_SetConfig+0x110>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a13      	ldr	r2, [pc, #76]	@ (8005160 <TIM_Base_SetConfig+0x158>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d103      	bne.n	8005120 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b01      	cmp	r3, #1
 8005130:	d105      	bne.n	800513e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f023 0201 	bic.w	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	611a      	str	r2, [r3, #16]
  }
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40015000 	.word	0x40015000
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f023 0201 	bic.w	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f023 0302 	bic.w	r3, r3, #2
 80051bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a30      	ldr	r2, [pc, #192]	@ (800528c <TIM_OC1_SetConfig+0x11c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <TIM_OC1_SetConfig+0x88>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005290 <TIM_OC1_SetConfig+0x120>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00f      	beq.n	80051f8 <TIM_OC1_SetConfig+0x88>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a2e      	ldr	r2, [pc, #184]	@ (8005294 <TIM_OC1_SetConfig+0x124>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00b      	beq.n	80051f8 <TIM_OC1_SetConfig+0x88>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005298 <TIM_OC1_SetConfig+0x128>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <TIM_OC1_SetConfig+0x88>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a2c      	ldr	r2, [pc, #176]	@ (800529c <TIM_OC1_SetConfig+0x12c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_OC1_SetConfig+0x88>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a2b      	ldr	r2, [pc, #172]	@ (80052a0 <TIM_OC1_SetConfig+0x130>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d10c      	bne.n	8005212 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0308 	bic.w	r3, r3, #8
 80051fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 0304 	bic.w	r3, r3, #4
 8005210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1d      	ldr	r2, [pc, #116]	@ (800528c <TIM_OC1_SetConfig+0x11c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <TIM_OC1_SetConfig+0xd2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1c      	ldr	r2, [pc, #112]	@ (8005290 <TIM_OC1_SetConfig+0x120>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00f      	beq.n	8005242 <TIM_OC1_SetConfig+0xd2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1b      	ldr	r2, [pc, #108]	@ (8005294 <TIM_OC1_SetConfig+0x124>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_OC1_SetConfig+0xd2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1a      	ldr	r2, [pc, #104]	@ (8005298 <TIM_OC1_SetConfig+0x128>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_OC1_SetConfig+0xd2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a19      	ldr	r2, [pc, #100]	@ (800529c <TIM_OC1_SetConfig+0x12c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC1_SetConfig+0xd2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <TIM_OC1_SetConfig+0x130>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d111      	bne.n	8005266 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40013400 	.word	0x40013400
 8005294:	40014000 	.word	0x40014000
 8005298:	40014400 	.word	0x40014400
 800529c:	40014800 	.word	0x40014800
 80052a0:	40015000 	.word	0x40015000

080052a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f023 0210 	bic.w	r2, r3, #16
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0320 	bic.w	r3, r3, #32
 80052f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a2c      	ldr	r2, [pc, #176]	@ (80053b4 <TIM_OC2_SetConfig+0x110>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d007      	beq.n	8005318 <TIM_OC2_SetConfig+0x74>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a2b      	ldr	r2, [pc, #172]	@ (80053b8 <TIM_OC2_SetConfig+0x114>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_OC2_SetConfig+0x74>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a2a      	ldr	r2, [pc, #168]	@ (80053bc <TIM_OC2_SetConfig+0x118>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d10d      	bne.n	8005334 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800531e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005332:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a1f      	ldr	r2, [pc, #124]	@ (80053b4 <TIM_OC2_SetConfig+0x110>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d013      	beq.n	8005364 <TIM_OC2_SetConfig+0xc0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a1e      	ldr	r2, [pc, #120]	@ (80053b8 <TIM_OC2_SetConfig+0x114>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00f      	beq.n	8005364 <TIM_OC2_SetConfig+0xc0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a1e      	ldr	r2, [pc, #120]	@ (80053c0 <TIM_OC2_SetConfig+0x11c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <TIM_OC2_SetConfig+0xc0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a1d      	ldr	r2, [pc, #116]	@ (80053c4 <TIM_OC2_SetConfig+0x120>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d007      	beq.n	8005364 <TIM_OC2_SetConfig+0xc0>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <TIM_OC2_SetConfig+0x124>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC2_SetConfig+0xc0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a17      	ldr	r2, [pc, #92]	@ (80053bc <TIM_OC2_SetConfig+0x118>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d113      	bne.n	800538c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800536a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40015000 	.word	0x40015000
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2b      	ldr	r2, [pc, #172]	@ (80054d8 <TIM_OC3_SetConfig+0x10c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <TIM_OC3_SetConfig+0x72>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2a      	ldr	r2, [pc, #168]	@ (80054dc <TIM_OC3_SetConfig+0x110>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_OC3_SetConfig+0x72>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a29      	ldr	r2, [pc, #164]	@ (80054e0 <TIM_OC3_SetConfig+0x114>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d10d      	bne.n	800545a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1e      	ldr	r2, [pc, #120]	@ (80054d8 <TIM_OC3_SetConfig+0x10c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <TIM_OC3_SetConfig+0xbe>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a1d      	ldr	r2, [pc, #116]	@ (80054dc <TIM_OC3_SetConfig+0x110>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00f      	beq.n	800548a <TIM_OC3_SetConfig+0xbe>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a1d      	ldr	r2, [pc, #116]	@ (80054e4 <TIM_OC3_SetConfig+0x118>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00b      	beq.n	800548a <TIM_OC3_SetConfig+0xbe>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a1c      	ldr	r2, [pc, #112]	@ (80054e8 <TIM_OC3_SetConfig+0x11c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d007      	beq.n	800548a <TIM_OC3_SetConfig+0xbe>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a1b      	ldr	r2, [pc, #108]	@ (80054ec <TIM_OC3_SetConfig+0x120>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_OC3_SetConfig+0xbe>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a16      	ldr	r2, [pc, #88]	@ (80054e0 <TIM_OC3_SetConfig+0x114>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d113      	bne.n	80054b2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	621a      	str	r2, [r3, #32]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	40012c00 	.word	0x40012c00
 80054dc:	40013400 	.word	0x40013400
 80054e0:	40015000 	.word	0x40015000
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800

080054f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800551e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800552a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800553e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a2c      	ldr	r2, [pc, #176]	@ (8005600 <TIM_OC4_SetConfig+0x110>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d007      	beq.n	8005564 <TIM_OC4_SetConfig+0x74>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a2b      	ldr	r2, [pc, #172]	@ (8005604 <TIM_OC4_SetConfig+0x114>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_OC4_SetConfig+0x74>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a2a      	ldr	r2, [pc, #168]	@ (8005608 <TIM_OC4_SetConfig+0x118>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d10d      	bne.n	8005580 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800556a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	031b      	lsls	r3, r3, #12
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800557e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a1f      	ldr	r2, [pc, #124]	@ (8005600 <TIM_OC4_SetConfig+0x110>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <TIM_OC4_SetConfig+0xc0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a1e      	ldr	r2, [pc, #120]	@ (8005604 <TIM_OC4_SetConfig+0x114>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00f      	beq.n	80055b0 <TIM_OC4_SetConfig+0xc0>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a1e      	ldr	r2, [pc, #120]	@ (800560c <TIM_OC4_SetConfig+0x11c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_OC4_SetConfig+0xc0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a1d      	ldr	r2, [pc, #116]	@ (8005610 <TIM_OC4_SetConfig+0x120>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_OC4_SetConfig+0xc0>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005614 <TIM_OC4_SetConfig+0x124>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_OC4_SetConfig+0xc0>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a17      	ldr	r2, [pc, #92]	@ (8005608 <TIM_OC4_SetConfig+0x118>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d113      	bne.n	80055d8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80055be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	019b      	lsls	r3, r3, #6
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	019b      	lsls	r3, r3, #6
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40013400 	.word	0x40013400
 8005608:	40015000 	.word	0x40015000
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800

08005618 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800565c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a19      	ldr	r2, [pc, #100]	@ (80056d4 <TIM_OC5_SetConfig+0xbc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <TIM_OC5_SetConfig+0x82>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a18      	ldr	r2, [pc, #96]	@ (80056d8 <TIM_OC5_SetConfig+0xc0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00f      	beq.n	800569a <TIM_OC5_SetConfig+0x82>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a17      	ldr	r2, [pc, #92]	@ (80056dc <TIM_OC5_SetConfig+0xc4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00b      	beq.n	800569a <TIM_OC5_SetConfig+0x82>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a16      	ldr	r2, [pc, #88]	@ (80056e0 <TIM_OC5_SetConfig+0xc8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d007      	beq.n	800569a <TIM_OC5_SetConfig+0x82>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a15      	ldr	r2, [pc, #84]	@ (80056e4 <TIM_OC5_SetConfig+0xcc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d003      	beq.n	800569a <TIM_OC5_SetConfig+0x82>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <TIM_OC5_SetConfig+0xd0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d109      	bne.n	80056ae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	621a      	str	r2, [r3, #32]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40013400 	.word	0x40013400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800
 80056e8:	40015000 	.word	0x40015000

080056ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800571e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	051b      	lsls	r3, r3, #20
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a1a      	ldr	r2, [pc, #104]	@ (80057ac <TIM_OC6_SetConfig+0xc0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d013      	beq.n	8005770 <TIM_OC6_SetConfig+0x84>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a19      	ldr	r2, [pc, #100]	@ (80057b0 <TIM_OC6_SetConfig+0xc4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00f      	beq.n	8005770 <TIM_OC6_SetConfig+0x84>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a18      	ldr	r2, [pc, #96]	@ (80057b4 <TIM_OC6_SetConfig+0xc8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00b      	beq.n	8005770 <TIM_OC6_SetConfig+0x84>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a17      	ldr	r2, [pc, #92]	@ (80057b8 <TIM_OC6_SetConfig+0xcc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d007      	beq.n	8005770 <TIM_OC6_SetConfig+0x84>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a16      	ldr	r2, [pc, #88]	@ (80057bc <TIM_OC6_SetConfig+0xd0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_OC6_SetConfig+0x84>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a15      	ldr	r2, [pc, #84]	@ (80057c0 <TIM_OC6_SetConfig+0xd4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d109      	bne.n	8005784 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005776:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	029b      	lsls	r3, r3, #10
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800
 80057c0:	40015000 	.word	0x40015000

080057c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f023 0201 	bic.w	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a28      	ldr	r2, [pc, #160]	@ (8005890 <TIM_TI1_SetConfig+0xcc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01b      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f8:	d017      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a25      	ldr	r2, [pc, #148]	@ (8005894 <TIM_TI1_SetConfig+0xd0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a24      	ldr	r2, [pc, #144]	@ (8005898 <TIM_TI1_SetConfig+0xd4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00f      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a23      	ldr	r2, [pc, #140]	@ (800589c <TIM_TI1_SetConfig+0xd8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00b      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4a22      	ldr	r2, [pc, #136]	@ (80058a0 <TIM_TI1_SetConfig+0xdc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d007      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a21      	ldr	r2, [pc, #132]	@ (80058a4 <TIM_TI1_SetConfig+0xe0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4a20      	ldr	r2, [pc, #128]	@ (80058a8 <TIM_TI1_SetConfig+0xe4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <TIM_TI1_SetConfig+0x6a>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <TIM_TI1_SetConfig+0x6c>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0303 	bic.w	r3, r3, #3
 800583a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e003      	b.n	800584e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	b2db      	uxtb	r3, r3
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f023 030a 	bic.w	r3, r3, #10
 8005868:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f003 030a 	and.w	r3, r3, #10
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40013400 	.word	0x40013400
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40015000 	.word	0x40015000

080058ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0201 	bic.w	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f023 030a 	bic.w	r3, r3, #10
 80058e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800590a:	b480      	push	{r7}
 800590c:	b087      	sub	sp, #28
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f023 0210 	bic.w	r2, r3, #16
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	031b      	lsls	r3, r3, #12
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005946:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	f043 0307 	orr.w	r3, r3, #7
 8005990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	609a      	str	r2, [r3, #8]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	021a      	lsls	r2, r3, #8
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	609a      	str	r2, [r3, #8]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	2201      	movs	r2, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	43db      	mvns	r3, r3
 8005a06:	401a      	ands	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1a      	ldr	r2, [r3, #32]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b08a      	sub	sp, #40	@ 0x28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e0a0      	b.n	8005b84 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fb fc8c 	bl	8001374 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7ff faca 	bl	8005008 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6819      	ldr	r1, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2203      	movs	r2, #3
 8005a82:	f7ff fe9f 	bl	80057c4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 020c 	bic.w	r2, r2, #12
 8005a94:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6999      	ldr	r1, [r3, #24]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ab6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aca:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ada:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0204 	orr.w	r2, r2, #4
 8005afe:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b04:	2300      	movs	r3, #0
 8005b06:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005b08:	2370      	movs	r3, #112	@ 0x70
 8005b0a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b10:	2300      	movs	r3, #0
 8005b12:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f107 020c 	add.w	r2, r7, #12
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fbbb 	bl	80052a4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b40:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005b50:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3728      	adds	r7, #40	@ 0x28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <HAL_TIMEx_PWMN_Start+0x24>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	bf14      	ite	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	2300      	moveq	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	e022      	b.n	8005bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d109      	bne.n	8005bca <HAL_TIMEx_PWMN_Start+0x3e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	bf14      	ite	ne
 8005bc2:	2301      	movne	r3, #1
 8005bc4:	2300      	moveq	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	e015      	b.n	8005bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d109      	bne.n	8005be4 <HAL_TIMEx_PWMN_Start+0x58>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	e008      	b.n	8005bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	bf14      	ite	ne
 8005bf0:	2301      	movne	r3, #1
 8005bf2:	2300      	moveq	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e073      	b.n	8005ce6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <HAL_TIMEx_PWMN_Start+0x82>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c0c:	e013      	b.n	8005c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d104      	bne.n	8005c1e <HAL_TIMEx_PWMN_Start+0x92>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c1c:	e00b      	b.n	8005c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d104      	bne.n	8005c2e <HAL_TIMEx_PWMN_Start+0xa2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c2c:	e003      	b.n	8005c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f9e9 	bl	8006016 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a25      	ldr	r2, [pc, #148]	@ (8005cf0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d022      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c66:	d01d      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a21      	ldr	r2, [pc, #132]	@ (8005cf4 <HAL_TIMEx_PWMN_Start+0x168>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a20      	ldr	r2, [pc, #128]	@ (8005cf8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <HAL_TIMEx_PWMN_Start+0x170>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <HAL_TIMEx_PWMN_Start+0x174>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <HAL_TIMEx_PWMN_Start+0x178>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d115      	bne.n	8005cd0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	4b18      	ldr	r3, [pc, #96]	@ (8005d0c <HAL_TIMEx_PWMN_Start+0x180>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b06      	cmp	r3, #6
 8005cb4:	d015      	beq.n	8005ce2 <HAL_TIMEx_PWMN_Start+0x156>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cbc:	d011      	beq.n	8005ce2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0201 	orr.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cce:	e008      	b.n	8005ce2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	e000      	b.n	8005ce4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40015000 	.word	0x40015000
 8005d0c:	00010007 	.word	0x00010007

08005d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e074      	b.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a34      	ldr	r2, [pc, #208]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d009      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a33      	ldr	r2, [pc, #204]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a31      	ldr	r2, [pc, #196]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d108      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a21      	ldr	r2, [pc, #132]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da8:	d01d      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1f      	ldr	r2, [pc, #124]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a15      	ldr	r2, [pc, #84]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a18      	ldr	r2, [pc, #96]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a11      	ldr	r2, [pc, #68]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10c      	bne.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40013400 	.word	0x40013400
 8005e28:	40015000 	.word	0x40015000
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	40000c00 	.word	0x40000c00
 8005e38:	40014000 	.word	0x40014000

08005e3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e078      	b.n	8005f4a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	041b      	lsls	r3, r3, #16
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f58 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d009      	beq.n	8005efe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1b      	ldr	r2, [pc, #108]	@ (8005f5c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a19      	ldr	r2, [pc, #100]	@ (8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d11c      	bne.n	8005f38 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	051b      	lsls	r3, r3, #20
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40013400 	.word	0x40013400
 8005f60:	40015000 	.word	0x40015000

08005f64 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005f7a:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006016:	b480      	push	{r7}
 8006018:	b087      	sub	sp, #28
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	2204      	movs	r2, #4
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	43db      	mvns	r3, r3
 8006038:	401a      	ands	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a1a      	ldr	r2, [r3, #32]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	431a      	orrs	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	621a      	str	r2, [r3, #32]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e042      	b.n	80060f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fb fa3f 	bl	8001508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2224      	movs	r2, #36	@ 0x24
 800608e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 ff60 	bl	8006f70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fc61 	bl	8006978 <UART_SetConfig>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e01b      	b.n	80060f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 ffdf 	bl	80070b4 <UART_CheckIdleState>
 80060f6:	4603      	mov	r3, r0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	@ 0x28
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	4613      	mov	r3, r2
 800610e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006116:	2b20      	cmp	r3, #32
 8006118:	d17b      	bne.n	8006212 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <HAL_UART_Transmit+0x26>
 8006120:	88fb      	ldrh	r3, [r7, #6]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e074      	b.n	8006214 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2221      	movs	r2, #33	@ 0x21
 8006136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800613a:	f7fb fc91 	bl	8001a60 <HAL_GetTick>
 800613e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006158:	d108      	bne.n	800616c <HAL_UART_Transmit+0x6c>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	e003      	b.n	8006174 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006174:	e030      	b.n	80061d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2200      	movs	r2, #0
 800617e:	2180      	movs	r1, #128	@ 0x80
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f001 f841 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e03d      	b.n	8006214 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10b      	bne.n	80061b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	3302      	adds	r3, #2
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	e007      	b.n	80061c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	3301      	adds	r3, #1
 80061c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1c8      	bne.n	8006176 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2200      	movs	r2, #0
 80061ec:	2140      	movs	r1, #64	@ 0x40
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f001 f80a 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e006      	b.n	8006214 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2220      	movs	r2, #32
 800620a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	@ 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006230:	2b20      	cmp	r3, #32
 8006232:	d137      	bne.n	80062a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_UART_Receive_IT+0x24>
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e030      	b.n	80062a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a18      	ldr	r2, [pc, #96]	@ (80062b0 <HAL_UART_Receive_IT+0x94>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d01f      	beq.n	8006294 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	613b      	str	r3, [r7, #16]
   return(result);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006276:	627b      	str	r3, [r7, #36]	@ 0x24
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	623b      	str	r3, [r7, #32]
 8006282:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	69f9      	ldr	r1, [r7, #28]
 8006286:	6a3a      	ldr	r2, [r7, #32]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	61bb      	str	r3, [r7, #24]
   return(result);
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e6      	bne.n	8006262 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	461a      	mov	r2, r3
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f001 f822 	bl	80072e4 <UART_Start_Receive_IT>
 80062a0:	4603      	mov	r3, r0
 80062a2:	e000      	b.n	80062a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
  }
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3728      	adds	r7, #40	@ 0x28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	40008000 	.word	0x40008000

080062b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b0ba      	sub	sp, #232	@ 0xe8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80062de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80062e2:	4013      	ands	r3, r2
 80062e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80062e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11b      	bne.n	8006328 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d015      	beq.n	8006328 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b00      	cmp	r3, #0
 8006306:	d105      	bne.n	8006314 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8300 	beq.w	800691e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
      }
      return;
 8006326:	e2fa      	b.n	800691e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8123 	beq.w	8006578 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006332:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006336:	4b8d      	ldr	r3, [pc, #564]	@ (800656c <HAL_UART_IRQHandler+0x2b8>)
 8006338:	4013      	ands	r3, r2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800633e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006342:	4b8b      	ldr	r3, [pc, #556]	@ (8006570 <HAL_UART_IRQHandler+0x2bc>)
 8006344:	4013      	ands	r3, r2
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 8116 	beq.w	8006578 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d011      	beq.n	800637c <HAL_UART_IRQHandler+0xc8>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2201      	movs	r2, #1
 800636a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006372:	f043 0201 	orr.w	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800637c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d011      	beq.n	80063ac <HAL_UART_IRQHandler+0xf8>
 8006388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2202      	movs	r2, #2
 800639a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a2:	f043 0204 	orr.w	r2, r3, #4
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_UART_IRQHandler+0x128>
 80063b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2204      	movs	r2, #4
 80063ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	f043 0202 	orr.w	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d017      	beq.n	8006418 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80063f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80063f8:	4b5c      	ldr	r3, [pc, #368]	@ (800656c <HAL_UART_IRQHandler+0x2b8>)
 80063fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2208      	movs	r2, #8
 8006406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640e:	f043 0208 	orr.w	r2, r3, #8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800641c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006420:	2b00      	cmp	r3, #0
 8006422:	d012      	beq.n	800644a <HAL_UART_IRQHandler+0x196>
 8006424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006428:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00c      	beq.n	800644a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006438:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006440:	f043 0220 	orr.w	r2, r3, #32
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8266 	beq.w	8006922 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d013      	beq.n	800648a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800646e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006490:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649e:	2b40      	cmp	r3, #64	@ 0x40
 80064a0:	d005      	beq.n	80064ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d054      	beq.n	8006558 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 f83a 	bl	8007528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064be:	2b40      	cmp	r3, #64	@ 0x40
 80064c0:	d146      	bne.n	8006550 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064d0:	e853 3f00 	ldrex	r3, [r3]
 80064d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3308      	adds	r3, #8
 80064ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1d9      	bne.n	80064c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006514:	2b00      	cmp	r3, #0
 8006516:	d017      	beq.n	8006548 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800651e:	4a15      	ldr	r2, [pc, #84]	@ (8006574 <HAL_UART_IRQHandler+0x2c0>)
 8006520:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006528:	4618      	mov	r0, r3
 800652a:	f7fc fd00 	bl	8002f2e <HAL_DMA_Abort_IT>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d019      	beq.n	8006568 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800653a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006542:	4610      	mov	r0, r2
 8006544:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006546:	e00f      	b.n	8006568 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f9ff 	bl	800694c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654e:	e00b      	b.n	8006568 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f9fb 	bl	800694c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006556:	e007      	b.n	8006568 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f9f7 	bl	800694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006566:	e1dc      	b.n	8006922 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006568:	bf00      	nop
    return;
 800656a:	e1da      	b.n	8006922 <HAL_UART_IRQHandler+0x66e>
 800656c:	10000001 	.word	0x10000001
 8006570:	04000120 	.word	0x04000120
 8006574:	080075f5 	.word	0x080075f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800657c:	2b01      	cmp	r3, #1
 800657e:	f040 8170 	bne.w	8006862 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8169 	beq.w	8006862 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 8162 	beq.w	8006862 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2210      	movs	r2, #16
 80065a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b0:	2b40      	cmp	r3, #64	@ 0x40
 80065b2:	f040 80d8 	bne.w	8006766 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80af 	beq.w	800672c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065d8:	429a      	cmp	r2, r3
 80065da:	f080 80a7 	bcs.w	800672c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f040 8087 	bne.w	800670a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006610:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800662a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006632:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800663e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1da      	bne.n	80065fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3308      	adds	r3, #8
 800664c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006658:	f023 0301 	bic.w	r3, r3, #1
 800665c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800666a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800666e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006672:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800667c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e1      	bne.n	8006646 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3308      	adds	r3, #8
 8006688:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3308      	adds	r3, #8
 80066a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e3      	bne.n	8006682 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d8:	f023 0310 	bic.w	r3, r3, #16
 80066dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e4      	bne.n	80066c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006704:	4618      	mov	r0, r3
 8006706:	f7fc fbb9 	bl	8002e7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800671c:	b29b      	uxth	r3, r3
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	b29b      	uxth	r3, r3
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f91b 	bl	8006960 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800672a:	e0fc      	b.n	8006926 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006736:	429a      	cmp	r2, r3
 8006738:	f040 80f5 	bne.w	8006926 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b20      	cmp	r3, #32
 800674c:	f040 80eb 	bne.w	8006926 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f8fe 	bl	8006960 <HAL_UARTEx_RxEventCallback>
      return;
 8006764:	e0df      	b.n	8006926 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006772:	b29b      	uxth	r3, r3
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80d1 	beq.w	800692a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80cc 	beq.w	800692a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80067b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e4      	bne.n	8006792 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	623b      	str	r3, [r7, #32]
   return(result);
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067de:	f023 0301 	bic.w	r3, r3, #1
 80067e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3308      	adds	r3, #8
 80067ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80067f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e1      	bne.n	80067c8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	60fb      	str	r3, [r7, #12]
   return(result);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f023 0310 	bic.w	r3, r3, #16
 800682c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	69b9      	ldr	r1, [r7, #24]
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	617b      	str	r3, [r7, #20]
   return(result);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e4      	bne.n	8006818 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f880 	bl	8006960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006860:	e063      	b.n	800692a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <HAL_UART_IRQHandler+0x5d8>
 800686e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d008      	beq.n	800688c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fc17 	bl	80080b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800688a:	e051      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006894:	2b00      	cmp	r3, #0
 8006896:	d014      	beq.n	80068c2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d03a      	beq.n	800692e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
    }
    return;
 80068c0:	e035      	b.n	800692e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_UART_IRQHandler+0x62e>
 80068ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fea0 	bl	8007620 <UART_EndTransmit_IT>
    return;
 80068e0:	e026      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_UART_IRQHandler+0x64e>
 80068ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fbf0 	bl	80080e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006900:	e016      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006906:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d010      	beq.n	8006930 <HAL_UART_IRQHandler+0x67c>
 800690e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006912:	2b00      	cmp	r3, #0
 8006914:	da0c      	bge.n	8006930 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fbd8 	bl	80080cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800691c:	e008      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
      return;
 800691e:	bf00      	nop
 8006920:	e006      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
    return;
 8006922:	bf00      	nop
 8006924:	e004      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
      return;
 8006926:	bf00      	nop
 8006928:	e002      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
      return;
 800692a:	bf00      	nop
 800692c:	e000      	b.n	8006930 <HAL_UART_IRQHandler+0x67c>
    return;
 800692e:	bf00      	nop
  }
}
 8006930:	37e8      	adds	r7, #232	@ 0xe8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop

08006938 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800697c:	b08c      	sub	sp, #48	@ 0x30
 800697e:	af00      	add	r7, sp, #0
 8006980:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	431a      	orrs	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	431a      	orrs	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	4313      	orrs	r3, r2
 800699e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4baa      	ldr	r3, [pc, #680]	@ (8006c50 <UART_SetConfig+0x2d8>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a9f      	ldr	r2, [pc, #636]	@ (8006c54 <UART_SetConfig+0x2dc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d004      	beq.n	80069e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069e0:	4313      	orrs	r3, r2
 80069e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a02:	f023 010f 	bic.w	r1, r3, #15
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a90      	ldr	r2, [pc, #576]	@ (8006c58 <UART_SetConfig+0x2e0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d125      	bne.n	8006a68 <UART_SetConfig+0xf0>
 8006a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d81a      	bhi.n	8006a60 <UART_SetConfig+0xe8>
 8006a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <UART_SetConfig+0xb8>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a41 	.word	0x08006a41
 8006a34:	08006a51 	.word	0x08006a51
 8006a38:	08006a49 	.word	0x08006a49
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e116      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e112      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a56:	e10e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	e10a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a66:	e106      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a7c      	ldr	r2, [pc, #496]	@ (8006c60 <UART_SetConfig+0x2e8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d138      	bne.n	8006ae4 <UART_SetConfig+0x16c>
 8006a72:	4b7a      	ldr	r3, [pc, #488]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a78:	f003 030c 	and.w	r3, r3, #12
 8006a7c:	2b0c      	cmp	r3, #12
 8006a7e:	d82d      	bhi.n	8006adc <UART_SetConfig+0x164>
 8006a80:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <UART_SetConfig+0x110>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006abd 	.word	0x08006abd
 8006a8c:	08006add 	.word	0x08006add
 8006a90:	08006add 	.word	0x08006add
 8006a94:	08006add 	.word	0x08006add
 8006a98:	08006acd 	.word	0x08006acd
 8006a9c:	08006add 	.word	0x08006add
 8006aa0:	08006add 	.word	0x08006add
 8006aa4:	08006add 	.word	0x08006add
 8006aa8:	08006ac5 	.word	0x08006ac5
 8006aac:	08006add 	.word	0x08006add
 8006ab0:	08006add 	.word	0x08006add
 8006ab4:	08006add 	.word	0x08006add
 8006ab8:	08006ad5 	.word	0x08006ad5
 8006abc:	2300      	movs	r3, #0
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac2:	e0d8      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aca:	e0d4      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006acc:	2304      	movs	r3, #4
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	e0d0      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ada:	e0cc      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	e0c8      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a5e      	ldr	r2, [pc, #376]	@ (8006c64 <UART_SetConfig+0x2ec>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d125      	bne.n	8006b3a <UART_SetConfig+0x1c2>
 8006aee:	4b5b      	ldr	r3, [pc, #364]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006af8:	2b30      	cmp	r3, #48	@ 0x30
 8006afa:	d016      	beq.n	8006b2a <UART_SetConfig+0x1b2>
 8006afc:	2b30      	cmp	r3, #48	@ 0x30
 8006afe:	d818      	bhi.n	8006b32 <UART_SetConfig+0x1ba>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d00a      	beq.n	8006b1a <UART_SetConfig+0x1a2>
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d814      	bhi.n	8006b32 <UART_SetConfig+0x1ba>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <UART_SetConfig+0x19a>
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	d008      	beq.n	8006b22 <UART_SetConfig+0x1aa>
 8006b10:	e00f      	b.n	8006b32 <UART_SetConfig+0x1ba>
 8006b12:	2300      	movs	r3, #0
 8006b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b18:	e0ad      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b20:	e0a9      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b22:	2304      	movs	r3, #4
 8006b24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b28:	e0a5      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b30:	e0a1      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b32:	2310      	movs	r3, #16
 8006b34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b38:	e09d      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c68 <UART_SetConfig+0x2f0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d125      	bne.n	8006b90 <UART_SetConfig+0x218>
 8006b44:	4b45      	ldr	r3, [pc, #276]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b50:	d016      	beq.n	8006b80 <UART_SetConfig+0x208>
 8006b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b54:	d818      	bhi.n	8006b88 <UART_SetConfig+0x210>
 8006b56:	2b80      	cmp	r3, #128	@ 0x80
 8006b58:	d00a      	beq.n	8006b70 <UART_SetConfig+0x1f8>
 8006b5a:	2b80      	cmp	r3, #128	@ 0x80
 8006b5c:	d814      	bhi.n	8006b88 <UART_SetConfig+0x210>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <UART_SetConfig+0x1f0>
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d008      	beq.n	8006b78 <UART_SetConfig+0x200>
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x210>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6e:	e082      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b70:	2302      	movs	r3, #2
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b76:	e07e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b7e:	e07a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b86:	e076      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8e:	e072      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a35      	ldr	r2, [pc, #212]	@ (8006c6c <UART_SetConfig+0x2f4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d12a      	bne.n	8006bf0 <UART_SetConfig+0x278>
 8006b9a:	4b30      	ldr	r3, [pc, #192]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ba4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ba8:	d01a      	beq.n	8006be0 <UART_SetConfig+0x268>
 8006baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bae:	d81b      	bhi.n	8006be8 <UART_SetConfig+0x270>
 8006bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb4:	d00c      	beq.n	8006bd0 <UART_SetConfig+0x258>
 8006bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bba:	d815      	bhi.n	8006be8 <UART_SetConfig+0x270>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <UART_SetConfig+0x250>
 8006bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc4:	d008      	beq.n	8006bd8 <UART_SetConfig+0x260>
 8006bc6:	e00f      	b.n	8006be8 <UART_SetConfig+0x270>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bce:	e052      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd6:	e04e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bde:	e04a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be6:	e046      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bee:	e042      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a17      	ldr	r2, [pc, #92]	@ (8006c54 <UART_SetConfig+0x2dc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d13a      	bne.n	8006c70 <UART_SetConfig+0x2f8>
 8006bfa:	4b18      	ldr	r3, [pc, #96]	@ (8006c5c <UART_SetConfig+0x2e4>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c08:	d01a      	beq.n	8006c40 <UART_SetConfig+0x2c8>
 8006c0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c0e:	d81b      	bhi.n	8006c48 <UART_SetConfig+0x2d0>
 8006c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c14:	d00c      	beq.n	8006c30 <UART_SetConfig+0x2b8>
 8006c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c1a:	d815      	bhi.n	8006c48 <UART_SetConfig+0x2d0>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <UART_SetConfig+0x2b0>
 8006c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c24:	d008      	beq.n	8006c38 <UART_SetConfig+0x2c0>
 8006c26:	e00f      	b.n	8006c48 <UART_SetConfig+0x2d0>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2e:	e022      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c30:	2302      	movs	r3, #2
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c36:	e01e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c3e:	e01a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c46:	e016      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4e:	e012      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c50:	cfff69f3 	.word	0xcfff69f3
 8006c54:	40008000 	.word	0x40008000
 8006c58:	40013800 	.word	0x40013800
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	40004400 	.word	0x40004400
 8006c64:	40004800 	.word	0x40004800
 8006c68:	40004c00 	.word	0x40004c00
 8006c6c:	40005000 	.word	0x40005000
 8006c70:	2310      	movs	r3, #16
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4aae      	ldr	r2, [pc, #696]	@ (8006f34 <UART_SetConfig+0x5bc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	f040 8097 	bne.w	8006db0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d823      	bhi.n	8006cd2 <UART_SetConfig+0x35a>
 8006c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <UART_SetConfig+0x318>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cd3 	.word	0x08006cd3
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006cd3 	.word	0x08006cd3
 8006ca0:	08006cc3 	.word	0x08006cc3
 8006ca4:	08006cd3 	.word	0x08006cd3
 8006ca8:	08006cd3 	.word	0x08006cd3
 8006cac:	08006cd3 	.word	0x08006cd3
 8006cb0:	08006ccb 	.word	0x08006ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb4:	f7fd f8d0 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8006cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cba:	e010      	b.n	8006cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cbc:	4b9e      	ldr	r3, [pc, #632]	@ (8006f38 <UART_SetConfig+0x5c0>)
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cc0:	e00d      	b.n	8006cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc2:	f7fd f85b 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8006cc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cc8:	e009      	b.n	8006cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cd0:	e005      	b.n	8006cde <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8130 	beq.w	8006f46 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cea:	4a94      	ldr	r2, [pc, #592]	@ (8006f3c <UART_SetConfig+0x5c4>)
 8006cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	4413      	add	r3, r2
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d305      	bcc.n	8006d16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d903      	bls.n	8006d1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d1c:	e113      	b.n	8006f46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	2200      	movs	r2, #0
 8006d22:	60bb      	str	r3, [r7, #8]
 8006d24:	60fa      	str	r2, [r7, #12]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2a:	4a84      	ldr	r2, [pc, #528]	@ (8006f3c <UART_SetConfig+0x5c4>)
 8006d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2200      	movs	r2, #0
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d40:	f7f9 face 	bl	80002e0 <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	020b      	lsls	r3, r1, #8
 8006d56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d5a:	0202      	lsls	r2, r0, #8
 8006d5c:	6979      	ldr	r1, [r7, #20]
 8006d5e:	6849      	ldr	r1, [r1, #4]
 8006d60:	0849      	lsrs	r1, r1, #1
 8006d62:	2000      	movs	r0, #0
 8006d64:	460c      	mov	r4, r1
 8006d66:	4605      	mov	r5, r0
 8006d68:	eb12 0804 	adds.w	r8, r2, r4
 8006d6c:	eb43 0905 	adc.w	r9, r3, r5
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	469a      	mov	sl, r3
 8006d78:	4693      	mov	fp, r2
 8006d7a:	4652      	mov	r2, sl
 8006d7c:	465b      	mov	r3, fp
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 faad 	bl	80002e0 <__aeabi_uldivmod>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d94:	d308      	bcc.n	8006da8 <UART_SetConfig+0x430>
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d9c:	d204      	bcs.n	8006da8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	60da      	str	r2, [r3, #12]
 8006da6:	e0ce      	b.n	8006f46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006dae:	e0ca      	b.n	8006f46 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006db8:	d166      	bne.n	8006e88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006dba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d827      	bhi.n	8006e12 <UART_SetConfig+0x49a>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <UART_SetConfig+0x450>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006ded 	.word	0x08006ded
 8006dcc:	08006df5 	.word	0x08006df5
 8006dd0:	08006dfd 	.word	0x08006dfd
 8006dd4:	08006e13 	.word	0x08006e13
 8006dd8:	08006e03 	.word	0x08006e03
 8006ddc:	08006e13 	.word	0x08006e13
 8006de0:	08006e13 	.word	0x08006e13
 8006de4:	08006e13 	.word	0x08006e13
 8006de8:	08006e0b 	.word	0x08006e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dec:	f7fd f834 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8006df0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006df2:	e014      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df4:	f7fd f846 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 8006df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dfa:	e010      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8006f38 <UART_SetConfig+0x5c0>)
 8006dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e00:	e00d      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e02:	f7fc ffbb 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8006e06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e08:	e009      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e10:	e005      	b.n	8006e1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 8090 	beq.w	8006f46 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	4a44      	ldr	r2, [pc, #272]	@ (8006f3c <UART_SetConfig+0x5c4>)
 8006e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e38:	005a      	lsls	r2, r3, #1
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	085b      	lsrs	r3, r3, #1
 8006e40:	441a      	add	r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	2b0f      	cmp	r3, #15
 8006e50:	d916      	bls.n	8006e80 <UART_SetConfig+0x508>
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e58:	d212      	bcs.n	8006e80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f023 030f 	bic.w	r3, r3, #15
 8006e62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	8bfb      	ldrh	r3, [r7, #30]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	8bfa      	ldrh	r2, [r7, #30]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	e062      	b.n	8006f46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e86:	e05e      	b.n	8006f46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d828      	bhi.n	8006ee2 <UART_SetConfig+0x56a>
 8006e90:	a201      	add	r2, pc, #4	@ (adr r2, 8006e98 <UART_SetConfig+0x520>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ebd 	.word	0x08006ebd
 8006e9c:	08006ec5 	.word	0x08006ec5
 8006ea0:	08006ecd 	.word	0x08006ecd
 8006ea4:	08006ee3 	.word	0x08006ee3
 8006ea8:	08006ed3 	.word	0x08006ed3
 8006eac:	08006ee3 	.word	0x08006ee3
 8006eb0:	08006ee3 	.word	0x08006ee3
 8006eb4:	08006ee3 	.word	0x08006ee3
 8006eb8:	08006edb 	.word	0x08006edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ebc:	f7fc ffcc 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8006ec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ec2:	e014      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec4:	f7fc ffde 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 8006ec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eca:	e010      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8006f38 <UART_SetConfig+0x5c0>)
 8006ece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ed0:	e00d      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ed2:	f7fc ff53 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8006ed6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ed8:	e009      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ee0:	e005      	b.n	8006eee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006eec:	bf00      	nop
    }

    if (pclk != 0U)
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d028      	beq.n	8006f46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef8:	4a10      	ldr	r2, [pc, #64]	@ (8006f3c <UART_SetConfig+0x5c4>)
 8006efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	085b      	lsrs	r3, r3, #1
 8006f0c:	441a      	add	r2, r3
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	2b0f      	cmp	r3, #15
 8006f1c:	d910      	bls.n	8006f40 <UART_SetConfig+0x5c8>
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f24:	d20c      	bcs.n	8006f40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60da      	str	r2, [r3, #12]
 8006f30:	e009      	b.n	8006f46 <UART_SetConfig+0x5ce>
 8006f32:	bf00      	nop
 8006f34:	40008000 	.word	0x40008000
 8006f38:	00f42400 	.word	0x00f42400
 8006f3c:	0800984c 	.word	0x0800984c
      }
      else
      {
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f62:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3730      	adds	r7, #48	@ 0x30
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe2:	f003 0304 	and.w	r3, r3, #4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	f003 0310 	and.w	r3, r3, #16
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01a      	beq.n	8007086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800706e:	d10a      	bne.n	8007086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]
  }
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b098      	sub	sp, #96	@ 0x60
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070c4:	f7fa fccc 	bl	8001a60 <HAL_GetTick>
 80070c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d12f      	bne.n	8007138 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e0:	2200      	movs	r2, #0
 80070e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f88e 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d022      	beq.n	8007138 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007106:	653b      	str	r3, [r7, #80]	@ 0x50
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007110:	647b      	str	r3, [r7, #68]	@ 0x44
 8007112:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800711e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e6      	bne.n	80070f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e063      	b.n	8007200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b04      	cmp	r3, #4
 8007144:	d149      	bne.n	80071da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007146:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800714e:	2200      	movs	r2, #0
 8007150:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f857 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d03c      	beq.n	80071da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	623b      	str	r3, [r7, #32]
   return(result);
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800717e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007180:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e6      	bne.n	8007160 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3308      	adds	r3, #8
 8007198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3308      	adds	r3, #8
 80071b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071b2:	61fa      	str	r2, [r7, #28]
 80071b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	69b9      	ldr	r1, [r7, #24]
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	617b      	str	r3, [r7, #20]
   return(result);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e5      	bne.n	8007192 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e012      	b.n	8007200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3758      	adds	r7, #88	@ 0x58
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007218:	e04f      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007220:	d04b      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007222:	f7fa fc1d 	bl	8001a60 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	429a      	cmp	r2, r3
 8007230:	d302      	bcc.n	8007238 <UART_WaitOnFlagUntilTimeout+0x30>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e04e      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d037      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b80      	cmp	r3, #128	@ 0x80
 800724e:	d034      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b40      	cmp	r3, #64	@ 0x40
 8007254:	d031      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b08      	cmp	r3, #8
 8007262:	d110      	bne.n	8007286 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2208      	movs	r2, #8
 800726a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 f95b 	bl	8007528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2208      	movs	r2, #8
 8007276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e029      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007294:	d111      	bne.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800729e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f941 	bl	8007528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e00f      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4013      	ands	r3, r2
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	bf0c      	ite	eq
 80072ca:	2301      	moveq	r3, #1
 80072cc:	2300      	movne	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d0a0      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b0a3      	sub	sp, #140	@ 0x8c
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007316:	d10e      	bne.n	8007336 <UART_Start_Receive_IT+0x52>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d105      	bne.n	800732c <UART_Start_Receive_IT+0x48>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007326:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800732a:	e02d      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	22ff      	movs	r2, #255	@ 0xff
 8007330:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007334:	e028      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10d      	bne.n	800735a <UART_Start_Receive_IT+0x76>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d104      	bne.n	8007350 <UART_Start_Receive_IT+0x6c>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	22ff      	movs	r2, #255	@ 0xff
 800734a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800734e:	e01b      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	227f      	movs	r2, #127	@ 0x7f
 8007354:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007358:	e016      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007362:	d10d      	bne.n	8007380 <UART_Start_Receive_IT+0x9c>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <UART_Start_Receive_IT+0x92>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	227f      	movs	r2, #127	@ 0x7f
 8007370:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007374:	e008      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	223f      	movs	r2, #63	@ 0x3f
 800737a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800737e:	e003      	b.n	8007388 <UART_Start_Receive_IT+0xa4>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2222      	movs	r2, #34	@ 0x22
 8007394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80073a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80073bc:	673a      	str	r2, [r7, #112]	@ 0x70
 80073be:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80073c2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80073ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e3      	bne.n	8007398 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d8:	d14f      	bne.n	800747a <UART_Start_Receive_IT+0x196>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80073e0:	88fa      	ldrh	r2, [r7, #6]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d349      	bcc.n	800747a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ee:	d107      	bne.n	8007400 <UART_Start_Receive_IT+0x11c>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4a47      	ldr	r2, [pc, #284]	@ (8007518 <UART_Start_Receive_IT+0x234>)
 80073fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80073fe:	e002      	b.n	8007406 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4a46      	ldr	r2, [pc, #280]	@ (800751c <UART_Start_Receive_IT+0x238>)
 8007404:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01a      	beq.n	8007444 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800741c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800741e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007422:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007432:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007436:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800743e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e4      	bne.n	800740e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800745a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3308      	adds	r3, #8
 8007462:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007464:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007466:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800746a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e5      	bne.n	8007444 <UART_Start_Receive_IT+0x160>
 8007478:	e046      	b.n	8007508 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007482:	d107      	bne.n	8007494 <UART_Start_Receive_IT+0x1b0>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4a24      	ldr	r2, [pc, #144]	@ (8007520 <UART_Start_Receive_IT+0x23c>)
 8007490:	675a      	str	r2, [r3, #116]	@ 0x74
 8007492:	e002      	b.n	800749a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4a23      	ldr	r2, [pc, #140]	@ (8007524 <UART_Start_Receive_IT+0x240>)
 8007498:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d019      	beq.n	80074d6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80074b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80074ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e6      	bne.n	80074a2 <UART_Start_Receive_IT+0x1be>
 80074d4:	e018      	b.n	8007508 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	e853 3f00 	ldrex	r3, [r3]
 80074e2:	613b      	str	r3, [r7, #16]
   return(result);
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f043 0320 	orr.w	r3, r3, #32
 80074ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074f4:	623b      	str	r3, [r7, #32]
 80074f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	69f9      	ldr	r1, [r7, #28]
 80074fa:	6a3a      	ldr	r2, [r7, #32]
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	61bb      	str	r3, [r7, #24]
   return(result);
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e6      	bne.n	80074d6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	378c      	adds	r7, #140	@ 0x8c
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	08007d4d 	.word	0x08007d4d
 800751c:	080079e9 	.word	0x080079e9
 8007520:	08007831 	.word	0x08007831
 8007524:	08007679 	.word	0x08007679

08007528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007528:	b480      	push	{r7}
 800752a:	b095      	sub	sp, #84	@ 0x54
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800754e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007550:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007554:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800755c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e6      	bne.n	8007530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3308      	adds	r3, #8
 8007568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	61fb      	str	r3, [r7, #28]
   return(result);
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007578:	f023 0301 	bic.w	r3, r3, #1
 800757c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007588:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800758c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e3      	bne.n	8007562 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d118      	bne.n	80075d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f023 0310 	bic.w	r3, r3, #16
 80075b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6979      	ldr	r1, [r7, #20]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	613b      	str	r3, [r7, #16]
   return(result);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e6      	bne.n	80075a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80075e8:	bf00      	nop
 80075ea:	3754      	adds	r7, #84	@ 0x54
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007600:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7ff f99a 	bl	800694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007618:	bf00      	nop
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	e853 3f00 	ldrex	r3, [r3]
 8007634:	60bb      	str	r3, [r7, #8]
   return(result);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800763c:	61fb      	str	r3, [r7, #28]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	6979      	ldr	r1, [r7, #20]
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	613b      	str	r3, [r7, #16]
   return(result);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e6      	bne.n	8007628 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff f965 	bl	8006938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800766e:	bf00      	nop
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b09c      	sub	sp, #112	@ 0x70
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007686:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007690:	2b22      	cmp	r3, #34	@ 0x22
 8007692:	f040 80be 	bne.w	8007812 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80076a4:	b2d9      	uxtb	r1, r3
 80076a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b0:	400a      	ands	r2, r1
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f040 80a1 	bne.w	8007822 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007700:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007704:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800770c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e6      	bne.n	80076e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007724:	f023 0301 	bic.w	r3, r3, #1
 8007728:	667b      	str	r3, [r7, #100]	@ 0x64
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007732:	647a      	str	r2, [r7, #68]	@ 0x44
 8007734:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e5      	bne.n	8007712 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a33      	ldr	r2, [pc, #204]	@ (800782c <UART_RxISR_8BIT+0x1b4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d01f      	beq.n	80077a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d018      	beq.n	80077a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	623b      	str	r3, [r7, #32]
   return(result);
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007786:	663b      	str	r3, [r7, #96]	@ 0x60
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007790:	633b      	str	r3, [r7, #48]	@ 0x30
 8007792:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e6      	bne.n	8007772 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d12e      	bne.n	800780a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0310 	bic.w	r3, r3, #16
 80077c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	69b9      	ldr	r1, [r7, #24]
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	617b      	str	r3, [r7, #20]
   return(result);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e6      	bne.n	80077b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f003 0310 	and.w	r3, r3, #16
 80077ee:	2b10      	cmp	r3, #16
 80077f0:	d103      	bne.n	80077fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2210      	movs	r2, #16
 80077f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff f8ac 	bl	8006960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007808:	e00b      	b.n	8007822 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7f9 fc02 	bl	8001014 <HAL_UART_RxCpltCallback>
}
 8007810:	e007      	b.n	8007822 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f042 0208 	orr.w	r2, r2, #8
 8007820:	619a      	str	r2, [r3, #24]
}
 8007822:	bf00      	nop
 8007824:	3770      	adds	r7, #112	@ 0x70
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	40008000 	.word	0x40008000

08007830 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b09c      	sub	sp, #112	@ 0x70
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800783e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007848:	2b22      	cmp	r3, #34	@ 0x22
 800784a:	f040 80be 	bne.w	80079ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800785c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800785e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007862:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007866:	4013      	ands	r3, r2
 8007868:	b29a      	uxth	r2, r3
 800786a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800786c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007872:	1c9a      	adds	r2, r3, #2
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	f040 80a1 	bne.w	80079da <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80078a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80078b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80078c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e6      	bne.n	8007898 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	f023 0301 	bic.w	r3, r3, #1
 80078e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80078ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80078ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e5      	bne.n	80078ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2220      	movs	r2, #32
 8007902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a33      	ldr	r2, [pc, #204]	@ (80079e4 <UART_RxISR_16BIT+0x1b4>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d01f      	beq.n	800795c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d018      	beq.n	800795c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	e853 3f00 	ldrex	r3, [r3]
 8007936:	61fb      	str	r3, [r7, #28]
   return(result);
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800793e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	461a      	mov	r2, r3
 8007946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800794a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800794e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e6      	bne.n	800792a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007960:	2b01      	cmp	r3, #1
 8007962:	d12e      	bne.n	80079c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	60bb      	str	r3, [r7, #8]
   return(result);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f023 0310 	bic.w	r3, r3, #16
 800797e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6979      	ldr	r1, [r7, #20]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	613b      	str	r3, [r7, #16]
   return(result);
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e6      	bne.n	800796a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f003 0310 	and.w	r3, r3, #16
 80079a6:	2b10      	cmp	r3, #16
 80079a8:	d103      	bne.n	80079b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2210      	movs	r2, #16
 80079b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fe ffd0 	bl	8006960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079c0:	e00b      	b.n	80079da <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7f9 fb26 	bl	8001014 <HAL_UART_RxCpltCallback>
}
 80079c8:	e007      	b.n	80079da <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699a      	ldr	r2, [r3, #24]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0208 	orr.w	r2, r2, #8
 80079d8:	619a      	str	r2, [r3, #24]
}
 80079da:	bf00      	nop
 80079dc:	3770      	adds	r7, #112	@ 0x70
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	40008000 	.word	0x40008000

080079e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b0ac      	sub	sp, #176	@ 0xb0
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80079f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a1e:	2b22      	cmp	r3, #34	@ 0x22
 8007a20:	f040 8183 	bne.w	8007d2a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a2a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a2e:	e126      	b.n	8007c7e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a36:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a3a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007a3e:	b2d9      	uxtb	r1, r3
 8007a40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a4a:	400a      	ands	r2, r1
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d053      	beq.n	8007b2a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d011      	beq.n	8007ab2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa8:	f043 0201 	orr.w	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d011      	beq.n	8007ae2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad8:	f043 0204 	orr.w	r2, r3, #4
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d011      	beq.n	8007b12 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2204      	movs	r2, #4
 8007b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b08:	f043 0202 	orr.w	r2, r3, #2
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d006      	beq.n	8007b2a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7fe ff15 	bl	800694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f040 80a3 	bne.w	8007c7e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b5c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007b60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e4      	bne.n	8007b38 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3308      	adds	r3, #8
 8007b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b84:	f023 0301 	bic.w	r3, r3, #1
 8007b88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3308      	adds	r3, #8
 8007b92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b96:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007b98:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007b9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007ba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e1      	bne.n	8007b6e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a60      	ldr	r2, [pc, #384]	@ (8007d44 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d021      	beq.n	8007c0c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d01a      	beq.n	8007c0c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007bf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bfa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007bfe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e4      	bne.n	8007bd6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d130      	bne.n	8007c76 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2a:	f023 0310 	bic.w	r3, r3, #16
 8007c2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e4      	bne.n	8007c1a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	f003 0310 	and.w	r3, r3, #16
 8007c5a:	2b10      	cmp	r3, #16
 8007c5c:	d103      	bne.n	8007c66 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2210      	movs	r2, #16
 8007c64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7fe fe76 	bl	8006960 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007c74:	e00e      	b.n	8007c94 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7f9 f9cc 	bl	8001014 <HAL_UART_RxCpltCallback>
        break;
 8007c7c:	e00a      	b.n	8007c94 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c7e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d006      	beq.n	8007c94 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c8a:	f003 0320 	and.w	r3, r3, #32
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f47f aece 	bne.w	8007a30 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c9a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c9e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d049      	beq.n	8007d3a <UART_RxISR_8BIT_FIFOEN+0x352>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007cac:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d242      	bcs.n	8007d3a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3308      	adds	r3, #8
 8007cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007cd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e3      	bne.n	8007cb4 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a16      	ldr	r2, [pc, #88]	@ (8007d48 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007cf0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f043 0320 	orr.w	r3, r3, #32
 8007d06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6979      	ldr	r1, [r7, #20]
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	613b      	str	r3, [r7, #16]
   return(result);
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e4      	bne.n	8007cf2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d28:	e007      	b.n	8007d3a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699a      	ldr	r2, [r3, #24]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f042 0208 	orr.w	r2, r2, #8
 8007d38:	619a      	str	r2, [r3, #24]
}
 8007d3a:	bf00      	nop
 8007d3c:	37b0      	adds	r7, #176	@ 0xb0
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40008000 	.word	0x40008000
 8007d48:	08007679 	.word	0x08007679

08007d4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b0ae      	sub	sp, #184	@ 0xb8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d5a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d82:	2b22      	cmp	r3, #34	@ 0x22
 8007d84:	f040 8187 	bne.w	8008096 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d8e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d92:	e12a      	b.n	8007fea <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007da6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007daa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007dae:	4013      	ands	r3, r2
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007db6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dbc:	1c9a      	adds	r2, r3, #2
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007dde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d053      	beq.n	8007e92 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d011      	beq.n	8007e1a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00b      	beq.n	8007e1a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2201      	movs	r2, #1
 8007e08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e10:	f043 0201 	orr.w	r2, r3, #1
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d011      	beq.n	8007e4a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00b      	beq.n	8007e4a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2202      	movs	r2, #2
 8007e38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e40:	f043 0204 	orr.w	r2, r3, #4
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d011      	beq.n	8007e7a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00b      	beq.n	8007e7a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2204      	movs	r2, #4
 8007e68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e70:	f043 0202 	orr.w	r2, r3, #2
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d006      	beq.n	8007e92 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7fe fd61 	bl	800694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f040 80a5 	bne.w	8007fea <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ec2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ec6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007eca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ed4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e2      	bne.n	8007ea0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3308      	adds	r3, #8
 8007ee0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007eea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ef0:	f023 0301 	bic.w	r3, r3, #1
 8007ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3308      	adds	r3, #8
 8007efe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007f02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e1      	bne.n	8007eda <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a60      	ldr	r2, [pc, #384]	@ (80080b0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d021      	beq.n	8007f78 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d01a      	beq.n	8007f78 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e4      	bne.n	8007f42 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d130      	bne.n	8007fe2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f96:	f023 0310 	bic.w	r3, r3, #16
 8007f9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007faa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e4      	bne.n	8007f86 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	f003 0310 	and.w	r3, r3, #16
 8007fc6:	2b10      	cmp	r3, #16
 8007fc8:	d103      	bne.n	8007fd2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2210      	movs	r2, #16
 8007fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7fe fcc0 	bl	8006960 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007fe0:	e00e      	b.n	8008000 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7f9 f816 	bl	8001014 <HAL_UART_RxCpltCallback>
        break;
 8007fe8:	e00a      	b.n	8008000 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fea:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d006      	beq.n	8008000 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f47f aeca 	bne.w	8007d94 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008006:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800800a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800800e:	2b00      	cmp	r3, #0
 8008010:	d049      	beq.n	80080a6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008018:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800801c:	429a      	cmp	r2, r3
 800801e:	d242      	bcs.n	80080a6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3308      	adds	r3, #8
 8008026:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	623b      	str	r3, [r7, #32]
   return(result);
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008036:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3308      	adds	r3, #8
 8008040:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008044:	633a      	str	r2, [r7, #48]	@ 0x30
 8008046:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800804a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800804c:	e841 2300 	strex	r3, r2, [r1]
 8008050:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e3      	bne.n	8008020 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a16      	ldr	r2, [pc, #88]	@ (80080b4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800805c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	60fb      	str	r3, [r7, #12]
   return(result);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f043 0320 	orr.w	r3, r3, #32
 8008072:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008084:	69b9      	ldr	r1, [r7, #24]
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	e841 2300 	strex	r3, r2, [r1]
 800808c:	617b      	str	r3, [r7, #20]
   return(result);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e4      	bne.n	800805e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008094:	e007      	b.n	80080a6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	699a      	ldr	r2, [r3, #24]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f042 0208 	orr.w	r2, r2, #8
 80080a4:	619a      	str	r2, [r3, #24]
}
 80080a6:	bf00      	nop
 80080a8:	37b8      	adds	r7, #184	@ 0xb8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	40008000 	.word	0x40008000
 80080b4:	08007831 	.word	0x08007831

080080b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_UARTEx_DisableFifoMode+0x16>
 8008106:	2302      	movs	r3, #2
 8008108:	e027      	b.n	800815a <HAL_UARTEx_DisableFifoMode+0x66>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2224      	movs	r2, #36	@ 0x24
 8008116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0201 	bic.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008138:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2220      	movs	r2, #32
 800814c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008176:	2b01      	cmp	r3, #1
 8008178:	d101      	bne.n	800817e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800817a:	2302      	movs	r3, #2
 800817c:	e02d      	b.n	80081da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2224      	movs	r2, #36	@ 0x24
 800818a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0201 	bic.w	r2, r2, #1
 80081a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f850 	bl	8008260 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d101      	bne.n	80081fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081f6:	2302      	movs	r3, #2
 80081f8:	e02d      	b.n	8008256 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2224      	movs	r2, #36	@ 0x24
 8008206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0201 	bic.w	r2, r2, #1
 8008220:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f812 	bl	8008260 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2220      	movs	r2, #32
 8008248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800826c:	2b00      	cmp	r3, #0
 800826e:	d108      	bne.n	8008282 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008280:	e031      	b.n	80082e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008282:	2308      	movs	r3, #8
 8008284:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008286:	2308      	movs	r3, #8
 8008288:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	0e5b      	lsrs	r3, r3, #25
 8008292:	b2db      	uxtb	r3, r3
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	0f5b      	lsrs	r3, r3, #29
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	7b3a      	ldrb	r2, [r7, #12]
 80082ae:	4911      	ldr	r1, [pc, #68]	@ (80082f4 <UARTEx_SetNbDataToProcess+0x94>)
 80082b0:	5c8a      	ldrb	r2, [r1, r2]
 80082b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082b6:	7b3a      	ldrb	r2, [r7, #12]
 80082b8:	490f      	ldr	r1, [pc, #60]	@ (80082f8 <UARTEx_SetNbDataToProcess+0x98>)
 80082ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	7b7a      	ldrb	r2, [r7, #13]
 80082cc:	4909      	ldr	r1, [pc, #36]	@ (80082f4 <UARTEx_SetNbDataToProcess+0x94>)
 80082ce:	5c8a      	ldrb	r2, [r1, r2]
 80082d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082d4:	7b7a      	ldrb	r2, [r7, #13]
 80082d6:	4908      	ldr	r1, [pc, #32]	@ (80082f8 <UARTEx_SetNbDataToProcess+0x98>)
 80082d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082da:	fb93 f3f2 	sdiv	r3, r3, r2
 80082de:	b29a      	uxth	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	08009864 	.word	0x08009864
 80082f8:	0800986c 	.word	0x0800986c

080082fc <atoi>:
 80082fc:	220a      	movs	r2, #10
 80082fe:	2100      	movs	r1, #0
 8008300:	f000 b87a 	b.w	80083f8 <strtol>

08008304 <_strtol_l.constprop.0>:
 8008304:	2b24      	cmp	r3, #36	@ 0x24
 8008306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830a:	4686      	mov	lr, r0
 800830c:	4690      	mov	r8, r2
 800830e:	d801      	bhi.n	8008314 <_strtol_l.constprop.0+0x10>
 8008310:	2b01      	cmp	r3, #1
 8008312:	d106      	bne.n	8008322 <_strtol_l.constprop.0+0x1e>
 8008314:	f000 fa4a 	bl	80087ac <__errno>
 8008318:	2316      	movs	r3, #22
 800831a:	6003      	str	r3, [r0, #0]
 800831c:	2000      	movs	r0, #0
 800831e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008322:	4834      	ldr	r0, [pc, #208]	@ (80083f4 <_strtol_l.constprop.0+0xf0>)
 8008324:	460d      	mov	r5, r1
 8008326:	462a      	mov	r2, r5
 8008328:	f815 4b01 	ldrb.w	r4, [r5], #1
 800832c:	5d06      	ldrb	r6, [r0, r4]
 800832e:	f016 0608 	ands.w	r6, r6, #8
 8008332:	d1f8      	bne.n	8008326 <_strtol_l.constprop.0+0x22>
 8008334:	2c2d      	cmp	r4, #45	@ 0x2d
 8008336:	d12d      	bne.n	8008394 <_strtol_l.constprop.0+0x90>
 8008338:	782c      	ldrb	r4, [r5, #0]
 800833a:	2601      	movs	r6, #1
 800833c:	1c95      	adds	r5, r2, #2
 800833e:	f033 0210 	bics.w	r2, r3, #16
 8008342:	d109      	bne.n	8008358 <_strtol_l.constprop.0+0x54>
 8008344:	2c30      	cmp	r4, #48	@ 0x30
 8008346:	d12a      	bne.n	800839e <_strtol_l.constprop.0+0x9a>
 8008348:	782a      	ldrb	r2, [r5, #0]
 800834a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800834e:	2a58      	cmp	r2, #88	@ 0x58
 8008350:	d125      	bne.n	800839e <_strtol_l.constprop.0+0x9a>
 8008352:	786c      	ldrb	r4, [r5, #1]
 8008354:	2310      	movs	r3, #16
 8008356:	3502      	adds	r5, #2
 8008358:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800835c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008360:	2200      	movs	r2, #0
 8008362:	fbbc f9f3 	udiv	r9, ip, r3
 8008366:	4610      	mov	r0, r2
 8008368:	fb03 ca19 	mls	sl, r3, r9, ip
 800836c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008370:	2f09      	cmp	r7, #9
 8008372:	d81b      	bhi.n	80083ac <_strtol_l.constprop.0+0xa8>
 8008374:	463c      	mov	r4, r7
 8008376:	42a3      	cmp	r3, r4
 8008378:	dd27      	ble.n	80083ca <_strtol_l.constprop.0+0xc6>
 800837a:	1c57      	adds	r7, r2, #1
 800837c:	d007      	beq.n	800838e <_strtol_l.constprop.0+0x8a>
 800837e:	4581      	cmp	r9, r0
 8008380:	d320      	bcc.n	80083c4 <_strtol_l.constprop.0+0xc0>
 8008382:	d101      	bne.n	8008388 <_strtol_l.constprop.0+0x84>
 8008384:	45a2      	cmp	sl, r4
 8008386:	db1d      	blt.n	80083c4 <_strtol_l.constprop.0+0xc0>
 8008388:	fb00 4003 	mla	r0, r0, r3, r4
 800838c:	2201      	movs	r2, #1
 800838e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008392:	e7eb      	b.n	800836c <_strtol_l.constprop.0+0x68>
 8008394:	2c2b      	cmp	r4, #43	@ 0x2b
 8008396:	bf04      	itt	eq
 8008398:	782c      	ldrbeq	r4, [r5, #0]
 800839a:	1c95      	addeq	r5, r2, #2
 800839c:	e7cf      	b.n	800833e <_strtol_l.constprop.0+0x3a>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1da      	bne.n	8008358 <_strtol_l.constprop.0+0x54>
 80083a2:	2c30      	cmp	r4, #48	@ 0x30
 80083a4:	bf0c      	ite	eq
 80083a6:	2308      	moveq	r3, #8
 80083a8:	230a      	movne	r3, #10
 80083aa:	e7d5      	b.n	8008358 <_strtol_l.constprop.0+0x54>
 80083ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80083b0:	2f19      	cmp	r7, #25
 80083b2:	d801      	bhi.n	80083b8 <_strtol_l.constprop.0+0xb4>
 80083b4:	3c37      	subs	r4, #55	@ 0x37
 80083b6:	e7de      	b.n	8008376 <_strtol_l.constprop.0+0x72>
 80083b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80083bc:	2f19      	cmp	r7, #25
 80083be:	d804      	bhi.n	80083ca <_strtol_l.constprop.0+0xc6>
 80083c0:	3c57      	subs	r4, #87	@ 0x57
 80083c2:	e7d8      	b.n	8008376 <_strtol_l.constprop.0+0x72>
 80083c4:	f04f 32ff 	mov.w	r2, #4294967295
 80083c8:	e7e1      	b.n	800838e <_strtol_l.constprop.0+0x8a>
 80083ca:	1c53      	adds	r3, r2, #1
 80083cc:	d108      	bne.n	80083e0 <_strtol_l.constprop.0+0xdc>
 80083ce:	2322      	movs	r3, #34	@ 0x22
 80083d0:	f8ce 3000 	str.w	r3, [lr]
 80083d4:	4660      	mov	r0, ip
 80083d6:	f1b8 0f00 	cmp.w	r8, #0
 80083da:	d0a0      	beq.n	800831e <_strtol_l.constprop.0+0x1a>
 80083dc:	1e69      	subs	r1, r5, #1
 80083de:	e006      	b.n	80083ee <_strtol_l.constprop.0+0xea>
 80083e0:	b106      	cbz	r6, 80083e4 <_strtol_l.constprop.0+0xe0>
 80083e2:	4240      	negs	r0, r0
 80083e4:	f1b8 0f00 	cmp.w	r8, #0
 80083e8:	d099      	beq.n	800831e <_strtol_l.constprop.0+0x1a>
 80083ea:	2a00      	cmp	r2, #0
 80083ec:	d1f6      	bne.n	80083dc <_strtol_l.constprop.0+0xd8>
 80083ee:	f8c8 1000 	str.w	r1, [r8]
 80083f2:	e794      	b.n	800831e <_strtol_l.constprop.0+0x1a>
 80083f4:	08009875 	.word	0x08009875

080083f8 <strtol>:
 80083f8:	4613      	mov	r3, r2
 80083fa:	460a      	mov	r2, r1
 80083fc:	4601      	mov	r1, r0
 80083fe:	4802      	ldr	r0, [pc, #8]	@ (8008408 <strtol+0x10>)
 8008400:	6800      	ldr	r0, [r0, #0]
 8008402:	f7ff bf7f 	b.w	8008304 <_strtol_l.constprop.0>
 8008406:	bf00      	nop
 8008408:	200001fc 	.word	0x200001fc

0800840c <std>:
 800840c:	2300      	movs	r3, #0
 800840e:	b510      	push	{r4, lr}
 8008410:	4604      	mov	r4, r0
 8008412:	e9c0 3300 	strd	r3, r3, [r0]
 8008416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800841a:	6083      	str	r3, [r0, #8]
 800841c:	8181      	strh	r1, [r0, #12]
 800841e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008420:	81c2      	strh	r2, [r0, #14]
 8008422:	6183      	str	r3, [r0, #24]
 8008424:	4619      	mov	r1, r3
 8008426:	2208      	movs	r2, #8
 8008428:	305c      	adds	r0, #92	@ 0x5c
 800842a:	f000 f914 	bl	8008656 <memset>
 800842e:	4b0d      	ldr	r3, [pc, #52]	@ (8008464 <std+0x58>)
 8008430:	6263      	str	r3, [r4, #36]	@ 0x24
 8008432:	4b0d      	ldr	r3, [pc, #52]	@ (8008468 <std+0x5c>)
 8008434:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008436:	4b0d      	ldr	r3, [pc, #52]	@ (800846c <std+0x60>)
 8008438:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800843a:	4b0d      	ldr	r3, [pc, #52]	@ (8008470 <std+0x64>)
 800843c:	6323      	str	r3, [r4, #48]	@ 0x30
 800843e:	4b0d      	ldr	r3, [pc, #52]	@ (8008474 <std+0x68>)
 8008440:	6224      	str	r4, [r4, #32]
 8008442:	429c      	cmp	r4, r3
 8008444:	d006      	beq.n	8008454 <std+0x48>
 8008446:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800844a:	4294      	cmp	r4, r2
 800844c:	d002      	beq.n	8008454 <std+0x48>
 800844e:	33d0      	adds	r3, #208	@ 0xd0
 8008450:	429c      	cmp	r4, r3
 8008452:	d105      	bne.n	8008460 <std+0x54>
 8008454:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800845c:	f000 b9d0 	b.w	8008800 <__retarget_lock_init_recursive>
 8008460:	bd10      	pop	{r4, pc}
 8008462:	bf00      	nop
 8008464:	080085d1 	.word	0x080085d1
 8008468:	080085f3 	.word	0x080085f3
 800846c:	0800862b 	.word	0x0800862b
 8008470:	0800864f 	.word	0x0800864f
 8008474:	200005a0 	.word	0x200005a0

08008478 <stdio_exit_handler>:
 8008478:	4a02      	ldr	r2, [pc, #8]	@ (8008484 <stdio_exit_handler+0xc>)
 800847a:	4903      	ldr	r1, [pc, #12]	@ (8008488 <stdio_exit_handler+0x10>)
 800847c:	4803      	ldr	r0, [pc, #12]	@ (800848c <stdio_exit_handler+0x14>)
 800847e:	f000 b869 	b.w	8008554 <_fwalk_sglue>
 8008482:	bf00      	nop
 8008484:	200001f0 	.word	0x200001f0
 8008488:	08009119 	.word	0x08009119
 800848c:	20000200 	.word	0x20000200

08008490 <cleanup_stdio>:
 8008490:	6841      	ldr	r1, [r0, #4]
 8008492:	4b0c      	ldr	r3, [pc, #48]	@ (80084c4 <cleanup_stdio+0x34>)
 8008494:	4299      	cmp	r1, r3
 8008496:	b510      	push	{r4, lr}
 8008498:	4604      	mov	r4, r0
 800849a:	d001      	beq.n	80084a0 <cleanup_stdio+0x10>
 800849c:	f000 fe3c 	bl	8009118 <_fflush_r>
 80084a0:	68a1      	ldr	r1, [r4, #8]
 80084a2:	4b09      	ldr	r3, [pc, #36]	@ (80084c8 <cleanup_stdio+0x38>)
 80084a4:	4299      	cmp	r1, r3
 80084a6:	d002      	beq.n	80084ae <cleanup_stdio+0x1e>
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 fe35 	bl	8009118 <_fflush_r>
 80084ae:	68e1      	ldr	r1, [r4, #12]
 80084b0:	4b06      	ldr	r3, [pc, #24]	@ (80084cc <cleanup_stdio+0x3c>)
 80084b2:	4299      	cmp	r1, r3
 80084b4:	d004      	beq.n	80084c0 <cleanup_stdio+0x30>
 80084b6:	4620      	mov	r0, r4
 80084b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084bc:	f000 be2c 	b.w	8009118 <_fflush_r>
 80084c0:	bd10      	pop	{r4, pc}
 80084c2:	bf00      	nop
 80084c4:	200005a0 	.word	0x200005a0
 80084c8:	20000608 	.word	0x20000608
 80084cc:	20000670 	.word	0x20000670

080084d0 <global_stdio_init.part.0>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008500 <global_stdio_init.part.0+0x30>)
 80084d4:	4c0b      	ldr	r4, [pc, #44]	@ (8008504 <global_stdio_init.part.0+0x34>)
 80084d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008508 <global_stdio_init.part.0+0x38>)
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	4620      	mov	r0, r4
 80084dc:	2200      	movs	r2, #0
 80084de:	2104      	movs	r1, #4
 80084e0:	f7ff ff94 	bl	800840c <std>
 80084e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084e8:	2201      	movs	r2, #1
 80084ea:	2109      	movs	r1, #9
 80084ec:	f7ff ff8e 	bl	800840c <std>
 80084f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084f4:	2202      	movs	r2, #2
 80084f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084fa:	2112      	movs	r1, #18
 80084fc:	f7ff bf86 	b.w	800840c <std>
 8008500:	200006d8 	.word	0x200006d8
 8008504:	200005a0 	.word	0x200005a0
 8008508:	08008479 	.word	0x08008479

0800850c <__sfp_lock_acquire>:
 800850c:	4801      	ldr	r0, [pc, #4]	@ (8008514 <__sfp_lock_acquire+0x8>)
 800850e:	f000 b978 	b.w	8008802 <__retarget_lock_acquire_recursive>
 8008512:	bf00      	nop
 8008514:	200006e1 	.word	0x200006e1

08008518 <__sfp_lock_release>:
 8008518:	4801      	ldr	r0, [pc, #4]	@ (8008520 <__sfp_lock_release+0x8>)
 800851a:	f000 b973 	b.w	8008804 <__retarget_lock_release_recursive>
 800851e:	bf00      	nop
 8008520:	200006e1 	.word	0x200006e1

08008524 <__sinit>:
 8008524:	b510      	push	{r4, lr}
 8008526:	4604      	mov	r4, r0
 8008528:	f7ff fff0 	bl	800850c <__sfp_lock_acquire>
 800852c:	6a23      	ldr	r3, [r4, #32]
 800852e:	b11b      	cbz	r3, 8008538 <__sinit+0x14>
 8008530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008534:	f7ff bff0 	b.w	8008518 <__sfp_lock_release>
 8008538:	4b04      	ldr	r3, [pc, #16]	@ (800854c <__sinit+0x28>)
 800853a:	6223      	str	r3, [r4, #32]
 800853c:	4b04      	ldr	r3, [pc, #16]	@ (8008550 <__sinit+0x2c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1f5      	bne.n	8008530 <__sinit+0xc>
 8008544:	f7ff ffc4 	bl	80084d0 <global_stdio_init.part.0>
 8008548:	e7f2      	b.n	8008530 <__sinit+0xc>
 800854a:	bf00      	nop
 800854c:	08008491 	.word	0x08008491
 8008550:	200006d8 	.word	0x200006d8

08008554 <_fwalk_sglue>:
 8008554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008558:	4607      	mov	r7, r0
 800855a:	4688      	mov	r8, r1
 800855c:	4614      	mov	r4, r2
 800855e:	2600      	movs	r6, #0
 8008560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008564:	f1b9 0901 	subs.w	r9, r9, #1
 8008568:	d505      	bpl.n	8008576 <_fwalk_sglue+0x22>
 800856a:	6824      	ldr	r4, [r4, #0]
 800856c:	2c00      	cmp	r4, #0
 800856e:	d1f7      	bne.n	8008560 <_fwalk_sglue+0xc>
 8008570:	4630      	mov	r0, r6
 8008572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d907      	bls.n	800858c <_fwalk_sglue+0x38>
 800857c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008580:	3301      	adds	r3, #1
 8008582:	d003      	beq.n	800858c <_fwalk_sglue+0x38>
 8008584:	4629      	mov	r1, r5
 8008586:	4638      	mov	r0, r7
 8008588:	47c0      	blx	r8
 800858a:	4306      	orrs	r6, r0
 800858c:	3568      	adds	r5, #104	@ 0x68
 800858e:	e7e9      	b.n	8008564 <_fwalk_sglue+0x10>

08008590 <siprintf>:
 8008590:	b40e      	push	{r1, r2, r3}
 8008592:	b500      	push	{lr}
 8008594:	b09c      	sub	sp, #112	@ 0x70
 8008596:	ab1d      	add	r3, sp, #116	@ 0x74
 8008598:	9002      	str	r0, [sp, #8]
 800859a:	9006      	str	r0, [sp, #24]
 800859c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80085a0:	4809      	ldr	r0, [pc, #36]	@ (80085c8 <siprintf+0x38>)
 80085a2:	9107      	str	r1, [sp, #28]
 80085a4:	9104      	str	r1, [sp, #16]
 80085a6:	4909      	ldr	r1, [pc, #36]	@ (80085cc <siprintf+0x3c>)
 80085a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ac:	9105      	str	r1, [sp, #20]
 80085ae:	6800      	ldr	r0, [r0, #0]
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	a902      	add	r1, sp, #8
 80085b4:	f000 faa2 	bl	8008afc <_svfiprintf_r>
 80085b8:	9b02      	ldr	r3, [sp, #8]
 80085ba:	2200      	movs	r2, #0
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	b01c      	add	sp, #112	@ 0x70
 80085c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c4:	b003      	add	sp, #12
 80085c6:	4770      	bx	lr
 80085c8:	200001fc 	.word	0x200001fc
 80085cc:	ffff0208 	.word	0xffff0208

080085d0 <__sread>:
 80085d0:	b510      	push	{r4, lr}
 80085d2:	460c      	mov	r4, r1
 80085d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d8:	f000 f8c4 	bl	8008764 <_read_r>
 80085dc:	2800      	cmp	r0, #0
 80085de:	bfab      	itete	ge
 80085e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085e2:	89a3      	ldrhlt	r3, [r4, #12]
 80085e4:	181b      	addge	r3, r3, r0
 80085e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085ea:	bfac      	ite	ge
 80085ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085ee:	81a3      	strhlt	r3, [r4, #12]
 80085f0:	bd10      	pop	{r4, pc}

080085f2 <__swrite>:
 80085f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f6:	461f      	mov	r7, r3
 80085f8:	898b      	ldrh	r3, [r1, #12]
 80085fa:	05db      	lsls	r3, r3, #23
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	4616      	mov	r6, r2
 8008602:	d505      	bpl.n	8008610 <__swrite+0x1e>
 8008604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008608:	2302      	movs	r3, #2
 800860a:	2200      	movs	r2, #0
 800860c:	f000 f898 	bl	8008740 <_lseek_r>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	4632      	mov	r2, r6
 800861e:	463b      	mov	r3, r7
 8008620:	4628      	mov	r0, r5
 8008622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008626:	f000 b8af 	b.w	8008788 <_write_r>

0800862a <__sseek>:
 800862a:	b510      	push	{r4, lr}
 800862c:	460c      	mov	r4, r1
 800862e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008632:	f000 f885 	bl	8008740 <_lseek_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	bf15      	itete	ne
 800863c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800863e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008642:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008646:	81a3      	strheq	r3, [r4, #12]
 8008648:	bf18      	it	ne
 800864a:	81a3      	strhne	r3, [r4, #12]
 800864c:	bd10      	pop	{r4, pc}

0800864e <__sclose>:
 800864e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008652:	f000 b865 	b.w	8008720 <_close_r>

08008656 <memset>:
 8008656:	4402      	add	r2, r0
 8008658:	4603      	mov	r3, r0
 800865a:	4293      	cmp	r3, r2
 800865c:	d100      	bne.n	8008660 <memset+0xa>
 800865e:	4770      	bx	lr
 8008660:	f803 1b01 	strb.w	r1, [r3], #1
 8008664:	e7f9      	b.n	800865a <memset+0x4>
	...

08008668 <strtok>:
 8008668:	4b16      	ldr	r3, [pc, #88]	@ (80086c4 <strtok+0x5c>)
 800866a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800866e:	681f      	ldr	r7, [r3, #0]
 8008670:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008672:	4605      	mov	r5, r0
 8008674:	460e      	mov	r6, r1
 8008676:	b9ec      	cbnz	r4, 80086b4 <strtok+0x4c>
 8008678:	2050      	movs	r0, #80	@ 0x50
 800867a:	f000 f92d 	bl	80088d8 <malloc>
 800867e:	4602      	mov	r2, r0
 8008680:	6478      	str	r0, [r7, #68]	@ 0x44
 8008682:	b920      	cbnz	r0, 800868e <strtok+0x26>
 8008684:	4b10      	ldr	r3, [pc, #64]	@ (80086c8 <strtok+0x60>)
 8008686:	4811      	ldr	r0, [pc, #68]	@ (80086cc <strtok+0x64>)
 8008688:	215b      	movs	r1, #91	@ 0x5b
 800868a:	f000 f8bd 	bl	8008808 <__assert_func>
 800868e:	e9c0 4400 	strd	r4, r4, [r0]
 8008692:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008696:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800869a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800869e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80086a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80086a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80086aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80086ae:	6184      	str	r4, [r0, #24]
 80086b0:	7704      	strb	r4, [r0, #28]
 80086b2:	6244      	str	r4, [r0, #36]	@ 0x24
 80086b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086b6:	4631      	mov	r1, r6
 80086b8:	4628      	mov	r0, r5
 80086ba:	2301      	movs	r3, #1
 80086bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086c0:	f000 b806 	b.w	80086d0 <__strtok_r>
 80086c4:	200001fc 	.word	0x200001fc
 80086c8:	08009975 	.word	0x08009975
 80086cc:	0800998c 	.word	0x0800998c

080086d0 <__strtok_r>:
 80086d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086d2:	4604      	mov	r4, r0
 80086d4:	b908      	cbnz	r0, 80086da <__strtok_r+0xa>
 80086d6:	6814      	ldr	r4, [r2, #0]
 80086d8:	b144      	cbz	r4, 80086ec <__strtok_r+0x1c>
 80086da:	4620      	mov	r0, r4
 80086dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80086e0:	460f      	mov	r7, r1
 80086e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80086e6:	b91e      	cbnz	r6, 80086f0 <__strtok_r+0x20>
 80086e8:	b965      	cbnz	r5, 8008704 <__strtok_r+0x34>
 80086ea:	6015      	str	r5, [r2, #0]
 80086ec:	2000      	movs	r0, #0
 80086ee:	e005      	b.n	80086fc <__strtok_r+0x2c>
 80086f0:	42b5      	cmp	r5, r6
 80086f2:	d1f6      	bne.n	80086e2 <__strtok_r+0x12>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1f0      	bne.n	80086da <__strtok_r+0xa>
 80086f8:	6014      	str	r4, [r2, #0]
 80086fa:	7003      	strb	r3, [r0, #0]
 80086fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086fe:	461c      	mov	r4, r3
 8008700:	e00c      	b.n	800871c <__strtok_r+0x4c>
 8008702:	b915      	cbnz	r5, 800870a <__strtok_r+0x3a>
 8008704:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008708:	460e      	mov	r6, r1
 800870a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800870e:	42ab      	cmp	r3, r5
 8008710:	d1f7      	bne.n	8008702 <__strtok_r+0x32>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0f3      	beq.n	80086fe <__strtok_r+0x2e>
 8008716:	2300      	movs	r3, #0
 8008718:	f804 3c01 	strb.w	r3, [r4, #-1]
 800871c:	6014      	str	r4, [r2, #0]
 800871e:	e7ed      	b.n	80086fc <__strtok_r+0x2c>

08008720 <_close_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d06      	ldr	r5, [pc, #24]	@ (800873c <_close_r+0x1c>)
 8008724:	2300      	movs	r3, #0
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	f7f9 f8c8 	bl	80018c0 <_close>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_close_r+0x1a>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_close_r+0x1a>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	200006dc 	.word	0x200006dc

08008740 <_lseek_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d07      	ldr	r5, [pc, #28]	@ (8008760 <_lseek_r+0x20>)
 8008744:	4604      	mov	r4, r0
 8008746:	4608      	mov	r0, r1
 8008748:	4611      	mov	r1, r2
 800874a:	2200      	movs	r2, #0
 800874c:	602a      	str	r2, [r5, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	f7f9 f8dd 	bl	800190e <_lseek>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_lseek_r+0x1e>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_lseek_r+0x1e>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	200006dc 	.word	0x200006dc

08008764 <_read_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4d07      	ldr	r5, [pc, #28]	@ (8008784 <_read_r+0x20>)
 8008768:	4604      	mov	r4, r0
 800876a:	4608      	mov	r0, r1
 800876c:	4611      	mov	r1, r2
 800876e:	2200      	movs	r2, #0
 8008770:	602a      	str	r2, [r5, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	f7f9 f86b 	bl	800184e <_read>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_read_r+0x1e>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_read_r+0x1e>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	200006dc 	.word	0x200006dc

08008788 <_write_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d07      	ldr	r5, [pc, #28]	@ (80087a8 <_write_r+0x20>)
 800878c:	4604      	mov	r4, r0
 800878e:	4608      	mov	r0, r1
 8008790:	4611      	mov	r1, r2
 8008792:	2200      	movs	r2, #0
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	f7f9 f876 	bl	8001888 <_write>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_write_r+0x1e>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_write_r+0x1e>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	200006dc 	.word	0x200006dc

080087ac <__errno>:
 80087ac:	4b01      	ldr	r3, [pc, #4]	@ (80087b4 <__errno+0x8>)
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	200001fc 	.word	0x200001fc

080087b8 <__libc_init_array>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	4d0d      	ldr	r5, [pc, #52]	@ (80087f0 <__libc_init_array+0x38>)
 80087bc:	4c0d      	ldr	r4, [pc, #52]	@ (80087f4 <__libc_init_array+0x3c>)
 80087be:	1b64      	subs	r4, r4, r5
 80087c0:	10a4      	asrs	r4, r4, #2
 80087c2:	2600      	movs	r6, #0
 80087c4:	42a6      	cmp	r6, r4
 80087c6:	d109      	bne.n	80087dc <__libc_init_array+0x24>
 80087c8:	4d0b      	ldr	r5, [pc, #44]	@ (80087f8 <__libc_init_array+0x40>)
 80087ca:	4c0c      	ldr	r4, [pc, #48]	@ (80087fc <__libc_init_array+0x44>)
 80087cc:	f000 fff0 	bl	80097b0 <_init>
 80087d0:	1b64      	subs	r4, r4, r5
 80087d2:	10a4      	asrs	r4, r4, #2
 80087d4:	2600      	movs	r6, #0
 80087d6:	42a6      	cmp	r6, r4
 80087d8:	d105      	bne.n	80087e6 <__libc_init_array+0x2e>
 80087da:	bd70      	pop	{r4, r5, r6, pc}
 80087dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e0:	4798      	blx	r3
 80087e2:	3601      	adds	r6, #1
 80087e4:	e7ee      	b.n	80087c4 <__libc_init_array+0xc>
 80087e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ea:	4798      	blx	r3
 80087ec:	3601      	adds	r6, #1
 80087ee:	e7f2      	b.n	80087d6 <__libc_init_array+0x1e>
 80087f0:	08009a60 	.word	0x08009a60
 80087f4:	08009a60 	.word	0x08009a60
 80087f8:	08009a60 	.word	0x08009a60
 80087fc:	08009a64 	.word	0x08009a64

08008800 <__retarget_lock_init_recursive>:
 8008800:	4770      	bx	lr

08008802 <__retarget_lock_acquire_recursive>:
 8008802:	4770      	bx	lr

08008804 <__retarget_lock_release_recursive>:
 8008804:	4770      	bx	lr
	...

08008808 <__assert_func>:
 8008808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800880a:	4614      	mov	r4, r2
 800880c:	461a      	mov	r2, r3
 800880e:	4b09      	ldr	r3, [pc, #36]	@ (8008834 <__assert_func+0x2c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4605      	mov	r5, r0
 8008814:	68d8      	ldr	r0, [r3, #12]
 8008816:	b954      	cbnz	r4, 800882e <__assert_func+0x26>
 8008818:	4b07      	ldr	r3, [pc, #28]	@ (8008838 <__assert_func+0x30>)
 800881a:	461c      	mov	r4, r3
 800881c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008820:	9100      	str	r1, [sp, #0]
 8008822:	462b      	mov	r3, r5
 8008824:	4905      	ldr	r1, [pc, #20]	@ (800883c <__assert_func+0x34>)
 8008826:	f000 fc9f 	bl	8009168 <fiprintf>
 800882a:	f000 fce7 	bl	80091fc <abort>
 800882e:	4b04      	ldr	r3, [pc, #16]	@ (8008840 <__assert_func+0x38>)
 8008830:	e7f4      	b.n	800881c <__assert_func+0x14>
 8008832:	bf00      	nop
 8008834:	200001fc 	.word	0x200001fc
 8008838:	08009a21 	.word	0x08009a21
 800883c:	080099f3 	.word	0x080099f3
 8008840:	080099e6 	.word	0x080099e6

08008844 <_free_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4605      	mov	r5, r0
 8008848:	2900      	cmp	r1, #0
 800884a:	d041      	beq.n	80088d0 <_free_r+0x8c>
 800884c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008850:	1f0c      	subs	r4, r1, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	bfb8      	it	lt
 8008856:	18e4      	addlt	r4, r4, r3
 8008858:	f000 f8e8 	bl	8008a2c <__malloc_lock>
 800885c:	4a1d      	ldr	r2, [pc, #116]	@ (80088d4 <_free_r+0x90>)
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	b933      	cbnz	r3, 8008870 <_free_r+0x2c>
 8008862:	6063      	str	r3, [r4, #4]
 8008864:	6014      	str	r4, [r2, #0]
 8008866:	4628      	mov	r0, r5
 8008868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886c:	f000 b8e4 	b.w	8008a38 <__malloc_unlock>
 8008870:	42a3      	cmp	r3, r4
 8008872:	d908      	bls.n	8008886 <_free_r+0x42>
 8008874:	6820      	ldr	r0, [r4, #0]
 8008876:	1821      	adds	r1, r4, r0
 8008878:	428b      	cmp	r3, r1
 800887a:	bf01      	itttt	eq
 800887c:	6819      	ldreq	r1, [r3, #0]
 800887e:	685b      	ldreq	r3, [r3, #4]
 8008880:	1809      	addeq	r1, r1, r0
 8008882:	6021      	streq	r1, [r4, #0]
 8008884:	e7ed      	b.n	8008862 <_free_r+0x1e>
 8008886:	461a      	mov	r2, r3
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	b10b      	cbz	r3, 8008890 <_free_r+0x4c>
 800888c:	42a3      	cmp	r3, r4
 800888e:	d9fa      	bls.n	8008886 <_free_r+0x42>
 8008890:	6811      	ldr	r1, [r2, #0]
 8008892:	1850      	adds	r0, r2, r1
 8008894:	42a0      	cmp	r0, r4
 8008896:	d10b      	bne.n	80088b0 <_free_r+0x6c>
 8008898:	6820      	ldr	r0, [r4, #0]
 800889a:	4401      	add	r1, r0
 800889c:	1850      	adds	r0, r2, r1
 800889e:	4283      	cmp	r3, r0
 80088a0:	6011      	str	r1, [r2, #0]
 80088a2:	d1e0      	bne.n	8008866 <_free_r+0x22>
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	6053      	str	r3, [r2, #4]
 80088aa:	4408      	add	r0, r1
 80088ac:	6010      	str	r0, [r2, #0]
 80088ae:	e7da      	b.n	8008866 <_free_r+0x22>
 80088b0:	d902      	bls.n	80088b8 <_free_r+0x74>
 80088b2:	230c      	movs	r3, #12
 80088b4:	602b      	str	r3, [r5, #0]
 80088b6:	e7d6      	b.n	8008866 <_free_r+0x22>
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	1821      	adds	r1, r4, r0
 80088bc:	428b      	cmp	r3, r1
 80088be:	bf04      	itt	eq
 80088c0:	6819      	ldreq	r1, [r3, #0]
 80088c2:	685b      	ldreq	r3, [r3, #4]
 80088c4:	6063      	str	r3, [r4, #4]
 80088c6:	bf04      	itt	eq
 80088c8:	1809      	addeq	r1, r1, r0
 80088ca:	6021      	streq	r1, [r4, #0]
 80088cc:	6054      	str	r4, [r2, #4]
 80088ce:	e7ca      	b.n	8008866 <_free_r+0x22>
 80088d0:	bd38      	pop	{r3, r4, r5, pc}
 80088d2:	bf00      	nop
 80088d4:	200006e8 	.word	0x200006e8

080088d8 <malloc>:
 80088d8:	4b02      	ldr	r3, [pc, #8]	@ (80088e4 <malloc+0xc>)
 80088da:	4601      	mov	r1, r0
 80088dc:	6818      	ldr	r0, [r3, #0]
 80088de:	f000 b825 	b.w	800892c <_malloc_r>
 80088e2:	bf00      	nop
 80088e4:	200001fc 	.word	0x200001fc

080088e8 <sbrk_aligned>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008928 <sbrk_aligned+0x40>)
 80088ec:	460c      	mov	r4, r1
 80088ee:	6831      	ldr	r1, [r6, #0]
 80088f0:	4605      	mov	r5, r0
 80088f2:	b911      	cbnz	r1, 80088fa <sbrk_aligned+0x12>
 80088f4:	f000 fc64 	bl	80091c0 <_sbrk_r>
 80088f8:	6030      	str	r0, [r6, #0]
 80088fa:	4621      	mov	r1, r4
 80088fc:	4628      	mov	r0, r5
 80088fe:	f000 fc5f 	bl	80091c0 <_sbrk_r>
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	d103      	bne.n	800890e <sbrk_aligned+0x26>
 8008906:	f04f 34ff 	mov.w	r4, #4294967295
 800890a:	4620      	mov	r0, r4
 800890c:	bd70      	pop	{r4, r5, r6, pc}
 800890e:	1cc4      	adds	r4, r0, #3
 8008910:	f024 0403 	bic.w	r4, r4, #3
 8008914:	42a0      	cmp	r0, r4
 8008916:	d0f8      	beq.n	800890a <sbrk_aligned+0x22>
 8008918:	1a21      	subs	r1, r4, r0
 800891a:	4628      	mov	r0, r5
 800891c:	f000 fc50 	bl	80091c0 <_sbrk_r>
 8008920:	3001      	adds	r0, #1
 8008922:	d1f2      	bne.n	800890a <sbrk_aligned+0x22>
 8008924:	e7ef      	b.n	8008906 <sbrk_aligned+0x1e>
 8008926:	bf00      	nop
 8008928:	200006e4 	.word	0x200006e4

0800892c <_malloc_r>:
 800892c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008930:	1ccd      	adds	r5, r1, #3
 8008932:	f025 0503 	bic.w	r5, r5, #3
 8008936:	3508      	adds	r5, #8
 8008938:	2d0c      	cmp	r5, #12
 800893a:	bf38      	it	cc
 800893c:	250c      	movcc	r5, #12
 800893e:	2d00      	cmp	r5, #0
 8008940:	4606      	mov	r6, r0
 8008942:	db01      	blt.n	8008948 <_malloc_r+0x1c>
 8008944:	42a9      	cmp	r1, r5
 8008946:	d904      	bls.n	8008952 <_malloc_r+0x26>
 8008948:	230c      	movs	r3, #12
 800894a:	6033      	str	r3, [r6, #0]
 800894c:	2000      	movs	r0, #0
 800894e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a28 <_malloc_r+0xfc>
 8008956:	f000 f869 	bl	8008a2c <__malloc_lock>
 800895a:	f8d8 3000 	ldr.w	r3, [r8]
 800895e:	461c      	mov	r4, r3
 8008960:	bb44      	cbnz	r4, 80089b4 <_malloc_r+0x88>
 8008962:	4629      	mov	r1, r5
 8008964:	4630      	mov	r0, r6
 8008966:	f7ff ffbf 	bl	80088e8 <sbrk_aligned>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	4604      	mov	r4, r0
 800896e:	d158      	bne.n	8008a22 <_malloc_r+0xf6>
 8008970:	f8d8 4000 	ldr.w	r4, [r8]
 8008974:	4627      	mov	r7, r4
 8008976:	2f00      	cmp	r7, #0
 8008978:	d143      	bne.n	8008a02 <_malloc_r+0xd6>
 800897a:	2c00      	cmp	r4, #0
 800897c:	d04b      	beq.n	8008a16 <_malloc_r+0xea>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	4639      	mov	r1, r7
 8008982:	4630      	mov	r0, r6
 8008984:	eb04 0903 	add.w	r9, r4, r3
 8008988:	f000 fc1a 	bl	80091c0 <_sbrk_r>
 800898c:	4581      	cmp	r9, r0
 800898e:	d142      	bne.n	8008a16 <_malloc_r+0xea>
 8008990:	6821      	ldr	r1, [r4, #0]
 8008992:	1a6d      	subs	r5, r5, r1
 8008994:	4629      	mov	r1, r5
 8008996:	4630      	mov	r0, r6
 8008998:	f7ff ffa6 	bl	80088e8 <sbrk_aligned>
 800899c:	3001      	adds	r0, #1
 800899e:	d03a      	beq.n	8008a16 <_malloc_r+0xea>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	442b      	add	r3, r5
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	f8d8 3000 	ldr.w	r3, [r8]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	bb62      	cbnz	r2, 8008a08 <_malloc_r+0xdc>
 80089ae:	f8c8 7000 	str.w	r7, [r8]
 80089b2:	e00f      	b.n	80089d4 <_malloc_r+0xa8>
 80089b4:	6822      	ldr	r2, [r4, #0]
 80089b6:	1b52      	subs	r2, r2, r5
 80089b8:	d420      	bmi.n	80089fc <_malloc_r+0xd0>
 80089ba:	2a0b      	cmp	r2, #11
 80089bc:	d917      	bls.n	80089ee <_malloc_r+0xc2>
 80089be:	1961      	adds	r1, r4, r5
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	6025      	str	r5, [r4, #0]
 80089c4:	bf18      	it	ne
 80089c6:	6059      	strne	r1, [r3, #4]
 80089c8:	6863      	ldr	r3, [r4, #4]
 80089ca:	bf08      	it	eq
 80089cc:	f8c8 1000 	streq.w	r1, [r8]
 80089d0:	5162      	str	r2, [r4, r5]
 80089d2:	604b      	str	r3, [r1, #4]
 80089d4:	4630      	mov	r0, r6
 80089d6:	f000 f82f 	bl	8008a38 <__malloc_unlock>
 80089da:	f104 000b 	add.w	r0, r4, #11
 80089de:	1d23      	adds	r3, r4, #4
 80089e0:	f020 0007 	bic.w	r0, r0, #7
 80089e4:	1ac2      	subs	r2, r0, r3
 80089e6:	bf1c      	itt	ne
 80089e8:	1a1b      	subne	r3, r3, r0
 80089ea:	50a3      	strne	r3, [r4, r2]
 80089ec:	e7af      	b.n	800894e <_malloc_r+0x22>
 80089ee:	6862      	ldr	r2, [r4, #4]
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	bf0c      	ite	eq
 80089f4:	f8c8 2000 	streq.w	r2, [r8]
 80089f8:	605a      	strne	r2, [r3, #4]
 80089fa:	e7eb      	b.n	80089d4 <_malloc_r+0xa8>
 80089fc:	4623      	mov	r3, r4
 80089fe:	6864      	ldr	r4, [r4, #4]
 8008a00:	e7ae      	b.n	8008960 <_malloc_r+0x34>
 8008a02:	463c      	mov	r4, r7
 8008a04:	687f      	ldr	r7, [r7, #4]
 8008a06:	e7b6      	b.n	8008976 <_malloc_r+0x4a>
 8008a08:	461a      	mov	r2, r3
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	d1fb      	bne.n	8008a08 <_malloc_r+0xdc>
 8008a10:	2300      	movs	r3, #0
 8008a12:	6053      	str	r3, [r2, #4]
 8008a14:	e7de      	b.n	80089d4 <_malloc_r+0xa8>
 8008a16:	230c      	movs	r3, #12
 8008a18:	6033      	str	r3, [r6, #0]
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f000 f80c 	bl	8008a38 <__malloc_unlock>
 8008a20:	e794      	b.n	800894c <_malloc_r+0x20>
 8008a22:	6005      	str	r5, [r0, #0]
 8008a24:	e7d6      	b.n	80089d4 <_malloc_r+0xa8>
 8008a26:	bf00      	nop
 8008a28:	200006e8 	.word	0x200006e8

08008a2c <__malloc_lock>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	@ (8008a34 <__malloc_lock+0x8>)
 8008a2e:	f7ff bee8 	b.w	8008802 <__retarget_lock_acquire_recursive>
 8008a32:	bf00      	nop
 8008a34:	200006e0 	.word	0x200006e0

08008a38 <__malloc_unlock>:
 8008a38:	4801      	ldr	r0, [pc, #4]	@ (8008a40 <__malloc_unlock+0x8>)
 8008a3a:	f7ff bee3 	b.w	8008804 <__retarget_lock_release_recursive>
 8008a3e:	bf00      	nop
 8008a40:	200006e0 	.word	0x200006e0

08008a44 <__ssputs_r>:
 8008a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a48:	688e      	ldr	r6, [r1, #8]
 8008a4a:	461f      	mov	r7, r3
 8008a4c:	42be      	cmp	r6, r7
 8008a4e:	680b      	ldr	r3, [r1, #0]
 8008a50:	4682      	mov	sl, r0
 8008a52:	460c      	mov	r4, r1
 8008a54:	4690      	mov	r8, r2
 8008a56:	d82d      	bhi.n	8008ab4 <__ssputs_r+0x70>
 8008a58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a60:	d026      	beq.n	8008ab0 <__ssputs_r+0x6c>
 8008a62:	6965      	ldr	r5, [r4, #20]
 8008a64:	6909      	ldr	r1, [r1, #16]
 8008a66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a6a:	eba3 0901 	sub.w	r9, r3, r1
 8008a6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a72:	1c7b      	adds	r3, r7, #1
 8008a74:	444b      	add	r3, r9
 8008a76:	106d      	asrs	r5, r5, #1
 8008a78:	429d      	cmp	r5, r3
 8008a7a:	bf38      	it	cc
 8008a7c:	461d      	movcc	r5, r3
 8008a7e:	0553      	lsls	r3, r2, #21
 8008a80:	d527      	bpl.n	8008ad2 <__ssputs_r+0x8e>
 8008a82:	4629      	mov	r1, r5
 8008a84:	f7ff ff52 	bl	800892c <_malloc_r>
 8008a88:	4606      	mov	r6, r0
 8008a8a:	b360      	cbz	r0, 8008ae6 <__ssputs_r+0xa2>
 8008a8c:	6921      	ldr	r1, [r4, #16]
 8008a8e:	464a      	mov	r2, r9
 8008a90:	f000 fba6 	bl	80091e0 <memcpy>
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a9e:	81a3      	strh	r3, [r4, #12]
 8008aa0:	6126      	str	r6, [r4, #16]
 8008aa2:	6165      	str	r5, [r4, #20]
 8008aa4:	444e      	add	r6, r9
 8008aa6:	eba5 0509 	sub.w	r5, r5, r9
 8008aaa:	6026      	str	r6, [r4, #0]
 8008aac:	60a5      	str	r5, [r4, #8]
 8008aae:	463e      	mov	r6, r7
 8008ab0:	42be      	cmp	r6, r7
 8008ab2:	d900      	bls.n	8008ab6 <__ssputs_r+0x72>
 8008ab4:	463e      	mov	r6, r7
 8008ab6:	6820      	ldr	r0, [r4, #0]
 8008ab8:	4632      	mov	r2, r6
 8008aba:	4641      	mov	r1, r8
 8008abc:	f000 fb66 	bl	800918c <memmove>
 8008ac0:	68a3      	ldr	r3, [r4, #8]
 8008ac2:	1b9b      	subs	r3, r3, r6
 8008ac4:	60a3      	str	r3, [r4, #8]
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	4433      	add	r3, r6
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	2000      	movs	r0, #0
 8008ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	f000 fb99 	bl	800920a <_realloc_r>
 8008ad8:	4606      	mov	r6, r0
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d1e0      	bne.n	8008aa0 <__ssputs_r+0x5c>
 8008ade:	6921      	ldr	r1, [r4, #16]
 8008ae0:	4650      	mov	r0, sl
 8008ae2:	f7ff feaf 	bl	8008844 <_free_r>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	f8ca 3000 	str.w	r3, [sl]
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008af2:	81a3      	strh	r3, [r4, #12]
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295
 8008af8:	e7e9      	b.n	8008ace <__ssputs_r+0x8a>
	...

08008afc <_svfiprintf_r>:
 8008afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b00:	4698      	mov	r8, r3
 8008b02:	898b      	ldrh	r3, [r1, #12]
 8008b04:	061b      	lsls	r3, r3, #24
 8008b06:	b09d      	sub	sp, #116	@ 0x74
 8008b08:	4607      	mov	r7, r0
 8008b0a:	460d      	mov	r5, r1
 8008b0c:	4614      	mov	r4, r2
 8008b0e:	d510      	bpl.n	8008b32 <_svfiprintf_r+0x36>
 8008b10:	690b      	ldr	r3, [r1, #16]
 8008b12:	b973      	cbnz	r3, 8008b32 <_svfiprintf_r+0x36>
 8008b14:	2140      	movs	r1, #64	@ 0x40
 8008b16:	f7ff ff09 	bl	800892c <_malloc_r>
 8008b1a:	6028      	str	r0, [r5, #0]
 8008b1c:	6128      	str	r0, [r5, #16]
 8008b1e:	b930      	cbnz	r0, 8008b2e <_svfiprintf_r+0x32>
 8008b20:	230c      	movs	r3, #12
 8008b22:	603b      	str	r3, [r7, #0]
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	b01d      	add	sp, #116	@ 0x74
 8008b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2e:	2340      	movs	r3, #64	@ 0x40
 8008b30:	616b      	str	r3, [r5, #20]
 8008b32:	2300      	movs	r3, #0
 8008b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b36:	2320      	movs	r3, #32
 8008b38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b40:	2330      	movs	r3, #48	@ 0x30
 8008b42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ce0 <_svfiprintf_r+0x1e4>
 8008b46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b4a:	f04f 0901 	mov.w	r9, #1
 8008b4e:	4623      	mov	r3, r4
 8008b50:	469a      	mov	sl, r3
 8008b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b56:	b10a      	cbz	r2, 8008b5c <_svfiprintf_r+0x60>
 8008b58:	2a25      	cmp	r2, #37	@ 0x25
 8008b5a:	d1f9      	bne.n	8008b50 <_svfiprintf_r+0x54>
 8008b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b60:	d00b      	beq.n	8008b7a <_svfiprintf_r+0x7e>
 8008b62:	465b      	mov	r3, fp
 8008b64:	4622      	mov	r2, r4
 8008b66:	4629      	mov	r1, r5
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7ff ff6b 	bl	8008a44 <__ssputs_r>
 8008b6e:	3001      	adds	r0, #1
 8008b70:	f000 80a7 	beq.w	8008cc2 <_svfiprintf_r+0x1c6>
 8008b74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b76:	445a      	add	r2, fp
 8008b78:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 809f 	beq.w	8008cc2 <_svfiprintf_r+0x1c6>
 8008b84:	2300      	movs	r3, #0
 8008b86:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b8e:	f10a 0a01 	add.w	sl, sl, #1
 8008b92:	9304      	str	r3, [sp, #16]
 8008b94:	9307      	str	r3, [sp, #28]
 8008b96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b9c:	4654      	mov	r4, sl
 8008b9e:	2205      	movs	r2, #5
 8008ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba4:	484e      	ldr	r0, [pc, #312]	@ (8008ce0 <_svfiprintf_r+0x1e4>)
 8008ba6:	f7f7 fb4b 	bl	8000240 <memchr>
 8008baa:	9a04      	ldr	r2, [sp, #16]
 8008bac:	b9d8      	cbnz	r0, 8008be6 <_svfiprintf_r+0xea>
 8008bae:	06d0      	lsls	r0, r2, #27
 8008bb0:	bf44      	itt	mi
 8008bb2:	2320      	movmi	r3, #32
 8008bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bb8:	0711      	lsls	r1, r2, #28
 8008bba:	bf44      	itt	mi
 8008bbc:	232b      	movmi	r3, #43	@ 0x2b
 8008bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bc8:	d015      	beq.n	8008bf6 <_svfiprintf_r+0xfa>
 8008bca:	9a07      	ldr	r2, [sp, #28]
 8008bcc:	4654      	mov	r4, sl
 8008bce:	2000      	movs	r0, #0
 8008bd0:	f04f 0c0a 	mov.w	ip, #10
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bda:	3b30      	subs	r3, #48	@ 0x30
 8008bdc:	2b09      	cmp	r3, #9
 8008bde:	d94b      	bls.n	8008c78 <_svfiprintf_r+0x17c>
 8008be0:	b1b0      	cbz	r0, 8008c10 <_svfiprintf_r+0x114>
 8008be2:	9207      	str	r2, [sp, #28]
 8008be4:	e014      	b.n	8008c10 <_svfiprintf_r+0x114>
 8008be6:	eba0 0308 	sub.w	r3, r0, r8
 8008bea:	fa09 f303 	lsl.w	r3, r9, r3
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	46a2      	mov	sl, r4
 8008bf4:	e7d2      	b.n	8008b9c <_svfiprintf_r+0xa0>
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	1d19      	adds	r1, r3, #4
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	9103      	str	r1, [sp, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bfbb      	ittet	lt
 8008c02:	425b      	neglt	r3, r3
 8008c04:	f042 0202 	orrlt.w	r2, r2, #2
 8008c08:	9307      	strge	r3, [sp, #28]
 8008c0a:	9307      	strlt	r3, [sp, #28]
 8008c0c:	bfb8      	it	lt
 8008c0e:	9204      	strlt	r2, [sp, #16]
 8008c10:	7823      	ldrb	r3, [r4, #0]
 8008c12:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c14:	d10a      	bne.n	8008c2c <_svfiprintf_r+0x130>
 8008c16:	7863      	ldrb	r3, [r4, #1]
 8008c18:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c1a:	d132      	bne.n	8008c82 <_svfiprintf_r+0x186>
 8008c1c:	9b03      	ldr	r3, [sp, #12]
 8008c1e:	1d1a      	adds	r2, r3, #4
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	9203      	str	r2, [sp, #12]
 8008c24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c28:	3402      	adds	r4, #2
 8008c2a:	9305      	str	r3, [sp, #20]
 8008c2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008cf0 <_svfiprintf_r+0x1f4>
 8008c30:	7821      	ldrb	r1, [r4, #0]
 8008c32:	2203      	movs	r2, #3
 8008c34:	4650      	mov	r0, sl
 8008c36:	f7f7 fb03 	bl	8000240 <memchr>
 8008c3a:	b138      	cbz	r0, 8008c4c <_svfiprintf_r+0x150>
 8008c3c:	9b04      	ldr	r3, [sp, #16]
 8008c3e:	eba0 000a 	sub.w	r0, r0, sl
 8008c42:	2240      	movs	r2, #64	@ 0x40
 8008c44:	4082      	lsls	r2, r0
 8008c46:	4313      	orrs	r3, r2
 8008c48:	3401      	adds	r4, #1
 8008c4a:	9304      	str	r3, [sp, #16]
 8008c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c50:	4824      	ldr	r0, [pc, #144]	@ (8008ce4 <_svfiprintf_r+0x1e8>)
 8008c52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c56:	2206      	movs	r2, #6
 8008c58:	f7f7 faf2 	bl	8000240 <memchr>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d036      	beq.n	8008cce <_svfiprintf_r+0x1d2>
 8008c60:	4b21      	ldr	r3, [pc, #132]	@ (8008ce8 <_svfiprintf_r+0x1ec>)
 8008c62:	bb1b      	cbnz	r3, 8008cac <_svfiprintf_r+0x1b0>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	3307      	adds	r3, #7
 8008c68:	f023 0307 	bic.w	r3, r3, #7
 8008c6c:	3308      	adds	r3, #8
 8008c6e:	9303      	str	r3, [sp, #12]
 8008c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c72:	4433      	add	r3, r6
 8008c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c76:	e76a      	b.n	8008b4e <_svfiprintf_r+0x52>
 8008c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	2001      	movs	r0, #1
 8008c80:	e7a8      	b.n	8008bd4 <_svfiprintf_r+0xd8>
 8008c82:	2300      	movs	r3, #0
 8008c84:	3401      	adds	r4, #1
 8008c86:	9305      	str	r3, [sp, #20]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f04f 0c0a 	mov.w	ip, #10
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c94:	3a30      	subs	r2, #48	@ 0x30
 8008c96:	2a09      	cmp	r2, #9
 8008c98:	d903      	bls.n	8008ca2 <_svfiprintf_r+0x1a6>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0c6      	beq.n	8008c2c <_svfiprintf_r+0x130>
 8008c9e:	9105      	str	r1, [sp, #20]
 8008ca0:	e7c4      	b.n	8008c2c <_svfiprintf_r+0x130>
 8008ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e7f0      	b.n	8008c8e <_svfiprintf_r+0x192>
 8008cac:	ab03      	add	r3, sp, #12
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	462a      	mov	r2, r5
 8008cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8008cec <_svfiprintf_r+0x1f0>)
 8008cb4:	a904      	add	r1, sp, #16
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	f3af 8000 	nop.w
 8008cbc:	1c42      	adds	r2, r0, #1
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	d1d6      	bne.n	8008c70 <_svfiprintf_r+0x174>
 8008cc2:	89ab      	ldrh	r3, [r5, #12]
 8008cc4:	065b      	lsls	r3, r3, #25
 8008cc6:	f53f af2d 	bmi.w	8008b24 <_svfiprintf_r+0x28>
 8008cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ccc:	e72c      	b.n	8008b28 <_svfiprintf_r+0x2c>
 8008cce:	ab03      	add	r3, sp, #12
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	462a      	mov	r2, r5
 8008cd4:	4b05      	ldr	r3, [pc, #20]	@ (8008cec <_svfiprintf_r+0x1f0>)
 8008cd6:	a904      	add	r1, sp, #16
 8008cd8:	4638      	mov	r0, r7
 8008cda:	f000 f879 	bl	8008dd0 <_printf_i>
 8008cde:	e7ed      	b.n	8008cbc <_svfiprintf_r+0x1c0>
 8008ce0:	08009a22 	.word	0x08009a22
 8008ce4:	08009a2c 	.word	0x08009a2c
 8008ce8:	00000000 	.word	0x00000000
 8008cec:	08008a45 	.word	0x08008a45
 8008cf0:	08009a28 	.word	0x08009a28

08008cf4 <_printf_common>:
 8008cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	4616      	mov	r6, r2
 8008cfa:	4698      	mov	r8, r3
 8008cfc:	688a      	ldr	r2, [r1, #8]
 8008cfe:	690b      	ldr	r3, [r1, #16]
 8008d00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d04:	4293      	cmp	r3, r2
 8008d06:	bfb8      	it	lt
 8008d08:	4613      	movlt	r3, r2
 8008d0a:	6033      	str	r3, [r6, #0]
 8008d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d10:	4607      	mov	r7, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	b10a      	cbz	r2, 8008d1a <_printf_common+0x26>
 8008d16:	3301      	adds	r3, #1
 8008d18:	6033      	str	r3, [r6, #0]
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	0699      	lsls	r1, r3, #26
 8008d1e:	bf42      	ittt	mi
 8008d20:	6833      	ldrmi	r3, [r6, #0]
 8008d22:	3302      	addmi	r3, #2
 8008d24:	6033      	strmi	r3, [r6, #0]
 8008d26:	6825      	ldr	r5, [r4, #0]
 8008d28:	f015 0506 	ands.w	r5, r5, #6
 8008d2c:	d106      	bne.n	8008d3c <_printf_common+0x48>
 8008d2e:	f104 0a19 	add.w	sl, r4, #25
 8008d32:	68e3      	ldr	r3, [r4, #12]
 8008d34:	6832      	ldr	r2, [r6, #0]
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	42ab      	cmp	r3, r5
 8008d3a:	dc26      	bgt.n	8008d8a <_printf_common+0x96>
 8008d3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d40:	6822      	ldr	r2, [r4, #0]
 8008d42:	3b00      	subs	r3, #0
 8008d44:	bf18      	it	ne
 8008d46:	2301      	movne	r3, #1
 8008d48:	0692      	lsls	r2, r2, #26
 8008d4a:	d42b      	bmi.n	8008da4 <_printf_common+0xb0>
 8008d4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d50:	4641      	mov	r1, r8
 8008d52:	4638      	mov	r0, r7
 8008d54:	47c8      	blx	r9
 8008d56:	3001      	adds	r0, #1
 8008d58:	d01e      	beq.n	8008d98 <_printf_common+0xa4>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	6922      	ldr	r2, [r4, #16]
 8008d5e:	f003 0306 	and.w	r3, r3, #6
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	bf02      	ittt	eq
 8008d66:	68e5      	ldreq	r5, [r4, #12]
 8008d68:	6833      	ldreq	r3, [r6, #0]
 8008d6a:	1aed      	subeq	r5, r5, r3
 8008d6c:	68a3      	ldr	r3, [r4, #8]
 8008d6e:	bf0c      	ite	eq
 8008d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d74:	2500      	movne	r5, #0
 8008d76:	4293      	cmp	r3, r2
 8008d78:	bfc4      	itt	gt
 8008d7a:	1a9b      	subgt	r3, r3, r2
 8008d7c:	18ed      	addgt	r5, r5, r3
 8008d7e:	2600      	movs	r6, #0
 8008d80:	341a      	adds	r4, #26
 8008d82:	42b5      	cmp	r5, r6
 8008d84:	d11a      	bne.n	8008dbc <_printf_common+0xc8>
 8008d86:	2000      	movs	r0, #0
 8008d88:	e008      	b.n	8008d9c <_printf_common+0xa8>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4652      	mov	r2, sl
 8008d8e:	4641      	mov	r1, r8
 8008d90:	4638      	mov	r0, r7
 8008d92:	47c8      	blx	r9
 8008d94:	3001      	adds	r0, #1
 8008d96:	d103      	bne.n	8008da0 <_printf_common+0xac>
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da0:	3501      	adds	r5, #1
 8008da2:	e7c6      	b.n	8008d32 <_printf_common+0x3e>
 8008da4:	18e1      	adds	r1, r4, r3
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	2030      	movs	r0, #48	@ 0x30
 8008daa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dae:	4422      	add	r2, r4
 8008db0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008db4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008db8:	3302      	adds	r3, #2
 8008dba:	e7c7      	b.n	8008d4c <_printf_common+0x58>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	47c8      	blx	r9
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d0e6      	beq.n	8008d98 <_printf_common+0xa4>
 8008dca:	3601      	adds	r6, #1
 8008dcc:	e7d9      	b.n	8008d82 <_printf_common+0x8e>
	...

08008dd0 <_printf_i>:
 8008dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	7e0f      	ldrb	r7, [r1, #24]
 8008dd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008dd8:	2f78      	cmp	r7, #120	@ 0x78
 8008dda:	4691      	mov	r9, r2
 8008ddc:	4680      	mov	r8, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	469a      	mov	sl, r3
 8008de2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008de6:	d807      	bhi.n	8008df8 <_printf_i+0x28>
 8008de8:	2f62      	cmp	r7, #98	@ 0x62
 8008dea:	d80a      	bhi.n	8008e02 <_printf_i+0x32>
 8008dec:	2f00      	cmp	r7, #0
 8008dee:	f000 80d2 	beq.w	8008f96 <_printf_i+0x1c6>
 8008df2:	2f58      	cmp	r7, #88	@ 0x58
 8008df4:	f000 80b9 	beq.w	8008f6a <_printf_i+0x19a>
 8008df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e00:	e03a      	b.n	8008e78 <_printf_i+0xa8>
 8008e02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e06:	2b15      	cmp	r3, #21
 8008e08:	d8f6      	bhi.n	8008df8 <_printf_i+0x28>
 8008e0a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e10 <_printf_i+0x40>)
 8008e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	08008e7d 	.word	0x08008e7d
 8008e18:	08008df9 	.word	0x08008df9
 8008e1c:	08008df9 	.word	0x08008df9
 8008e20:	08008df9 	.word	0x08008df9
 8008e24:	08008df9 	.word	0x08008df9
 8008e28:	08008e7d 	.word	0x08008e7d
 8008e2c:	08008df9 	.word	0x08008df9
 8008e30:	08008df9 	.word	0x08008df9
 8008e34:	08008df9 	.word	0x08008df9
 8008e38:	08008df9 	.word	0x08008df9
 8008e3c:	08008f7d 	.word	0x08008f7d
 8008e40:	08008ea7 	.word	0x08008ea7
 8008e44:	08008f37 	.word	0x08008f37
 8008e48:	08008df9 	.word	0x08008df9
 8008e4c:	08008df9 	.word	0x08008df9
 8008e50:	08008f9f 	.word	0x08008f9f
 8008e54:	08008df9 	.word	0x08008df9
 8008e58:	08008ea7 	.word	0x08008ea7
 8008e5c:	08008df9 	.word	0x08008df9
 8008e60:	08008df9 	.word	0x08008df9
 8008e64:	08008f3f 	.word	0x08008f3f
 8008e68:	6833      	ldr	r3, [r6, #0]
 8008e6a:	1d1a      	adds	r2, r3, #4
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6032      	str	r2, [r6, #0]
 8008e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e09d      	b.n	8008fb8 <_printf_i+0x1e8>
 8008e7c:	6833      	ldr	r3, [r6, #0]
 8008e7e:	6820      	ldr	r0, [r4, #0]
 8008e80:	1d19      	adds	r1, r3, #4
 8008e82:	6031      	str	r1, [r6, #0]
 8008e84:	0606      	lsls	r6, r0, #24
 8008e86:	d501      	bpl.n	8008e8c <_printf_i+0xbc>
 8008e88:	681d      	ldr	r5, [r3, #0]
 8008e8a:	e003      	b.n	8008e94 <_printf_i+0xc4>
 8008e8c:	0645      	lsls	r5, r0, #25
 8008e8e:	d5fb      	bpl.n	8008e88 <_printf_i+0xb8>
 8008e90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e94:	2d00      	cmp	r5, #0
 8008e96:	da03      	bge.n	8008ea0 <_printf_i+0xd0>
 8008e98:	232d      	movs	r3, #45	@ 0x2d
 8008e9a:	426d      	negs	r5, r5
 8008e9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ea0:	4859      	ldr	r0, [pc, #356]	@ (8009008 <_printf_i+0x238>)
 8008ea2:	230a      	movs	r3, #10
 8008ea4:	e011      	b.n	8008eca <_printf_i+0xfa>
 8008ea6:	6821      	ldr	r1, [r4, #0]
 8008ea8:	6833      	ldr	r3, [r6, #0]
 8008eaa:	0608      	lsls	r0, r1, #24
 8008eac:	f853 5b04 	ldr.w	r5, [r3], #4
 8008eb0:	d402      	bmi.n	8008eb8 <_printf_i+0xe8>
 8008eb2:	0649      	lsls	r1, r1, #25
 8008eb4:	bf48      	it	mi
 8008eb6:	b2ad      	uxthmi	r5, r5
 8008eb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008eba:	4853      	ldr	r0, [pc, #332]	@ (8009008 <_printf_i+0x238>)
 8008ebc:	6033      	str	r3, [r6, #0]
 8008ebe:	bf14      	ite	ne
 8008ec0:	230a      	movne	r3, #10
 8008ec2:	2308      	moveq	r3, #8
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008eca:	6866      	ldr	r6, [r4, #4]
 8008ecc:	60a6      	str	r6, [r4, #8]
 8008ece:	2e00      	cmp	r6, #0
 8008ed0:	bfa2      	ittt	ge
 8008ed2:	6821      	ldrge	r1, [r4, #0]
 8008ed4:	f021 0104 	bicge.w	r1, r1, #4
 8008ed8:	6021      	strge	r1, [r4, #0]
 8008eda:	b90d      	cbnz	r5, 8008ee0 <_printf_i+0x110>
 8008edc:	2e00      	cmp	r6, #0
 8008ede:	d04b      	beq.n	8008f78 <_printf_i+0x1a8>
 8008ee0:	4616      	mov	r6, r2
 8008ee2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ee6:	fb03 5711 	mls	r7, r3, r1, r5
 8008eea:	5dc7      	ldrb	r7, [r0, r7]
 8008eec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ef0:	462f      	mov	r7, r5
 8008ef2:	42bb      	cmp	r3, r7
 8008ef4:	460d      	mov	r5, r1
 8008ef6:	d9f4      	bls.n	8008ee2 <_printf_i+0x112>
 8008ef8:	2b08      	cmp	r3, #8
 8008efa:	d10b      	bne.n	8008f14 <_printf_i+0x144>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	07df      	lsls	r7, r3, #31
 8008f00:	d508      	bpl.n	8008f14 <_printf_i+0x144>
 8008f02:	6923      	ldr	r3, [r4, #16]
 8008f04:	6861      	ldr	r1, [r4, #4]
 8008f06:	4299      	cmp	r1, r3
 8008f08:	bfde      	ittt	le
 8008f0a:	2330      	movle	r3, #48	@ 0x30
 8008f0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f14:	1b92      	subs	r2, r2, r6
 8008f16:	6122      	str	r2, [r4, #16]
 8008f18:	f8cd a000 	str.w	sl, [sp]
 8008f1c:	464b      	mov	r3, r9
 8008f1e:	aa03      	add	r2, sp, #12
 8008f20:	4621      	mov	r1, r4
 8008f22:	4640      	mov	r0, r8
 8008f24:	f7ff fee6 	bl	8008cf4 <_printf_common>
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d14a      	bne.n	8008fc2 <_printf_i+0x1f2>
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	b004      	add	sp, #16
 8008f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	f043 0320 	orr.w	r3, r3, #32
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	4833      	ldr	r0, [pc, #204]	@ (800900c <_printf_i+0x23c>)
 8008f40:	2778      	movs	r7, #120	@ 0x78
 8008f42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	6831      	ldr	r1, [r6, #0]
 8008f4a:	061f      	lsls	r7, r3, #24
 8008f4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f50:	d402      	bmi.n	8008f58 <_printf_i+0x188>
 8008f52:	065f      	lsls	r7, r3, #25
 8008f54:	bf48      	it	mi
 8008f56:	b2ad      	uxthmi	r5, r5
 8008f58:	6031      	str	r1, [r6, #0]
 8008f5a:	07d9      	lsls	r1, r3, #31
 8008f5c:	bf44      	itt	mi
 8008f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f62:	6023      	strmi	r3, [r4, #0]
 8008f64:	b11d      	cbz	r5, 8008f6e <_printf_i+0x19e>
 8008f66:	2310      	movs	r3, #16
 8008f68:	e7ac      	b.n	8008ec4 <_printf_i+0xf4>
 8008f6a:	4827      	ldr	r0, [pc, #156]	@ (8009008 <_printf_i+0x238>)
 8008f6c:	e7e9      	b.n	8008f42 <_printf_i+0x172>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	f023 0320 	bic.w	r3, r3, #32
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	e7f6      	b.n	8008f66 <_printf_i+0x196>
 8008f78:	4616      	mov	r6, r2
 8008f7a:	e7bd      	b.n	8008ef8 <_printf_i+0x128>
 8008f7c:	6833      	ldr	r3, [r6, #0]
 8008f7e:	6825      	ldr	r5, [r4, #0]
 8008f80:	6961      	ldr	r1, [r4, #20]
 8008f82:	1d18      	adds	r0, r3, #4
 8008f84:	6030      	str	r0, [r6, #0]
 8008f86:	062e      	lsls	r6, r5, #24
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	d501      	bpl.n	8008f90 <_printf_i+0x1c0>
 8008f8c:	6019      	str	r1, [r3, #0]
 8008f8e:	e002      	b.n	8008f96 <_printf_i+0x1c6>
 8008f90:	0668      	lsls	r0, r5, #25
 8008f92:	d5fb      	bpl.n	8008f8c <_printf_i+0x1bc>
 8008f94:	8019      	strh	r1, [r3, #0]
 8008f96:	2300      	movs	r3, #0
 8008f98:	6123      	str	r3, [r4, #16]
 8008f9a:	4616      	mov	r6, r2
 8008f9c:	e7bc      	b.n	8008f18 <_printf_i+0x148>
 8008f9e:	6833      	ldr	r3, [r6, #0]
 8008fa0:	1d1a      	adds	r2, r3, #4
 8008fa2:	6032      	str	r2, [r6, #0]
 8008fa4:	681e      	ldr	r6, [r3, #0]
 8008fa6:	6862      	ldr	r2, [r4, #4]
 8008fa8:	2100      	movs	r1, #0
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7f7 f948 	bl	8000240 <memchr>
 8008fb0:	b108      	cbz	r0, 8008fb6 <_printf_i+0x1e6>
 8008fb2:	1b80      	subs	r0, r0, r6
 8008fb4:	6060      	str	r0, [r4, #4]
 8008fb6:	6863      	ldr	r3, [r4, #4]
 8008fb8:	6123      	str	r3, [r4, #16]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fc0:	e7aa      	b.n	8008f18 <_printf_i+0x148>
 8008fc2:	6923      	ldr	r3, [r4, #16]
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	4640      	mov	r0, r8
 8008fca:	47d0      	blx	sl
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d0ad      	beq.n	8008f2c <_printf_i+0x15c>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	079b      	lsls	r3, r3, #30
 8008fd4:	d413      	bmi.n	8008ffe <_printf_i+0x22e>
 8008fd6:	68e0      	ldr	r0, [r4, #12]
 8008fd8:	9b03      	ldr	r3, [sp, #12]
 8008fda:	4298      	cmp	r0, r3
 8008fdc:	bfb8      	it	lt
 8008fde:	4618      	movlt	r0, r3
 8008fe0:	e7a6      	b.n	8008f30 <_printf_i+0x160>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	4640      	mov	r0, r8
 8008fea:	47d0      	blx	sl
 8008fec:	3001      	adds	r0, #1
 8008fee:	d09d      	beq.n	8008f2c <_printf_i+0x15c>
 8008ff0:	3501      	adds	r5, #1
 8008ff2:	68e3      	ldr	r3, [r4, #12]
 8008ff4:	9903      	ldr	r1, [sp, #12]
 8008ff6:	1a5b      	subs	r3, r3, r1
 8008ff8:	42ab      	cmp	r3, r5
 8008ffa:	dcf2      	bgt.n	8008fe2 <_printf_i+0x212>
 8008ffc:	e7eb      	b.n	8008fd6 <_printf_i+0x206>
 8008ffe:	2500      	movs	r5, #0
 8009000:	f104 0619 	add.w	r6, r4, #25
 8009004:	e7f5      	b.n	8008ff2 <_printf_i+0x222>
 8009006:	bf00      	nop
 8009008:	08009a33 	.word	0x08009a33
 800900c:	08009a44 	.word	0x08009a44

08009010 <__sflush_r>:
 8009010:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009018:	0716      	lsls	r6, r2, #28
 800901a:	4605      	mov	r5, r0
 800901c:	460c      	mov	r4, r1
 800901e:	d454      	bmi.n	80090ca <__sflush_r+0xba>
 8009020:	684b      	ldr	r3, [r1, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	dc02      	bgt.n	800902c <__sflush_r+0x1c>
 8009026:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	dd48      	ble.n	80090be <__sflush_r+0xae>
 800902c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800902e:	2e00      	cmp	r6, #0
 8009030:	d045      	beq.n	80090be <__sflush_r+0xae>
 8009032:	2300      	movs	r3, #0
 8009034:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009038:	682f      	ldr	r7, [r5, #0]
 800903a:	6a21      	ldr	r1, [r4, #32]
 800903c:	602b      	str	r3, [r5, #0]
 800903e:	d030      	beq.n	80090a2 <__sflush_r+0x92>
 8009040:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	0759      	lsls	r1, r3, #29
 8009046:	d505      	bpl.n	8009054 <__sflush_r+0x44>
 8009048:	6863      	ldr	r3, [r4, #4]
 800904a:	1ad2      	subs	r2, r2, r3
 800904c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800904e:	b10b      	cbz	r3, 8009054 <__sflush_r+0x44>
 8009050:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009052:	1ad2      	subs	r2, r2, r3
 8009054:	2300      	movs	r3, #0
 8009056:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009058:	6a21      	ldr	r1, [r4, #32]
 800905a:	4628      	mov	r0, r5
 800905c:	47b0      	blx	r6
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	d106      	bne.n	8009072 <__sflush_r+0x62>
 8009064:	6829      	ldr	r1, [r5, #0]
 8009066:	291d      	cmp	r1, #29
 8009068:	d82b      	bhi.n	80090c2 <__sflush_r+0xb2>
 800906a:	4a2a      	ldr	r2, [pc, #168]	@ (8009114 <__sflush_r+0x104>)
 800906c:	410a      	asrs	r2, r1
 800906e:	07d6      	lsls	r6, r2, #31
 8009070:	d427      	bmi.n	80090c2 <__sflush_r+0xb2>
 8009072:	2200      	movs	r2, #0
 8009074:	6062      	str	r2, [r4, #4]
 8009076:	04d9      	lsls	r1, r3, #19
 8009078:	6922      	ldr	r2, [r4, #16]
 800907a:	6022      	str	r2, [r4, #0]
 800907c:	d504      	bpl.n	8009088 <__sflush_r+0x78>
 800907e:	1c42      	adds	r2, r0, #1
 8009080:	d101      	bne.n	8009086 <__sflush_r+0x76>
 8009082:	682b      	ldr	r3, [r5, #0]
 8009084:	b903      	cbnz	r3, 8009088 <__sflush_r+0x78>
 8009086:	6560      	str	r0, [r4, #84]	@ 0x54
 8009088:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800908a:	602f      	str	r7, [r5, #0]
 800908c:	b1b9      	cbz	r1, 80090be <__sflush_r+0xae>
 800908e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009092:	4299      	cmp	r1, r3
 8009094:	d002      	beq.n	800909c <__sflush_r+0x8c>
 8009096:	4628      	mov	r0, r5
 8009098:	f7ff fbd4 	bl	8008844 <_free_r>
 800909c:	2300      	movs	r3, #0
 800909e:	6363      	str	r3, [r4, #52]	@ 0x34
 80090a0:	e00d      	b.n	80090be <__sflush_r+0xae>
 80090a2:	2301      	movs	r3, #1
 80090a4:	4628      	mov	r0, r5
 80090a6:	47b0      	blx	r6
 80090a8:	4602      	mov	r2, r0
 80090aa:	1c50      	adds	r0, r2, #1
 80090ac:	d1c9      	bne.n	8009042 <__sflush_r+0x32>
 80090ae:	682b      	ldr	r3, [r5, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0c6      	beq.n	8009042 <__sflush_r+0x32>
 80090b4:	2b1d      	cmp	r3, #29
 80090b6:	d001      	beq.n	80090bc <__sflush_r+0xac>
 80090b8:	2b16      	cmp	r3, #22
 80090ba:	d11e      	bne.n	80090fa <__sflush_r+0xea>
 80090bc:	602f      	str	r7, [r5, #0]
 80090be:	2000      	movs	r0, #0
 80090c0:	e022      	b.n	8009108 <__sflush_r+0xf8>
 80090c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090c6:	b21b      	sxth	r3, r3
 80090c8:	e01b      	b.n	8009102 <__sflush_r+0xf2>
 80090ca:	690f      	ldr	r7, [r1, #16]
 80090cc:	2f00      	cmp	r7, #0
 80090ce:	d0f6      	beq.n	80090be <__sflush_r+0xae>
 80090d0:	0793      	lsls	r3, r2, #30
 80090d2:	680e      	ldr	r6, [r1, #0]
 80090d4:	bf08      	it	eq
 80090d6:	694b      	ldreq	r3, [r1, #20]
 80090d8:	600f      	str	r7, [r1, #0]
 80090da:	bf18      	it	ne
 80090dc:	2300      	movne	r3, #0
 80090de:	eba6 0807 	sub.w	r8, r6, r7
 80090e2:	608b      	str	r3, [r1, #8]
 80090e4:	f1b8 0f00 	cmp.w	r8, #0
 80090e8:	dde9      	ble.n	80090be <__sflush_r+0xae>
 80090ea:	6a21      	ldr	r1, [r4, #32]
 80090ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090ee:	4643      	mov	r3, r8
 80090f0:	463a      	mov	r2, r7
 80090f2:	4628      	mov	r0, r5
 80090f4:	47b0      	blx	r6
 80090f6:	2800      	cmp	r0, #0
 80090f8:	dc08      	bgt.n	800910c <__sflush_r+0xfc>
 80090fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800910c:	4407      	add	r7, r0
 800910e:	eba8 0800 	sub.w	r8, r8, r0
 8009112:	e7e7      	b.n	80090e4 <__sflush_r+0xd4>
 8009114:	dfbffffe 	.word	0xdfbffffe

08009118 <_fflush_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	690b      	ldr	r3, [r1, #16]
 800911c:	4605      	mov	r5, r0
 800911e:	460c      	mov	r4, r1
 8009120:	b913      	cbnz	r3, 8009128 <_fflush_r+0x10>
 8009122:	2500      	movs	r5, #0
 8009124:	4628      	mov	r0, r5
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	b118      	cbz	r0, 8009132 <_fflush_r+0x1a>
 800912a:	6a03      	ldr	r3, [r0, #32]
 800912c:	b90b      	cbnz	r3, 8009132 <_fflush_r+0x1a>
 800912e:	f7ff f9f9 	bl	8008524 <__sinit>
 8009132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0f3      	beq.n	8009122 <_fflush_r+0xa>
 800913a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800913c:	07d0      	lsls	r0, r2, #31
 800913e:	d404      	bmi.n	800914a <_fflush_r+0x32>
 8009140:	0599      	lsls	r1, r3, #22
 8009142:	d402      	bmi.n	800914a <_fflush_r+0x32>
 8009144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009146:	f7ff fb5c 	bl	8008802 <__retarget_lock_acquire_recursive>
 800914a:	4628      	mov	r0, r5
 800914c:	4621      	mov	r1, r4
 800914e:	f7ff ff5f 	bl	8009010 <__sflush_r>
 8009152:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009154:	07da      	lsls	r2, r3, #31
 8009156:	4605      	mov	r5, r0
 8009158:	d4e4      	bmi.n	8009124 <_fflush_r+0xc>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	059b      	lsls	r3, r3, #22
 800915e:	d4e1      	bmi.n	8009124 <_fflush_r+0xc>
 8009160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009162:	f7ff fb4f 	bl	8008804 <__retarget_lock_release_recursive>
 8009166:	e7dd      	b.n	8009124 <_fflush_r+0xc>

08009168 <fiprintf>:
 8009168:	b40e      	push	{r1, r2, r3}
 800916a:	b503      	push	{r0, r1, lr}
 800916c:	4601      	mov	r1, r0
 800916e:	ab03      	add	r3, sp, #12
 8009170:	4805      	ldr	r0, [pc, #20]	@ (8009188 <fiprintf+0x20>)
 8009172:	f853 2b04 	ldr.w	r2, [r3], #4
 8009176:	6800      	ldr	r0, [r0, #0]
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	f000 f89d 	bl	80092b8 <_vfiprintf_r>
 800917e:	b002      	add	sp, #8
 8009180:	f85d eb04 	ldr.w	lr, [sp], #4
 8009184:	b003      	add	sp, #12
 8009186:	4770      	bx	lr
 8009188:	200001fc 	.word	0x200001fc

0800918c <memmove>:
 800918c:	4288      	cmp	r0, r1
 800918e:	b510      	push	{r4, lr}
 8009190:	eb01 0402 	add.w	r4, r1, r2
 8009194:	d902      	bls.n	800919c <memmove+0x10>
 8009196:	4284      	cmp	r4, r0
 8009198:	4623      	mov	r3, r4
 800919a:	d807      	bhi.n	80091ac <memmove+0x20>
 800919c:	1e43      	subs	r3, r0, #1
 800919e:	42a1      	cmp	r1, r4
 80091a0:	d008      	beq.n	80091b4 <memmove+0x28>
 80091a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091aa:	e7f8      	b.n	800919e <memmove+0x12>
 80091ac:	4402      	add	r2, r0
 80091ae:	4601      	mov	r1, r0
 80091b0:	428a      	cmp	r2, r1
 80091b2:	d100      	bne.n	80091b6 <memmove+0x2a>
 80091b4:	bd10      	pop	{r4, pc}
 80091b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091be:	e7f7      	b.n	80091b0 <memmove+0x24>

080091c0 <_sbrk_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4d06      	ldr	r5, [pc, #24]	@ (80091dc <_sbrk_r+0x1c>)
 80091c4:	2300      	movs	r3, #0
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	602b      	str	r3, [r5, #0]
 80091cc:	f7f8 fbac 	bl	8001928 <_sbrk>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_sbrk_r+0x1a>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_sbrk_r+0x1a>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	200006dc 	.word	0x200006dc

080091e0 <memcpy>:
 80091e0:	440a      	add	r2, r1
 80091e2:	4291      	cmp	r1, r2
 80091e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091e8:	d100      	bne.n	80091ec <memcpy+0xc>
 80091ea:	4770      	bx	lr
 80091ec:	b510      	push	{r4, lr}
 80091ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091f6:	4291      	cmp	r1, r2
 80091f8:	d1f9      	bne.n	80091ee <memcpy+0xe>
 80091fa:	bd10      	pop	{r4, pc}

080091fc <abort>:
 80091fc:	b508      	push	{r3, lr}
 80091fe:	2006      	movs	r0, #6
 8009200:	f000 fa2e 	bl	8009660 <raise>
 8009204:	2001      	movs	r0, #1
 8009206:	f7f8 fb17 	bl	8001838 <_exit>

0800920a <_realloc_r>:
 800920a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800920e:	4680      	mov	r8, r0
 8009210:	4615      	mov	r5, r2
 8009212:	460c      	mov	r4, r1
 8009214:	b921      	cbnz	r1, 8009220 <_realloc_r+0x16>
 8009216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800921a:	4611      	mov	r1, r2
 800921c:	f7ff bb86 	b.w	800892c <_malloc_r>
 8009220:	b92a      	cbnz	r2, 800922e <_realloc_r+0x24>
 8009222:	f7ff fb0f 	bl	8008844 <_free_r>
 8009226:	2400      	movs	r4, #0
 8009228:	4620      	mov	r0, r4
 800922a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800922e:	f000 fa33 	bl	8009698 <_malloc_usable_size_r>
 8009232:	4285      	cmp	r5, r0
 8009234:	4606      	mov	r6, r0
 8009236:	d802      	bhi.n	800923e <_realloc_r+0x34>
 8009238:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800923c:	d8f4      	bhi.n	8009228 <_realloc_r+0x1e>
 800923e:	4629      	mov	r1, r5
 8009240:	4640      	mov	r0, r8
 8009242:	f7ff fb73 	bl	800892c <_malloc_r>
 8009246:	4607      	mov	r7, r0
 8009248:	2800      	cmp	r0, #0
 800924a:	d0ec      	beq.n	8009226 <_realloc_r+0x1c>
 800924c:	42b5      	cmp	r5, r6
 800924e:	462a      	mov	r2, r5
 8009250:	4621      	mov	r1, r4
 8009252:	bf28      	it	cs
 8009254:	4632      	movcs	r2, r6
 8009256:	f7ff ffc3 	bl	80091e0 <memcpy>
 800925a:	4621      	mov	r1, r4
 800925c:	4640      	mov	r0, r8
 800925e:	f7ff faf1 	bl	8008844 <_free_r>
 8009262:	463c      	mov	r4, r7
 8009264:	e7e0      	b.n	8009228 <_realloc_r+0x1e>

08009266 <__sfputc_r>:
 8009266:	6893      	ldr	r3, [r2, #8]
 8009268:	3b01      	subs	r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	b410      	push	{r4}
 800926e:	6093      	str	r3, [r2, #8]
 8009270:	da08      	bge.n	8009284 <__sfputc_r+0x1e>
 8009272:	6994      	ldr	r4, [r2, #24]
 8009274:	42a3      	cmp	r3, r4
 8009276:	db01      	blt.n	800927c <__sfputc_r+0x16>
 8009278:	290a      	cmp	r1, #10
 800927a:	d103      	bne.n	8009284 <__sfputc_r+0x1e>
 800927c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009280:	f000 b932 	b.w	80094e8 <__swbuf_r>
 8009284:	6813      	ldr	r3, [r2, #0]
 8009286:	1c58      	adds	r0, r3, #1
 8009288:	6010      	str	r0, [r2, #0]
 800928a:	7019      	strb	r1, [r3, #0]
 800928c:	4608      	mov	r0, r1
 800928e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009292:	4770      	bx	lr

08009294 <__sfputs_r>:
 8009294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	4614      	mov	r4, r2
 800929c:	18d5      	adds	r5, r2, r3
 800929e:	42ac      	cmp	r4, r5
 80092a0:	d101      	bne.n	80092a6 <__sfputs_r+0x12>
 80092a2:	2000      	movs	r0, #0
 80092a4:	e007      	b.n	80092b6 <__sfputs_r+0x22>
 80092a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092aa:	463a      	mov	r2, r7
 80092ac:	4630      	mov	r0, r6
 80092ae:	f7ff ffda 	bl	8009266 <__sfputc_r>
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	d1f3      	bne.n	800929e <__sfputs_r+0xa>
 80092b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092b8 <_vfiprintf_r>:
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	460d      	mov	r5, r1
 80092be:	b09d      	sub	sp, #116	@ 0x74
 80092c0:	4614      	mov	r4, r2
 80092c2:	4698      	mov	r8, r3
 80092c4:	4606      	mov	r6, r0
 80092c6:	b118      	cbz	r0, 80092d0 <_vfiprintf_r+0x18>
 80092c8:	6a03      	ldr	r3, [r0, #32]
 80092ca:	b90b      	cbnz	r3, 80092d0 <_vfiprintf_r+0x18>
 80092cc:	f7ff f92a 	bl	8008524 <__sinit>
 80092d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092d2:	07d9      	lsls	r1, r3, #31
 80092d4:	d405      	bmi.n	80092e2 <_vfiprintf_r+0x2a>
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	059a      	lsls	r2, r3, #22
 80092da:	d402      	bmi.n	80092e2 <_vfiprintf_r+0x2a>
 80092dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092de:	f7ff fa90 	bl	8008802 <__retarget_lock_acquire_recursive>
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	071b      	lsls	r3, r3, #28
 80092e6:	d501      	bpl.n	80092ec <_vfiprintf_r+0x34>
 80092e8:	692b      	ldr	r3, [r5, #16]
 80092ea:	b99b      	cbnz	r3, 8009314 <_vfiprintf_r+0x5c>
 80092ec:	4629      	mov	r1, r5
 80092ee:	4630      	mov	r0, r6
 80092f0:	f000 f938 	bl	8009564 <__swsetup_r>
 80092f4:	b170      	cbz	r0, 8009314 <_vfiprintf_r+0x5c>
 80092f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092f8:	07dc      	lsls	r4, r3, #31
 80092fa:	d504      	bpl.n	8009306 <_vfiprintf_r+0x4e>
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	b01d      	add	sp, #116	@ 0x74
 8009302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009306:	89ab      	ldrh	r3, [r5, #12]
 8009308:	0598      	lsls	r0, r3, #22
 800930a:	d4f7      	bmi.n	80092fc <_vfiprintf_r+0x44>
 800930c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800930e:	f7ff fa79 	bl	8008804 <__retarget_lock_release_recursive>
 8009312:	e7f3      	b.n	80092fc <_vfiprintf_r+0x44>
 8009314:	2300      	movs	r3, #0
 8009316:	9309      	str	r3, [sp, #36]	@ 0x24
 8009318:	2320      	movs	r3, #32
 800931a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800931e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009322:	2330      	movs	r3, #48	@ 0x30
 8009324:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094d4 <_vfiprintf_r+0x21c>
 8009328:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800932c:	f04f 0901 	mov.w	r9, #1
 8009330:	4623      	mov	r3, r4
 8009332:	469a      	mov	sl, r3
 8009334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009338:	b10a      	cbz	r2, 800933e <_vfiprintf_r+0x86>
 800933a:	2a25      	cmp	r2, #37	@ 0x25
 800933c:	d1f9      	bne.n	8009332 <_vfiprintf_r+0x7a>
 800933e:	ebba 0b04 	subs.w	fp, sl, r4
 8009342:	d00b      	beq.n	800935c <_vfiprintf_r+0xa4>
 8009344:	465b      	mov	r3, fp
 8009346:	4622      	mov	r2, r4
 8009348:	4629      	mov	r1, r5
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff ffa2 	bl	8009294 <__sfputs_r>
 8009350:	3001      	adds	r0, #1
 8009352:	f000 80a7 	beq.w	80094a4 <_vfiprintf_r+0x1ec>
 8009356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009358:	445a      	add	r2, fp
 800935a:	9209      	str	r2, [sp, #36]	@ 0x24
 800935c:	f89a 3000 	ldrb.w	r3, [sl]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 809f 	beq.w	80094a4 <_vfiprintf_r+0x1ec>
 8009366:	2300      	movs	r3, #0
 8009368:	f04f 32ff 	mov.w	r2, #4294967295
 800936c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009370:	f10a 0a01 	add.w	sl, sl, #1
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800937c:	931a      	str	r3, [sp, #104]	@ 0x68
 800937e:	4654      	mov	r4, sl
 8009380:	2205      	movs	r2, #5
 8009382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009386:	4853      	ldr	r0, [pc, #332]	@ (80094d4 <_vfiprintf_r+0x21c>)
 8009388:	f7f6 ff5a 	bl	8000240 <memchr>
 800938c:	9a04      	ldr	r2, [sp, #16]
 800938e:	b9d8      	cbnz	r0, 80093c8 <_vfiprintf_r+0x110>
 8009390:	06d1      	lsls	r1, r2, #27
 8009392:	bf44      	itt	mi
 8009394:	2320      	movmi	r3, #32
 8009396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800939a:	0713      	lsls	r3, r2, #28
 800939c:	bf44      	itt	mi
 800939e:	232b      	movmi	r3, #43	@ 0x2b
 80093a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093a4:	f89a 3000 	ldrb.w	r3, [sl]
 80093a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093aa:	d015      	beq.n	80093d8 <_vfiprintf_r+0x120>
 80093ac:	9a07      	ldr	r2, [sp, #28]
 80093ae:	4654      	mov	r4, sl
 80093b0:	2000      	movs	r0, #0
 80093b2:	f04f 0c0a 	mov.w	ip, #10
 80093b6:	4621      	mov	r1, r4
 80093b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093bc:	3b30      	subs	r3, #48	@ 0x30
 80093be:	2b09      	cmp	r3, #9
 80093c0:	d94b      	bls.n	800945a <_vfiprintf_r+0x1a2>
 80093c2:	b1b0      	cbz	r0, 80093f2 <_vfiprintf_r+0x13a>
 80093c4:	9207      	str	r2, [sp, #28]
 80093c6:	e014      	b.n	80093f2 <_vfiprintf_r+0x13a>
 80093c8:	eba0 0308 	sub.w	r3, r0, r8
 80093cc:	fa09 f303 	lsl.w	r3, r9, r3
 80093d0:	4313      	orrs	r3, r2
 80093d2:	9304      	str	r3, [sp, #16]
 80093d4:	46a2      	mov	sl, r4
 80093d6:	e7d2      	b.n	800937e <_vfiprintf_r+0xc6>
 80093d8:	9b03      	ldr	r3, [sp, #12]
 80093da:	1d19      	adds	r1, r3, #4
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	9103      	str	r1, [sp, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bfbb      	ittet	lt
 80093e4:	425b      	neglt	r3, r3
 80093e6:	f042 0202 	orrlt.w	r2, r2, #2
 80093ea:	9307      	strge	r3, [sp, #28]
 80093ec:	9307      	strlt	r3, [sp, #28]
 80093ee:	bfb8      	it	lt
 80093f0:	9204      	strlt	r2, [sp, #16]
 80093f2:	7823      	ldrb	r3, [r4, #0]
 80093f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80093f6:	d10a      	bne.n	800940e <_vfiprintf_r+0x156>
 80093f8:	7863      	ldrb	r3, [r4, #1]
 80093fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80093fc:	d132      	bne.n	8009464 <_vfiprintf_r+0x1ac>
 80093fe:	9b03      	ldr	r3, [sp, #12]
 8009400:	1d1a      	adds	r2, r3, #4
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	9203      	str	r2, [sp, #12]
 8009406:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800940a:	3402      	adds	r4, #2
 800940c:	9305      	str	r3, [sp, #20]
 800940e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094e4 <_vfiprintf_r+0x22c>
 8009412:	7821      	ldrb	r1, [r4, #0]
 8009414:	2203      	movs	r2, #3
 8009416:	4650      	mov	r0, sl
 8009418:	f7f6 ff12 	bl	8000240 <memchr>
 800941c:	b138      	cbz	r0, 800942e <_vfiprintf_r+0x176>
 800941e:	9b04      	ldr	r3, [sp, #16]
 8009420:	eba0 000a 	sub.w	r0, r0, sl
 8009424:	2240      	movs	r2, #64	@ 0x40
 8009426:	4082      	lsls	r2, r0
 8009428:	4313      	orrs	r3, r2
 800942a:	3401      	adds	r4, #1
 800942c:	9304      	str	r3, [sp, #16]
 800942e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009432:	4829      	ldr	r0, [pc, #164]	@ (80094d8 <_vfiprintf_r+0x220>)
 8009434:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009438:	2206      	movs	r2, #6
 800943a:	f7f6 ff01 	bl	8000240 <memchr>
 800943e:	2800      	cmp	r0, #0
 8009440:	d03f      	beq.n	80094c2 <_vfiprintf_r+0x20a>
 8009442:	4b26      	ldr	r3, [pc, #152]	@ (80094dc <_vfiprintf_r+0x224>)
 8009444:	bb1b      	cbnz	r3, 800948e <_vfiprintf_r+0x1d6>
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	3307      	adds	r3, #7
 800944a:	f023 0307 	bic.w	r3, r3, #7
 800944e:	3308      	adds	r3, #8
 8009450:	9303      	str	r3, [sp, #12]
 8009452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009454:	443b      	add	r3, r7
 8009456:	9309      	str	r3, [sp, #36]	@ 0x24
 8009458:	e76a      	b.n	8009330 <_vfiprintf_r+0x78>
 800945a:	fb0c 3202 	mla	r2, ip, r2, r3
 800945e:	460c      	mov	r4, r1
 8009460:	2001      	movs	r0, #1
 8009462:	e7a8      	b.n	80093b6 <_vfiprintf_r+0xfe>
 8009464:	2300      	movs	r3, #0
 8009466:	3401      	adds	r4, #1
 8009468:	9305      	str	r3, [sp, #20]
 800946a:	4619      	mov	r1, r3
 800946c:	f04f 0c0a 	mov.w	ip, #10
 8009470:	4620      	mov	r0, r4
 8009472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009476:	3a30      	subs	r2, #48	@ 0x30
 8009478:	2a09      	cmp	r2, #9
 800947a:	d903      	bls.n	8009484 <_vfiprintf_r+0x1cc>
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0c6      	beq.n	800940e <_vfiprintf_r+0x156>
 8009480:	9105      	str	r1, [sp, #20]
 8009482:	e7c4      	b.n	800940e <_vfiprintf_r+0x156>
 8009484:	fb0c 2101 	mla	r1, ip, r1, r2
 8009488:	4604      	mov	r4, r0
 800948a:	2301      	movs	r3, #1
 800948c:	e7f0      	b.n	8009470 <_vfiprintf_r+0x1b8>
 800948e:	ab03      	add	r3, sp, #12
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	462a      	mov	r2, r5
 8009494:	4b12      	ldr	r3, [pc, #72]	@ (80094e0 <_vfiprintf_r+0x228>)
 8009496:	a904      	add	r1, sp, #16
 8009498:	4630      	mov	r0, r6
 800949a:	f3af 8000 	nop.w
 800949e:	4607      	mov	r7, r0
 80094a0:	1c78      	adds	r0, r7, #1
 80094a2:	d1d6      	bne.n	8009452 <_vfiprintf_r+0x19a>
 80094a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094a6:	07d9      	lsls	r1, r3, #31
 80094a8:	d405      	bmi.n	80094b6 <_vfiprintf_r+0x1fe>
 80094aa:	89ab      	ldrh	r3, [r5, #12]
 80094ac:	059a      	lsls	r2, r3, #22
 80094ae:	d402      	bmi.n	80094b6 <_vfiprintf_r+0x1fe>
 80094b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094b2:	f7ff f9a7 	bl	8008804 <__retarget_lock_release_recursive>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	065b      	lsls	r3, r3, #25
 80094ba:	f53f af1f 	bmi.w	80092fc <_vfiprintf_r+0x44>
 80094be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094c0:	e71e      	b.n	8009300 <_vfiprintf_r+0x48>
 80094c2:	ab03      	add	r3, sp, #12
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	462a      	mov	r2, r5
 80094c8:	4b05      	ldr	r3, [pc, #20]	@ (80094e0 <_vfiprintf_r+0x228>)
 80094ca:	a904      	add	r1, sp, #16
 80094cc:	4630      	mov	r0, r6
 80094ce:	f7ff fc7f 	bl	8008dd0 <_printf_i>
 80094d2:	e7e4      	b.n	800949e <_vfiprintf_r+0x1e6>
 80094d4:	08009a22 	.word	0x08009a22
 80094d8:	08009a2c 	.word	0x08009a2c
 80094dc:	00000000 	.word	0x00000000
 80094e0:	08009295 	.word	0x08009295
 80094e4:	08009a28 	.word	0x08009a28

080094e8 <__swbuf_r>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	460e      	mov	r6, r1
 80094ec:	4614      	mov	r4, r2
 80094ee:	4605      	mov	r5, r0
 80094f0:	b118      	cbz	r0, 80094fa <__swbuf_r+0x12>
 80094f2:	6a03      	ldr	r3, [r0, #32]
 80094f4:	b90b      	cbnz	r3, 80094fa <__swbuf_r+0x12>
 80094f6:	f7ff f815 	bl	8008524 <__sinit>
 80094fa:	69a3      	ldr	r3, [r4, #24]
 80094fc:	60a3      	str	r3, [r4, #8]
 80094fe:	89a3      	ldrh	r3, [r4, #12]
 8009500:	071a      	lsls	r2, r3, #28
 8009502:	d501      	bpl.n	8009508 <__swbuf_r+0x20>
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	b943      	cbnz	r3, 800951a <__swbuf_r+0x32>
 8009508:	4621      	mov	r1, r4
 800950a:	4628      	mov	r0, r5
 800950c:	f000 f82a 	bl	8009564 <__swsetup_r>
 8009510:	b118      	cbz	r0, 800951a <__swbuf_r+0x32>
 8009512:	f04f 37ff 	mov.w	r7, #4294967295
 8009516:	4638      	mov	r0, r7
 8009518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	6922      	ldr	r2, [r4, #16]
 800951e:	1a98      	subs	r0, r3, r2
 8009520:	6963      	ldr	r3, [r4, #20]
 8009522:	b2f6      	uxtb	r6, r6
 8009524:	4283      	cmp	r3, r0
 8009526:	4637      	mov	r7, r6
 8009528:	dc05      	bgt.n	8009536 <__swbuf_r+0x4e>
 800952a:	4621      	mov	r1, r4
 800952c:	4628      	mov	r0, r5
 800952e:	f7ff fdf3 	bl	8009118 <_fflush_r>
 8009532:	2800      	cmp	r0, #0
 8009534:	d1ed      	bne.n	8009512 <__swbuf_r+0x2a>
 8009536:	68a3      	ldr	r3, [r4, #8]
 8009538:	3b01      	subs	r3, #1
 800953a:	60a3      	str	r3, [r4, #8]
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	6022      	str	r2, [r4, #0]
 8009542:	701e      	strb	r6, [r3, #0]
 8009544:	6962      	ldr	r2, [r4, #20]
 8009546:	1c43      	adds	r3, r0, #1
 8009548:	429a      	cmp	r2, r3
 800954a:	d004      	beq.n	8009556 <__swbuf_r+0x6e>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	07db      	lsls	r3, r3, #31
 8009550:	d5e1      	bpl.n	8009516 <__swbuf_r+0x2e>
 8009552:	2e0a      	cmp	r6, #10
 8009554:	d1df      	bne.n	8009516 <__swbuf_r+0x2e>
 8009556:	4621      	mov	r1, r4
 8009558:	4628      	mov	r0, r5
 800955a:	f7ff fddd 	bl	8009118 <_fflush_r>
 800955e:	2800      	cmp	r0, #0
 8009560:	d0d9      	beq.n	8009516 <__swbuf_r+0x2e>
 8009562:	e7d6      	b.n	8009512 <__swbuf_r+0x2a>

08009564 <__swsetup_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4b29      	ldr	r3, [pc, #164]	@ (800960c <__swsetup_r+0xa8>)
 8009568:	4605      	mov	r5, r0
 800956a:	6818      	ldr	r0, [r3, #0]
 800956c:	460c      	mov	r4, r1
 800956e:	b118      	cbz	r0, 8009578 <__swsetup_r+0x14>
 8009570:	6a03      	ldr	r3, [r0, #32]
 8009572:	b90b      	cbnz	r3, 8009578 <__swsetup_r+0x14>
 8009574:	f7fe ffd6 	bl	8008524 <__sinit>
 8009578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800957c:	0719      	lsls	r1, r3, #28
 800957e:	d422      	bmi.n	80095c6 <__swsetup_r+0x62>
 8009580:	06da      	lsls	r2, r3, #27
 8009582:	d407      	bmi.n	8009594 <__swsetup_r+0x30>
 8009584:	2209      	movs	r2, #9
 8009586:	602a      	str	r2, [r5, #0]
 8009588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	f04f 30ff 	mov.w	r0, #4294967295
 8009592:	e033      	b.n	80095fc <__swsetup_r+0x98>
 8009594:	0758      	lsls	r0, r3, #29
 8009596:	d512      	bpl.n	80095be <__swsetup_r+0x5a>
 8009598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800959a:	b141      	cbz	r1, 80095ae <__swsetup_r+0x4a>
 800959c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095a0:	4299      	cmp	r1, r3
 80095a2:	d002      	beq.n	80095aa <__swsetup_r+0x46>
 80095a4:	4628      	mov	r0, r5
 80095a6:	f7ff f94d 	bl	8008844 <_free_r>
 80095aa:	2300      	movs	r3, #0
 80095ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80095b4:	81a3      	strh	r3, [r4, #12]
 80095b6:	2300      	movs	r3, #0
 80095b8:	6063      	str	r3, [r4, #4]
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	f043 0308 	orr.w	r3, r3, #8
 80095c4:	81a3      	strh	r3, [r4, #12]
 80095c6:	6923      	ldr	r3, [r4, #16]
 80095c8:	b94b      	cbnz	r3, 80095de <__swsetup_r+0x7a>
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095d4:	d003      	beq.n	80095de <__swsetup_r+0x7a>
 80095d6:	4621      	mov	r1, r4
 80095d8:	4628      	mov	r0, r5
 80095da:	f000 f88b 	bl	80096f4 <__smakebuf_r>
 80095de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e2:	f013 0201 	ands.w	r2, r3, #1
 80095e6:	d00a      	beq.n	80095fe <__swsetup_r+0x9a>
 80095e8:	2200      	movs	r2, #0
 80095ea:	60a2      	str	r2, [r4, #8]
 80095ec:	6962      	ldr	r2, [r4, #20]
 80095ee:	4252      	negs	r2, r2
 80095f0:	61a2      	str	r2, [r4, #24]
 80095f2:	6922      	ldr	r2, [r4, #16]
 80095f4:	b942      	cbnz	r2, 8009608 <__swsetup_r+0xa4>
 80095f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095fa:	d1c5      	bne.n	8009588 <__swsetup_r+0x24>
 80095fc:	bd38      	pop	{r3, r4, r5, pc}
 80095fe:	0799      	lsls	r1, r3, #30
 8009600:	bf58      	it	pl
 8009602:	6962      	ldrpl	r2, [r4, #20]
 8009604:	60a2      	str	r2, [r4, #8]
 8009606:	e7f4      	b.n	80095f2 <__swsetup_r+0x8e>
 8009608:	2000      	movs	r0, #0
 800960a:	e7f7      	b.n	80095fc <__swsetup_r+0x98>
 800960c:	200001fc 	.word	0x200001fc

08009610 <_raise_r>:
 8009610:	291f      	cmp	r1, #31
 8009612:	b538      	push	{r3, r4, r5, lr}
 8009614:	4605      	mov	r5, r0
 8009616:	460c      	mov	r4, r1
 8009618:	d904      	bls.n	8009624 <_raise_r+0x14>
 800961a:	2316      	movs	r3, #22
 800961c:	6003      	str	r3, [r0, #0]
 800961e:	f04f 30ff 	mov.w	r0, #4294967295
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009626:	b112      	cbz	r2, 800962e <_raise_r+0x1e>
 8009628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800962c:	b94b      	cbnz	r3, 8009642 <_raise_r+0x32>
 800962e:	4628      	mov	r0, r5
 8009630:	f000 f830 	bl	8009694 <_getpid_r>
 8009634:	4622      	mov	r2, r4
 8009636:	4601      	mov	r1, r0
 8009638:	4628      	mov	r0, r5
 800963a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800963e:	f000 b817 	b.w	8009670 <_kill_r>
 8009642:	2b01      	cmp	r3, #1
 8009644:	d00a      	beq.n	800965c <_raise_r+0x4c>
 8009646:	1c59      	adds	r1, r3, #1
 8009648:	d103      	bne.n	8009652 <_raise_r+0x42>
 800964a:	2316      	movs	r3, #22
 800964c:	6003      	str	r3, [r0, #0]
 800964e:	2001      	movs	r0, #1
 8009650:	e7e7      	b.n	8009622 <_raise_r+0x12>
 8009652:	2100      	movs	r1, #0
 8009654:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009658:	4620      	mov	r0, r4
 800965a:	4798      	blx	r3
 800965c:	2000      	movs	r0, #0
 800965e:	e7e0      	b.n	8009622 <_raise_r+0x12>

08009660 <raise>:
 8009660:	4b02      	ldr	r3, [pc, #8]	@ (800966c <raise+0xc>)
 8009662:	4601      	mov	r1, r0
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	f7ff bfd3 	b.w	8009610 <_raise_r>
 800966a:	bf00      	nop
 800966c:	200001fc 	.word	0x200001fc

08009670 <_kill_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d07      	ldr	r5, [pc, #28]	@ (8009690 <_kill_r+0x20>)
 8009674:	2300      	movs	r3, #0
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	4611      	mov	r1, r2
 800967c:	602b      	str	r3, [r5, #0]
 800967e:	f7f8 f8cb 	bl	8001818 <_kill>
 8009682:	1c43      	adds	r3, r0, #1
 8009684:	d102      	bne.n	800968c <_kill_r+0x1c>
 8009686:	682b      	ldr	r3, [r5, #0]
 8009688:	b103      	cbz	r3, 800968c <_kill_r+0x1c>
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	bd38      	pop	{r3, r4, r5, pc}
 800968e:	bf00      	nop
 8009690:	200006dc 	.word	0x200006dc

08009694 <_getpid_r>:
 8009694:	f7f8 b8b8 	b.w	8001808 <_getpid>

08009698 <_malloc_usable_size_r>:
 8009698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800969c:	1f18      	subs	r0, r3, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bfbc      	itt	lt
 80096a2:	580b      	ldrlt	r3, [r1, r0]
 80096a4:	18c0      	addlt	r0, r0, r3
 80096a6:	4770      	bx	lr

080096a8 <__swhatbuf_r>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	460c      	mov	r4, r1
 80096ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b0:	2900      	cmp	r1, #0
 80096b2:	b096      	sub	sp, #88	@ 0x58
 80096b4:	4615      	mov	r5, r2
 80096b6:	461e      	mov	r6, r3
 80096b8:	da0d      	bge.n	80096d6 <__swhatbuf_r+0x2e>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096c0:	f04f 0100 	mov.w	r1, #0
 80096c4:	bf14      	ite	ne
 80096c6:	2340      	movne	r3, #64	@ 0x40
 80096c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80096cc:	2000      	movs	r0, #0
 80096ce:	6031      	str	r1, [r6, #0]
 80096d0:	602b      	str	r3, [r5, #0]
 80096d2:	b016      	add	sp, #88	@ 0x58
 80096d4:	bd70      	pop	{r4, r5, r6, pc}
 80096d6:	466a      	mov	r2, sp
 80096d8:	f000 f848 	bl	800976c <_fstat_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	dbec      	blt.n	80096ba <__swhatbuf_r+0x12>
 80096e0:	9901      	ldr	r1, [sp, #4]
 80096e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096ea:	4259      	negs	r1, r3
 80096ec:	4159      	adcs	r1, r3
 80096ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096f2:	e7eb      	b.n	80096cc <__swhatbuf_r+0x24>

080096f4 <__smakebuf_r>:
 80096f4:	898b      	ldrh	r3, [r1, #12]
 80096f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096f8:	079d      	lsls	r5, r3, #30
 80096fa:	4606      	mov	r6, r0
 80096fc:	460c      	mov	r4, r1
 80096fe:	d507      	bpl.n	8009710 <__smakebuf_r+0x1c>
 8009700:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	6123      	str	r3, [r4, #16]
 8009708:	2301      	movs	r3, #1
 800970a:	6163      	str	r3, [r4, #20]
 800970c:	b003      	add	sp, #12
 800970e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009710:	ab01      	add	r3, sp, #4
 8009712:	466a      	mov	r2, sp
 8009714:	f7ff ffc8 	bl	80096a8 <__swhatbuf_r>
 8009718:	9f00      	ldr	r7, [sp, #0]
 800971a:	4605      	mov	r5, r0
 800971c:	4639      	mov	r1, r7
 800971e:	4630      	mov	r0, r6
 8009720:	f7ff f904 	bl	800892c <_malloc_r>
 8009724:	b948      	cbnz	r0, 800973a <__smakebuf_r+0x46>
 8009726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800972a:	059a      	lsls	r2, r3, #22
 800972c:	d4ee      	bmi.n	800970c <__smakebuf_r+0x18>
 800972e:	f023 0303 	bic.w	r3, r3, #3
 8009732:	f043 0302 	orr.w	r3, r3, #2
 8009736:	81a3      	strh	r3, [r4, #12]
 8009738:	e7e2      	b.n	8009700 <__smakebuf_r+0xc>
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	6020      	str	r0, [r4, #0]
 800973e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800974a:	b15b      	cbz	r3, 8009764 <__smakebuf_r+0x70>
 800974c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009750:	4630      	mov	r0, r6
 8009752:	f000 f81d 	bl	8009790 <_isatty_r>
 8009756:	b128      	cbz	r0, 8009764 <__smakebuf_r+0x70>
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	f023 0303 	bic.w	r3, r3, #3
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	431d      	orrs	r5, r3
 8009768:	81a5      	strh	r5, [r4, #12]
 800976a:	e7cf      	b.n	800970c <__smakebuf_r+0x18>

0800976c <_fstat_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4d07      	ldr	r5, [pc, #28]	@ (800978c <_fstat_r+0x20>)
 8009770:	2300      	movs	r3, #0
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	4611      	mov	r1, r2
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	f7f8 f8ad 	bl	80018d8 <_fstat>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d102      	bne.n	8009788 <_fstat_r+0x1c>
 8009782:	682b      	ldr	r3, [r5, #0]
 8009784:	b103      	cbz	r3, 8009788 <_fstat_r+0x1c>
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	bd38      	pop	{r3, r4, r5, pc}
 800978a:	bf00      	nop
 800978c:	200006dc 	.word	0x200006dc

08009790 <_isatty_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d06      	ldr	r5, [pc, #24]	@ (80097ac <_isatty_r+0x1c>)
 8009794:	2300      	movs	r3, #0
 8009796:	4604      	mov	r4, r0
 8009798:	4608      	mov	r0, r1
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	f7f8 f8ac 	bl	80018f8 <_isatty>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_isatty_r+0x1a>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_isatty_r+0x1a>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	200006dc 	.word	0x200006dc

080097b0 <_init>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr

080097bc <_fini>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	bf00      	nop
 80097c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c2:	bc08      	pop	{r3}
 80097c4:	469e      	mov	lr, r3
 80097c6:	4770      	bx	lr
